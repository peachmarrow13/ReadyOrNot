#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BF_Triangulate

#include "Basic.hpp"

#include "BF_Triangulate_classes.hpp"
#include "BF_Triangulate_parameters.hpp"


namespace SDK
{

// Function BF_Triangulate.BF_Triangulate_C.RecursiveTriangulate
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FST_VertexID>&            vert                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FST_VertexID>&            FullSetVert                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FST_LineSegment>&         BuiltSeg                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   Thread                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int32>*                          Triangles                                              (Parm, OutParm)

void UBF_Triangulate_C::RecursiveTriangulate(TArray<struct FST_VertexID>& vert, TArray<struct FST_VertexID>& FullSetVert, TArray<struct FST_LineSegment>& BuiltSeg, int32 Thread, class UObject* __WorldContext, TArray<int32>* Triangles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BF_Triangulate_C", "RecursiveTriangulate");

	Params::BF_Triangulate_C_RecursiveTriangulate Parms{};

	Parms.vert = std::move(vert);
	Parms.FullSetVert = std::move(FullSetVert);
	Parms.BuiltSeg = std::move(BuiltSeg);
	Parms.Thread = Thread;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	vert = std::move(Parms.vert);
	FullSetVert = std::move(Parms.FullSetVert);
	BuiltSeg = std::move(Parms.BuiltSeg);

	if (Triangles != nullptr)
		*Triangles = std::move(Parms.Triangles);
}


// Function BF_Triangulate.BF_Triangulate_C.TriangulatePolygon
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>&                 Vertices                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int32>*                          Triangles                                              (Parm, OutParm)

void UBF_Triangulate_C::TriangulatePolygon(TArray<struct FVector>& Vertices, class UObject* __WorldContext, TArray<int32>* Triangles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BF_Triangulate_C", "TriangulatePolygon");

	Params::BF_Triangulate_C_TriangulatePolygon Parms{};

	Parms.Vertices = std::move(Vertices);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Vertices = std::move(Parms.Vertices);

	if (Triangles != nullptr)
		*Triangles = std::move(Parms.Triangles);
}


// Function BF_Triangulate.BF_Triangulate_C.PointInTriangle
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 P                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 C                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IgnoreSide                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBF_Triangulate_C::PointInTriangle(const struct FVector2D& P, const struct FVector2D& A, const struct FVector2D& B, const struct FVector2D& C, bool IgnoreSide, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BF_Triangulate_C", "PointInTriangle");

	Params::BF_Triangulate_C_PointInTriangle Parms{};

	Parms.P = std::move(P);
	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.C = std::move(C);
	Parms.IgnoreSide = IgnoreSide;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BF_Triangulate.BF_Triangulate_C.LoopArrayIndex
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Shift                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ArrayLength                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32*                                  Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBF_Triangulate_C::LoopArrayIndex(int32 Index_0, int32 Shift, int32 ArrayLength, class UObject* __WorldContext, int32* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BF_Triangulate_C", "LoopArrayIndex");

	Params::BF_Triangulate_C_LoopArrayIndex Parms{};

	Parms.Index_0 = Index_0;
	Parms.Shift = Shift;
	Parms.ArrayLength = ArrayLength;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BF_Triangulate.BF_Triangulate_C.LineSegIntersectionTest
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 a1                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 b1                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 a2                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 b2                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IgnoreSide                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBF_Triangulate_C::LineSegIntersectionTest(const struct FVector2D& a1, const struct FVector2D& b1, const struct FVector2D& a2, const struct FVector2D& b2, bool IgnoreSide, class UObject* __WorldContext, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BF_Triangulate_C", "LineSegIntersectionTest");

	Params::BF_Triangulate_C_LineSegIntersectionTest Parms{};

	Parms.a1 = std::move(a1);
	Parms.b1 = std::move(b1);
	Parms.a2 = std::move(a2);
	Parms.b2 = std::move(b2);
	Parms.IgnoreSide = IgnoreSide;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BF_Triangulate.BF_Triangulate_C.FlipPoligon
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FST_VertexID>&            vert                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FST_VertexID>*            Return                                                 (Parm, OutParm)

void UBF_Triangulate_C::FlipPoligon(TArray<struct FST_VertexID>& vert, class UObject* __WorldContext, TArray<struct FST_VertexID>* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BF_Triangulate_C", "FlipPoligon");

	Params::BF_Triangulate_C_FlipPoligon Parms{};

	Parms.vert = std::move(vert);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	vert = std::move(Parms.vert);

	if (Return != nullptr)
		*Return = std::move(Parms.Return);
}

}

