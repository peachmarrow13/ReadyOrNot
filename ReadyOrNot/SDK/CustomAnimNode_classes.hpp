#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomAnimNode

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class CustomAnimNode.AnimSuiteMathLibrary
// 0x0000 (0x0028 - 0x0028)
class UAnimSuiteMathLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimSuiteMathLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimSuiteMathLibrary")
	}
	static class UAnimSuiteMathLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimSuiteMathLibrary>();
	}
};
DUMPER7_ASSERTS_UAnimSuiteMathLibrary;

// Class CustomAnimNode.AnimSuiteNodeHelperLibrary
// 0x0000 (0x0028 - 0x0028)
class UAnimSuiteNodeHelperLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float ComputeMatchedPlayRateFromDuration(const struct FSequenceMatcherReference& SequencePlayer, float Duration);
	static struct FBlendSpaceMatcherReference ConvertToMatchedBlendSpacePlayer(const struct FAnimNodeReference& Node, EAnimNodeReferenceConversionResult* Result);
	static void ConvertToMatchedBlendSpacePlayerPure(const struct FAnimNodeReference& Node, struct FBlendSpaceMatcherReference* BlendSpaceMatchedPlayer, bool* Result);
	static struct FSequenceMatcherReference ConvertToMatchedSequencePlayer(const struct FAnimNodeReference& Node, EAnimNodeReferenceConversionResult* Result);
	static void ConvertToMatchedSequencePlayerPure(const struct FAnimNodeReference& Node, struct FSequenceMatcherReference* SequencePlayer, bool* bResult);
	static float GetMatchedAccumulatedTime(const struct FSequenceMatcherReference& SequencePlayer);
	static float GetMatchedScaledAccumulatedTime(const struct FBlendSpaceMatcherReference& BlendSpaceMatchedPlayer);
	static class UAnimSequenceBase* GetMatchedSequencePure(const struct FSequenceMatcherReference& SequencePlayer);
	static bool GetMatchingLoopAnimation(const struct FSequenceMatcherReference& SequencePlayer);
	static float GetMatchingPlayRate(const struct FSequenceMatcherReference& SequencePlayer);
	static float GetMatchingStartPosition(const struct FSequenceMatcherReference& SequencePlayer);
	static float GetScaledAccumulatedTime(const struct FBlendSpacePlayerReference& BlendSpacePlayer);
	static struct FSequencePlayerReturnValues SetExplicitTimeByPoseMatching(const struct FAnimUpdateContext& UpdateContext, const struct FSequencePlayerReference& SequencePlayer, const float SampleRate, const bool bShouldMatchVelocity, const bool bShouldInertiallyBlend, const float InertialBlendTime);
	static struct FSequenceMatcherReference SetMatchedAccumulatedTime(const struct FSequenceMatcherReference& SequencePlayer, float Time);
	static struct FBlendSpaceMatcherReference SetMatchedBlendSpace(const struct FBlendSpaceMatcherReference& BlendSpaceMatchedPlayer, class UBlendSpace* BlendSpace);
	static struct FBlendSpaceMatcherReference SetMatchedBlendSpaceWithInertialBlending(const struct FAnimUpdateContext& UpdateContext, const struct FBlendSpaceMatcherReference& BlendSpaceMatchedPlayer, class UBlendSpace* BlendSpace, float BlendTime);
	static struct FSequenceMatcherReference SetMatchedPlayRate(const struct FSequenceMatcherReference& SequencePlayer, float PlayRate);
	static struct FSequenceMatcherReference SetMatchedSequence(const struct FSequenceMatcherReference& SequencePlayer, class UAnimSequenceBase* Sequence);
	static struct FSequenceMatcherReference SetMatchedStartPosition(const struct FSequenceMatcherReference& SequencePlayer, float StartPosition);
	static struct FBlendSpacePlayerReference SetNormalizedTime(const struct FBlendSpacePlayerReference& BlendSpacePlayer, float NormalizedTime);
	static struct FBlendSpacePlayerReturnValues SetNormalizedTimeByDistanceMatching(const struct FAnimUpdateContext& UpdateContext, const struct FBlendSpacePlayerReference& BlendSpacePlayer, const float MatchingDistance, const float PrevNormalizedTime, const struct FVector2D& PlayRateClamp, const class FName DistanceCurveName, const bool bAdvanceTimeNaturally, const bool bUseOnlyHighestWeightedSample);
	static struct FBlendSpacePlayerReturnValues SetNormalizedTimeByPoseMatching(const struct FAnimUpdateContext& UpdateContext, const struct FBlendSpacePlayerReference& BlendSpacePlayer, const float SampleRate, const bool bShouldMatchVelocity, const bool bUseOnlyHighestWeightedSample, const bool bShouldInertiallyBlend, const float InertialBlendTime);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimSuiteNodeHelperLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimSuiteNodeHelperLibrary")
	}
	static class UAnimSuiteNodeHelperLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimSuiteNodeHelperLibrary>();
	}
};
DUMPER7_ASSERTS_UAnimSuiteNodeHelperLibrary;

}

