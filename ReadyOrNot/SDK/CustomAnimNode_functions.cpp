#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomAnimNode

#include "Basic.hpp"

#include "CustomAnimNode_classes.hpp"
#include "CustomAnimNode_parameters.hpp"


namespace SDK
{

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.ComputeMatchedPlayRateFromDuration
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSequenceMatcherReference& SequencePlayer                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAnimSuiteNodeHelperLibrary::ComputeMatchedPlayRateFromDuration(const struct FSequenceMatcherReference& SequencePlayer, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "ComputeMatchedPlayRateFromDuration");

	Params::AnimSuiteNodeHelperLibrary_ComputeMatchedPlayRateFromDuration Parms{};

	Parms.SequencePlayer = std::move(SequencePlayer);
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.ConvertToMatchedBlendSpacePlayer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EAnimNodeReferenceConversionResult*     Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlendSpaceMatcherReference      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBlendSpaceMatcherReference UAnimSuiteNodeHelperLibrary::ConvertToMatchedBlendSpacePlayer(const struct FAnimNodeReference& Node, EAnimNodeReferenceConversionResult* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "ConvertToMatchedBlendSpacePlayer");

	Params::AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayer Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.ConvertToMatchedBlendSpacePlayerPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FBlendSpaceMatcherReference*     BlendSpaceMatchedPlayer                                (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimSuiteNodeHelperLibrary::ConvertToMatchedBlendSpacePlayerPure(const struct FAnimNodeReference& Node, struct FBlendSpaceMatcherReference* BlendSpaceMatchedPlayer, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "ConvertToMatchedBlendSpacePlayerPure");

	Params::AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayerPure Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BlendSpaceMatchedPlayer != nullptr)
		*BlendSpaceMatchedPlayer = std::move(Parms.BlendSpaceMatchedPlayer);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.ConvertToMatchedSequencePlayer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EAnimNodeReferenceConversionResult*     Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSequenceMatcherReference        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSequenceMatcherReference UAnimSuiteNodeHelperLibrary::ConvertToMatchedSequencePlayer(const struct FAnimNodeReference& Node, EAnimNodeReferenceConversionResult* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "ConvertToMatchedSequencePlayer");

	Params::AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayer Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.ConvertToMatchedSequencePlayerPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSequenceMatcherReference*       SequencePlayer                                         (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool*                                   bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimSuiteNodeHelperLibrary::ConvertToMatchedSequencePlayerPure(const struct FAnimNodeReference& Node, struct FSequenceMatcherReference* SequencePlayer, bool* bResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "ConvertToMatchedSequencePlayerPure");

	Params::AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayerPure Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SequencePlayer != nullptr)
		*SequencePlayer = std::move(Parms.SequencePlayer);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.GetMatchedAccumulatedTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSequenceMatcherReference& SequencePlayer                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAnimSuiteNodeHelperLibrary::GetMatchedAccumulatedTime(const struct FSequenceMatcherReference& SequencePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "GetMatchedAccumulatedTime");

	Params::AnimSuiteNodeHelperLibrary_GetMatchedAccumulatedTime Parms{};

	Parms.SequencePlayer = std::move(SequencePlayer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.GetMatchedScaledAccumulatedTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBlendSpaceMatcherReference&BlendSpaceMatchedPlayer                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAnimSuiteNodeHelperLibrary::GetMatchedScaledAccumulatedTime(const struct FBlendSpaceMatcherReference& BlendSpaceMatchedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "GetMatchedScaledAccumulatedTime");

	Params::AnimSuiteNodeHelperLibrary_GetMatchedScaledAccumulatedTime Parms{};

	Parms.BlendSpaceMatchedPlayer = std::move(BlendSpaceMatchedPlayer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.GetMatchedSequencePure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSequenceMatcherReference& SequencePlayer                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimSequenceBase* UAnimSuiteNodeHelperLibrary::GetMatchedSequencePure(const struct FSequenceMatcherReference& SequencePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "GetMatchedSequencePure");

	Params::AnimSuiteNodeHelperLibrary_GetMatchedSequencePure Parms{};

	Parms.SequencePlayer = std::move(SequencePlayer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.GetMatchingLoopAnimation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSequenceMatcherReference& SequencePlayer                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimSuiteNodeHelperLibrary::GetMatchingLoopAnimation(const struct FSequenceMatcherReference& SequencePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "GetMatchingLoopAnimation");

	Params::AnimSuiteNodeHelperLibrary_GetMatchingLoopAnimation Parms{};

	Parms.SequencePlayer = std::move(SequencePlayer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.GetMatchingPlayRate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSequenceMatcherReference& SequencePlayer                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAnimSuiteNodeHelperLibrary::GetMatchingPlayRate(const struct FSequenceMatcherReference& SequencePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "GetMatchingPlayRate");

	Params::AnimSuiteNodeHelperLibrary_GetMatchingPlayRate Parms{};

	Parms.SequencePlayer = std::move(SequencePlayer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.GetMatchingStartPosition
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSequenceMatcherReference& SequencePlayer                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAnimSuiteNodeHelperLibrary::GetMatchingStartPosition(const struct FSequenceMatcherReference& SequencePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "GetMatchingStartPosition");

	Params::AnimSuiteNodeHelperLibrary_GetMatchingStartPosition Parms{};

	Parms.SequencePlayer = std::move(SequencePlayer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.GetScaledAccumulatedTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBlendSpacePlayerReference&BlendSpacePlayer                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAnimSuiteNodeHelperLibrary::GetScaledAccumulatedTime(const struct FBlendSpacePlayerReference& BlendSpacePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "GetScaledAccumulatedTime");

	Params::AnimSuiteNodeHelperLibrary_GetScaledAccumulatedTime Parms{};

	Parms.BlendSpacePlayer = std::move(BlendSpacePlayer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetExplicitTimeByPoseMatching
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        UpdateContext                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FSequencePlayerReference&  SequencePlayer                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const float                             SampleRate                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bShouldMatchVelocity                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bShouldInertiallyBlend                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             InertialBlendTime                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSequencePlayerReturnValues      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSequencePlayerReturnValues UAnimSuiteNodeHelperLibrary::SetExplicitTimeByPoseMatching(const struct FAnimUpdateContext& UpdateContext, const struct FSequencePlayerReference& SequencePlayer, const float SampleRate, const bool bShouldMatchVelocity, const bool bShouldInertiallyBlend, const float InertialBlendTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "SetExplicitTimeByPoseMatching");

	Params::AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching Parms{};

	Parms.UpdateContext = std::move(UpdateContext);
	Parms.SequencePlayer = std::move(SequencePlayer);
	Parms.SampleRate = SampleRate;
	Parms.bShouldMatchVelocity = bShouldMatchVelocity;
	Parms.bShouldInertiallyBlend = bShouldInertiallyBlend;
	Parms.InertialBlendTime = InertialBlendTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetMatchedAccumulatedTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSequenceMatcherReference& SequencePlayer                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSequenceMatcherReference        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSequenceMatcherReference UAnimSuiteNodeHelperLibrary::SetMatchedAccumulatedTime(const struct FSequenceMatcherReference& SequencePlayer, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "SetMatchedAccumulatedTime");

	Params::AnimSuiteNodeHelperLibrary_SetMatchedAccumulatedTime Parms{};

	Parms.SequencePlayer = std::move(SequencePlayer);
	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetMatchedBlendSpace
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBlendSpaceMatcherReference&BlendSpaceMatchedPlayer                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlendSpace*                      BlendSpace                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlendSpaceMatcherReference      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBlendSpaceMatcherReference UAnimSuiteNodeHelperLibrary::SetMatchedBlendSpace(const struct FBlendSpaceMatcherReference& BlendSpaceMatchedPlayer, class UBlendSpace* BlendSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "SetMatchedBlendSpace");

	Params::AnimSuiteNodeHelperLibrary_SetMatchedBlendSpace Parms{};

	Parms.BlendSpaceMatchedPlayer = std::move(BlendSpaceMatchedPlayer);
	Parms.BlendSpace = BlendSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetMatchedBlendSpaceWithInertialBlending
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        UpdateContext                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FBlendSpaceMatcherReference&BlendSpaceMatchedPlayer                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UBlendSpace*                      BlendSpace                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlendSpaceMatcherReference      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBlendSpaceMatcherReference UAnimSuiteNodeHelperLibrary::SetMatchedBlendSpaceWithInertialBlending(const struct FAnimUpdateContext& UpdateContext, const struct FBlendSpaceMatcherReference& BlendSpaceMatchedPlayer, class UBlendSpace* BlendSpace, float BlendTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "SetMatchedBlendSpaceWithInertialBlending");

	Params::AnimSuiteNodeHelperLibrary_SetMatchedBlendSpaceWithInertialBlending Parms{};

	Parms.UpdateContext = std::move(UpdateContext);
	Parms.BlendSpaceMatchedPlayer = std::move(BlendSpaceMatchedPlayer);
	Parms.BlendSpace = BlendSpace;
	Parms.BlendTime = BlendTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetMatchedPlayRate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSequenceMatcherReference& SequencePlayer                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSequenceMatcherReference        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSequenceMatcherReference UAnimSuiteNodeHelperLibrary::SetMatchedPlayRate(const struct FSequenceMatcherReference& SequencePlayer, float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "SetMatchedPlayRate");

	Params::AnimSuiteNodeHelperLibrary_SetMatchedPlayRate Parms{};

	Parms.SequencePlayer = std::move(SequencePlayer);
	Parms.PlayRate = PlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetMatchedSequence
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSequenceMatcherReference& SequencePlayer                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                Sequence                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSequenceMatcherReference        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSequenceMatcherReference UAnimSuiteNodeHelperLibrary::SetMatchedSequence(const struct FSequenceMatcherReference& SequencePlayer, class UAnimSequenceBase* Sequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "SetMatchedSequence");

	Params::AnimSuiteNodeHelperLibrary_SetMatchedSequence Parms{};

	Parms.SequencePlayer = std::move(SequencePlayer);
	Parms.Sequence = Sequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetMatchedStartPosition
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSequenceMatcherReference& SequencePlayer                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   StartPosition                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSequenceMatcherReference        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSequenceMatcherReference UAnimSuiteNodeHelperLibrary::SetMatchedStartPosition(const struct FSequenceMatcherReference& SequencePlayer, float StartPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "SetMatchedStartPosition");

	Params::AnimSuiteNodeHelperLibrary_SetMatchedStartPosition Parms{};

	Parms.SequencePlayer = std::move(SequencePlayer);
	Parms.StartPosition = StartPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetNormalizedTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBlendSpacePlayerReference&BlendSpacePlayer                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   NormalizedTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlendSpacePlayerReference       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBlendSpacePlayerReference UAnimSuiteNodeHelperLibrary::SetNormalizedTime(const struct FBlendSpacePlayerReference& BlendSpacePlayer, float NormalizedTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "SetNormalizedTime");

	Params::AnimSuiteNodeHelperLibrary_SetNormalizedTime Parms{};

	Parms.BlendSpacePlayer = std::move(BlendSpacePlayer);
	Parms.NormalizedTime = NormalizedTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetNormalizedTimeByDistanceMatching
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        UpdateContext                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FBlendSpacePlayerReference&BlendSpacePlayer                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const float                             MatchingDistance                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             PrevNormalizedTime                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 PlayRateClamp                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       DistanceCurveName                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bAdvanceTimeNaturally                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bUseOnlyHighestWeightedSample                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlendSpacePlayerReturnValues    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBlendSpacePlayerReturnValues UAnimSuiteNodeHelperLibrary::SetNormalizedTimeByDistanceMatching(const struct FAnimUpdateContext& UpdateContext, const struct FBlendSpacePlayerReference& BlendSpacePlayer, const float MatchingDistance, const float PrevNormalizedTime, const struct FVector2D& PlayRateClamp, const class FName DistanceCurveName, const bool bAdvanceTimeNaturally, const bool bUseOnlyHighestWeightedSample)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "SetNormalizedTimeByDistanceMatching");

	Params::AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching Parms{};

	Parms.UpdateContext = std::move(UpdateContext);
	Parms.BlendSpacePlayer = std::move(BlendSpacePlayer);
	Parms.MatchingDistance = MatchingDistance;
	Parms.PrevNormalizedTime = PrevNormalizedTime;
	Parms.PlayRateClamp = std::move(PlayRateClamp);
	Parms.DistanceCurveName = DistanceCurveName;
	Parms.bAdvanceTimeNaturally = bAdvanceTimeNaturally;
	Parms.bUseOnlyHighestWeightedSample = bUseOnlyHighestWeightedSample;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetNormalizedTimeByPoseMatching
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        UpdateContext                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FBlendSpacePlayerReference&BlendSpacePlayer                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const float                             SampleRate                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bShouldMatchVelocity                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bUseOnlyHighestWeightedSample                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bShouldInertiallyBlend                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             InertialBlendTime                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlendSpacePlayerReturnValues    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBlendSpacePlayerReturnValues UAnimSuiteNodeHelperLibrary::SetNormalizedTimeByPoseMatching(const struct FAnimUpdateContext& UpdateContext, const struct FBlendSpacePlayerReference& BlendSpacePlayer, const float SampleRate, const bool bShouldMatchVelocity, const bool bUseOnlyHighestWeightedSample, const bool bShouldInertiallyBlend, const float InertialBlendTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimSuiteNodeHelperLibrary", "SetNormalizedTimeByPoseMatching");

	Params::AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching Parms{};

	Parms.UpdateContext = std::move(UpdateContext);
	Parms.BlendSpacePlayer = std::move(BlendSpacePlayer);
	Parms.SampleRate = SampleRate;
	Parms.bShouldMatchVelocity = bShouldMatchVelocity;
	Parms.bUseOnlyHighestWeightedSample = bUseOnlyHighestWeightedSample;
	Parms.bShouldInertiallyBlend = bShouldInertiallyBlend;
	Parms.InertialBlendTime = InertialBlendTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

