#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DLSSBlueprint

#include "Basic.hpp"

#include "DLSSBlueprint_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function DLSSBlueprint.DLSSLibrary.EnableDLAA
// 0x0001 (0x0001 - 0x0000)
struct DLSSLibrary_EnableDLAA final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_EnableDLAA;

// Function DLSSBlueprint.DLSSLibrary.EnableDLSS
// 0x0001 (0x0001 - 0x0000)
struct DLSSLibrary_EnableDLSS final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_EnableDLSS;

// Function DLSSBlueprint.DLSSLibrary.EnableDLSSRR
// 0x0001 (0x0001 - 0x0000)
struct DLSSLibrary_EnableDLSSRR final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_EnableDLSSRR;

// Function DLSSBlueprint.DLSSLibrary.GetDefaultDLSSMode
// 0x0001 (0x0001 - 0x0000)
struct DLSSLibrary_GetDefaultDLSSMode final
{
public:
	EUDLSSMode                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_GetDefaultDLSSMode;

// Function DLSSBlueprint.DLSSLibrary.GetDLSSMinimumDriverVersion
// 0x0008 (0x0008 - 0x0000)
struct DLSSLibrary_GetDLSSMinimumDriverVersion final
{
public:
	int32                                         MinDriverVersionMajor;                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinDriverVersionMinor;                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_GetDLSSMinimumDriverVersion;

// Function DLSSBlueprint.DLSSLibrary.GetDLSSMode
// 0x0001 (0x0001 - 0x0000)
struct DLSSLibrary_GetDLSSMode final
{
public:
	EUDLSSMode                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_GetDLSSMode;

// Function DLSSBlueprint.DLSSLibrary.GetDLSSModeInformation
// 0x0030 (0x0030 - 0x0000)
struct DLSSLibrary_GetDLSSModeInformation final
{
public:
	EUDLSSMode                                    DLSSMode;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ScreenResolution;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSupported;                                      // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OptimalScreenPercentage;                           // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFixedScreenPercentage;                          // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinScreenPercentage;                               // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxScreenPercentage;                               // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OptimalSharpness;                                  // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_GetDLSSModeInformation;

// Function DLSSBlueprint.DLSSLibrary.GetDLSSRRMinimumDriverVersion
// 0x0008 (0x0008 - 0x0000)
struct DLSSLibrary_GetDLSSRRMinimumDriverVersion final
{
public:
	int32                                         MinDriverVersionMajor;                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinDriverVersionMinor;                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_GetDLSSRRMinimumDriverVersion;

// Function DLSSBlueprint.DLSSLibrary.GetDLSSScreenPercentageRange
// 0x0008 (0x0008 - 0x0000)
struct DLSSLibrary_GetDLSSScreenPercentageRange final
{
public:
	float                                         MinScreenPercentage;                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxScreenPercentage;                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_GetDLSSScreenPercentageRange;

// Function DLSSBlueprint.DLSSLibrary.GetDLSSSharpness
// 0x0004 (0x0004 - 0x0000)
struct DLSSLibrary_GetDLSSSharpness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_GetDLSSSharpness;

// Function DLSSBlueprint.DLSSLibrary.GetSupportedDLSSModes
// 0x0010 (0x0010 - 0x0000)
struct DLSSLibrary_GetSupportedDLSSModes final
{
public:
	TArray<EUDLSSMode>                            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_GetSupportedDLSSModes;

// Function DLSSBlueprint.DLSSLibrary.IsDLAAEnabled
// 0x0001 (0x0001 - 0x0000)
struct DLSSLibrary_IsDLAAEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_IsDLAAEnabled;

// Function DLSSBlueprint.DLSSLibrary.IsDLSSEnabled
// 0x0001 (0x0001 - 0x0000)
struct DLSSLibrary_IsDLSSEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_IsDLSSEnabled;

// Function DLSSBlueprint.DLSSLibrary.IsDLSSModeSupported
// 0x0002 (0x0002 - 0x0000)
struct DLSSLibrary_IsDLSSModeSupported final
{
public:
	EUDLSSMode                                    DLSSMode;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_IsDLSSModeSupported;

// Function DLSSBlueprint.DLSSLibrary.IsDLSSRREnabled
// 0x0001 (0x0001 - 0x0000)
struct DLSSLibrary_IsDLSSRREnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_IsDLSSRREnabled;

// Function DLSSBlueprint.DLSSLibrary.IsDLSSRRSupported
// 0x0001 (0x0001 - 0x0000)
struct DLSSLibrary_IsDLSSRRSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_IsDLSSRRSupported;

// Function DLSSBlueprint.DLSSLibrary.IsDLSSSupported
// 0x0001 (0x0001 - 0x0000)
struct DLSSLibrary_IsDLSSSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_IsDLSSSupported;

// Function DLSSBlueprint.DLSSLibrary.QueryDLSSRRSupport
// 0x0001 (0x0001 - 0x0000)
struct DLSSLibrary_QueryDLSSRRSupport final
{
public:
	EUDLSSSupport                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_QueryDLSSRRSupport;

// Function DLSSBlueprint.DLSSLibrary.QueryDLSSSupport
// 0x0001 (0x0001 - 0x0000)
struct DLSSLibrary_QueryDLSSSupport final
{
public:
	EUDLSSSupport                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_QueryDLSSSupport;

// Function DLSSBlueprint.DLSSLibrary.SetDLSSMode
// 0x0010 (0x0010 - 0x0000)
struct DLSSLibrary_SetDLSSMode final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUDLSSMode                                    DLSSMode;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
DUMPER7_ASSERTS_DLSSLibrary_SetDLSSMode;

// Function DLSSBlueprint.DLSSLibrary.SetDLSSSharpness
// 0x0004 (0x0004 - 0x0000)
struct DLSSLibrary_SetDLSSSharpness final
{
public:
	float                                         Sharpness;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
DUMPER7_ASSERTS_DLSSLibrary_SetDLSSSharpness;

}

