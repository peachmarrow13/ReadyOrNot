#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicCoverSystem

#include "Basic.hpp"

#include "DynamicCoverSystem_classes.hpp"
#include "DynamicCoverSystem_parameters.hpp"


namespace SDK
{

// Function DynamicCoverSystem.CoverGenOverrideVolume.GenerateCoverPoints
// (Final, Native, Public)

void ACoverGenOverrideVolume::GenerateCoverPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoverGenOverrideVolume", "GenerateCoverPoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicCoverSystem.CoverPoint.PreviewCoverAnim
// (Final, Native, Protected)

void ACoverPoint::PreviewCoverAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoverPoint", "PreviewCoverAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicCoverSystem.CoverPoint.ResetCoverTypes
// (Final, Native, Protected)

void ACoverPoint::ResetCoverTypes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoverPoint", "ResetCoverTypes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicCoverSystem.CoverPoint.SetCrouchCoverType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const ECrouchCoverType&                 NewCoverType                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACoverPoint::SetCrouchCoverType(const ECrouchCoverType& NewCoverType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoverPoint", "SetCrouchCoverType");

	Params::CoverPoint_SetCrouchCoverType Parms{};

	Parms.NewCoverType = NewCoverType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicCoverSystem.CoverPoint.SetStandCoverType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const EStandCoverType&                  NewCoverType                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACoverPoint::SetStandCoverType(const EStandCoverType& NewCoverType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoverPoint", "SetStandCoverType");

	Params::CoverPoint_SetStandCoverType Parms{};

	Parms.NewCoverType = NewCoverType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicCoverSystem.CoverPoint.StopPreviewCoverAnim
// (Final, Native, Protected)

void ACoverPoint::StopPreviewCoverAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoverPoint", "StopPreviewCoverAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicCoverSystem.CoverSystem.OccupyCover
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   InCoverPoint                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoverSystem::OccupyCover(const struct FVector& InCoverPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoverSystem", "OccupyCover");

	Params::CoverSystem_OccupyCover Parms{};

	Parms.InCoverPoint = std::move(InCoverPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicCoverSystem.CoverSystem.ReleaseCover
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   InCoverPoint                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoverSystem::ReleaseCover(const struct FVector& InCoverPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoverSystem", "ReleaseCover");

	Params::CoverSystem_ReleaseCover Parms{};

	Parms.InCoverPoint = std::move(InCoverPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicCoverSystem.CoverSystem.IsCoverPointOccupied
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector&                   InCoverLocation                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoverSystem::IsCoverPointOccupied(const struct FVector& InCoverLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoverSystem", "IsCoverPointOccupied");

	Params::CoverSystem_IsCoverPointOccupied Parms{};

	Parms.InCoverLocation = std::move(InCoverLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicCoverSystem.NotifyingRecastNavMesh.DeleteAllCoverPoints
// (Native, Public)

void ANotifyingRecastNavMesh::DeleteAllCoverPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotifyingRecastNavMesh", "DeleteAllCoverPoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicCoverSystem.NotifyingRecastNavMesh.GenerateCoverPoints
// (Native, Public)

void ANotifyingRecastNavMesh::GenerateCoverPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotifyingRecastNavMesh", "GenerateCoverPoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

