#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Engine

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "AudioPlatformConfiguration_structs.hpp"
#include "InputCore_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "PhysicsCore_classes.hpp"
#include "FieldNotification_structs.hpp"
#include "DeveloperSettings_structs.hpp"
#include "DeveloperSettings_classes.hpp"
#include "Chaos_structs.hpp"
#include "AudioExtensions_structs.hpp"
#include "AudioExtensions_classes.hpp"
#include "IrisCore_classes.hpp"
#include "NetCore_structs.hpp"
#include "NetCore_classes.hpp"
#include "PacketHandler_classes.hpp"
#include "MeshDescription_classes.hpp"


namespace SDK
{

// Class Engine.MaterialExpression
// 0x0088 (0x00B0 - 0x0028)
class UMaterialExpression : public UObject
{
public:
	int32                                         MaterialExpressionEditorX;                         // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialExpressionEditorY;                         // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEdGraphNode*                           GraphNode;                                         // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialExpression*                    SubgraphExpression;                                // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  MaterialExpressionGuid;                            // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              Material;                                          // 0x0060(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialFunction*                      Function;                                          // 0x0068(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x4];                                       // 0x0080(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bRealtimePreview : 1;                              // 0x0084(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedToUpdatePreview : 1;                          // 0x0084(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_84_2 : 6;                                   // 0x0084(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bIsParameterExpression : 1;                        // 0x0088(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_88_1 : 7;                                   // 0x0088(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bCommentBubbleVisible : 1;                         // 0x008C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowOutputNameOnPin : 1;                          // 0x008C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowMaskColorsOnPin : 1;                          // 0x008C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHidePreviewWindow : 1;                            // 0x008C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCollapsed : 1;                                    // 0x008C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShaderInputData : 1;                              // 0x008C(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowInputs : 1;                                   // 0x008C(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowOutputs : 1;                                  // 0x008C(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           MenuCategories;                                    // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FExpressionOutput>              Outputs;                                           // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpression")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpression")
	}
	static class UMaterialExpression* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpression>();
	}
};
DUMPER7_ASSERTS_UMaterialExpression;

// Class Engine.MaterialExpressionStrataBSDF
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionStrataBSDF : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataBSDF")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataBSDF")
	}
	static class UMaterialExpressionStrataBSDF* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataBSDF>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataBSDF;

// Class Engine.MaterialExpressionStrataVolumetricFogCloudBSDF
// 0x00A0 (0x0150 - 0x00B0)
class UMaterialExpressionStrataVolumetricFogCloudBSDF final : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                       Albedo;                                            // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Extinction;                                        // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       EmissiveColor;                                     // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       AmbientOcclusion;                                  // 0x0128(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataVolumetricFogCloudBSDF")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataVolumetricFogCloudBSDF")
	}
	static class UMaterialExpressionStrataVolumetricFogCloudBSDF* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataVolumetricFogCloudBSDF>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataVolumetricFogCloudBSDF;

// Class Engine.ActorComponent
// 0x0078 (0x00A0 - 0x0028)
class UActorComponent : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActorComponentTickFunction            PrimaryComponentTick;                              // 0x0030(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           ComponentTags;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAssetUserData*>                 AssetUserData;                                     // 0x0070(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_80[0x4];                                       // 0x0080(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UCSSerializationIndex;                             // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BitPad_88_0 : 3;                                   // 0x0088(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bNetAddressable : 1;                               // 0x0088(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bReplicateUsingRegisteredSubObjectList : 1;        // 0x0088(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bReplicates : 1;                                   // 0x0088(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         BitPad_88_6 : 2;                                   // 0x0088(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_89[0x1];                                       // 0x0089(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         BitPad_8A_0 : 1;                                   // 0x008A(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bAutoActivate : 1;                                 // 0x008A(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsActive : 1;                                     // 0x008A(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Net, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bEditableWhenInherited : 1;                        // 0x008A(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_8A_4 : 1;                                   // 0x008A(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bCanEverAffectNavigation : 1;                      // 0x008A(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         BitPad_8A_6 : 1;                                   // 0x008A(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bIsEditorOnly : 1;                                 // 0x008A(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_8B[0x2];                                       // 0x008B(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	EComponentCreationMethod                      CreationMethod;                                    // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnComponentActivated;                              // 0x008E(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnComponentDeactivated;                            // 0x008F(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x10];                                      // 0x0090(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Activate(bool bReset);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void Deactivate();
	void K2_DestroyComponent(class UObject* Object);
	void OnRep_IsActive();
	void ReceiveAsyncPhysicsTick(float DeltaSeconds, float SimSeconds);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void SetActive(bool bNewActive, bool bReset);
	void SetAutoActivate(bool bNewAutoActivate);
	void SetComponentTickEnabled(bool bEnabled);
	void SetComponentTickInterval(float TickInterval);
	void SetComponentTickIntervalAndCooldown(float TickInterval);
	void SetIsReplicated(bool ShouldReplicate);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetTickGroup(ETickingGroup NewTickGroup);
	void ToggleActive();

	bool ComponentHasTag(class FName Tag) const;
	float GetComponentTickInterval() const;
	class AActor* GetOwner() const;
	bool IsActive() const;
	bool IsBeingDestroyed() const;
	bool IsComponentTickEnabled() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActorComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActorComponent")
	}
	static class UActorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorComponent>();
	}
};
DUMPER7_ASSERTS_UActorComponent;

// Class Engine.ParticleModule
// 0x0008 (0x0030 - 0x0028)
class UParticleModule : public UObject
{
public:
	uint8                                         bSpawnModule : 1;                                  // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUpdateModule : 1;                                 // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFinalUpdateModule : 1;                            // 0x0028(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUpdateForGPUEmitter : 1;                          // 0x0028(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCurvesAsColor : 1;                                // 0x0028(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         b3DDrawMode : 1;                                   // 0x0028(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupported3DDrawMode : 1;                          // 0x0028(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnabled : 1;                                      // 0x0028(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEditable : 1;                                     // 0x0029(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         LODDuplicate : 1;                                  // 0x0029(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsRandomSeed : 1;                           // 0x0029(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRequiresLoopingNotification : 1;                  // 0x0029(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         LODValidity;                                       // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModule")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModule")
	}
	static class UParticleModule* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModule>();
	}
};
DUMPER7_ASSERTS_UParticleModule;

// Class Engine.ParticleModuleTypeDataBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleTypeDataBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleTypeDataBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleTypeDataBase")
	}
	static class UParticleModuleTypeDataBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleTypeDataBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleTypeDataBase;

// Class Engine.ParticleModuleTypeDataMesh
// 0x0080 (0x00B0 - 0x0030)
class UParticleModuleTypeDataMesh final : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LODSizeScale;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseStaticMeshLODs : 1;                            // 0x0044(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CastShadows : 1;                                   // 0x0044(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         DoCollisions : 1;                                  // 0x0044(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EMeshScreenAlignment                          MeshAlignment;                                     // 0x0045(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverrideMaterial : 1;                             // 0x0046(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideDefaultMotionBlurSettings : 1;            // 0x0046(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableMotionBlur : 1;                             // 0x0046(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionVector                 RollPitchYawRange;                                 // 0x0048(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EParticleAxisLock                             AxisLockOption;                                    // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCameraFacing : 1;                                 // 0x00A9(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EMeshCameraFacingUpAxis                       CameraFacingUpAxisOption;                          // 0x00AA(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMeshCameraFacingOptions                      CameraFacingOption;                                // 0x00AB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bApplyParticleRotationAsSpin : 1;                  // 0x00AC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFaceCameraDirectionRatherThanPosition : 1;        // 0x00AC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCollisionsConsiderPartilceSize : 1;               // 0x00AC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleTypeDataMesh")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleTypeDataMesh")
	}
	static class UParticleModuleTypeDataMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleTypeDataMesh>();
	}
};
DUMPER7_ASSERTS_UParticleModuleTypeDataMesh;

// Class Engine.MaterialInterface
// 0x0088 (0x00B0 - 0x0028)
class UMaterialInterface : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class USubsurfaceProfile*                     SubsurfaceProfile;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USpecularProfile*>               SpecularProfiles;                                  // 0x0040(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         bIncludedInBaseGame : 1;                           // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x17];                                      // 0x0051(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLightmassMaterialInterfaceSettings    LightmassSettings;                                 // 0x0068(0x0010)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FMaterialTextureInfo>           TextureStreamingData;                              // 0x0078(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UAssetUserData*>                 AssetUserData;                                     // 0x0088(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_98[0x18];                                      // 0x0098(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMaterial* GetBaseMaterial();
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32 CinematicTextureGroups, bool bFastResponse);

	EBlendMode GetBlendMode() const;
	class UMaterialInterface* GetNaniteOverideMaterial() const;
	struct FMaterialParameterInfo GetParameterInfo(EMaterialParameterAssociation Association, class FName ParameterName, class UMaterialFunctionInterface* LayerFunction) const;
	class UPhysicalMaterial* GetPhysicalMaterial() const;
	class UPhysicalMaterial* GetPhysicalMaterialFromMap(int32 Index_0) const;
	class UPhysicalMaterialMask* GetPhysicalMaterialMask() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialInterface")
	}
	static class UMaterialInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialInterface>();
	}
};
DUMPER7_ASSERTS_UMaterialInterface;

// Class Engine.MaterialFunctionInterface
// 0x0018 (0x0040 - 0x0028)
class UMaterialFunctionInterface : public UObject
{
public:
	struct FGuid                                  StateId;                                           // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialFunctionUsage                        MaterialFunctionUsage;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialFunctionInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialFunctionInterface")
	}
	static class UMaterialFunctionInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialFunctionInterface>();
	}
};
DUMPER7_ASSERTS_UMaterialFunctionInterface;

// Class Engine.BlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBlueprintFunctionLibrary : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BlueprintFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BlueprintFunctionLibrary")
	}
	static class UBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_UBlueprintFunctionLibrary;

// Class Engine.ParticleModuleSubUVBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleSubUVBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleSubUVBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleSubUVBase")
	}
	static class UParticleModuleSubUVBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleSubUVBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleSubUVBase;

// Class Engine.ParticleModuleSubUV
// 0x0040 (0x0070 - 0x0030)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	class USubUVAnimation*                        Animation;                                         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  SubImageIndex;                                     // 0x0038(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bUseRealTime : 1;                                  // 0x0068(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleSubUV")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleSubUV")
	}
	static class UParticleModuleSubUV* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleSubUV>();
	}
};
DUMPER7_ASSERTS_UParticleModuleSubUV;

// Class Engine.MaterialExpressionStrataUnlitBSDF
// 0x0078 (0x0128 - 0x00B0)
class UMaterialExpressionStrataUnlitBSDF final : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                       EmissiveColor;                                     // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       TransmittanceColor;                                // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Normal;                                            // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataUnlitBSDF")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataUnlitBSDF")
	}
	static class UMaterialExpressionStrataUnlitBSDF* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataUnlitBSDF>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataUnlitBSDF;

// Class Engine.HealthSnapshotBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UHealthSnapshotBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void LogPerformanceSnapshot(const class FString& SnapshotTitle, bool bResetStats);
	static void StartPerformanceSnapshots();
	static void StopPerformanceSnapshots();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HealthSnapshotBlueprintLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HealthSnapshotBlueprintLibrary")
	}
	static class UHealthSnapshotBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHealthSnapshotBlueprintLibrary>();
	}
};
DUMPER7_ASSERTS_UHealthSnapshotBlueprintLibrary;

// Class Engine.SceneComponent
// 0x0200 (0x02A0 - 0x00A0)
class alignas(0x10) USceneComponent : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class APhysicsVolume>          PhysicsVolume;                                     // 0x00A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                        AttachParent;                                      // 0x00B0(0x0008)(ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AttachSocketName;                                  // 0x00B8(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class USceneComponent*>                AttachChildren;                                    // 0x00C0(0x0010)(ExportObject, Net, ZeroConstructor, Transient, RepNotify, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class USceneComponent*>                ClientAttachedChildren;                            // 0x00D0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x48];                                      // 0x00E0(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RelativeLocation;                                  // 0x0128(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               RelativeRotation;                                  // 0x0140(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                RelativeScale3D;                                   // 0x0158(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                ComponentVelocity;                                 // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bComponentToWorldUpdated : 1;                      // 0x0188(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         BitPad_188_1 : 1;                                  // 0x0188(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bAbsoluteLocation : 1;                             // 0x0188(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bAbsoluteRotation : 1;                             // 0x0188(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bAbsoluteScale : 1;                                // 0x0188(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bVisible : 1;                                      // 0x0188(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bShouldBeAttached : 1;                             // 0x0188(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bShouldSnapLocationWhenAttached : 1;               // 0x0188(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bShouldSnapRotationWhenAttached : 1;               // 0x0189(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bShouldSnapScaleWhenAttached : 1;                  // 0x0189(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bShouldUpdatePhysicsVolume : 1;                    // 0x0189(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bHiddenInGame : 1;                                 // 0x0189(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bBoundsChangeTriggersStreamingDataRebuild : 1;     // 0x0189(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseAttachParentBound : 1;                         // 0x0189(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bComputeFastLocalBounds : 1;                       // 0x0189(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bComputeBoundsOnceForGame : 1;                     // 0x0189(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bComputedBoundsOnceForGame : 1;                    // 0x018A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsNotRenderAttachmentRoot : 1;                    // 0x018A(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EComponentMobility                            Mobility;                                          // 0x018B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDetailMode                                   DetailMode;                                        // 0x018C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             PhysicsVolumeChangedDelegate;                      // 0x018D(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18E[0x112];                                    // 0x018E(0x0112)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);
	void K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddWorldTransformKeepScale(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	bool K2_AttachTo(class USceneComponent* InParent, class FName InSocketName, EAttachLocation AttachType, bool bWeldSimulatedBodies);
	bool K2_AttachToComponent(class USceneComponent* Parent, class FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void K2_DetachFromComponent(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify);
	void K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void OnRep_AttachChildren();
	void OnRep_AttachParent();
	void OnRep_AttachSocketName();
	void OnRep_Transform();
	void OnRep_Visibility(bool OldValue);
	void ResetRelativeTransform();
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
	void SetMobility(EComponentMobility NewMobility);
	void SetRelativeScale3D(const struct FVector& NewScale3D);
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
	void SetWorldScale3D(const struct FVector& NewScale);
	void ToggleVisibility(bool bPropagateToChildren);

	bool DoesSocketExist(class FName InSocketName) const;
	TArray<class FName> GetAllSocketNames() const;
	class USceneComponent* GetAttachParent() const;
	class FName GetAttachSocketName() const;
	class USceneComponent* GetChildComponent(int32 ChildIndex) const;
	void GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children) const;
	struct FVector GetComponentVelocity() const;
	struct FVector GetForwardVector() const;
	int32 GetNumChildrenComponents() const;
	void GetParentComponents(TArray<class USceneComponent*>* Parents) const;
	class APhysicsVolume* GetPhysicsVolume() const;
	struct FTransform GetRelativeTransform() const;
	struct FVector GetRightVector() const;
	bool GetShouldUpdatePhysicsVolume() const;
	struct FVector GetSocketLocation(class FName InSocketName) const;
	struct FQuat GetSocketQuaternion(class FName InSocketName) const;
	struct FRotator GetSocketRotation(class FName InSocketName) const;
	struct FTransform GetSocketTransform(class FName InSocketName, ERelativeTransformSpace TransformSpace) const;
	struct FVector GetUpVector() const;
	bool IsAnySimulatingPhysics() const;
	bool IsSimulatingPhysics(class FName BoneName) const;
	bool IsVisible() const;
	struct FVector K2_GetComponentLocation() const;
	struct FRotator K2_GetComponentRotation() const;
	struct FVector K2_GetComponentScale() const;
	struct FTransform K2_GetComponentToWorld() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SceneComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SceneComponent")
	}
	static class USceneComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USceneComponent>();
	}
};
DUMPER7_ASSERTS_USceneComponent;

// Class Engine.AnimBlueprintClassSubsystem_PropertyAccess
// 0x0000 (0x0028 - 0x0028)
class UAnimBlueprintClassSubsystem_PropertyAccess final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimBlueprintClassSubsystem_PropertyAccess")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimBlueprintClassSubsystem_PropertyAccess")
	}
	static class UAnimBlueprintClassSubsystem_PropertyAccess* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimBlueprintClassSubsystem_PropertyAccess>();
	}
};
DUMPER7_ASSERTS_UAnimBlueprintClassSubsystem_PropertyAccess;

// Class Engine.Actor
// 0x0270 (0x0298 - 0x0028)
class AActor : public UObject
{
public:
	struct FActorTickFunction                     PrimaryActorTick;                                  // 0x0028(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         bNetTemporary : 1;                                 // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_58_1 : 1;                                   // 0x0058(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bOnlyRelevantToOwner : 1;                          // 0x0058(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAlwaysRelevant : 1;                               // 0x0058(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReplicateMovement : 1;                            // 0x0058(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, Net, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bCallPreReplication : 1;                           // 0x0058(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bCallPreReplicationForReplay : 1;                  // 0x0058(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bHidden : 1;                                       // 0x0058(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Net, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bTearOff : 1;                                      // 0x0059(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bForceNetAddressable : 1;                          // 0x0059(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bExchangedRoles : 1;                               // 0x0059(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNetLoadOnClient : 1;                              // 0x0059(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNetUseOwnerRelevancy : 1;                         // 0x0059(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRelevantForNetworkReplays : 1;                    // 0x0059(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRelevantForLevelBounds : 1;                       // 0x0059(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReplayRewindable : 1;                             // 0x0059(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowTickBeforeBeginPlay : 1;                     // 0x005A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAutoDestroyWhenFinished : 1;                      // 0x005A(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bCanBeDamaged : 1;                                 // 0x005A(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, Net, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bBlockInput : 1;                                   // 0x005A(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCollideWhenPlacing : 1;                           // 0x005A(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFindCameraComponentWhenViewTarget : 1;            // 0x005A(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateOverlapEventsDuringLevelStreaming : 1;    // 0x005A(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoresOriginShifting : 1;                        // 0x005A(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableAutoLODGeneration : 1;                      // 0x005B(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsEditorOnlyActor : 1;                            // 0x005B(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bActorSeamlessTraveled : 1;                        // 0x005B(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReplicates : 1;                                   // 0x005B(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bCanBeInCluster : 1;                               // 0x005B(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bAllowReceiveTickEventOnDedicatedServer : 1;       // 0x005B(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         BitPad_5B_6 : 1;                                   // 0x005B(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bReplicateUsingRegisteredSubObjectList : 1;        // 0x005B(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         BitPad_5C_0 : 7;                                   // 0x005C(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bActorEnableCollision : 1;                         // 0x005C(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bActorIsBeingDestroyed : 1;                        // 0x005D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         BitPad_5D_1 : 4;                                   // 0x005D(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bAsyncPhysicsTickEnabled : 1;                      // 0x005D(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	EActorUpdateOverlapsMethod                    UpdateOverlapsMethodDuringLevelStreaming;          // 0x005E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EActorUpdateOverlapsMethod                    DefaultUpdateOverlapsMethodDuringLevelStreaming;   // 0x005F(0x0001)(Edit, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InitialLifeSpan;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomTimeDilation;                                // 0x0064(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENetRole                                      RemoteRole;                                        // 0x0068(0x0001)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RayTracingGroupId;                                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRepAttachment                         AttachmentReplication;                             // 0x0070(0x0060)(Net, Transient, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FRepMovement                           ReplicatedMovement;                                // 0x00D0(0x0070)(Edit, Net, DisableEditOnInstance, RepNotify, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPrivate)
	class AActor*                                 Owner;                                             // 0x0140(0x0008)(Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NetDriverName;                                     // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENetRole                                      Role;                                              // 0x0150(0x0001)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ENetDormancy                                  NetDormancy;                                       // 0x0151(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            SpawnCollisionHandlingMethod;                      // 0x0152(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAutoReceiveInput                             AutoReceiveInput;                                  // 0x0153(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InputPriority;                                     // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x8];                                      // 0x0158(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputComponent*                        InputComponent;                                    // 0x0160(0x0008)(ExportObject, ZeroConstructor, InstancedReference, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetCullDistanceSquared;                            // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NetTag;                                            // 0x016C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetUpdateFrequency;                                // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinNetUpdateFrequency;                             // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetPriority;                                       // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicsReplicationMode                       PhysicsReplicationMode;                            // 0x017C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_17D[0xB];                                      // 0x017D(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  Instigator;                                        // 0x0188(0x0008)(BlueprintVisible, Net, ZeroConstructor, RepNotify, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                         Children;                                          // 0x0190(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	class USceneComponent*                        RootComponent;                                     // 0x01A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A8[0x8];                                      // 0x01A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Layers;                                            // 0x01B0(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UChildActorComponent>    ParentComponent;                                   // 0x01C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Tags;                                              // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnTakeAnyDamage;                                   // 0x01D8(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnTakePointDamage;                                 // 0x01D9(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnTakeRadialDamage;                                // 0x01DA(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnActorBeginOverlap;                               // 0x01DB(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnActorEndOverlap;                                 // 0x01DC(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnBeginCursorOver;                                 // 0x01DD(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnEndCursorOver;                                   // 0x01DE(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnClicked;                                         // 0x01DF(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnReleased;                                        // 0x01E0(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnInputTouchBegin;                                 // 0x01E1(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnInputTouchEnd;                                   // 0x01E2(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnInputTouchEnter;                                 // 0x01E3(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnInputTouchLeave;                                 // 0x01E4(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnActorHit;                                        // 0x01E5(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnDestroyed;                                       // 0x01E6(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnEndPlay;                                         // 0x01E7(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8[0x80];                                     // 0x01E8(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UActorComponent*>                InstanceComponents;                                // 0x0268(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UActorComponent*>                BlueprintCreatedComponents;                        // 0x0278(0x0010)(ExportObject, ZeroConstructor, NonTransactional, ContainsInstancedReference, TextExportTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_288[0x10];                                     // 0x0288(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UActorComponent* AddComponent(class FName TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, const class UObject* ComponentTemplateContext, bool bDeferredFinish);
	class UActorComponent* AddComponentByClass(TSubclassOf<class UActorComponent> Class_0, bool bManualAttachment, const struct FTransform& RelativeTransform, bool bDeferredFinish);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void CreateInputComponent(TSubclassOf<class UInputComponent> InputComponentToCreate);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void DisableInput(class APlayerController* PlayerController);
	void EnableInput(class APlayerController* PlayerController);
	void FinishAddComponent(class UActorComponent* Component, bool bManualAttachment, const struct FTransform& RelativeTransform);
	void FlushNetDormancy();
	void ForceNetUpdate();
	EPhysicsReplicationMode GetPhysicsReplicationMode();
	bool GetTickableWhenPaused();
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorWorldTransformKeepScale(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, class FName InSocketName, EAttachLocation AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor* InParentActor, class FName InSocketName, EAttachLocation AttachLocationType, bool bWeldSimulatedBodies);
	bool K2_AttachToActor(class AActor* ParentActor, class FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	bool K2_AttachToComponent(class USceneComponent* Parent, class FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void K2_DestroyActor();
	void K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnReset();
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, class FName Tag);
	void OnRep_AttachmentReplication();
	void OnRep_Instigator();
	void OnRep_Owner();
	void OnRep_ReplicatedMovement();
	void OnRep_ReplicateMovement();
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int32 CinematicTextureGroups);
	void ReceiveActorBeginCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void ReceiveActorOnInputTouchBegin(const ETouchIndex FingerIndex);
	void ReceiveActorOnInputTouchEnd(const ETouchIndex FingerIndex);
	void ReceiveActorOnInputTouchEnter(const ETouchIndex FingerIndex);
	void ReceiveActorOnInputTouchLeave(const ETouchIndex FingerIndex);
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveAsyncPhysicsTick(float DeltaSeconds, float SimSeconds);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceivePointDamage(float Damage, const class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveRadialDamage(float DamageReceived, const class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveTick(float DeltaSeconds);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorScale3D(const struct FVector& NewScale3D);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorTickInterval(float TickInterval);
	void SetAutoDestroyWhenFinished(bool bVal);
	void SetLifeSpan(float InLifespan);
	void SetNetDormancy(ENetDormancy NewDormancy);
	void SetOwner(class AActor* NewOwner);
	void SetPhysicsReplicationMode(const EPhysicsReplicationMode ReplicationMode);
	void SetRayTracingGroupId(int32 InRaytracingGroupId);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetReplicates(bool bInReplicates);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetTickGroup(ETickingGroup NewTickGroup);
	void TearOff();
	void UserConstructionScript();

	bool ActorHasTag(class FName Tag) const;
	bool CanTriggerResimulation() const;
	class UActorComponent* FindComponentByTag(TSubclassOf<class UActorComponent> ComponentClass, class FName Tag) const;
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent, bool bIncludeFromChildActors) const;
	bool GetActorEnableCollision() const;
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation) const;
	struct FVector GetActorForwardVector() const;
	struct FVector GetActorRelativeScale3D() const;
	struct FVector GetActorRightVector() const;
	struct FVector GetActorScale3D() const;
	float GetActorTickInterval() const;
	float GetActorTimeDilation() const;
	struct FVector GetActorUpVector() const;
	void GetAllChildActors(TArray<class AActor*>* ChildActors, bool bIncludeDescendants) const;
	void GetAttachedActors(TArray<class AActor*>* OutActors, bool bResetArray, bool bRecursivelyIncludeAttachedActors) const;
	class AActor* GetAttachParentActor() const;
	class FName GetAttachParentSocketName() const;
	class UActorComponent* GetComponentByClass(TSubclassOf<class UActorComponent> ComponentClass) const;
	TArray<class UActorComponent*> GetComponentsByInterface(TSubclassOf<class IInterface> Interface) const;
	TArray<class UActorComponent*> GetComponentsByTag(TSubclassOf<class UActorComponent> ComponentClass, class FName Tag) const;
	float GetDistanceTo(const class AActor* OtherActor) const;
	float GetDotProductTo(const class AActor* OtherActor) const;
	float GetGameTimeSinceCreation() const;
	float GetHorizontalDistanceTo(const class AActor* OtherActor) const;
	float GetHorizontalDotProductTo(const class AActor* OtherActor) const;
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey) const;
	float GetInputAxisValue(const class FName InputAxisName) const;
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey) const;
	class APawn* GetInstigator() const;
	class AController* GetInstigatorController() const;
	class ULevel* GetLevel() const;
	struct FTransform GetLevelTransform() const;
	float GetLifeSpan() const;
	ENetRole GetLocalRole() const;
	void GetOverlappingActors(TArray<class AActor*>* OverlappingActors, TSubclassOf<class AActor> ClassFilter) const;
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents) const;
	class AActor* GetOwner() const;
	class AActor* GetParentActor() const;
	class UChildActorComponent* GetParentComponent() const;
	int32 GetRayTracingGroupId() const;
	ENetRole GetRemoteRole() const;
	float GetResimulationThreshold() const;
	float GetSquaredDistanceTo(const class AActor* OtherActor) const;
	float GetSquaredHorizontalDistanceTo(const class AActor* OtherActor) const;
	const struct FTransform GetTransform() const;
	struct FVector GetVelocity() const;
	float GetVerticalDistanceTo(const class AActor* OtherActor) const;
	bool HasAuthority() const;
	bool IsActorBeingDestroyed() const;
	bool IsActorTickEnabled() const;
	bool IsChildActor() const;
	bool IsOverlappingActor(const class AActor* Other) const;
	struct FVector K2_GetActorLocation() const;
	struct FRotator K2_GetActorRotation() const;
	TArray<class UActorComponent*> K2_GetComponentsByClass(TSubclassOf<class UActorComponent> ComponentClass) const;
	class USceneComponent* K2_GetRootComponent() const;
	bool WasRecentlyRendered(float Tolerance) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Actor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Actor")
	}
	static class AActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AActor>();
	}
};
DUMPER7_ASSERTS_AActor;

// Class Engine.Info
// 0x0000 (0x0298 - 0x0298)
class AInfo : public AActor
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Info")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Info")
	}
	static class AInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<AInfo>();
	}
};
DUMPER7_ASSERTS_AInfo;

// Class Engine.ServerStatReplicator
// 0x00C8 (0x0360 - 0x0298)
class AServerStatReplicator final : public AInfo
{
public:
	bool                                          bUpdateStatNet;                                    // 0x0298(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverwriteClientStats;                             // 0x0299(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29A[0x2];                                      // 0x029A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Channels;                                          // 0x029C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InRate;                                            // 0x02A0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OutRate;                                           // 0x02A4(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8[0x4];                                      // 0x02A8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        MaxPacketOverhead;                                 // 0x02AC(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InRateClientMax;                                   // 0x02B0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InRateClientMin;                                   // 0x02B4(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InRateClientAvg;                                   // 0x02B8(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InPacketsClientMax;                                // 0x02BC(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InPacketsClientMin;                                // 0x02C0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InPacketsClientAvg;                                // 0x02C4(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OutRateClientMax;                                  // 0x02C8(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OutRateClientMin;                                  // 0x02CC(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OutRateClientAvg;                                  // 0x02D0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OutPacketsClientMax;                               // 0x02D4(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OutPacketsClientMin;                               // 0x02D8(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OutPacketsClientAvg;                               // 0x02DC(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NetNumClients;                                     // 0x02E0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InPackets;                                         // 0x02E4(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OutPackets;                                        // 0x02E8(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InBunches;                                         // 0x02EC(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OutBunches;                                        // 0x02F0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OutLoss;                                           // 0x02F4(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InLoss;                                            // 0x02F8(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        VoiceBytesSent;                                    // 0x02FC(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        VoiceBytesRecv;                                    // 0x0300(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        VoicePacketsSent;                                  // 0x0304(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        VoicePacketsRecv;                                  // 0x0308(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PercentInVoice;                                    // 0x030C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PercentOutVoice;                                   // 0x0310(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumActorChannels;                                  // 0x0314(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumConsideredActors;                               // 0x0318(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PrioritizedActors;                                 // 0x031C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumRelevantActors;                                 // 0x0320(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumRelevantDeletedActors;                          // 0x0324(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumReplicatedActorAttempts;                        // 0x0328(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumReplicatedActors;                               // 0x032C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumActors;                                         // 0x0330(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumNetActors;                                      // 0x0334(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumDormantActors;                                  // 0x0338(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumInitiallyDormantActors;                         // 0x033C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumNetGUIDsAckd;                                   // 0x0340(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumNetGUIDsPending;                                // 0x0344(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumNetGUIDsUnAckd;                                 // 0x0348(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ObjPathBytes;                                      // 0x034C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NetGUIDOutRate;                                    // 0x0350(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NetGUIDInRate;                                     // 0x0354(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NetSaturated;                                      // 0x0358(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ServerStatReplicator")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ServerStatReplicator")
	}
	static class AServerStatReplicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<AServerStatReplicator>();
	}
};
DUMPER7_ASSERTS_AServerStatReplicator;

// Class Engine.PrimitiveComponent
// 0x02D0 (0x0570 - 0x02A0)
class UPrimitiveComponent : public USceneComponent
{
public:
	uint8                                         Pad_2A0[0x18];                                     // 0x02A0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDrawDistance;                                   // 0x02B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LDMaxDrawDistance;                                 // 0x02BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedMaxDrawDistance;                             // 0x02C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESceneDepthPriorityGroup                      DepthPriorityGroup;                                // 0x02C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESceneDepthPriorityGroup                      ViewOwnerDepthPriorityGroup;                       // 0x02C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIndirectLightingCacheQuality                 IndirectLightingCacheQuality;                      // 0x02C6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELightmapType                                 LightmapType;                                      // 0x02C7(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHLODBatchingPolicy                           HLODBatchingPolicy;                                // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableAutoLODGeneration : 1;                      // 0x02C9(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsActorTextureStreamingBuiltData : 1;             // 0x02C9(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsValidTextureStreamingBuiltData : 1;             // 0x02C9(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeverDistanceCull : 1;                            // 0x02C9(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_2C9_4 : 4;                                  // 0x02C9(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         BitPad_2CA_0 : 2;                                  // 0x02CA(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bAlwaysCreatePhysicsState : 1;                     // 0x02CA(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateOverlapEvents : 1;                        // 0x02CA(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bMultiBodyOverlap : 1;                             // 0x02CA(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTraceComplexOnMove : 1;                           // 0x02CA(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReturnMaterialOnMove : 1;                         // 0x02CA(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseViewOwnerDepthPriorityGroup : 1;               // 0x02CA(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowCullDistanceVolume : 1;                      // 0x02CB(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bVisibleInReflectionCaptures : 1;                  // 0x02CB(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bVisibleInRealTimeSkyCaptures : 1;                 // 0x02CB(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bVisibleInRayTracing : 1;                          // 0x02CB(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRenderInMainPass : 1;                             // 0x02CB(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRenderInDepthPass : 1;                            // 0x02CB(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReceivesDecals : 1;                               // 0x02CB(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHoldout : 1;                                      // 0x02CB(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOwnerNoSee : 1;                                   // 0x02CC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOnlyOwnerSee : 1;                                 // 0x02CC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTreatAsBackgroundForOcclusion : 1;                // 0x02CC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseAsOccluder : 1;                                // 0x02CC(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSelectable : 1;                                   // 0x02CC(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceMipStreaming : 1;                            // 0x02CC(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasPerInstanceHitProxies : 1;                     // 0x02CC(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CastShadow : 1;                                    // 0x02CC(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEmissiveLightSource : 1;                          // 0x02CD(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectDynamicIndirectLighting : 1;                // 0x02CD(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectIndirectLightingWhileHidden : 1;            // 0x02CD(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectDistanceFieldLighting : 1;                  // 0x02CD(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastDynamicShadow : 1;                            // 0x02CD(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastStaticShadow : 1;                             // 0x02CD(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EShadowCacheInvalidationBehavior              ShadowCacheInvalidationBehavior;                   // 0x02CE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCastVolumetricTranslucentShadow : 1;              // 0x02CF(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastContactShadow : 1;                            // 0x02CF(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSelfShadowOnly : 1;                               // 0x02CF(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastFarShadow : 1;                                // 0x02CF(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastInsetShadow : 1;                              // 0x02CF(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastCinematicShadow : 1;                          // 0x02CF(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastHiddenShadow : 1;                             // 0x02CF(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastShadowAsTwoSided : 1;                         // 0x02CF(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLightAsIfStatic : 1;                              // 0x02D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLightAttachmentsAsGroup : 1;                      // 0x02D0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeFromLightAttachmentGroup : 1;              // 0x02D0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReceiveMobileCSMShadows : 1;                      // 0x02D0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSingleSampleShadowFromStationaryLights : 1;       // 0x02D0(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreRadialImpulse : 1;                          // 0x02D0(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreRadialForce : 1;                            // 0x02D0(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bApplyImpulseOnDamage : 1;                         // 0x02D0(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReplicatePhysicsToAutonomousProxy : 1;            // 0x02D1(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFillCollisionUnderneathForNavmesh : 1;            // 0x02D1(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         AlwaysLoadOnClient : 1;                            // 0x02D1(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         AlwaysLoadOnServer : 1;                            // 0x02D1(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseEditorCompositing : 1;                         // 0x02D1(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBeingMovedByEditor : 1;                         // 0x02D1(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRenderCustomDepth : 1;                            // 0x02D1(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bVisibleInSceneCaptureOnly : 1;                    // 0x02D1(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHiddenInSceneCapture : 1;                         // 0x02D2(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRayTracingFarField : 1;                           // 0x02D2(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_2D2_2 : 1;                                  // 0x02D2(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bHasNoStreamableTextures : 1;                      // 0x02D2(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bStaticWhenNotMoveable : 1;                        // 0x02D2(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_2D3[0x1E];                                     // 0x02D3(0x001E)(Fixing Size After Last Property [ Dumper-7 ])
	EHasCustomNavigableGeometry                   bHasCustomNavigableGeometry;                       // 0x02F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F2[0x1];                                      // 0x02F2(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	ECanBeCharacterBase                           CanCharacterStepUpOn;                              // 0x02F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightingChannels                      LightingChannels;                                  // 0x02F4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RayTracingGroupId;                                 // 0x02F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VisibilityId;                                      // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomDepthStencilValue;                           // 0x0300(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomPrimitiveData                   CustomPrimitiveData;                               // 0x0308(0x0010)(Edit, NativeAccessSpecifierPrivate)
	struct FCustomPrimitiveData                   CustomPrimitiveDataInternal;                       // 0x0318(0x0010)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TranslucencySortPriority;                          // 0x0330(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslucencySortDistanceOffset;                    // 0x0334(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URuntimeVirtualTexture*>         RuntimeVirtualTextures;                            // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int8                                          VirtualTextureLodBias;                             // 0x0348(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          VirtualTextureCullMips;                            // 0x0349(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          VirtualTextureMinCoverage;                         // 0x034A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeVirtualTextureMainPassType            VirtualTextureRenderPassType;                      // 0x034B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34C[0x10];                                     // 0x034C(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoundsScale;                                       // 0x035C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_360[0x10];                                     // 0x0360(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         MoveIgnoreActors;                                  // 0x0370(0x0010)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            MoveIgnoreComponents;                              // 0x0380(0x0010)(ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_390[0x10];                                     // 0x0390(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBodyInstance                          BodyInstance;                                      // 0x03A0(0x0190)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnComponentHit;                                    // 0x0530(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnComponentBeginOverlap;                           // 0x0531(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnComponentEndOverlap;                             // 0x0532(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnComponentWake;                                   // 0x0533(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnComponentSleep;                                  // 0x0534(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_535[0x1];                                      // 0x0535(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastSparseDelegateProperty_             OnComponentPhysicsStateChanged;                    // 0x0536(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnBeginCursorOver;                                 // 0x0537(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnEndCursorOver;                                   // 0x0538(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnClicked;                                         // 0x0539(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnReleased;                                        // 0x053A(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnInputTouchBegin;                                 // 0x053B(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnInputTouchEnd;                                   // 0x053C(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnInputTouchEnter;                                 // 0x053D(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnInputTouchLeave;                                 // 0x053E(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	ERayTracingGroupCullingPriority               RayTracingGroupCullingPriority;                    // 0x053F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERendererStencilMask                          CustomDepthStencilWriteMask;                       // 0x0540(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_541[0x1F];                                     // 0x0541(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         ExcludeFromHLODLevels;                             // 0x0560(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_561[0x7];                                      // 0x0561(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    LODParentPrimitive;                                // 0x0568(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, NonPIEDuplicateTransient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AddAngularImpulseInDegrees(const struct FVector& Impulse, class FName BoneName, bool bVelChange);
	void AddAngularImpulseInRadians(const struct FVector& Impulse, class FName BoneName, bool bVelChange);
	void AddForce(const struct FVector& Force, class FName BoneName, bool bAccelChange);
	void AddForceAtLocation(const struct FVector& Force, const struct FVector& Location, class FName BoneName);
	void AddForceAtLocationLocal(const struct FVector& Force, const struct FVector& Location, class FName BoneName);
	void AddImpulse(const struct FVector& Impulse, class FName BoneName, bool bVelChange);
	void AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, class FName BoneName);
	void AddRadialForce(const struct FVector& Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff, bool bAccelChange);
	void AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff, bool bVelChange);
	void AddTorqueInDegrees(const struct FVector& Torque, class FName BoneName, bool bAccelChange);
	void AddTorqueInRadians(const struct FVector& Torque, class FName BoneName, bool bAccelChange);
	void AddVelocityChangeImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, class FName BoneName);
	void ClearMoveIgnoreActors();
	void ClearMoveIgnoreComponents();
	TArray<class AActor*> CopyArrayOfMoveIgnoreActors();
	TArray<class UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents();
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int32 ElementIndex);
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int32 ElementIndex, class UMaterialInterface* Parent);
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int32 ElementIndex, class UMaterialInterface* SourceMaterial, class FName OptionalName);
	struct FVector GetPhysicsLinearVelocity(class FName BoneName);
	struct FVector GetPhysicsLinearVelocityAtPoint(const struct FVector& Point, class FName BoneName);
	void IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore);
	void IgnoreComponentWhenMoving(class UPrimitiveComponent* Component, bool bShouldIgnore);
	void InvalidateLumenSurfaceCache();
	bool IsAnyRigidBodyAwake();
	bool K2_BoxOverlapComponent(const struct FVector& InBoxCentre, const struct FBox& InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, class FName* BoneName, struct FHitResult* OutHit);
	bool K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, class FName* BoneName, struct FHitResult* OutHit);
	bool K2_SphereOverlapComponent(const struct FVector& InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, class FName* BoneName, struct FHitResult* OutHit);
	bool K2_SphereTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, class FName* BoneName, struct FHitResult* OutHit);
	void PutRigidBodyToSleep(class FName BoneName);
	void SetAffectDistanceFieldLighting(bool NewAffectDistanceFieldLighting);
	void SetAffectDynamicIndirectLighting(bool bNewAffectDynamicIndirectLighting);
	void SetAffectIndirectLightingWhileHidden(bool bNewAffectIndirectLightingWhileHidden);
	void SetAllMassScale(float InMassScale);
	void SetAllPhysicsAngularVelocityInDegrees(const struct FVector& NewAngVel, bool bAddToCurrent);
	void SetAllPhysicsAngularVelocityInRadians(const struct FVector& NewAngVel, bool bAddToCurrent);
	void SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent);
	void SetAllUseCCD(bool InUseCCD);
	void SetAngularDamping(float InDamping);
	void SetBoundsScale(float NewBoundsScale);
	void SetCastContactShadow(bool bInCastContactShadow);
	void SetCastHiddenShadow(bool NewCastHiddenShadow);
	void SetCastInsetShadow(bool bInCastInsetShadow);
	void SetCastShadow(bool NewCastShadow);
	void SetCenterOfMass(const struct FVector& CenterOfMassOffset, class FName BoneName);
	void SetCollisionEnabled(ECollisionEnabled NewType);
	void SetCollisionObjectType(ECollisionChannel Channel);
	void SetCollisionProfileName(class FName InCollisionProfileName, bool bUpdateOverlaps);
	void SetCollisionResponseToAllChannels(ECollisionResponse NewResponse);
	void SetCollisionResponseToChannel(ECollisionChannel Channel, ECollisionResponse NewResponse);
	void SetConstraintMode(EDOFMode ConstraintMode);
	void SetCullDistance(float NewCullDistance);
	void SetCustomDepthStencilValue(int32 Value);
	void SetCustomDepthStencilWriteMask(ERendererStencilMask WriteMaskBit);
	void SetCustomPrimitiveDataFloat(int32 DataIndex, float Value);
	void SetCustomPrimitiveDataVector2(int32 DataIndex, const struct FVector2D& Value);
	void SetCustomPrimitiveDataVector3(int32 DataIndex, const struct FVector& Value);
	void SetCustomPrimitiveDataVector4(int32 DataIndex, const struct FVector4& Value);
	void SetDefaultCustomPrimitiveDataFloat(int32 DataIndex, float Value);
	void SetDefaultCustomPrimitiveDataVector2(int32 DataIndex, const struct FVector2D& Value);
	void SetDefaultCustomPrimitiveDataVector3(int32 DataIndex, const struct FVector& Value);
	void SetDefaultCustomPrimitiveDataVector4(int32 DataIndex, const struct FVector4& Value);
	void SetEmissiveLightSource(bool NewEmissiveLightSource);
	void SetEnableGravity(bool bGravityEnabled);
	void SetExcludedFromHLODLevel(EHLODLevelExclusion HLODLevel, bool bExcluded);
	void SetExcludeForSpecificHLODLevels(const TArray<int32>& InExcludeForSpecificHLODLevels);
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);
	void SetHiddenInSceneCapture(bool bValue);
	void SetHoldout(bool bNewHoldout);
	void SetIgnoreBoundsForEditorFocus(bool bIgnore);
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);
	void SetLinearDamping(float InDamping);
	void SetMassOverrideInKg(class FName BoneName, float MassInKg, bool bOverrideMass);
	void SetMassScale(class FName BoneName, float InMassScale);
	void SetMaterial(int32 ElementIndex, class UMaterialInterface* Material);
	void SetMaterialByName(class FName MaterialSlotName, class UMaterialInterface* Material);
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void SetOwnerNoSee(bool bNewOwnerNoSee);
	void SetPhysicsAngularVelocityInDegrees(const struct FVector& NewAngVel, bool bAddToCurrent, class FName BoneName);
	void SetPhysicsAngularVelocityInRadians(const struct FVector& NewAngVel, bool bAddToCurrent, class FName BoneName);
	void SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, class FName BoneName);
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, class FName BoneName);
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, class FName BoneName);
	void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
	void SetReceivesDecals(bool bNewReceivesDecals);
	void SetRenderCustomDepth(bool bValue);
	void SetRenderInDepthPass(bool bValue);
	void SetRenderInMainPass(bool bValue);
	void SetScalarParameterForCustomPrimitiveData(class FName ParameterName, float Value);
	void SetScalarParameterForDefaultCustomPrimitiveData(class FName ParameterName, float Value);
	void SetSimulatePhysics(bool bSimulate);
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);
	void SetStaticWhenNotMoveable(bool bInStaticWhenNotMoveable);
	void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset);
	void SetTranslucentSortPriority(int32 NewTranslucentSortPriority);
	void SetUseCCD(bool InUseCCD, class FName BoneName);
	void SetVectorParameterForCustomPrimitiveData(class FName ParameterName, const struct FVector4& Value);
	void SetVectorParameterForDefaultCustomPrimitiveData(class FName ParameterName, const struct FVector4& Value);
	void SetVisibleInRayTracing(bool bNewVisibleInRayTracing);
	void SetVisibleInSceneCaptureOnly(bool bValue);
	void SetWalkableSlopeOverride(const struct FWalkableSlopeOverride& NewOverride);
	void WakeAllRigidBodies();
	void WakeRigidBody(class FName BoneName);

	bool CanCharacterStepUp(class APawn* Pawn) const;
	float GetAngularDamping() const;
	struct FBodyInstanceAsyncPhysicsTickHandle GetBodyInstanceAsyncPhysicsTickHandle(class FName BoneName, bool bGetWelded, int32 Index_0) const;
	struct FVector GetCenterOfMass(class FName BoneName) const;
	float GetClosestPointOnCollision(const struct FVector& Point, struct FVector* OutPointOnBody, class FName BoneName) const;
	ECollisionEnabled GetCollisionEnabled() const;
	ECollisionChannel GetCollisionObjectType() const;
	class FName GetCollisionProfileName() const;
	ECollisionResponse GetCollisionResponseToChannel(ECollisionChannel Channel) const;
	int32 GetCustomPrimitiveDataIndexForScalarParameter(class FName ParameterName) const;
	int32 GetCustomPrimitiveDataIndexForVectorParameter(class FName ParameterName) const;
	TArray<int32> GetExcludeForSpecificHLODLevels() const;
	bool GetGenerateOverlapEvents() const;
	bool GetIgnoreBoundsForEditorFocus() const;
	struct FVector GetInertiaTensor(class FName BoneName) const;
	float GetLinearDamping() const;
	float GetMass() const;
	float GetMassScale(class FName BoneName) const;
	class UMaterialInterface* GetMaterial(int32 ElementIndex) const;
	class UMaterialInterface* GetMaterialFromCollisionFaceIndex(int32 FaceIndex, int32* SectionIndex) const;
	int32 GetNumMaterials() const;
	void GetOverlappingActors(TArray<class AActor*>* OverlappingActors, TSubclassOf<class AActor> ClassFilter) const;
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OutOverlappingComponents) const;
	struct FVector GetPhysicsAngularVelocityInDegrees(class FName BoneName) const;
	struct FVector GetPhysicsAngularVelocityInRadians(class FName BoneName) const;
	bool GetStaticWhenNotMoveable() const;
	const struct FWalkableSlopeOverride GetWalkableSlopeOverride() const;
	bool IsExcludedFromHLODLevel(EHLODLevelExclusion HLODLevel) const;
	bool IsGravityEnabled() const;
	bool IsOverlappingActor(const class AActor* Other) const;
	bool IsOverlappingComponent(const class UPrimitiveComponent* OtherComp) const;
	bool K2_IsCollisionEnabled() const;
	bool K2_IsPhysicsCollisionEnabled() const;
	bool K2_IsQueryCollisionEnabled() const;
	struct FVector ScaleByMomentOfInertia(const struct FVector& InputVector, class FName BoneName) const;
	bool WasRecentlyRendered(float Tolerance) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PrimitiveComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PrimitiveComponent")
	}
	static class UPrimitiveComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimitiveComponent>();
	}
};
DUMPER7_ASSERTS_UPrimitiveComponent;

// Class Engine.NavLinkDefinition
// 0x0028 (0x0050 - 0x0028)
class UNavLinkDefinition : public UObject
{
public:
	TArray<struct FNavigationLink>                Links;                                             // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNavigationSegmentLink>         SegmentLinks;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NavLinkDefinition")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NavLinkDefinition")
	}
	static class UNavLinkDefinition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavLinkDefinition>();
	}
};
DUMPER7_ASSERTS_UNavLinkDefinition;

// Class Engine.MaterialExpressionScreenPosition
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionScreenPosition final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionScreenPosition")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionScreenPosition")
	}
	static class UMaterialExpressionScreenPosition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionScreenPosition>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionScreenPosition;

// Class Engine.Channel
// 0x0040 (0x0068 - 0x0028)
class UChannel : public UObject
{
public:
	class UNetConnection*                         Connection;                                        // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x38];                                      // 0x0030(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Channel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Channel")
	}
	static class UChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChannel>();
	}
};
DUMPER7_ASSERTS_UChannel;

// Class Engine.VoiceChannel
// 0x0010 (0x0078 - 0x0068)
class UVoiceChannel final : public UChannel
{
public:
	uint8                                         Pad_68[0x10];                                      // 0x0068(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VoiceChannel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VoiceChannel")
	}
	static class UVoiceChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoiceChannel>();
	}
};
DUMPER7_ASSERTS_UVoiceChannel;

// Class Engine.Subsystem
// 0x0008 (0x0030 - 0x0028)
class USubsystem : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Subsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Subsystem")
	}
	static class USubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubsystem>();
	}
};
DUMPER7_ASSERTS_USubsystem;

// Class Engine.MaterialExpressionCustomOutput
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionCustomOutput : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionCustomOutput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionCustomOutput")
	}
	static class UMaterialExpressionCustomOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionCustomOutput>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionCustomOutput;

// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
// 0x0118 (0x01C8 - 0x00B0)
class UMaterialExpressionRuntimeVirtualTextureOutput final : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                       BaseColor;                                         // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Specular;                                          // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Roughness;                                         // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Normal;                                            // 0x0128(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       WorldHeight;                                       // 0x0150(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Opacity;                                           // 0x0178(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Mask;                                              // 0x01A0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionRuntimeVirtualTextureOutput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionRuntimeVirtualTextureOutput")
	}
	static class UMaterialExpressionRuntimeVirtualTextureOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionRuntimeVirtualTextureOutput>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionRuntimeVirtualTextureOutput;

// Class Engine.KismetInputLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetInputLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void CalibrateTilt();
	static bool EqualEqual_InputChordInputChord(const struct FInputChord& A, const struct FInputChord& B);
	static bool EqualEqual_KeyKey(const struct FKey& A, const struct FKey& B);
	static float GetAnalogValue(const struct FAnalogInputEvent& Input);
	static struct FKey GetKey(const struct FKeyEvent& Input);
	static struct FSlateModifierKeysState GetModifierKeysState();
	static int32 GetUserIndex(const struct FKeyEvent& Input);
	static class FText InputChord_GetDisplayName(const struct FInputChord& Key);
	static bool InputEvent_IsAltDown(const struct FInputEvent& Input);
	static bool InputEvent_IsCommandDown(const struct FInputEvent& Input);
	static bool InputEvent_IsControlDown(const struct FInputEvent& Input);
	static bool InputEvent_IsLeftAltDown(const struct FInputEvent& Input);
	static bool InputEvent_IsLeftCommandDown(const struct FInputEvent& Input);
	static bool InputEvent_IsLeftControlDown(const struct FInputEvent& Input);
	static bool InputEvent_IsLeftShiftDown(const struct FInputEvent& Input);
	static bool InputEvent_IsRepeat(const struct FInputEvent& Input);
	static bool InputEvent_IsRightAltDown(const struct FInputEvent& Input);
	static bool InputEvent_IsRightCommandDown(const struct FInputEvent& Input);
	static bool InputEvent_IsRightControlDown(const struct FInputEvent& Input);
	static bool InputEvent_IsRightShiftDown(const struct FInputEvent& Input);
	static bool InputEvent_IsShiftDown(const struct FInputEvent& Input);
	static class FText Key_GetDisplayName(const struct FKey& Key, bool bLongDisplayName);
	static EUINavigationAction Key_GetNavigationAction(const struct FKey& InKey);
	static EUINavigationAction Key_GetNavigationActionFromKey(const struct FKeyEvent& InKeyEvent);
	static EUINavigation Key_GetNavigationDirectionFromAnalog(const struct FAnalogInputEvent& InAnalogEvent);
	static EUINavigation Key_GetNavigationDirectionFromKey(const struct FKeyEvent& InKeyEvent);
	static bool Key_IsAnalog(const struct FKey& Key);
	static bool Key_IsAxis1D(const struct FKey& Key);
	static bool Key_IsAxis2D(const struct FKey& Key);
	static bool Key_IsAxis3D(const struct FKey& Key);
	static bool Key_IsButtonAxis(const struct FKey& Key);
	static bool Key_IsDigital(const struct FKey& Key);
	static bool Key_IsGamepadKey(const struct FKey& Key);
	static bool Key_IsKeyboardKey(const struct FKey& Key);
	static bool Key_IsModifierKey(const struct FKey& Key);
	static bool Key_IsMouseButton(const struct FKey& Key);
	static bool Key_IsValid(const struct FKey& Key);
	static bool Key_IsVectorAxis(const struct FKey& Key);
	static bool ModifierKeysState_IsAltDown(const struct FSlateModifierKeysState& KeysState);
	static bool ModifierKeysState_IsCommandDown(const struct FSlateModifierKeysState& KeysState);
	static bool ModifierKeysState_IsControlDown(const struct FSlateModifierKeysState& KeysState);
	static bool ModifierKeysState_IsShiftDown(const struct FSlateModifierKeysState& KeysState);
	static struct FVector2D PointerEvent_GetCursorDelta(const struct FPointerEvent& Input);
	static struct FKey PointerEvent_GetEffectingButton(const struct FPointerEvent& Input);
	static struct FVector2D PointerEvent_GetGestureDelta(const struct FPointerEvent& Input);
	static ESlateGesture PointerEvent_GetGestureType(const struct FPointerEvent& Input);
	static struct FVector2D PointerEvent_GetLastScreenSpacePosition(const struct FPointerEvent& Input);
	static int32 PointerEvent_GetPointerIndex(const struct FPointerEvent& Input);
	static struct FVector2D PointerEvent_GetScreenSpacePosition(const struct FPointerEvent& Input);
	static int32 PointerEvent_GetTouchpadIndex(const struct FPointerEvent& Input);
	static int32 PointerEvent_GetUserIndex(const struct FPointerEvent& Input);
	static float PointerEvent_GetWheelDelta(const struct FPointerEvent& Input);
	static bool PointerEvent_IsMouseButtonDown(const struct FPointerEvent& Input, const struct FKey& MouseButton);
	static bool PointerEvent_IsTouchEvent(const struct FPointerEvent& Input);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("KismetInputLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"KismetInputLibrary")
	}
	static class UKismetInputLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKismetInputLibrary>();
	}
};
DUMPER7_ASSERTS_UKismetInputLibrary;

// Class Engine.DynamicSubsystem
// 0x0000 (0x0030 - 0x0030)
class UDynamicSubsystem : public USubsystem
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DynamicSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DynamicSubsystem")
	}
	static class UDynamicSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicSubsystem>();
	}
};
DUMPER7_ASSERTS_UDynamicSubsystem;

// Class Engine.InheritableComponentHandler
// 0x0020 (0x0048 - 0x0028)
class UInheritableComponentHandler final : public UObject
{
public:
	TArray<struct FComponentOverrideRecord>       Records;                                           // 0x0028(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UActorComponent*>                UnnecessaryComponents;                             // 0x0038(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InheritableComponentHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InheritableComponentHandler")
	}
	static class UInheritableComponentHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInheritableComponentHandler>();
	}
};
DUMPER7_ASSERTS_UInheritableComponentHandler;

// Class Engine.MaterialFunctionInterfaceEditorOnlyData
// 0x0000 (0x0028 - 0x0028)
class UMaterialFunctionInterfaceEditorOnlyData : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialFunctionInterfaceEditorOnlyData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialFunctionInterfaceEditorOnlyData")
	}
	static class UMaterialFunctionInterfaceEditorOnlyData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialFunctionInterfaceEditorOnlyData>();
	}
};
DUMPER7_ASSERTS_UMaterialFunctionInterfaceEditorOnlyData;

// Class Engine.ParticleModuleTypeDataBeam2
// 0x0120 (0x0150 - 0x0030)
class UParticleModuleTypeDataBeam2 final : public UParticleModuleTypeDataBase
{
public:
	EBeam2Method                                  BeamMethod;                                        // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TextureTile;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextureTileDistance;                               // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sheets;                                            // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxBeamCount;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InterpolationPoints;                               // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAlwaysOn : 1;                                     // 0x004C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UpVectorStepSize;                                  // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BranchParentName;                                  // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionFloat                  Distance;                                          // 0x0060(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EBeamTaperMethod                              TaperMethod;                                       // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionFloat                  TaperFactor;                                       // 0x0098(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  TaperScale;                                        // 0x00C8(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         RenderGeometry : 1;                                // 0x00F8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         RenderDirectLine : 1;                              // 0x00F8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         RenderLines : 1;                                   // 0x00F8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         RenderTessellation : 1;                            // 0x00F8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F9[0x57];                                      // 0x00F9(0x0057)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleTypeDataBeam2")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleTypeDataBeam2")
	}
	static class UParticleModuleTypeDataBeam2* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleTypeDataBeam2>();
	}
};
DUMPER7_ASSERTS_UParticleModuleTypeDataBeam2;

// Class Engine.MaterialExpressionMaterialFunctionCall
// 0x0038 (0x00E8 - 0x00B0)
class UMaterialExpressionMaterialFunctionCall final : public UMaterialExpression
{
public:
	class UMaterialFunctionInterface*             MaterialFunction;                                  // 0x00B0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFunctionExpressionInput>       FunctionInputs;                                    // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFunctionExpressionOutput>      FunctionOutputs;                                   // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMaterialParameterInfo                 FunctionParameterInfo;                             // 0x00D8(0x0010)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionMaterialFunctionCall")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionMaterialFunctionCall")
	}
	static class UMaterialExpressionMaterialFunctionCall* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionMaterialFunctionCall>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionMaterialFunctionCall;

// Class Engine.LevelInstance
// 0x00A0 (0x0338 - 0x0298)
class ALevelInstance : public AActor
{
public:
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelInstanceComponent*                LevelInstanceComponent;                            // 0x02A0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UWorld>                  CookedWorldAsset;                                  // 0x02A8(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  LevelInstanceSpawnGuid;                            // 0x02D0(0x0010)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E0[0x58];                                     // 0x02E0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_LevelInstanceSpawnGuid();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelInstance")
	}
	static class ALevelInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALevelInstance>();
	}
};
DUMPER7_ASSERTS_ALevelInstance;

// Class Engine.BlueprintGeneratedClass
// 0x0168 (0x0368 - 0x0200)
class UBlueprintGeneratedClass : public UClass
{
public:
	uint8                                         Pad_200[0x8];                                      // 0x0200(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumReplicatedProperties;                           // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bHasNativizedParent : 1;                           // 0x020C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasCookedComponentInstancingData : 1;             // 0x020C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_20D[0x3];                                      // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDynamicBlueprintBinding*>       DynamicBindingObjects;                             // 0x0210(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UActorComponent*>                ComponentTemplates;                                // 0x0220(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UTimelineTemplate*>              Timelines;                                         // 0x0230(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FBPComponentClassOverride>      ComponentClassOverrides;                           // 0x0240(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFieldNotificationId>           FieldNotifies;                                     // 0x0250(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_260[0x8];                                      // 0x0260(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USimpleConstructionScript*              SimpleConstructionScript;                          // 0x0268(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInheritableComponentHandler*           InheritableComponentHandler;                       // 0x0270(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStructProperty*                        UberGraphFramePointerProperty;                     // 0x0278(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_280[0x8];                                      // 0x0280(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFunction*                              UberGraphFunction;                                 // 0x0288(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               CookedPropertyGuids;                               // 0x0290(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FBlueprintCookedComponentInstancingData> CookedComponentInstancingData; // 0x02E0(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_330[0x38];                                     // 0x0330(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BlueprintGeneratedClass")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BlueprintGeneratedClass")
	}
	static class UBlueprintGeneratedClass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintGeneratedClass>();
	}
};
DUMPER7_ASSERTS_UBlueprintGeneratedClass;

// Class Engine.PhysicsAsset
// 0x0128 (0x0150 - 0x0028)
class UPhysicsAsset final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 BoundsBodies;                                      // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USkeletalBodySetup*>             SkeletalBodySetups;                                // 0x0040(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UPhysicsConstraintTemplate*>     ConstraintSetup;                                   // 0x0050(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FPhysicsAssetSolverSettings            SolverSettings;                                    // 0x0060(0x001C)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FSolverIterations                      SolverIterations;                                  // 0x007C(0x0018)(Edit, Config, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	EPhysicsAssetSolverType                       SolverType;                                        // 0x0094(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bNotForDedicatedServer : 1;                        // 0x0095(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_96[0xA2];                                      // 0x0096(0x00A2)(Fixing Size After Last Property [ Dumper-7 ])
	class UThumbnailInfo*                         ThumbnailInfo;                                     // 0x0138(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBodySetup*>                     BodySetup;                                         // 0x0140(0x0010)(ExportObject, ZeroConstructor, Deprecated, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PhysicsAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PhysicsAsset")
	}
	static class UPhysicsAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsAsset>();
	}
};
DUMPER7_ASSERTS_UPhysicsAsset;

// Class Engine.MaterialExpressionSamplePhysicsIntegerField
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionSamplePhysicsIntegerField final : public UMaterialExpression
{
public:
	struct FExpressionInput                       WorldPosition;                                     // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	EFieldIntegerType                             FieldTarget;                                       // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSamplePhysicsIntegerField")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSamplePhysicsIntegerField")
	}
	static class UMaterialExpressionSamplePhysicsIntegerField* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSamplePhysicsIntegerField>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSamplePhysicsIntegerField;

// Class Engine.MeshComponent
// 0x0040 (0x05B0 - 0x0570)
#pragma pack(push, 0x1)
class alignas(0x10) UMeshComponent : public UPrimitiveComponent
{
public:
	TArray<class UMaterialInterface*>             OverrideMaterials;                                 // 0x0570(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     OverlayMaterial;                                   // 0x0580(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlayMaterialMaxDrawDistance;                    // 0x0588(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58C[0x14];                                     // 0x058C(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bEnableMaterialParameterCaching : 1;               // 0x05A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_5A1[0x7];                                      // 0x05A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32 CinematicTextureGroups);
	void SetOverlayMaterial(class UMaterialInterface* NewOverlayMaterial);
	void SetOverlayMaterialMaxDrawDistance(float InMaxDrawDistance);
	void SetScalarParameterValueOnMaterials(const class FName ParameterName, const float ParameterValue);
	void SetVectorParameterValueOnMaterials(const class FName ParameterName, const struct FVector& ParameterValue);

	int32 GetMaterialIndex(class FName MaterialSlotName) const;
	TArray<class UMaterialInterface*> GetMaterials() const;
	TArray<class FName> GetMaterialSlotNames() const;
	class UMaterialInterface* GetOverlayMaterial() const;
	float GetOverlayMaterialMaxDrawDistance() const;
	bool IsMaterialSlotNameValid(class FName MaterialSlotName) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MeshComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MeshComponent")
	}
	static class UMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshComponent>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_UMeshComponent;

// Class Engine.StreamableRenderAsset
// 0x00A0 (0x00C8 - 0x0028)
class UStreamableRenderAsset : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ForceMipLevelsToBeResidentTimestamp;               // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumCinematicMipLevels;                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPerQualityLevelInt                    NoRefStreamingLODBias;                             // 0x0050(0x0068)(Protected, NativeAccessSpecifierProtected)
	int32                                         StreamingIndex;                                    // 0x00B8(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         NeverStream : 1;                                   // 0x00BC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGlobalForceMipLevelsToBeResident : 1;             // 0x00BC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasStreamingUpdatePending : 1;                    // 0x00BC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceMiplevelsToBeResident : 1;                   // 0x00BC(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreStreamingMipBias : 1;                       // 0x00BC(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseCinematicMipLevels : 1;                        // 0x00BC(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_BD[0xB];                                       // 0x00BD(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetForceMipLevelsToBeResident(float Seconds, int32 CinematicLODGroupMask);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("StreamableRenderAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"StreamableRenderAsset")
	}
	static class UStreamableRenderAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStreamableRenderAsset>();
	}
};
DUMPER7_ASSERTS_UStreamableRenderAsset;

// Class Engine.Texture
// 0x0108 (0x01D0 - 0x00C8)
#pragma pack(push, 0x1)
class alignas(0x10) UTexture : public UStreamableRenderAsset
{
public:
	uint8                                         Pad_C8[0x10];                                      // 0x00C8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  LightingGuid;                                      // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LevelIndex;                                        // 0x00E8(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODBias;                                           // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureCompressionSettings                   CompressionSettings;                               // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureFilter                                Filter;                                            // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureMipLoadOptions                        MipLoadOptions;                                    // 0x00F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureCookPlatformTilingSettings            CookPlatformTilingSettings;                        // 0x00F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureGroup                                 LODGroup;                                          // 0x00F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPerPlatformFloat                      Downscale;                                         // 0x00F8(0x0004)(Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	ETextureDownscaleOptions                      DownscaleOptions;                                  // 0x00FC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SRGB : 1;                                          // 0x00FD(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNoTiling : 1;                                     // 0x00FD(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         VirtualTextureStreaming : 1;                       // 0x00FD(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CompressionYCoCg : 1;                              // 0x00FD(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNotOfflineProcessed : 1;                          // 0x00FD(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAsyncResourceReleaseHasBeenStarted : 1;           // 0x00FD(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_FE[0x2];                                       // 0x00FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAssetUserData*>                 AssetUserData;                                     // 0x0100(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_110[0xB8];                                     // 0x0110(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int64 Blueprint_GetMemorySize() const;
	void Blueprint_GetTextureSourceDiskAndMemorySize(int64* OutDiskSize, int64* OutMemorySize) const;
	bool ComputeTextureSourceChannelMinMax(struct FLinearColor* OutColorMin, struct FLinearColor* OutColorMax) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Texture")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Texture")
	}
	static class UTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTexture>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_UTexture;

// Class Engine.TextureRenderTarget
// 0x0000 (0x01D0 - 0x01D0)
class UTextureRenderTarget : public UTexture
{
public:
	float                                         TargetGamma;                                       // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TextureRenderTarget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TextureRenderTarget")
	}
	static class UTextureRenderTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextureRenderTarget>();
	}
};
DUMPER7_ASSERTS_UTextureRenderTarget;

// Class Engine.TextureRenderTargetVolume
// 0x0020 (0x01F0 - 0x01D0)
class UTextureRenderTargetVolume final : public UTextureRenderTarget
{
public:
	int32                                         SizeX;                                             // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeZ;                                             // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ClearColor;                                        // 0x01DC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPixelFormat                                  OverrideFormat;                                    // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bHDR : 1;                                          // 0x01ED(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceLinearGamma : 1;                             // 0x01ED(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1EE[0x2];                                      // 0x01EE(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TextureRenderTargetVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TextureRenderTargetVolume")
	}
	static class UTextureRenderTargetVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextureRenderTargetVolume>();
	}
};
DUMPER7_ASSERTS_UTextureRenderTargetVolume;

// Class Engine.MaterialExpressionFunctionOutput
// 0x0060 (0x0110 - 0x00B0)
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{
public:
	class FName                                   OutputName;                                        // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x00B8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortPriority;                                      // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExpressionInput                       A;                                                 // 0x00D0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bLastPreviewed : 1;                                // 0x00F8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ID;                                                // 0x00FC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionFunctionOutput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionFunctionOutput")
	}
	static class UMaterialExpressionFunctionOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionFunctionOutput>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionFunctionOutput;

// Class Engine.MaterialExpressionMaterialLayerOutput
// 0x0000 (0x0110 - 0x0110)
class UMaterialExpressionMaterialLayerOutput final : public UMaterialExpressionFunctionOutput
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionMaterialLayerOutput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionMaterialLayerOutput")
	}
	static class UMaterialExpressionMaterialLayerOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionMaterialLayerOutput>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionMaterialLayerOutput;

// Class Engine.HLODBuilder
// 0x0000 (0x0028 - 0x0028)
class UHLODBuilder : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HLODBuilder")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HLODBuilder")
	}
	static class UHLODBuilder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHLODBuilder>();
	}
};
DUMPER7_ASSERTS_UHLODBuilder;

// Class Engine.StaticMeshComponent
// 0x0080 (0x0630 - 0x05B0)
#pragma pack(push, 0x1)
class alignas(0x10) UStaticMeshComponent : public UMeshComponent
{
public:
	int32                                         ForcedLodModel;                                    // 0x05A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousLODLevel;                                  // 0x05AC(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinLOD;                                            // 0x05B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubDivisionStepSize;                               // 0x05B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMesh;                                        // 0x05B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FColor                                 WireframeColorOverride;                            // 0x05C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bForceNaniteForMasked : 1;                         // 0x05C4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisallowNanite : 1;                               // 0x05C4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceDisableNanite : 1;                           // 0x05C4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvaluateWorldPositionOffset : 1;                  // 0x05C4(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bWorldPositionOffsetWritesVelocity : 1;            // 0x05C4(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvaluateWorldPositionOffsetInRayTracing : 1;      // 0x05C4(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5C5[0x3];                                      // 0x05C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WorldPositionOffsetDisableDistance;                // 0x05C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BitPad_5CC_0 : 1;                                  // 0x05CC(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bOverrideWireframeColor : 1;                       // 0x05CC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideMinLOD : 1;                               // 0x05CC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideNavigationExport : 1;                     // 0x05CC(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceNavigationObstacle : 1;                      // 0x05CC(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisallowMeshPaintPerInstance : 1;                 // 0x05CC(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreInstanceForTextureStreaming : 1;            // 0x05CC(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideLightMapRes : 1;                          // 0x05CC(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastDistanceFieldIndirectShadow : 1;              // 0x05CD(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideDistanceFieldSelfShadowBias : 1;          // 0x05CD(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseSubDivisions : 1;                              // 0x05CD(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseDefaultCollision : 1;                          // 0x05CD(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSortTriangles : 1;                                // 0x05CD(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReverseCulling : 1;                               // 0x05CD(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5CE[0x2];                                      // 0x05CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverriddenLightMapRes;                             // 0x05D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFieldIndirectShadowMinVisibility;          // 0x05D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFieldSelfShadowBias;                       // 0x05D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StreamingDistanceMultiplier;                       // 0x05DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStaticMeshComponentLODInfo>    LODData;                                           // 0x05E0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FStreamingTextureBuildInfo>     StreamingTextureData;                              // 0x05F0(0x0010)(ZeroConstructor, NonTransactional, NativeAccessSpecifierPublic)
	struct FLightmassPrimitiveSettings            LightmassSettings;                                 // 0x0600(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_618[0x10];                                     // 0x0618(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetInitialEvaluateWorldPositionOffset();
	void OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);
	void SetDistanceFieldSelfShadowBias(float NewValue);
	void SetEvaluateWorldPositionOffset(bool NewValue);
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);
	void SetForceDisableNanite(bool bInForceDisableNanite);
	void SetForcedLodModel(int32 NewForcedLodModel);
	void SetReverseCulling(bool ReverseCulling);
	bool SetStaticMesh(class UStaticMesh* NewMesh);
	void SetWorldPositionOffsetDisableDistance(int32 NewValue);

	void GetLocalBounds(struct FVector* Min, struct FVector* Max) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("StaticMeshComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"StaticMeshComponent")
	}
	static class UStaticMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaticMeshComponent>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_UStaticMeshComponent;

// Class Engine.NavRelevantInterface
// 0x0000 (0x0000 - 0x0000)
class INavRelevantInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NavRelevantInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NavRelevantInterface")
	}
	static class INavRelevantInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INavRelevantInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INavRelevantInterface;

// Class Engine.MaterialExpressionSaturate
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionSaturate final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSaturate")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSaturate")
	}
	static class UMaterialExpressionSaturate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSaturate>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSaturate;

// Class Engine.MaterialExpressionSceneColor
// 0x0068 (0x0118 - 0x00B0)
class UMaterialExpressionSceneColor final : public UMaterialExpression
{
public:
	EMaterialSceneAttributeInputMode              InputMode;                                         // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExpressionInput                       Input;                                             // 0x00B8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       OffsetFraction;                                    // 0x00E0(0x0028)(Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ConstInput;                                        // 0x0108(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSceneColor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSceneColor")
	}
	static class UMaterialExpressionSceneColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSceneColor>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSceneColor;

// Class Engine.KismetSystemLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetSystemLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FDebugFloatHistory AddFloatHistorySample(float Value, const struct FDebugFloatHistory& FloatHistory);
	static int32 BeginTransaction(const class FString& Context, const class FText& Description, class UObject* PrimaryObject);
	static bool BoxOverlapActors(const class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, const TArray<EObjectTypeQuery>& ObjectTypes, class UClass* ActorClassFilter, const TArray<class AActor*>& ActorsToIgnore, TArray<class AActor*>* OutActors);
	static bool BoxOverlapComponents(const class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, const TArray<EObjectTypeQuery>& ObjectTypes, class UClass* ComponentClassFilter, const TArray<class AActor*>& ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	static bool BoxTraceMulti(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool BoxTraceMultiByProfile(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool BoxTraceMultiForObjects(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool BoxTraceSingle(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool BoxTraceSingleByProfile(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool BoxTraceSingleForObjects(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static void BreakARFilter(const struct FARFilter& InARFilter, TArray<class FName>* PackageNames, TArray<class FName>* PackagePaths, TArray<struct FSoftObjectPath>* SoftObjectPaths, TArray<struct FTopLevelAssetPath>* ClassPaths, TSet<struct FTopLevelAssetPath>* RecursiveClassPathsExclusionSet, TArray<class FName>* ClassNames, TSet<class FName>* RecursiveClassesExclusionSet, bool* bRecursivePaths, bool* bRecursiveClasses, bool* bIncludeOnlyOnDiskAssets);
	static void BreakSoftClassPath(const struct FSoftClassPath& InSoftClassPath, class FString* PathString);
	static void BreakSoftObjectPath(const struct FSoftObjectPath& InSoftObjectPath, class FString* PathString);
	static void BreakTopLevelAssetPath(const struct FTopLevelAssetPath& TopLevelAssetPath, class FString* PathString);
	static void CancelTransaction(const int32 Index_0);
	static bool CanLaunchURL(const class FString& URL);
	static bool CapsuleOverlapActors(const class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, const TArray<EObjectTypeQuery>& ObjectTypes, class UClass* ActorClassFilter, const TArray<class AActor*>& ActorsToIgnore, TArray<class AActor*>* OutActors);
	static bool CapsuleOverlapComponents(const class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, const TArray<EObjectTypeQuery>& ObjectTypes, class UClass* ComponentClassFilter, const TArray<class AActor*>& ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	static bool CapsuleTraceMulti(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool CapsuleTraceMultiByProfile(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool CapsuleTraceMultiForObjects(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool CapsuleTraceSingle(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool CapsuleTraceSingleByProfile(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool CapsuleTraceSingleForObjects(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static void CollectGarbage();
	static bool ComponentOverlapActors(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, const TArray<EObjectTypeQuery>& ObjectTypes, class UClass* ActorClassFilter, const TArray<class AActor*>& ActorsToIgnore, TArray<class AActor*>* OutActors);
	static bool ComponentOverlapComponents(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, const TArray<EObjectTypeQuery>& ObjectTypes, class UClass* ComponentClassFilter, const TArray<class AActor*>& ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	static void ControlScreensaver(bool bAllowScreenSaver);
	static TSoftClassPtr<class UClass> Conv_ClassToSoftClassReference(const TSubclassOf<class UObject>& Class_0);
	static struct FSoftComponentReference Conv_ComponentReferenceToSoftComponentReference(const struct FComponentReference& ComponentReference);
	static class UObject* Conv_InterfaceToObject(const TScriptInterface<class IInterface>& Interface);
	static class UClass* Conv_ObjectToClass(class UObject* Object, TSubclassOf<class UObject> Class_0);
	static TSoftObjectPtr<class UObject> Conv_ObjectToSoftObjectReference(class UObject* Object);
	static class FString Conv_PrimaryAssetIdToString(const struct FPrimaryAssetId& PrimaryAssetId);
	static class FString Conv_PrimaryAssetTypeToString(const struct FPrimaryAssetType& PrimaryAssetType);
	static TSoftClassPtr<class UClass> Conv_SoftClassPathToSoftClassRef(const struct FSoftClassPath& SoftClassPath);
	static TSubclassOf<class UObject> Conv_SoftClassReferenceToClass(const TSoftClassPtr<class UClass>& SoftClass);
	static class FString Conv_SoftClassReferenceToString(const TSoftClassPtr<class UClass>& SoftClassReference);
	static class UObject* Conv_SoftObjectReferenceToObject(const TSoftObjectPtr<class UObject>& SoftObject);
	static class FString Conv_SoftObjectReferenceToString(const TSoftObjectPtr<class UObject>& SoftObjectReference);
	static TSoftObjectPtr<class UObject> Conv_SoftObjPathToSoftObjRef(const struct FSoftObjectPath& SoftObjectPath);
	static struct FSoftClassPath Conv_SoftObjRefToSoftClassPath(TSoftClassPtr<class UClass> SoftClassReference);
	static struct FSoftObjectPath Conv_SoftObjRefToSoftObjPath(TSoftObjectPtr<class UObject> SoftObjectReference);
	static class FString ConvertToAbsolutePath(const class FString& Filename);
	static class FString ConvertToRelativePath(const class FString& Filename);
	static void CreateCopyForUndoBuffer(class UObject* ObjectToModify);
	static void Delay(const class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
	static void DelayUntilNextTick(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	static bool DoesImplementInterface(const class UObject* TestObject, TSubclassOf<class IInterface> Interface);
	static void DrawDebugArrow(const class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, float Thickness);
	static void DrawDebugBox(const class UObject* WorldContextObject, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, float Thickness);
	static void DrawDebugCamera(const class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration);
	static void DrawDebugCapsule(const class UObject* WorldContextObject, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration, float Thickness);
	static void DrawDebugCircle(const class UObject* WorldContextObject, const struct FVector& Center, float Radius, int32 NumSegments, const struct FLinearColor& LineColor, float Duration, float Thickness, const struct FVector& YAxis, const struct FVector& ZAxis, bool bDrawAxis);
	static void DrawDebugCone(const class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int32 NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness);
	static void DrawDebugConeInDegrees(const class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int32 NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness);
	static void DrawDebugCoordinateSystem(const class UObject* WorldContextObject, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration, float Thickness);
	static void DrawDebugCylinder(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, int32 Segments, const struct FLinearColor& LineColor, float Duration, float Thickness);
	static void DrawDebugFloatHistoryLocation(const class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FVector& DrawLocation, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration);
	static void DrawDebugFloatHistoryTransform(const class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FTransform& DrawTransform, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration);
	static void DrawDebugFrustum(const class UObject* WorldContextObject, const struct FTransform& FrustumTransform, const struct FLinearColor& FrustumColor, float Duration, float Thickness);
	static void DrawDebugLine(const class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness);
	static void DrawDebugPlane(const class UObject* WorldContextObject, const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration);
	static void DrawDebugPoint(const class UObject* WorldContextObject, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration);
	static void DrawDebugSphere(const class UObject* WorldContextObject, const struct FVector& Center, float Radius, int32 Segments, const struct FLinearColor& LineColor, float Duration, float Thickness);
	static void DrawDebugString(const class UObject* WorldContextObject, const struct FVector& TextLocation, const class FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration);
	static int32 EndTransaction();
	static bool EqualEqual_PrimaryAssetId(const struct FPrimaryAssetId& A, const struct FPrimaryAssetId& B);
	static bool EqualEqual_PrimaryAssetType(const struct FPrimaryAssetType& A, const struct FPrimaryAssetType& B);
	static bool EqualEqual_SoftClassReference(const TSoftClassPtr<class UClass>& A, const TSoftClassPtr<class UClass>& B);
	static bool EqualEqual_SoftObjectReference(const TSoftObjectPtr<class UObject>& A, const TSoftObjectPtr<class UObject>& B);
	static void ExecuteConsoleCommand(const class UObject* WorldContextObject, const class FString& Command, class APlayerController* SpecificPlayer);
	static void FlushDebugStrings(const class UObject* WorldContextObject);
	static void FlushPersistentDebugLines(const class UObject* WorldContextObject);
	static void ForceCloseAdBanner();
	static void GetActorBounds(const class AActor* Actor, struct FVector* Origin, struct FVector* BoxExtent);
	static void GetActorListFromComponentList(const TArray<class UPrimitiveComponent*>& ComponentList, class UClass* ActorClassFilter, TArray<class AActor*>* OutActorList);
	static int32 GetAdIDCount();
	static class FString GetBuildConfiguration();
	static class FString GetBuildVersion();
	static class FString GetClassDisplayName(const class UClass* Class_0);
	static TSubclassOf<class UObject> GetClassFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	static struct FTopLevelAssetPath GetClassTopLevelAssetPath(const class UClass* Class_0);
	static class FString GetCommandLine();
	static void GetComponentBounds(const class USceneComponent* Component, struct FVector* Origin, struct FVector* BoxExtent, float* SphereRadius);
	static bool GetConsoleVariableBoolValue(const class FString& VariableName);
	static float GetConsoleVariableFloatValue(const class FString& VariableName);
	static int32 GetConsoleVariableIntValue(const class FString& VariableName);
	static class FString GetConsoleVariableStringValue(const class FString& VariableName);
	static bool GetConvenientWindowedResolutions(TArray<struct FIntPoint>* Resolutions);
	static bool GetCurrentBundleState(const struct FPrimaryAssetId& PrimaryAssetId, bool bForceCurrentState, TArray<class FName>* OutBundles);
	static class FString GetDefaultLanguage();
	static class FString GetDefaultLocale();
	static class FString GetDeviceId();
	static class FString GetDisplayName(const class UObject* Object);
	static class FString GetEngineVersion();
	static struct FTopLevelAssetPath GetEnumTopLevelAssetPath(const class UEnum* Enum);
	static int64 GetFrameCount();
	static class FString GetGameBundleId();
	static class FString GetGameName();
	static class UTexture2D* GetGamepadButtonGlyph(const class FString& ButtonKey, int32 ControllerIndex);
	static class FString GetGamepadControllerName(int32 ControllerId);
	static double GetGameTimeInSeconds(const class UObject* WorldContextObject);
	static class FString GetLocalCurrencyCode();
	static class FString GetLocalCurrencySymbol();
	static int32 GetMinYResolutionFor3DView();
	static int32 GetMinYResolutionForUI();
	static class UObject* GetObjectFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	static class FString GetObjectName(const class UObject* Object);
	static class UObject* GetOuterObject(const class UObject* Object);
	static class FString GetPathName(const class UObject* Object);
	static class FString GetPlatformUserDir();
	static class FString GetPlatformUserName();
	static TArray<class FString> GetPreferredLanguages();
	static struct FPrimaryAssetId GetPrimaryAssetIdFromClass(TSubclassOf<class UObject> Class_0);
	static struct FPrimaryAssetId GetPrimaryAssetIdFromObject(class UObject* Object);
	static struct FPrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(TSoftClassPtr<class UClass> SoftClassReference);
	static struct FPrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(TSoftObjectPtr<class UObject> SoftObjectReference);
	static void GetPrimaryAssetIdList(const struct FPrimaryAssetType& PrimaryAssetType, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIdList);
	static void GetPrimaryAssetsWithBundleState(const TArray<class FName>& RequiredBundles, const TArray<class FName>& ExcludedBundles, const TArray<struct FPrimaryAssetType>& ValidTypes, bool bForceCurrentState, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIdList);
	static class FString GetProjectContentDirectory();
	static class FString GetProjectDirectory();
	static class FString GetProjectSavedDirectory();
	static int32 GetRenderingDetailMode();
	static int32 GetRenderingMaterialQualityLevel();
	static struct FSoftClassPath GetSoftClassPath(const class UClass* Class_0);
	static TSoftClassPtr<class UClass> GetSoftClassReferenceFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	static struct FTopLevelAssetPath GetSoftClassTopLevelAssetPath(TSoftClassPtr<class UClass> SoftClassReference);
	static struct FSoftObjectPath GetSoftObjectPath(const class UObject* Object);
	static TSoftObjectPtr<class UObject> GetSoftObjectReferenceFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	static struct FTopLevelAssetPath GetStructTopLevelAssetPath(const class UScriptStruct* Struct);
	static bool GetSupportedFullscreenResolutions(TArray<struct FIntPoint>* Resolutions);
	static class FString GetSystemPath(const class UObject* Object);
	static class FString GetUniqueDeviceId();
	static bool GetVolumeButtonsHandledBySystem();
	static bool HasMultipleLocalPlayers(const class UObject* WorldContextObject);
	static void HideAdBanner();
	static bool IsControllerAssignedToGamepad(int32 ControllerId);
	static bool IsDedicatedServer(const class UObject* WorldContextObject);
	static bool IsInterstitialAdAvailable();
	static bool IsInterstitialAdRequested();
	static bool IsLoggedIn(const class APlayerController* SpecificPlayer);
	static bool IsPackagedForDistribution();
	static bool IsScreensaverEnabled();
	static bool IsServer(const class UObject* WorldContextObject);
	static bool IsSplitScreen(const class UObject* WorldContextObject);
	static bool IsStandalone(const class UObject* WorldContextObject);
	static bool IsUnattended();
	static bool IsValid(const class UObject* Object);
	static bool IsValidClass(class UClass* Class_0);
	static bool IsValidPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	static bool IsValidPrimaryAssetType(const struct FPrimaryAssetType& PrimaryAssetType);
	static bool IsValidSoftClassReference(const TSoftClassPtr<class UClass>& SoftClassReference);
	static bool IsValidSoftObjectReference(const TSoftObjectPtr<class UObject>& SoftObjectReference);
	static void K2_ClearAndInvalidateTimerHandle(const class UObject* WorldContextObject, struct FTimerHandle& Handle);
	static void K2_ClearTimer(class UObject* Object, const class FString& FunctionName);
	static void K2_ClearTimerDelegate(TDelegate<void()> Delegate);
	static void K2_ClearTimerHandle(const class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	static float K2_GetTimerElapsedTime(class UObject* Object, const class FString& FunctionName);
	static float K2_GetTimerElapsedTimeDelegate(TDelegate<void()> Delegate);
	static float K2_GetTimerElapsedTimeHandle(const class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	static float K2_GetTimerRemainingTime(class UObject* Object, const class FString& FunctionName);
	static float K2_GetTimerRemainingTimeDelegate(TDelegate<void()> Delegate);
	static float K2_GetTimerRemainingTimeHandle(const class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	static struct FTimerHandle K2_InvalidateTimerHandle(struct FTimerHandle& Handle);
	static bool K2_IsTimerActive(class UObject* Object, const class FString& FunctionName);
	static bool K2_IsTimerActiveDelegate(TDelegate<void()> Delegate);
	static bool K2_IsTimerActiveHandle(const class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	static bool K2_IsTimerPaused(class UObject* Object, const class FString& FunctionName);
	static bool K2_IsTimerPausedDelegate(TDelegate<void()> Delegate);
	static bool K2_IsTimerPausedHandle(const class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	static bool K2_IsValidTimerHandle(const struct FTimerHandle& Handle);
	static void K2_PauseTimer(class UObject* Object, const class FString& FunctionName);
	static void K2_PauseTimerDelegate(TDelegate<void()> Delegate);
	static void K2_PauseTimerHandle(const class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	static struct FTimerHandle K2_SetTimer(class UObject* Object, const class FString& FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);
	static struct FTimerHandle K2_SetTimerDelegate(TDelegate<void()> Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);
	static struct FTimerHandle K2_SetTimerForNextTick(class UObject* Object, const class FString& FunctionName);
	static struct FTimerHandle K2_SetTimerForNextTickDelegate(TDelegate<void()> Delegate);
	static bool K2_TimerExists(class UObject* Object, const class FString& FunctionName);
	static bool K2_TimerExistsDelegate(TDelegate<void()> Delegate);
	static bool K2_TimerExistsHandle(const class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	static void K2_UnPauseTimer(class UObject* Object, const class FString& FunctionName);
	static void K2_UnPauseTimerDelegate(TDelegate<void()> Delegate);
	static void K2_UnPauseTimerHandle(const class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	static void LaunchURL(const class FString& URL);
	static bool LineTraceMulti(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool LineTraceMultiByProfile(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool LineTraceMultiForObjects(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool LineTraceSingle(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool LineTraceSingleByProfile(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool LineTraceSingleForObjects(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static void LoadAsset(const class UObject* WorldContextObject, TSoftObjectPtr<class UObject> Asset, TDelegate<void(class UObject* Loaded)> OnLoaded, const struct FLatentActionInfo& LatentInfo);
	static class UObject* LoadAsset_Blocking(TSoftObjectPtr<class UObject> Asset);
	static void LoadAssetClass(const class UObject* WorldContextObject, TSoftClassPtr<class UClass> AssetClass, TDelegate<void(TSubclassOf<class UObject> Loaded)> OnLoaded, const struct FLatentActionInfo& LatentInfo);
	static class UClass* LoadClassAsset_Blocking(TSoftClassPtr<class UClass> AssetClass);
	static void LoadInterstitialAd(int32 AdIdIndex);
	static void LogString(const class FString& InString, bool bPrintToLog);
	static struct FARFilter MakeARFilter(const TArray<class FName>& PackageNames, const TArray<class FName>& PackagePaths, const TArray<struct FSoftObjectPath>& SoftObjectPaths, const TArray<struct FTopLevelAssetPath>& ClassPaths, const TSet<struct FTopLevelAssetPath>& RecursiveClassPathsExclusionSet, const TArray<class FName>& ClassNames, const TSet<class FName>& RecursiveClassesExclusionSet, const bool bRecursivePaths, const bool bRecursiveClasses, const bool bIncludeOnlyOnDiskAssets);
	static bool MakeLiteralBool(bool Value);
	static uint8 MakeLiteralByte(uint8 Value);
	static double MakeLiteralDouble(double Value);
	static int32 MakeLiteralInt(int32 Value);
	static int64 MakeLiteralInt64(int64 Value);
	static class FName MakeLiteralName(class FName Value);
	static class FString MakeLiteralString(const class FString& Value);
	static class FText MakeLiteralText(const class FText& Value);
	static struct FSoftClassPath MakeSoftClassPath(const class FString& PathString);
	static struct FSoftObjectPath MakeSoftObjectPath(const class FString& PathString);
	static struct FTopLevelAssetPath MakeTopLevelAssetPath(const class FString& PackageName, const class FString& AssetName);
	static void MoveComponentTo(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, EMoveComponentAction MoveAction, const struct FLatentActionInfo& LatentInfo);
	static class FString NormalizeFilename(const class FString& InFilename);
	static bool NotEqual_PrimaryAssetId(const struct FPrimaryAssetId& A, const struct FPrimaryAssetId& B);
	static bool NotEqual_PrimaryAssetType(const struct FPrimaryAssetType& A, const struct FPrimaryAssetType& B);
	static bool NotEqual_SoftClassReference(const TSoftClassPtr<class UClass>& A, const TSoftClassPtr<class UClass>& B);
	static bool NotEqual_SoftObjectReference(const TSoftObjectPtr<class UObject>& A, const TSoftObjectPtr<class UObject>& B);
	static void ParseCommandLine(const class FString& InCmdLine, TArray<class FString>* OutTokens, TArray<class FString>* OutSwitches, TMap<class FString, class FString>* OutParams);
	static bool ParseParam(const class FString& InString, const class FString& InParam);
	static bool ParseParamValue(const class FString& InString, const class FString& InParam, class FString* OutValue);
	static void PrintString(const class UObject* WorldContextObject, const class FString& InString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration, const class FName Key);
	static void PrintText(const class UObject* WorldContextObject, const class FText& InText, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration, const class FName Key);
	static void PrintWarning(const class FString& InString);
	static void QuitGame(const class UObject* WorldContextObject, class APlayerController* SpecificPlayer, EQuitPreference QuitPreference, bool bIgnorePlatformRestrictions);
	static void RegisterForRemoteNotifications();
	static void ResetGamepadAssignments();
	static void ResetGamepadAssignmentToController(int32 ControllerId);
	static void RetriggerableDelay(const class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
	static void SetBoolPropertyByName(class UObject* Object, class FName PropertyName, bool Value);
	static void SetBytePropertyByName(class UObject* Object, class FName PropertyName, uint8 Value);
	static void SetClassPropertyByName(class UObject* Object, class FName PropertyName, TSubclassOf<class UObject> Value);
	static void SetCollisionProfileNameProperty(class UObject* Object, class FName PropertyName, const struct FCollisionProfileName& Value);
	static void SetColorPropertyByName(class UObject* Object, class FName PropertyName, const struct FColor& Value);
	static void SetDoublePropertyByName(class UObject* Object, class FName PropertyName, double Value);
	static void SetFieldPathPropertyByName(class UObject* Object, class FName PropertyName, const TFieldPath<class FField>& Value);
	static void SetGamepadsBlockDeviceFeedback(bool bBlock);
	static void SetInt64PropertyByName(class UObject* Object, class FName PropertyName, int64 Value);
	static void SetInterfacePropertyByName(class UObject* Object, class FName PropertyName, const TScriptInterface<class IInterface>& Value);
	static void SetIntPropertyByName(class UObject* Object, class FName PropertyName, int32 Value);
	static void SetLinearColorPropertyByName(class UObject* Object, class FName PropertyName, const struct FLinearColor& Value);
	static void SetNamePropertyByName(class UObject* Object, class FName PropertyName, const class FName& Value);
	static void SetObjectPropertyByName(class UObject* Object, class FName PropertyName, class UObject* Value);
	static void SetRotatorPropertyByName(class UObject* Object, class FName PropertyName, const struct FRotator& Value);
	static void SetSoftClassPropertyByName(class UObject* Object, class FName PropertyName, const TSoftClassPtr<class UClass>& Value);
	static void SetSoftObjectPropertyByName(class UObject* Object, class FName PropertyName, const TSoftObjectPtr<class UObject>& Value);
	static void SetStringPropertyByName(class UObject* Object, class FName PropertyName, const class FString& Value);
	static void SetStructurePropertyByName(class UObject* Object, class FName PropertyName, const struct FGenericStruct& Value);
	static void SetSuppressViewportTransitionMessage(const class UObject* WorldContextObject, bool bState);
	static void SetTextPropertyByName(class UObject* Object, class FName PropertyName, const class FText& Value);
	static void SetTransformPropertyByName(class UObject* Object, class FName PropertyName, const struct FTransform& Value);
	static void SetUserActivity(const struct FUserActivity& UserActivity);
	static void SetVector3fPropertyByName(class UObject* Object, class FName PropertyName, const struct FVector3f& Value);
	static void SetVectorPropertyByName(class UObject* Object, class FName PropertyName, const struct FVector& Value);
	static void SetVolumeButtonsHandledBySystem(bool bEnabled);
	static void SetWindowTitle(const class FText& Title);
	static void ShowAdBanner(int32 AdIdIndex, bool bShowOnBottomOfScreen);
	static void ShowInterstitialAd();
	static void ShowPlatformSpecificAchievementsScreen(const class APlayerController* SpecificPlayer);
	static void ShowPlatformSpecificLeaderboardScreen(const class FString& CategoryName);
	static void SnapshotObject(class UObject* Object);
	static bool SphereOverlapActors(const class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, const TArray<EObjectTypeQuery>& ObjectTypes, class UClass* ActorClassFilter, const TArray<class AActor*>& ActorsToIgnore, TArray<class AActor*>* OutActors);
	static bool SphereOverlapComponents(const class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, const TArray<EObjectTypeQuery>& ObjectTypes, class UClass* ComponentClassFilter, const TArray<class AActor*>& ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	static bool SphereTraceMulti(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool SphereTraceMultiByProfile(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool SphereTraceMultiForObjects(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool SphereTraceSingle(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool SphereTraceSingleByProfile(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static bool SphereTraceSingleForObjects(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static void StackTrace();
	static void TransactObject(class UObject* Object);
	static void UnloadPrimaryAsset(const struct FPrimaryAssetId& PrimaryAssetId);
	static void UnloadPrimaryAssetList(const TArray<struct FPrimaryAssetId>& PrimaryAssetIdList);
	static void UnregisterForRemoteNotifications();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("KismetSystemLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"KismetSystemLibrary")
	}
	static class UKismetSystemLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKismetSystemLibrary>();
	}
};
DUMPER7_ASSERTS_UKismetSystemLibrary;

// Class Engine.InstancedStaticMeshComponent
// 0x0140 (0x0770 - 0x0630)
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	uint8                                         Pad_628[0x8];                                      // 0x0628(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInstancedStaticMeshInstanceData> PerInstanceSMData;                               // 0x0630(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMatrix>                        PerInstancePrevTransform;                          // 0x0640(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                         NumCustomDataFloats;                               // 0x0650(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_654[0x4];                                      // 0x0654(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 PerInstanceSMCustomData;                           // 0x0658(0x0010)(Edit, EditFixedSize, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	int32                                         InstancingRandomSeed;                              // 0x0668(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66C[0x4];                                      // 0x066C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInstancedStaticMeshRandomSeed> AdditionalRandomSeeds;                             // 0x0670(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InstanceStartCullDistance;                         // 0x0680(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceEndCullDistance;                           // 0x0684(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 InstanceReorderTable;                              // 0x0688(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_698[0xC4];                                     // 0x0698(0x00C4)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumPendingLightmaps;                               // 0x075C(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FInstancedStaticMeshMappingInfo> CachedMappings;                                   // 0x0760(0x0010)(ZeroConstructor, Transient, DuplicateTransient, Protected, TextExportTransient, NativeAccessSpecifierProtected)

public:
	int32 AddInstance(const struct FTransform& InstanceTransform, bool bWorldSpace);
	TArray<int32> AddInstances(const TArray<struct FTransform>& InstanceTransforms, bool bShouldReturnIndices, bool bWorldSpace);
	int32 AddInstanceWorldSpace(const struct FTransform& WorldTransform);
	bool BatchUpdateInstancesTransform(int32 StartInstanceIndex, int32 NumInstances, const struct FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);
	bool BatchUpdateInstancesTransforms(int32 StartInstanceIndex, const TArray<struct FTransform>& NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);
	void ClearInstances();
	bool RemoveInstance(int32 InstanceIndex);
	bool RemoveInstances(const TArray<int32>& InstancesToRemove);
	void SetCullDistances(int32 StartCullDistance, int32 EndCullDistance);
	bool SetCustomDataValue(int32 InstanceIndex, int32 CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);
	void SetNumCustomDataFloats(int32 InNumCustomDataFloats);
	bool UpdateInstanceTransform(int32 InstanceIndex, const struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);

	void GetCullDistances(int32* OutStartCullDistance, int32* OutEndCullDistance) const;
	int32 GetInstanceCount() const;
	TArray<int32> GetInstancesOverlappingBox(const struct FBox& Box, bool bBoxInWorldSpace) const;
	TArray<int32> GetInstancesOverlappingSphere(const struct FVector& Center, float Radius, bool bSphereInWorldSpace) const;
	bool GetInstanceTransform(int32 InstanceIndex, struct FTransform* OutInstanceTransform, bool bWorldSpace) const;
	bool IsValidInstance(int32 InstanceIndex) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InstancedStaticMeshComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InstancedStaticMeshComponent")
	}
	static class UInstancedStaticMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInstancedStaticMeshComponent>();
	}
};
DUMPER7_ASSERTS_UInstancedStaticMeshComponent;

// Class Engine.SMInstanceElementPrimitiveCustomDataInterface
// 0x0008 (0x0030 - 0x0028)
class USMInstanceElementPrimitiveCustomDataInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SMInstanceElementPrimitiveCustomDataInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SMInstanceElementPrimitiveCustomDataInterface")
	}
	static class USMInstanceElementPrimitiveCustomDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<USMInstanceElementPrimitiveCustomDataInterface>();
	}
};
DUMPER7_ASSERTS_USMInstanceElementPrimitiveCustomDataInterface;

// Class Engine.ActiveSoundUpdateInterface
// 0x0000 (0x0000 - 0x0000)
class IActiveSoundUpdateInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActiveSoundUpdateInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActiveSoundUpdateInterface")
	}
	static class IActiveSoundUpdateInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IActiveSoundUpdateInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IActiveSoundUpdateInterface;

// Class Engine.MaterialInterfaceEditorOnlyData
// 0x0018 (0x0040 - 0x0028)
class UMaterialInterfaceEditorOnlyData : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialInterfaceEditorOnlyData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialInterfaceEditorOnlyData")
	}
	static class UMaterialInterfaceEditorOnlyData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialInterfaceEditorOnlyData>();
	}
};
DUMPER7_ASSERTS_UMaterialInterfaceEditorOnlyData;

// Class Engine.MaterialExpressionPower
// 0x0058 (0x0108 - 0x00B0)
class UMaterialExpressionPower final : public UMaterialExpression
{
public:
	struct FExpressionInput                       base;                                              // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Exponent;                                          // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstExponent;                                     // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionPower")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionPower")
	}
	static class UMaterialExpressionPower* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionPower>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionPower;

// Class Engine.MaterialExpressionStrataSlabBSDF
// 0x02E8 (0x0398 - 0x00B0)
class UMaterialExpressionStrataSlabBSDF final : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                       DiffuseAlbedo;                                     // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       F0;                                                // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       F90;                                               // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Roughness;                                         // 0x0128(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Anisotropy;                                        // 0x0150(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Normal;                                            // 0x0178(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Tangent;                                           // 0x01A0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       SSSMFP;                                            // 0x01C8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       SSSMFPScale;                                       // 0x01F0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       SSSPhaseAnisotropy;                                // 0x0218(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       EmissiveColor;                                     // 0x0240(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       SecondRoughness;                                   // 0x0268(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       SecondRoughnessWeight;                             // 0x0290(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       FuzzRoughness;                                     // 0x02B8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       FuzzAmount;                                        // 0x02E0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       FuzzColor;                                         // 0x0308(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       GlintValue;                                        // 0x0330(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       GlintUV;                                           // 0x0358(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	class USubsurfaceProfile*                     SubsurfaceProfile;                                 // 0x0380(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpecularProfile*                       SpecularProfile;                                   // 0x0388(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseSSSDiffusion : 1;                              // 0x0390(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataSlabBSDF")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataSlabBSDF")
	}
	static class UMaterialExpressionStrataSlabBSDF* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataSlabBSDF>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataSlabBSDF;

// Class Engine.HierarchicalInstancedStaticMeshComponent
// 0x0190 (0x0900 - 0x0770)
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{
public:
	uint8                                         Pad_770[0x10];                                     // 0x0770(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUseTranslatedInstanceSpace : 1;                   // 0x0780(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_781[0x7];                                      // 0x0781(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TranslatedInstanceSpaceOrigin;                     // 0x0788(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 SortedInstances;                                   // 0x07A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumBuiltInstances;                                 // 0x07B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B4[0x4];                                      // 0x07B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   BuiltInstanceBounds;                               // 0x07B8(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   UnbuiltInstanceBounds;                             // 0x07F0(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBox>                           UnbuiltInstanceBoundsList;                         // 0x0828(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bEnableDensityScaling : 1;                         // 0x0838(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_839[0x7];                                      // 0x0839(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InstanceLODDistanceScale;                          // 0x0840(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OcclusionLayerNumNodes;                            // 0x0844(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       CacheMeshExtendedBounds;                           // 0x0848(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDisableCollision;                                 // 0x0880(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_881[0x3];                                      // 0x0881(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InstanceCountToRender;                             // 0x0884(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_888[0x78];                                     // 0x0888(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetLODDistanceScale(float InLODDistanceScale);

	float GetLODDistanceScale() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HierarchicalInstancedStaticMeshComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HierarchicalInstancedStaticMeshComponent")
	}
	static class UHierarchicalInstancedStaticMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHierarchicalInstancedStaticMeshComponent>();
	}
};
DUMPER7_ASSERTS_UHierarchicalInstancedStaticMeshComponent;

// Class Engine.ParticleModuleLocationBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleLocationBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLocationBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLocationBase")
	}
	static class UParticleModuleLocationBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocationBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLocationBase;

// Class Engine.ParticleModuleLocationBoneSocket
// 0x0050 (0x0080 - 0x0030)
class UParticleModuleLocationBoneSocket final : public UParticleModuleLocationBase
{
public:
	ELocationBoneSocketSource                     SourceType;                                        // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                UniversalOffset;                                   // 0x0038(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLocationBoneSocketInfo>        SourceLocations;                                   // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	ELocationBoneSocketSelectionMethod            SelectionMethod;                                   // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUpdatePositionEachFrame : 1;                      // 0x0064(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOrientMeshEmitters : 1;                           // 0x0064(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInheritBoneVelocity : 1;                          // 0x0064(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InheritVelocityScale;                              // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkelMeshActorParamName;                            // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPreSelectedIndices;                             // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLocationBoneSocket")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLocationBoneSocket")
	}
	static class UParticleModuleLocationBoneSocket* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocationBoneSocket>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLocationBoneSocket;

// Class Engine.EdGraphNode
// 0x0070 (0x0098 - 0x0028)
class UEdGraphNode : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UEdGraphPin_Deprecated*>         DeprecatedPins;                                    // 0x0038(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         NodePosX;                                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodePosY;                                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodeWidth;                                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodeHeight;                                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENodeAdvancedPins                             AdvancedPinDisplay;                                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENodeEnabledState                             EnabledState;                                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5A[0x1];                                       // 0x005A(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         BitPad_5B_0 : 1;                                   // 0x005B(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bDisplayAsDisabled : 1;                            // 0x005B(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bUserSetEnabledState : 1;                          // 0x005B(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bIsIntermediateNode : 1;                           // 0x005B(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bHasCompilerMessage : 1;                           // 0x005B(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NodeComment;                                       // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorType;                                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMsg;                                          // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  NodeGuid;                                          // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EdGraphNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EdGraphNode")
	}
	static class UEdGraphNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEdGraphNode>();
	}
};
DUMPER7_ASSERTS_UEdGraphNode;

// Class Engine.InputPlatformSettings
// 0x0028 (0x0068 - 0x0040)
class UInputPlatformSettings final : public UPlatformSettings
{
public:
	int32                                         MaxTriggerFeedbackPosition;                        // 0x0040(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTriggerFeedbackStrength;                        // 0x0044(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTriggerVibrationTriggerPosition;                // 0x0048(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTriggerVibrationFrequency;                      // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTriggerVibrationAmplitude;                      // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHardwareDeviceIdentifier>      HardwareDevices;                                   // 0x0058(0x0010)(Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InputPlatformSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InputPlatformSettings")
	}
	static class UInputPlatformSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputPlatformSettings>();
	}
};
DUMPER7_ASSERTS_UInputPlatformSettings;

// Class Engine.MaterialExpressionSetMaterialAttributes
// 0x0020 (0x00D0 - 0x00B0)
class UMaterialExpressionSetMaterialAttributes final : public UMaterialExpression
{
public:
	TArray<struct FExpressionInput>               Inputs;                                            // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          AttributeSetTypes;                                 // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSetMaterialAttributes")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSetMaterialAttributes")
	}
	static class UMaterialExpressionSetMaterialAttributes* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSetMaterialAttributes>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSetMaterialAttributes;

// Class Engine.WorldSubsystem
// 0x0000 (0x0030 - 0x0030)
class UWorldSubsystem : public USubsystem
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldSubsystem")
	}
	static class UWorldSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldSubsystem>();
	}
};
DUMPER7_ASSERTS_UWorldSubsystem;

// Class Engine.PartitionActor
// 0x0000 (0x0298 - 0x0298)
class APartitionActor : public AActor
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PartitionActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PartitionActor")
	}
	static class APartitionActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APartitionActor>();
	}
};
DUMPER7_ASSERTS_APartitionActor;

// Class Engine.ParticleModuleAccelerationBase
// 0x0008 (0x0038 - 0x0030)
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	uint8                                         bAlwaysInWorldSpace : 1;                           // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleAccelerationBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleAccelerationBase")
	}
	static class UParticleModuleAccelerationBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleAccelerationBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleAccelerationBase;

// Class Engine.ParticleModuleAcceleration
// 0x0068 (0x00A0 - 0x0038)
class UParticleModuleAcceleration final : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                 Acceleration;                                      // 0x0038(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bApplyOwnerScale : 1;                              // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleAcceleration")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleAcceleration")
	}
	static class UParticleModuleAcceleration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleAcceleration>();
	}
};
DUMPER7_ASSERTS_UParticleModuleAcceleration;

// Class Engine.MaterialExpressionTextureBase
// 0x0010 (0x00C0 - 0x00B0)
class UMaterialExpressionTextureBase : public UMaterialExpression
{
public:
	class UTexture*                               Texture;                                           // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialSamplerType                          SamplerType;                                       // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IsDefaultMeshpaintTexture : 1;                     // 0x00B9(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTextureBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTextureBase")
	}
	static class UMaterialExpressionTextureBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTextureBase>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTextureBase;

// Class Engine.MaterialExpressionTextureSample
// 0x00F8 (0x01B8 - 0x00C0)
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{
public:
	struct FExpressionInput                       Coordinates;                                       // 0x00C0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       TextureObject;                                     // 0x00E8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       MipValue;                                          // 0x0110(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       CoordinatesDX;                                     // 0x0138(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       CoordinatesDY;                                     // 0x0160(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       AutomaticViewMipBiasValue;                         // 0x0188(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	ETextureMipValueMode                          MipValueMode;                                      // 0x01B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESamplerSourceMode                            SamplerSource;                                     // 0x01B1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AutomaticViewMipBias : 1;                          // 0x01B2(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ConstCoordinate;                                   // 0x01B3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConstMipValue;                                     // 0x01B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTextureSample")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTextureSample")
	}
	static class UMaterialExpressionTextureSample* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTextureSample>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTextureSample;

// Class Engine.MaterialExpressionTextureSampleParameter
// 0x0088 (0x0240 - 0x01B8)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	class FName                                   ParameterName;                                     // 0x01B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ExpressionGUID;                                    // 0x01C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Group;                                             // 0x01D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortPriority;                                      // 0x01D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FParameterChannelNames                 ChannelNames;                                      // 0x01E0(0x0060)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTextureSampleParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTextureSampleParameter")
	}
	static class UMaterialExpressionTextureSampleParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTextureSampleParameter>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTextureSampleParameter;

// Class Engine.MaterialExpressionTextureSampleParameter2DArray
// 0x0000 (0x0240 - 0x0240)
class UMaterialExpressionTextureSampleParameter2DArray final : public UMaterialExpressionTextureSampleParameter
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTextureSampleParameter2DArray")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTextureSampleParameter2DArray")
	}
	static class UMaterialExpressionTextureSampleParameter2DArray* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTextureSampleParameter2DArray>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTextureSampleParameter2DArray;

// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (0x0240 - 0x0240)
class UMaterialExpressionTextureSampleParameterCube final : public UMaterialExpressionTextureSampleParameter
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTextureSampleParameterCube")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTextureSampleParameterCube")
	}
	static class UMaterialExpressionTextureSampleParameterCube* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTextureSampleParameterCube>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTextureSampleParameterCube;

// Class Engine.ISMPartitionActor
// 0x0010 (0x02A8 - 0x0298)
class AISMPartitionActor : public APartitionActor
{
public:
	uint8                                         Pad_298[0x10];                                     // 0x0298(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ISMPartitionActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ISMPartitionActor")
	}
	static class AISMPartitionActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AISMPartitionActor>();
	}
};
DUMPER7_ASSERTS_AISMPartitionActor;

// Class Engine.ParticleModuleCameraBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleCameraBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleCameraBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleCameraBase")
	}
	static class UParticleModuleCameraBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleCameraBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleCameraBase;

// Class Engine.Pawn
// 0x0088 (0x0320 - 0x0298)
class APawn : public AActor
{
public:
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUseControllerRotationPitch : 1;                   // 0x02A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseControllerRotationYaw : 1;                     // 0x02A0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseControllerRotationRoll : 1;                    // 0x02A0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanAffectNavigationGeneration : 1;                // 0x02A0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_2A0_4 : 2;                                  // 0x02A0(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bIsLocalViewTarget : 1;                            // 0x02A0(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseEyeHeight;                                     // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAutoReceiveInput                             AutoPossessPlayer;                                 // 0x02A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAutoPossessAI                                AutoPossessAI;                                     // 0x02A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RemoteViewPitch;                                   // 0x02AA(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AB[0x5];                                      // 0x02AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AController>                AIControllerClass;                                 // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           PlayerState;                                       // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C0[0x8];                                      // 0x02C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            LastHitBy;                                         // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Controller;                                        // 0x02D0(0x0008)(Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            PreviousController;                                // 0x02D8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E0[0x4];                                      // 0x02E0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastSparseDelegateProperty_             ReceiveControllerChangedDelegate;                  // 0x02E4(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             ReceiveRestartedDelegate;                          // 0x02E5(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E6[0x2];                                      // 0x02E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ControlInputVector;                                // 0x02E8(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LastControlInputVector;                            // 0x0300(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UInputComponent>            OverrideInputComponentClass;                       // 0x0318(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class AActor* GetMovementBaseActor(const class APawn* Pawn);

	void AddControllerPitchInput(float Val);
	void AddControllerRollInput(float Val);
	void AddControllerYawInput(float Val);
	void AddMovementInput(const struct FVector& WorldDirection, float ScaleValue, bool bForce);
	struct FVector ConsumeMovementInputVector();
	void DetachFromControllerPendingDestroy();
	void OnRep_Controller();
	void OnRep_PlayerState();
	void PawnMakeNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker);
	void ReceiveControllerChanged(class AController* OldController, class AController* NewController);
	void ReceivePossessed(class AController* NewController);
	void ReceiveRestarted();
	void ReceiveUnpossessed(class AController* OldController);
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);
	void SpawnDefaultController();

	struct FRotator GetBaseAimRotation() const;
	class AController* GetController() const;
	struct FRotator GetControlRotation() const;
	struct FVector GetLastMovementInputVector() const;
	class APlayerController* GetLocalViewingPlayerController() const;
	class UPawnMovementComponent* GetMovementComponent() const;
	struct FVector GetNavAgentLocation() const;
	TSubclassOf<class UInputComponent> GetOverrideInputComponentClass() const;
	struct FVector GetPendingMovementInputVector() const;
	struct FPlatformUserId GetPlatformUserId() const;
	bool IsBotControlled() const;
	bool IsControlled() const;
	bool IsLocallyControlled() const;
	bool IsLocallyViewed() const;
	bool IsMoveInputIgnored() const;
	bool IsPawnControlled() const;
	bool IsPlayerControlled() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Pawn")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Pawn")
	}
	static class APawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<APawn>();
	}
};
DUMPER7_ASSERTS_APawn;

// Class Engine.Character
// 0x0360 (0x0680 - 0x0320)
#pragma pack(push, 0x1)
class alignas(0x10) ACharacter : public APawn
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0320(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCharacterMovementComponent*            CharacterMovement;                                 // 0x0328(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCapsuleComponent*                      CapsuleComponent;                                  // 0x0330(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FBasedMovementInfo                     BasedMovement;                                     // 0x0338(0x0050)(NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FBasedMovementInfo                     ReplicatedBasedMovement;                           // 0x0388(0x0050)(Net, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                         AnimRootMotionTranslationScale;                    // 0x03D8(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BaseTranslationOffset;                             // 0x03E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F8[0x8];                                      // 0x03F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  BaseRotationOffset;                                // 0x0400(0x0020)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ReplicatedServerLastTransformUpdateTimeStamp;      // 0x0420(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ReplayLastTransformUpdateTimeStamp;                // 0x0424(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         ReplicatedMovementMode;                            // 0x0428(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantizeNormal              ReplicatedGravityDirection;                        // 0x0430(0x0018)(Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInBaseReplication;                                // 0x0448(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_449[0x1F];                                     // 0x0449(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CrouchedEyeHeight;                                 // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsCrouched : 1;                                   // 0x046C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bProxyIsJumpForceApplied : 1;                      // 0x046C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPressedJump : 1;                                  // 0x046C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bClientUpdating : 1;                               // 0x046C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bClientWasFalling : 1;                             // 0x046C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bClientResimulateRootMotion : 1;                   // 0x046C(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bClientResimulateRootMotionSources : 1;            // 0x046C(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSimGravityDisabled : 1;                           // 0x046C(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bClientCheckEncroachmentOnNetUpdate : 1;           // 0x046D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bServerMoveIgnoreRootMotion : 1;                   // 0x046D(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bWasJumping : 1;                                   // 0x046D(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_46E[0x2];                                      // 0x046E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JumpKeyHoldTime;                                   // 0x0470(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpForceTimeRemaining;                            // 0x0474(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProxyJumpForceStartedTime;                         // 0x0478(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpMaxHoldTime;                                   // 0x047C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JumpMaxCount;                                      // 0x0480(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JumpCurrentCount;                                  // 0x0484(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JumpCurrentCountPreJump;                           // 0x0488(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnReachedJumpApex;                                 // 0x0490(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FHitResult& Hit)> LandedDelegate;                     // 0x04A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)> MovementModeChangedDelegate; // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity)> OnCharacterMovementUpdated; // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FRootMotionSourceGroup                 SavedRootMotion;                                   // 0x04D0(0x0048)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_518[0x8];                                      // 0x0518(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRootMotionMovementParams              ClientRootMotionParams;                            // 0x0520(0x0070)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSimulatedRootMotionReplicatedMove> RootMotionRepMoves;                            // 0x0590(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRepRootMotionMontage                  RepRootMotion;                                     // 0x05A0(0x00D8)(Net, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void CacheInitialMeshOffset(const struct FVector& MeshRelativeLocation, const struct FRotator& MeshRelativeRotation);
	void ClientAckGoodMove(float Timestamp);
	void ClientAdjustPosition(float Timestamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, class FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode);
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, class FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode);
	void ClientAdjustRootMotionSourcePosition(float Timestamp, const struct FRootMotionSourceGroup& ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, class FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode);
	void ClientCheatFly();
	void ClientCheatGhost();
	void ClientCheatWalk();
	void ClientMoveResponsePacked(const struct FCharacterMoveResponsePackedBits& PackedBits);
	void ClientVeryShortAdjustPosition(float Timestamp, const struct FVector& NewLoc, class UPrimitiveComponent* NewBase, class FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode);
	void Crouch(bool bClientSimulation);
	void Jump();
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_UpdateCustomMovement(float DeltaTime);
	void LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void OnJumped();
	void OnLanded(const struct FHitResult& Hit);
	void OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void OnRep_IsCrouched();
	void OnRep_ReplayLastTransformUpdateTimeStamp();
	void OnRep_ReplicatedBasedMovement();
	void OnRep_RootMotion();
	void OnWalkingOffLedge(const struct FVector& PreviousFloorImpactNormal, const struct FVector& PreviousFloorContactNormal, const struct FVector& PreviousLocation, float TimeDelta);
	float PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, class FName StartSectionName);
	void RootMotionDebugClientPrintOnScreen(const class FString& InString);
	void ServerMove(float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, class UPrimitiveComponent* ClientMovementBase, class FName ClientBaseBoneName, uint8 ClientMovementMode);
	void ServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, uint8 PendingFlags, uint32 View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, class UPrimitiveComponent* ClientMovementBase, class FName ClientBaseBoneName, uint8 ClientMovementMode);
	void ServerMoveDualHybridRootMotion(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, uint8 PendingFlags, uint32 View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, class UPrimitiveComponent* ClientMovementBase, class FName ClientBaseBoneName, uint8 ClientMovementMode);
	void ServerMoveDualNoBase(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, uint8 PendingFlags, uint32 View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, uint8 ClientMovementMode);
	void ServerMoveNoBase(float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, uint8 ClientMovementMode);
	void ServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize10& OldAccel, uint8 OldMoveFlags);
	void ServerMovePacked(const struct FCharacterServerMovePackedBits& PackedBits);
	void StopAnimMontage(class UAnimMontage* AnimMontage);
	void StopJumping();
	void UnCrouch(bool bClientSimulation);

	bool CanCrouch() const;
	bool CanJump() const;
	bool CanJumpInternal() const;
	float GetAnimRootMotionTranslationScale() const;
	struct FRotator GetBaseRotationOffsetRotator() const;
	struct FVector GetBaseTranslationOffset() const;
	class UAnimMontage* GetCurrentMontage() const;
	bool HasAnyRootMotion() const;
	bool IsJumpProvidingForce() const;
	bool IsPlayingNetworkedRootMotionMontage() const;
	bool IsPlayingRootMotion() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Character")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Character")
	}
	static class ACharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACharacter>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_ACharacter;

// Class Engine.Brush
// 0x0038 (0x02D0 - 0x0298)
class ABrush : public AActor
{
public:
	EBrushType                                    BrushType;                                         // 0x0298(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_299[0x3];                                      // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 BrushColor;                                        // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PolyFlags;                                         // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bColored : 1;                                      // 0x02A4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSolidWhenSelected : 1;                            // 0x02A4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPlaceableFromClassBrowser : 1;                    // 0x02A4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNotForClientOrServer : 1;                         // 0x02A4(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UModel*                                 Brush;                                             // 0x02A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrushComponent*                        BrushComponent;                                    // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bInManipulation : 1;                               // 0x02B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGeomSelection>                 SavedSelections;                                   // 0x02C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Brush")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Brush")
	}
	static class ABrush* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABrush>();
	}
};
DUMPER7_ASSERTS_ABrush;

// Class Engine.ParticleModuleEventBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleEventBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleEventBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleEventBase")
	}
	static class UParticleModuleEventBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleEventBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleEventBase;

// Class Engine.ParticleModuleEventReceiverBase
// 0x0010 (0x0040 - 0x0030)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	EParticleEventType                            EventGeneratorType;                                // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EventName;                                         // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleEventReceiverBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleEventReceiverBase")
	}
	static class UParticleModuleEventReceiverBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleEventReceiverBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleEventReceiverBase;

// Class Engine.ParticleModuleEventReceiverSpawn
// 0x00B0 (0x00F0 - 0x0040)
class UParticleModuleEventReceiverSpawn final : public UParticleModuleEventReceiverBase
{
public:
	struct FRawDistributionFloat                  SpawnCount;                                        // 0x0040(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bUseParticleTime : 1;                              // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsePSysLocation : 1;                              // 0x0070(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInheritVelocity : 1;                              // 0x0070(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionVector                 InheritVelocityScale;                              // 0x0078(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UPhysicalMaterial*>              PhysicalMaterials;                                 // 0x00D8(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         bBanPhysicalMaterials : 1;                         // 0x00E8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleEventReceiverSpawn")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleEventReceiverSpawn")
	}
	static class UParticleModuleEventReceiverSpawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleEventReceiverSpawn>();
	}
};
DUMPER7_ASSERTS_UParticleModuleEventReceiverSpawn;

// Class Engine.StaticMeshActor
// 0x0010 (0x02A8 - 0x0298)
class AStaticMeshActor : public AActor
{
public:
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bStaticMeshReplicateMovement;                      // 0x02A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicsReplicationMode                       StaticMeshPhysicsReplicationMode;                  // 0x02A1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENavDataGatheringMode                         NavigationGeometryGatheringMode;                   // 0x02A2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A3[0x5];                                      // 0x02A3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetMobility(EComponentMobility InMobility);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("StaticMeshActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"StaticMeshActor")
	}
	static class AStaticMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AStaticMeshActor>();
	}
};
DUMPER7_ASSERTS_AStaticMeshActor;

// Class Engine.DeformableInterface
// 0x0000 (0x0000 - 0x0000)
class IDeformableInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DeformableInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DeformableInterface")
	}
	static class IDeformableInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDeformableInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IDeformableInterface;

// Class Engine.ParticleModuleCameraOffset
// 0x0038 (0x0068 - 0x0030)
class UParticleModuleCameraOffset final : public UParticleModuleCameraBase
{
public:
	struct FRawDistributionFloat                  CameraOffset;                                      // 0x0030(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bSpawnTimeOnly : 1;                                // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EParticleCameraOffsetUpdateMethod             UpdateMethod;                                      // 0x0064(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleCameraOffset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleCameraOffset")
	}
	static class UParticleModuleCameraOffset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleCameraOffset>();
	}
};
DUMPER7_ASSERTS_UParticleModuleCameraOffset;

// Class Engine.MaterialExpressionSobol
// 0x0090 (0x0140 - 0x00B0)
class UMaterialExpressionSobol final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Cell;                                              // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Index_0;                                           // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Seed;                                              // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint32                                        ConstIndex;                                        // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ConstSeed;                                         // 0x0130(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSobol")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSobol")
	}
	static class UMaterialExpressionSobol* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSobol>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSobol;

// Class Engine.Volume
// 0x0000 (0x02D0 - 0x02D0)
class AVolume : public ABrush
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Volume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Volume")
	}
	static class AVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVolume>();
	}
};
DUMPER7_ASSERTS_AVolume;

// Class Engine.CameraComponent
// 0x0790 (0x0A30 - 0x02A0)
class UCameraComponent : public USceneComponent
{
public:
	float                                         FieldOfView;                                       // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrthoWidth;                                        // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrthoNearClipPlane;                                // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrthoFarClipPlane;                                 // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AspectRatio;                                       // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAspectRatioAxisConstraint                    AspectRatioAxisConstraint;                         // 0x02B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bConstrainAspectRatio : 1;                         // 0x02B5(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideAspectRatioAxisConstraint : 1;            // 0x02B5(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseFieldOfViewForLOD : 1;                         // 0x02B5(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLockToHmd : 1;                                    // 0x02B5(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsePawnControlRotation : 1;                       // 0x02B5(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ECameraProjectionMode                         ProjectionMode;                                    // 0x02B6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B7[0x69];                                     // 0x02B7(0x0069)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PostProcessBlendWeight;                            // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_324[0x2C];                                     // 0x0324(0x002C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   PostProcessSettings;                               // 0x0350(0x06E0)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)

public:
	void AddOrUpdateBlendable(TScriptInterface<class IBlendableInterface> InBlendableObject, float InWeight);
	void GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView);
	void OnCameraMeshHiddenChanged();
	void RemoveBlendable(TScriptInterface<class IBlendableInterface> InBlendableObject);
	void SetAspectRatio(float InAspectRatio);
	void SetAspectRatioAxisConstraint(EAspectRatioAxisConstraint InAspectRatioAxisConstraint);
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);
	void SetFieldOfView(float InFieldOfView);
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);
	void SetOrthoWidth(float InOrthoWidth);
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);
	void SetProjectionMode(ECameraProjectionMode InProjectionMode);
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CameraComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CameraComponent")
	}
	static class UCameraComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraComponent>();
	}
};
DUMPER7_ASSERTS_UCameraComponent;

// Class Engine.MaterialExpressionThinTranslucentMaterialOutput
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionThinTranslucentMaterialOutput final : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                       TransmittanceColor;                                // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionThinTranslucentMaterialOutput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionThinTranslucentMaterialOutput")
	}
	static class UMaterialExpressionThinTranslucentMaterialOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionThinTranslucentMaterialOutput>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionThinTranslucentMaterialOutput;

// Class Engine.NavigationDataInterface
// 0x0000 (0x0000 - 0x0000)
class INavigationDataInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NavigationDataInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NavigationDataInterface")
	}
	static class INavigationDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INavigationDataInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INavigationDataInterface;

// Class Engine.MaterialInstance
// 0x0198 (0x0248 - 0x00B0)
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                      PhysMaterial;                                      // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysicalMaterialMap[0x8];                          // 0x00B8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Parent;                                            // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaterialOverrideNanite                NaniteOverrideMaterial;                            // 0x0100(0x0038)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bHasStaticPermutationResource : 1;                 // 0x0138(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideSubsurfaceProfile : 1;                    // 0x0138(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_139[0x17];                                     // 0x0139(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FScalarParameterValue>          ScalarParameterValues;                             // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVectorParameterValue>          VectorParameterValues;                             // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDoubleVectorParameterValue>    DoubleVectorParameterValues;                       // 0x0170(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTextureParameterValue>         TextureParameterValues;                            // 0x0180(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues;        // 0x0190(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSparseVolumeTextureParameterValue> SparseVolumeTextureParameterValues;            // 0x01A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFontParameterValue>            FontParameterValues;                               // 0x01B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMaterialInstanceBasePropertyOverrides BasePropertyOverrides;                             // 0x01C0(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4[0xC];                                      // 0x01D4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStaticParameterSetRuntimeData         StaticParametersRuntime;                           // 0x01E0(0x0038)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_218[0x30];                                     // 0x0218(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialInstance")
	}
	static class UMaterialInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialInstance>();
	}
};
DUMPER7_ASSERTS_UMaterialInstance;

// Class Engine.RuntimeVirtualTextureComponent
// 0x0090 (0x0330 - 0x02A0)
class URuntimeVirtualTextureComponent final : public USceneComponent
{
public:
	TSoftObjectPtr<class AActor>                  BoundsAlignActor;                                  // 0x02A0(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSetBoundsButton;                                  // 0x02C8(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSnapBoundsToLandscape;                            // 0x02C9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2CA[0x6];                                      // 0x02CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URuntimeVirtualTexture*                 VirtualTexture;                                    // 0x02D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, TextExportTransient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableScalability;                                // 0x02D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ScalabilityGroup;                                  // 0x02DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHidePrimitives;                                   // 0x02E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVirtualTextureBuilder*                 StreamingTexture;                                  // 0x02E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         StreamLowMips;                                     // 0x02F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBuildStreamingMipsButton;                         // 0x02F4(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextureLossyCompressionAmount                LossyCompressionAmount;                            // 0x02F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseStreamingLowMipsInEditor;                      // 0x02F6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBuildDebugStreamingMips;                          // 0x02F7(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F8[0x38];                                     // 0x02F8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Invalidate(const struct FBoxSphereBounds& WorldBounds);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RuntimeVirtualTextureComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RuntimeVirtualTextureComponent")
	}
	static class URuntimeVirtualTextureComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URuntimeVirtualTextureComponent>();
	}
};
DUMPER7_ASSERTS_URuntimeVirtualTextureComponent;

// Class Engine.MaterialFunction
// 0x0028 (0x0068 - 0x0040)
class UMaterialFunction : public UMaterialFunctionInterface
{
public:
	class FString                                 Description;                                       // 0x0040(0x0010)(Edit, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserExposedCaption;                                // 0x0050(0x0010)(Edit, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bExposeToLibrary : 1;                              // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPrefixParameterNames : 1;                         // 0x0060(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableExecWire : 1;                               // 0x0060(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableNewHLSLGenerator : 1;                       // 0x0060(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialFunction")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialFunction")
	}
	static class UMaterialFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialFunction>();
	}
};
DUMPER7_ASSERTS_UMaterialFunction;

// Class Engine.MaterialFunctionMaterialLayer
// 0x0000 (0x0068 - 0x0068)
class UMaterialFunctionMaterialLayer final : public UMaterialFunction
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialFunctionMaterialLayer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialFunctionMaterialLayer")
	}
	static class UMaterialFunctionMaterialLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialFunctionMaterialLayer>();
	}
};
DUMPER7_ASSERTS_UMaterialFunctionMaterialLayer;

// Class Engine.MaterialExpressionRotateAboutAxis
// 0x00A8 (0x0158 - 0x00B0)
class UMaterialExpressionRotateAboutAxis final : public UMaterialExpression
{
public:
	struct FExpressionInput                       NormalizedRotationAxis;                            // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       RotationAngle;                                     // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       PivotPoint;                                        // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Position;                                          // 0x0128(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         Period;                                            // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionRotateAboutAxis")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionRotateAboutAxis")
	}
	static class UMaterialExpressionRotateAboutAxis* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionRotateAboutAxis>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionRotateAboutAxis;

// Class Engine.MaterialInstanceConstant
// 0x0008 (0x0250 - 0x0248)
class UMaterialInstanceConstant : public UMaterialInstance
{
public:
	class UPhysicalMaterialMask*                  PhysMaterialMask;                                  // 0x0248(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	float K2_GetScalarParameterValue(class FName ParameterName);
	class UTexture* K2_GetTextureParameterValue(class FName ParameterName);
	struct FLinearColor K2_GetVectorParameterValue(class FName ParameterName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialInstanceConstant")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialInstanceConstant")
	}
	static class UMaterialInstanceConstant* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialInstanceConstant>();
	}
};
DUMPER7_ASSERTS_UMaterialInstanceConstant;

// Class Engine.AssetImportData
// 0x0000 (0x0028 - 0x0028)
class UAssetImportData : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AssetImportData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AssetImportData")
	}
	static class UAssetImportData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetImportData>();
	}
};
DUMPER7_ASSERTS_UAssetImportData;

// Class Engine.ObjectReferencer
// 0x0010 (0x0038 - 0x0028)
class UObjectReferencer final : public UObject
{
public:
	TArray<class UObject*>                        ReferencedObjects;                                 // 0x0028(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ObjectReferencer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ObjectReferencer")
	}
	static class UObjectReferencer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObjectReferencer>();
	}
};
DUMPER7_ASSERTS_UObjectReferencer;

// Class Engine.MaterialExpressionStrataSimpleClearCoatBSDF
// 0x0118 (0x01C8 - 0x00B0)
class UMaterialExpressionStrataSimpleClearCoatBSDF final : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                       DiffuseAlbedo;                                     // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       F0;                                                // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Roughness;                                         // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       ClearCoatCoverage;                                 // 0x0128(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       ClearCoatRoughness;                                // 0x0150(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Normal;                                            // 0x0178(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       EmissiveColor;                                     // 0x01A0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataSimpleClearCoatBSDF")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataSimpleClearCoatBSDF")
	}
	static class UMaterialExpressionStrataSimpleClearCoatBSDF* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataSimpleClearCoatBSDF>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataSimpleClearCoatBSDF;

// Class Engine.AnimationDataModelNotifiesExtensions
// 0x0000 (0x0028 - 0x0028)
class UAnimationDataModelNotifiesExtensions final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimationDataModelNotifiesExtensions")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimationDataModelNotifiesExtensions")
	}
	static class UAnimationDataModelNotifiesExtensions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimationDataModelNotifiesExtensions>();
	}
};
DUMPER7_ASSERTS_UAnimationDataModelNotifiesExtensions;

// Class Engine.MaterialFunctionInstance
// 0x00A0 (0x00E0 - 0x0040)
class UMaterialFunctionInstance : public UMaterialFunctionInterface
{
public:
	class UMaterialFunctionInterface*             Parent;                                            // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialFunctionInterface*             base;                                              // 0x0048(0x0008)(ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FScalarParameterValue>          ScalarParameterValues;                             // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVectorParameterValue>          VectorParameterValues;                             // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDoubleVectorParameterValue>    DoubleVectorParameterValues;                       // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTextureParameterValue>         TextureParameterValues;                            // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFontParameterValue>            FontParameterValues;                               // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStaticSwitchParameter>         StaticSwitchParameterValues;                       // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStaticComponentMaskParameter>  StaticComponentMaskParameterValues;                // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues;        // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSparseVolumeTextureParameterValue> SparseVolumeTextureParameterValues;            // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialFunctionInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialFunctionInstance")
	}
	static class UMaterialFunctionInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialFunctionInstance>();
	}
};
DUMPER7_ASSERTS_UMaterialFunctionInstance;

// Class Engine.MaterialFunctionMaterialLayerBlendInstance
// 0x0000 (0x00E0 - 0x00E0)
class UMaterialFunctionMaterialLayerBlendInstance final : public UMaterialFunctionInstance
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialFunctionMaterialLayerBlendInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialFunctionMaterialLayerBlendInstance")
	}
	static class UMaterialFunctionMaterialLayerBlendInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialFunctionMaterialLayerBlendInstance>();
	}
};
DUMPER7_ASSERTS_UMaterialFunctionMaterialLayerBlendInstance;

// Class Engine.EngineSubsystem
// 0x0000 (0x0030 - 0x0030)
class UEngineSubsystem : public UDynamicSubsystem
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EngineSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EngineSubsystem")
	}
	static class UEngineSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEngineSubsystem>();
	}
};
DUMPER7_ASSERTS_UEngineSubsystem;

// Class Engine.SplineMeshComponent
// 0x0100 (0x0730 - 0x0630)
class USplineMeshComponent final : public UStaticMeshComponent
{
public:
	uint8                                         Pad_628[0x8];                                      // 0x0628(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSplineMeshParams                      SplineParams;                                      // 0x0630(0x00B0)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SplineUpDir;                                       // 0x06E0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SplineBoundaryMin;                                 // 0x06F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CachedMeshBodySetupGuid;                           // 0x06FC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_70C[0x4];                                      // 0x070C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBodySetup*                             BodySetup;                                         // 0x0710(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SplineBoundaryMax;                                 // 0x0718(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAllowSplineEditingPerInstance : 1;                // 0x071C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSmoothInterpRollScale : 1;                        // 0x071C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMeshDirty : 1;                                    // 0x071C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ESplineMeshAxis                               ForwardAxis;                                       // 0x071D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71E[0x2];                                      // 0x071E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VirtualTextureMainPassMaxDrawDistance;             // 0x0720(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bNeverNeedsCookedCollisionData : 1;                // 0x0724(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_725[0xB];                                      // 0x0725(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);
	void SetEndOffset(const struct FVector2D& EndOffset, bool bUpdateMesh);
	void SetEndPosition(const struct FVector& EndPos, bool bUpdateMesh);
	void SetEndRoll(float EndRoll, bool bUpdateMesh);
	void SetEndRollDegrees(float EndRollDegrees, bool bUpdateMesh);
	void SetEndScale(const struct FVector2D& EndScale, bool bUpdateMesh);
	void SetEndTangent(const struct FVector& EndTangent, bool bUpdateMesh);
	void SetForwardAxis(ESplineMeshAxis InForwardAxis, bool bUpdateMesh);
	void SetSplineUpDir(const struct FVector& InSplineUpDir, bool bUpdateMesh);
	void SetStartAndEnd(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent, bool bUpdateMesh);
	void SetStartOffset(const struct FVector2D& StartOffset, bool bUpdateMesh);
	void SetStartPosition(const struct FVector& StartPos, bool bUpdateMesh);
	void SetStartRoll(float StartRoll, bool bUpdateMesh);
	void SetStartRollDegrees(float StartRollDegrees, bool bUpdateMesh);
	void SetStartScale(const struct FVector2D& StartScale, bool bUpdateMesh);
	void SetStartTangent(const struct FVector& StartTangent, bool bUpdateMesh);
	void UpdateMesh();

	float GetBoundaryMax() const;
	float GetBoundaryMin() const;
	struct FVector2D GetEndOffset() const;
	struct FVector GetEndPosition() const;
	float GetEndRoll() const;
	struct FVector2D GetEndScale() const;
	struct FVector GetEndTangent() const;
	ESplineMeshAxis GetForwardAxis() const;
	struct FVector GetSplineUpDir() const;
	struct FVector2D GetStartOffset() const;
	struct FVector GetStartPosition() const;
	float GetStartRoll() const;
	struct FVector2D GetStartScale() const;
	struct FVector GetStartTangent() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SplineMeshComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SplineMeshComponent")
	}
	static class USplineMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USplineMeshComponent>();
	}
};
DUMPER7_ASSERTS_USplineMeshComponent;

// Class Engine.TickableWorldSubsystem
// 0x0010 (0x0040 - 0x0030)
class UTickableWorldSubsystem : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TickableWorldSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TickableWorldSubsystem")
	}
	static class UTickableWorldSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTickableWorldSubsystem>();
	}
};
DUMPER7_ASSERTS_UTickableWorldSubsystem;

// Class Engine.Interface_AnimCurveMetaData
// 0x0000 (0x0000 - 0x0000)
class IInterface_AnimCurveMetaData final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Interface_AnimCurveMetaData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Interface_AnimCurveMetaData")
	}
	static class IInterface_AnimCurveMetaData* GetDefaultObj()
	{
		return GetDefaultObjImpl<IInterface_AnimCurveMetaData>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IInterface_AnimCurveMetaData;

// Class Engine.MaterialExpressionStrataHorizontalMixing
// 0x0080 (0x0130 - 0x00B0)
class UMaterialExpressionStrataHorizontalMixing final : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                       Background;                                        // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Foreground;                                        // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Mix;                                               // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bUseParameterBlending : 1;                         // 0x0128(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataHorizontalMixing")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataHorizontalMixing")
	}
	static class UMaterialExpressionStrataHorizontalMixing* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataHorizontalMixing>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataHorizontalMixing;

// Class Engine.ParticleLODLevel
// 0x0090 (0x00B8 - 0x0028)
class UParticleLODLevel final : public UObject
{
public:
	int32                                         Level;                                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnabled : 1;                                      // 0x002C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleModuleRequired*                RequiredModule;                                    // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleModule*>                Modules;                                           // 0x0038(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UParticleModuleTypeDataBase*            TypeDataModule;                                    // 0x0048(0x0008)(ExportObject, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleModuleSpawn*                   SpawnModule;                                       // 0x0050(0x0008)(ExportObject, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleModuleEventGenerator*          EventGenerator;                                    // 0x0058(0x0008)(ExportObject, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleModuleSpawnBase*>       SpawningModules;                                   // 0x0060(0x0010)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UParticleModule*>                SpawnModules;                                      // 0x0070(0x0010)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UParticleModule*>                UpdateModules;                                     // 0x0080(0x0010)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UParticleModuleOrbit*>           OrbitModules;                                      // 0x0090(0x0010)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UParticleModuleEventReceiverBase*> EventReceiverModules;                            // 0x00A0(0x0010)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         ConvertedModules : 1;                              // 0x00B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PeakActiveParticles;                               // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleLODLevel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleLODLevel")
	}
	static class UParticleLODLevel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleLODLevel>();
	}
};
DUMPER7_ASSERTS_UParticleLODLevel;

// Class Engine.LightComponentBase
// 0x0040 (0x02E0 - 0x02A0)
#pragma pack(push, 0x1)
class alignas(0x10) ULightComponentBase : public USceneComponent
{
public:
	struct FGuid                                  LightGuid;                                         // 0x02A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x02B0(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x02B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LightColor;                                        // 0x02B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAffectsWorld : 1;                                 // 0x02BC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CastShadows : 1;                                   // 0x02BC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CastStaticShadows : 1;                             // 0x02BC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CastDynamicShadows : 1;                            // 0x02BC(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTranslucentLighting : 1;                    // 0x02BC(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTransmission : 1;                                 // 0x02BC(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastVolumetricShadow : 1;                         // 0x02BC(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastDeepShadow : 1;                               // 0x02BC(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastRaytracedShadow : 1;                          // 0x02BD(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2BE[0x2];                                      // 0x02BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	ECastRayTracedShadow                          CastRaytracedShadow;                               // 0x02C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bAffectReflection : 1;                             // 0x02C4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectGlobalIllumination : 1;                     // 0x02C4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2C5[0x3];                                      // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeepShadowLayerDistribution;                       // 0x02C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectLightingIntensity;                         // 0x02CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x02D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SamplesPerPixel;                                   // 0x02D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetAffectGlobalIllumination(bool bNewValue);
	void SetAffectReflection(bool bNewValue);
	void SetCastDeepShadow(bool bNewValue);
	void SetCastRaytracedShadow(bool bNewValue);
	void SetCastRaytracedShadows(ECastRayTracedShadow bNewValue);
	void SetCastShadows(bool bNewValue);
	void SetCastVolumetricShadow(bool bNewValue);
	void SetSamplesPerPixel(int32 NewValue);

	struct FLinearColor GetLightColor() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LightComponentBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LightComponentBase")
	}
	static class ULightComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULightComponentBase>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_ULightComponentBase;

// Class Engine.LightComponent
// 0x0110 (0x03F0 - 0x02E0)
#pragma pack(push, 0x1)
class alignas(0x10) ULightComponent : public ULightComponentBase
{
public:
	float                                         Temperature;                                       // 0x02D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDrawDistance;                                   // 0x02DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceFadeRange;                              // 0x02E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseTemperature : 1;                               // 0x02E4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2E5[0x3];                                      // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShadowMapChannel;                                  // 0x02E8(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinRoughness;                                      // 0x02F0(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpecularScale;                                     // 0x02F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowResolutionScale;                             // 0x02F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowBias;                                        // 0x02FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSlopeBias;                                   // 0x0300(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSharpen;                                     // 0x0304(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactShadowLength;                               // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ContactShadowLengthInWS : 1;                       // 0x030C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ContactShadowCastingIntensity;                     // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactShadowNonCastingIntensity;                  // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InverseSquaredFalloff : 1;                         // 0x0318(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CastTranslucentShadows : 1;                        // 0x0318(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastShadowsFromCinematicObjectsOnly : 1;          // 0x0318(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceCachedShadowsForMovablePrimitives : 1;       // 0x0318(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_319[0x3];                                      // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLightingChannels                      LightingChannels;                                  // 0x031C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_31D[0x3];                                      // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LightFunctionMaterial;                             // 0x0320(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightFunctionScale;                                // 0x0328(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureLightProfile*                   IESTexture;                                        // 0x0340(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseIESBrightness : 1;                             // 0x0348(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_349[0x3];                                      // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IESBrightnessScale;                                // 0x034C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightFunctionFadeDistance;                         // 0x0350(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisabledBrightness;                                // 0x0354(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableLightShaftBloom : 1;                        // 0x0358(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_359[0x3];                                      // 0x0359(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BloomScale;                                        // 0x035C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomThreshold;                                    // 0x0360(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomMaxBrightness;                                // 0x0364(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BloomTint;                                         // 0x0368(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRayTracedDistanceFieldShadows;                 // 0x036C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36D[0x3];                                      // 0x036D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RayStartOffsetDepthScale;                          // 0x0370(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_374[0x74];                                     // 0x0374(0x0074)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAffectTranslucentLighting(bool bNewValue);
	void SetBloomMaxBrightness(float NewValue);
	void SetBloomScale(float NewValue);
	void SetBloomThreshold(float NewValue);
	void SetBloomTint(const struct FColor& NewValue);
	void SetEnableLightShaftBloom(bool bNewValue);
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);
	void SetIESBrightnessScale(float NewValue);
	void SetIESTexture(class UTextureLightProfile* NewValue);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetIntensity(float NewIntensity);
	void SetLightColor(const struct FLinearColor& NewLightColor, bool bSRGB);
	void SetLightFColor(const struct FColor& NewLightColor);
	void SetLightFunctionDisabledBrightness(float NewValue);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);
	void SetShadowBias(float NewValue);
	void SetShadowSlopeBias(float NewValue);
	void SetSpecularScale(float NewValue);
	void SetTemperature(float NewTemperature);
	void SetTransmission(bool bNewValue);
	void SetUseIESBrightness(bool bNewValue);
	void SetUseTemperature(bool bNewValue);
	void SetVolumetricScatteringIntensity(float NewIntensity);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LightComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LightComponent")
	}
	static class ULightComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULightComponent>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_ULightComponent;

// Class Engine.LocalLightComponent
// 0x0020 (0x0410 - 0x03F0)
#pragma pack(push, 0x1)
class alignas(0x10) ULocalLightComponent : public ULightComponent
{
public:
	ELightUnits                                   IntensityUnits;                                    // 0x03E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E9[0x3];                                      // 0x03E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InverseExposureBlend;                              // 0x03EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x03F0(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationRadius;                                 // 0x03F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightmassPointLightSettings           LightmassSettings;                                 // 0x03F8(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_404[0x4];                                      // 0x0404(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static float GetUnitsConversionFactor(ELightUnits SrcUnits, ELightUnits TargetUnits, float CosHalfConeAngle);

	void SetAttenuationRadius(float NewRadius);
	void SetIntensityUnits(ELightUnits NewIntensityUnits);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LocalLightComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LocalLightComponent")
	}
	static class ULocalLightComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocalLightComponent>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_ULocalLightComponent;

// Class Engine.PointLightComponent
// 0x0010 (0x0420 - 0x0410)
class UPointLightComponent : public ULocalLightComponent
{
public:
	uint8                                         bUseInverseSquaredFalloff : 1;                     // 0x0408(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_409[0x3];                                      // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightFalloffExponent;                              // 0x040C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceRadius;                                      // 0x0410(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoftSourceRadius;                                  // 0x0414(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceLength;                                      // 0x0418(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41C[0x4];                                      // 0x041C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetInverseExposureBlend(float NewInverseExposureBlend);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
	void SetSoftSourceRadius(float bNewValue);
	void SetSourceLength(float NewValue);
	void SetSourceRadius(float bNewValue);
	void SetUseInverseSquaredFalloff(bool bNewValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PointLightComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PointLightComponent")
	}
	static class UPointLightComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPointLightComponent>();
	}
};
DUMPER7_ASSERTS_UPointLightComponent;

// Class Engine.AssetUserData
// 0x0000 (0x0028 - 0x0028)
class UAssetUserData : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AssetUserData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AssetUserData")
	}
	static class UAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetUserData>();
	}
};
DUMPER7_ASSERTS_UAssetUserData;

// Class Engine.FXSystemAsset
// 0x0020 (0x0048 - 0x0028)
class UFXSystemAsset : public UObject
{
public:
	uint32                                        MaxPoolSize;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PoolPrimeSize;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FXSystemAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FXSystemAsset")
	}
	static class UFXSystemAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFXSystemAsset>();
	}
};
DUMPER7_ASSERTS_UFXSystemAsset;

// Class Engine.TextureMipDataProviderFactory
// 0x0000 (0x0028 - 0x0028)
class UTextureMipDataProviderFactory : public UAssetUserData
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TextureMipDataProviderFactory")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TextureMipDataProviderFactory")
	}
	static class UTextureMipDataProviderFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextureMipDataProviderFactory>();
	}
};
DUMPER7_ASSERTS_UTextureMipDataProviderFactory;

// Class Engine.MaterialExpressionSceneTexelSize
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionSceneTexelSize final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSceneTexelSize")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSceneTexelSize")
	}
	static class UMaterialExpressionSceneTexelSize* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSceneTexelSize>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSceneTexelSize;

// Class Engine.RigidBodyBase
// 0x0000 (0x0298 - 0x0298)
class ARigidBodyBase : public AActor
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RigidBodyBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RigidBodyBase")
	}
	static class ARigidBodyBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARigidBodyBase>();
	}
};
DUMPER7_ASSERTS_ARigidBodyBase;

// Class Engine.PhysicsThruster
// 0x0008 (0x02A0 - 0x0298)
class APhysicsThruster final : public ARigidBodyBase
{
public:
	class UPhysicsThrusterComponent*              ThrusterComponent;                                 // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PhysicsThruster")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PhysicsThruster")
	}
	static class APhysicsThruster* GetDefaultObj()
	{
		return GetDefaultObjImpl<APhysicsThruster>();
	}
};
DUMPER7_ASSERTS_APhysicsThruster;

// Class Engine.MaterialExpressionTextureProperty
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionTextureProperty final : public UMaterialExpression
{
public:
	struct FExpressionInput                       TextureObject;                                     // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	EMaterialExposedTextureProperty               Property;                                          // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTextureProperty")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTextureProperty")
	}
	static class UMaterialExpressionTextureProperty* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTextureProperty>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTextureProperty;

// Class Engine.MaterialExpressionSetLocal
// 0x0038 (0x00E8 - 0x00B0)
class UMaterialExpressionSetLocal final : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                  Exec;                                              // 0x00B0(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Value;                                             // 0x00B8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   LocalName;                                         // 0x00E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSetLocal")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSetLocal")
	}
	static class UMaterialExpressionSetLocal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSetLocal>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSetLocal;

// Class Engine.LevelInstanceSubsystem
// 0x0190 (0x01C0 - 0x0030)
class ULevelInstanceSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x190];                                     // 0x0030(0x0190)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelInstanceSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelInstanceSubsystem")
	}
	static class ULevelInstanceSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelInstanceSubsystem>();
	}
};
DUMPER7_ASSERTS_ULevelInstanceSubsystem;

// Class Engine.CameraActor
// 0x0708 (0x09A0 - 0x0298)
class ACameraActor : public AActor
{
public:
	EAutoReceiveInput                             AutoActivateForPlayer;                             // 0x0298(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraComponent*                       CameraComponent;                                   // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                        SceneComponent;                                    // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bConstrainAspectRatio : 1;                         // 0x02B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AspectRatio;                                       // 0x02B4(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FOVAngle;                                          // 0x02B8(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PostProcessBlendWeight;                            // 0x02BC(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPostProcessSettings                   PostProcessSettings;                               // 0x02C0(0x06E0)(Deprecated, NativeAccessSpecifierPrivate)

public:
	int32 GetAutoActivatePlayerIndex() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CameraActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CameraActor")
	}
	static class ACameraActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACameraActor>();
	}
};
DUMPER7_ASSERTS_ACameraActor;

// Class Engine.ParticleModuleColorBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleColorBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleColorBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleColorBase")
	}
	static class UParticleModuleColorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleColorBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleColorBase;

// Class Engine.ParticleModuleColor
// 0x0098 (0x00C8 - 0x0030)
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                 StartColor;                                        // 0x0030(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  StartAlpha;                                        // 0x0090(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bClampAlpha : 1;                                   // 0x00C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleColor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleColor")
	}
	static class UParticleModuleColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleColor>();
	}
};
DUMPER7_ASSERTS_UParticleModuleColor;

// Class Engine.TextureAllMipDataProviderFactory
// 0x0000 (0x0028 - 0x0028)
class UTextureAllMipDataProviderFactory : public UTextureMipDataProviderFactory
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TextureAllMipDataProviderFactory")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TextureAllMipDataProviderFactory")
	}
	static class UTextureAllMipDataProviderFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextureAllMipDataProviderFactory>();
	}
};
DUMPER7_ASSERTS_UTextureAllMipDataProviderFactory;

// Class Engine.HUD
// 0x00F0 (0x0388 - 0x0298)
class AHUD : public AActor
{
public:
	class APlayerController*                      PlayerOwner;                                       // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLostFocusPaused : 1;                              // 0x02A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowHUD : 1;                                      // 0x02A0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowDebugInfo : 1;                                // 0x02A0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentTargetIndex;                                // 0x02A4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bShowHitBoxDebugInfo : 1;                          // 0x02A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowOverlays : 1;                                 // 0x02A8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableDebugTextShadow : 1;                        // 0x02A8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         PostRenderedActors;                                // 0x02B0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C0[0x8];                                      // 0x02C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           DebugDisplay;                                      // 0x02C8(0x0010)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<class FName>                           ToggledDebugCategories;                            // 0x02D8(0x0010)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	class UCanvas*                                Canvas;                                            // 0x02E8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvas*                                DebugCanvas;                                       // 0x02F0(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FDebugTextInfo>                 DebugTextList;                                     // 0x02F8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class AActor>                     ShowDebugTargetDesiredClass;                       // 0x0308(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 ShowDebugTargetActor;                              // 0x0310(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_318[0x70];                                     // 0x0318(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddDebugText(const class FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow);
	void AddHitBox(const struct FVector2D& Position, const struct FVector2D& Size, class FName InName, bool bConsumesInput, int32 Priority);
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor, float LineThickness);
	void DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);
	void DrawMaterialTriangle(class UMaterialInterface* Material, const struct FVector2D& V0_Pos, const struct FVector2D& V1_Pos, const struct FVector2D& V2_Pos, const struct FVector2D& V0_UV, const struct FVector2D& V1_UV, const struct FVector2D& V2_UV, const struct FLinearColor& V0_Color, const struct FLinearColor& V1_Color, const struct FLinearColor& V2_Color);
	void DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);
	void DrawText(const class FString& Text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition);
	void DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, EBlendMode BlendMode, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);
	void GetActorsInSelectionRectangle(TSubclassOf<class AActor> ClassFilter, const struct FVector2D& FirstPoint, const struct FVector2D& SecondPoint, TArray<class AActor*>* OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);
	void NextDebugTarget();
	void PreviousDebugTarget();
	void ReceiveDrawHUD(int32 SizeX, int32 SizeY);
	void ReceiveHitBoxBeginCursorOver(const class FName BoxName);
	void ReceiveHitBoxClick(const class FName BoxName);
	void ReceiveHitBoxEndCursorOver(const class FName BoxName);
	void ReceiveHitBoxRelease(const class FName BoxName);
	void RemoveAllDebugStrings();
	void RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText);
	void ShowDebug(class FName DebugType);
	void ShowDebugForReticleTargetToggle(TSubclassOf<class AActor> DesiredClass);
	void ShowDebugToggleSubCategory(class FName Category);
	void ShowHUD();

	void Deproject(float ScreenX, float ScreenY, struct FVector* WorldPosition, struct FVector* WorldDirection) const;
	class APawn* GetOwningPawn() const;
	class APlayerController* GetOwningPlayerController() const;
	void GetTextSize(const class FString& Text, float* OutWidth, float* OutHeight, class UFont* Font, float Scale) const;
	struct FVector Project(const struct FVector& Location, bool bClampToZeroPlane) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HUD")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HUD")
	}
	static class AHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHUD>();
	}
};
DUMPER7_ASSERTS_AHUD;

// Class Engine.DebugCameraHUD
// 0x0000 (0x0388 - 0x0388)
class ADebugCameraHUD final : public AHUD
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DebugCameraHUD")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DebugCameraHUD")
	}
	static class ADebugCameraHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADebugCameraHUD>();
	}
};
DUMPER7_ASSERTS_ADebugCameraHUD;

// Class Engine.ObjectLibrary
// 0x0080 (0x00A8 - 0x0028)
class UObjectLibrary final : public UObject
{
public:
	TSubclassOf<class UObject>                    ObjectBaseClass;                                   // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasBlueprintClasses;                              // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        Objects;                                           // 0x0038(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class UObject>>         WeakObjects;                                       // 0x0048(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bUseWeakReferences;                                // 0x0058(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFullyLoaded;                                    // 0x0059(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5A[0x4E];                                      // 0x005A(0x004E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ObjectLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ObjectLibrary")
	}
	static class UObjectLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObjectLibrary>();
	}
};
DUMPER7_ASSERTS_UObjectLibrary;

// Class Engine.MaterialExpressionDeriveNormalZ
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionDeriveNormalZ final : public UMaterialExpression
{
public:
	struct FExpressionInput                       InXY;                                              // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDeriveNormalZ")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDeriveNormalZ")
	}
	static class UMaterialExpressionDeriveNormalZ* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDeriveNormalZ>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDeriveNormalZ;

// Class Engine.SMInstanceElementHierarchyInterface
// 0x0008 (0x0030 - 0x0028)
class USMInstanceElementHierarchyInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SMInstanceElementHierarchyInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SMInstanceElementHierarchyInterface")
	}
	static class USMInstanceElementHierarchyInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<USMInstanceElementHierarchyInterface>();
	}
};
DUMPER7_ASSERTS_USMInstanceElementHierarchyInterface;

// Class Engine.AnimCurveMetaData
// 0x0078 (0x00A0 - 0x0028)
class UAnimCurveMetaData final : public UAssetUserData
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FCurveMetaData>      CurveMetaData;                                     // 0x0030(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x20];                                      // 0x0080(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimCurveMetaData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimCurveMetaData")
	}
	static class UAnimCurveMetaData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimCurveMetaData>();
	}
};
DUMPER7_ASSERTS_UAnimCurveMetaData;

// Class Engine.VectorField
// 0x0040 (0x0068 - 0x0028)
class UVectorField : public UObject
{
public:
	struct FBox                                   Bounds;                                            // 0x0028(0x0038)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VectorField")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VectorField")
	}
	static class UVectorField* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVectorField>();
	}
};
DUMPER7_ASSERTS_UVectorField;

// Class Engine.VectorFieldAnimated
// 0x0040 (0x00A8 - 0x0068)
class UVectorFieldAnimated final : public UVectorField
{
public:
	class UTexture2D*                             Texture;                                           // 0x0068(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVectorFieldConstructionOp                    ConstructionOp;                                    // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VolumeSizeX;                                       // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VolumeSizeY;                                       // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VolumeSizeZ;                                       // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubImagesX;                                        // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubImagesY;                                        // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameCount;                                        // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FramesPerSecond;                                   // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLoop : 1;                                         // 0x0090(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVectorFieldStatic*                     NoiseField;                                        // 0x0098(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseScale;                                        // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseMax;                                          // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VectorFieldAnimated")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VectorFieldAnimated")
	}
	static class UVectorFieldAnimated* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVectorFieldAnimated>();
	}
};
DUMPER7_ASSERTS_UVectorFieldAnimated;

// Class Engine.BlueprintAsyncActionBase
// 0x0008 (0x0030 - 0x0028)
class UBlueprintAsyncActionBase : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Activate();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BlueprintAsyncActionBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BlueprintAsyncActionBase")
	}
	static class UBlueprintAsyncActionBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintAsyncActionBase>();
	}
};
DUMPER7_ASSERTS_UBlueprintAsyncActionBase;

// Class Engine.EngineCustomTimeStep
// 0x0000 (0x0028 - 0x0028)
class UEngineCustomTimeStep : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EngineCustomTimeStep")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EngineCustomTimeStep")
	}
	static class UEngineCustomTimeStep* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEngineCustomTimeStep>();
	}
};
DUMPER7_ASSERTS_UEngineCustomTimeStep;

// Class Engine.PoseWatchElement
// 0x0000 (0x0028 - 0x0028)
class UPoseWatchElement : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PoseWatchElement")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PoseWatchElement")
	}
	static class UPoseWatchElement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseWatchElement>();
	}
};
DUMPER7_ASSERTS_UPoseWatchElement;

// Class Engine.TimecodeProvider
// 0x0008 (0x0030 - 0x0028)
class UTimecodeProvider : public UObject
{
public:
	float                                         FrameDelay;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FetchAndUpdate();
	bool FetchTimecode(struct FQualifiedFrameTime* OutFrameTime);

	struct FQualifiedFrameTime GetDelayedQualifiedFrameTime() const;
	struct FTimecode GetDelayedTimecode() const;
	struct FFrameRate GetFrameRate() const;
	struct FQualifiedFrameTime GetQualifiedFrameTime() const;
	ETimecodeProviderSynchronizationState GetSynchronizationState() const;
	struct FTimecode GetTimecode() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TimecodeProvider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TimecodeProvider")
	}
	static class UTimecodeProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimecodeProvider>();
	}
};
DUMPER7_ASSERTS_UTimecodeProvider;

// Class Engine.BlueprintCore
// 0x0028 (0x0050 - 0x0028)
class UBlueprintCore : public UObject
{
public:
	TSubclassOf<class UObject>                    SkeletonGeneratedClass;                            // 0x0028(0x0008)(ZeroConstructor, Transient, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    GeneratedClass;                                    // 0x0030(0x0008)(ZeroConstructor, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLegacyNeedToPurgeSkelRefs;                        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  BlueprintGuid;                                     // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BlueprintCore")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BlueprintCore")
	}
	static class UBlueprintCore* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintCore>();
	}
};
DUMPER7_ASSERTS_UBlueprintCore;

// Class Engine.Blueprint
// 0x0058 (0x00A8 - 0x0050)
class UBlueprint : public UBlueprintCore
{
public:
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    ParentClass;                                       // 0x0058(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlueprintType                                BlueprintType;                                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRecompileOnLoad : 1;                              // 0x0061(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasBeenRegenerated : 1;                           // 0x0061(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsRegeneratingOnLoad : 1;                         // 0x0061(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BlueprintSystemVersion;                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USimpleConstructionScript*              SimpleConstructionScript;                          // 0x0068(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UActorComponent*>                ComponentTemplates;                                // 0x0070(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UTimelineTemplate*>              Timelines;                                         // 0x0080(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FBPComponentClassOverride>      ComponentClassOverrides;                           // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UInheritableComponentHandler*           InheritableComponentHandler;                       // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Blueprint")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Blueprint")
	}
	static class UBlueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprint>();
	}
};
DUMPER7_ASSERTS_UBlueprint;

// Class Engine.KismetStringTableLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetStringTableLibrary final : public UBlueprintFunctionLibrary
{
public:
	static TArray<class FString> GetKeysFromStringTable(const class FName TableId);
	static TArray<class FName> GetMetaDataIdsFromStringTableEntry(const class FName TableId, const class FString& Key);
	static TArray<class FName> GetRegisteredStringTables();
	static class FString GetTableEntryMetaData(const class FName TableId, const class FString& Key, const class FName MetadataId);
	static class FString GetTableEntrySourceString(const class FName TableId, const class FString& Key);
	static class FString GetTableNamespace(const class FName TableId);
	static bool IsRegisteredTableEntry(const class FName TableId, const class FString& Key);
	static bool IsRegisteredTableId(const class FName TableId);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("KismetStringTableLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"KismetStringTableLibrary")
	}
	static class UKismetStringTableLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKismetStringTableLibrary>();
	}
};
DUMPER7_ASSERTS_UKismetStringTableLibrary;

// Class Engine.EdGraph
// 0x0038 (0x0060 - 0x0028)
class UEdGraph : public UObject
{
public:
	TSubclassOf<class UEdGraphSchema>             Schema;                                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UEdGraphNode*>                   Nodes;                                             // 0x0030(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         bEditable : 1;                                     // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowDeletion : 1;                                // 0x0040(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowRenaming : 1;                                // 0x0040(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_41[0x1F];                                      // 0x0041(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EdGraph")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EdGraph")
	}
	static class UEdGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEdGraph>();
	}
};
DUMPER7_ASSERTS_UEdGraph;

// Class Engine.DebugDrawComponent
// 0x0050 (0x05C0 - 0x0570)
class UDebugDrawComponent : public UPrimitiveComponent
{
public:
	uint8                                         Pad_570[0x50];                                     // 0x0570(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DebugDrawComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DebugDrawComponent")
	}
	static class UDebugDrawComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDebugDrawComponent>();
	}
};
DUMPER7_ASSERTS_UDebugDrawComponent;

// Class Engine.LevelInstancePivot
// 0x0008 (0x02A0 - 0x0298)
class ALevelInstancePivot final : public AActor
{
public:
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelInstancePivot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelInstancePivot")
	}
	static class ALevelInstancePivot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALevelInstancePivot>();
	}
};
DUMPER7_ASSERTS_ALevelInstancePivot;

// Class Engine.ForceFeedbackComponent
// 0x00F0 (0x0390 - 0x02A0)
class UForceFeedbackComponent final : public USceneComponent
{
public:
	class UForceFeedbackEffect*                   ForceFeedbackEffect;                               // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAutoDestroy : 1;                                  // 0x02A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStopWhenOwnerDestroyed : 1;                       // 0x02A8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLooping : 1;                                      // 0x02A8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreTimeDilation : 1;                           // 0x02A8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideAttenuation : 1;                          // 0x02A8(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IntensityMultiplier;                               // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackAttenuation*              AttenuationSettings;                               // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FForceFeedbackAttenuationSettings      AttenuationOverrides;                              // 0x02B8(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UForceFeedbackComponent* ForceFeedbackComponent)> OnForceFeedbackFinished; // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AdjustAttenuation(const struct FForceFeedbackAttenuationSettings& InAttenuationSettings);
	void Play(float StartTime);
	void SetForceFeedbackEffect(class UForceFeedbackEffect* NewForceFeedbackEffect);
	void SetIntensityMultiplier(float NewIntensityMultiplier);
	void Stop();

	bool BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings* OutAttenuationSettings) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ForceFeedbackComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ForceFeedbackComponent")
	}
	static class UForceFeedbackComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UForceFeedbackComponent>();
	}
};
DUMPER7_ASSERTS_UForceFeedbackComponent;

// Class Engine.AnimNotify
// 0x0010 (0x0038 - 0x0028)
class UAnimNotify : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetDefaultTriggerWeightThreshold() const;
	class FString GetNotifyName() const;
	bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, const struct FAnimNotifyEventReference& EventReference) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimNotify")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimNotify")
	}
	static class UAnimNotify* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify>();
	}
};
DUMPER7_ASSERTS_UAnimNotify;

// Class Engine.GameStateBase
// 0x0058 (0x02F0 - 0x0298)
class AGameStateBase : public AInfo
{
public:
	TSubclassOf<class AGameModeBase>              GameModeClass;                                     // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameModeBase*                          AuthorityGameMode;                                 // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASpectatorPawn>             SpectatorClass;                                    // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerState*>                   PlayerArray;                                       // 0x02B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bReplicatedHasBegunPlay;                           // 0x02C0(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReplicatedWorldTimeSeconds;                        // 0x02C4(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        ReplicatedWorldTimeSecondsDouble;                  // 0x02C8(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ServerWorldTimeSecondsDelta;                       // 0x02D0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ServerWorldTimeSecondsUpdateFrequency;             // 0x02D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D8[0x18];                                     // 0x02D8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_GameModeClass();
	void OnRep_ReplicatedHasBegunPlay();
	void OnRep_ReplicatedWorldTimeSeconds();
	void OnRep_ReplicatedWorldTimeSecondsDouble();
	void OnRep_SpectatorClass();

	float GetPlayerRespawnDelay(class AController* Controller) const;
	float GetPlayerStartTime(class AController* Controller) const;
	double GetServerWorldTimeSeconds() const;
	bool HasBegunPlay() const;
	bool HasMatchEnded() const;
	bool HasMatchStarted() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GameStateBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GameStateBase")
	}
	static class AGameStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameStateBase>();
	}
};
DUMPER7_ASSERTS_AGameStateBase;

// Class Engine.SoundBase
// 0x0140 (0x0168 - 0x0028)
class USoundBase : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundClass*                            SoundClassObject;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDebug : 1;                                        // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideConcurrency : 1;                          // 0x0038(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableBusSends : 1;                               // 0x0038(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableBaseSubmix : 1;                             // 0x0038(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableSubmixSends : 1;                            // 0x0038(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasDelayNode : 1;                                 // 0x0038(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasConcatenatorNode : 1;                          // 0x0038(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bBypassVolumeScaleForPriority : 1;                 // 0x0038(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EVirtualizationMode                           VirtualizationMode;                                // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x56];                                      // 0x003A(0x0056)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class USoundConcurrency*>                ConcurrencySet;                                    // 0x0090(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FSoundConcurrencySettings              ConcurrencyOverrides;                              // 0x00E0(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalSamples;                                      // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0110(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmixBase*                       SoundSubmixObject;                                 // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoundSubmixSendInfo>           SoundSubmixSends;                                  // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class USoundEffectSourcePresetChain*          SourceEffectChain;                                 // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoundSourceBusSendInfo>        BusSends;                                          // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSoundSourceBusSendInfo>        PreEffectBusSends;                                 // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAssetUserData*>                 AssetUserData;                                     // 0x0158(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	bool IsAttenuationSettingsEditable() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundBase")
	}
	static class USoundBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundBase>();
	}
};
DUMPER7_ASSERTS_USoundBase;

// Class Engine.SoundWave
// 0x02C8 (0x0430 - 0x0168)
class USoundWave : public USoundBase
{
public:
	uint8                                         Pad_168[0x10];                                     // 0x0168(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CompressionQuality;                                // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StreamingPriority;                                 // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESoundwaveSampleRateSettings                  SampleRateQuality;                                 // 0x0180(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181[0x1];                                      // 0x0181(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	ESoundGroup                                   SoundGroup;                                        // 0x0182(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLooping : 1;                                      // 0x0183(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStreaming : 1;                                    // 0x0183(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ESoundAssetCompressionType                    SoundAssetCompressionType;                         // 0x0184(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bSeekableStreaming : 1;                            // 0x0185(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bUseBinkAudio : 1;                                 // 0x0185(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_186[0x1A];                                     // 0x0186(0x001A)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoundModulationDefaultRoutingSettings ModulationSettings;                                // 0x01A0(0x0168)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<float>                                 FrequenciesToAnalyze;                              // 0x0308(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSoundWaveSpectralTimeData>     CookedSpectralTimeData;                            // 0x0318(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSoundWaveEnvelopeTimeData>     CookedEnvelopeTimeData;                            // 0x0328(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InitialChunkSize;                                  // 0x0338(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33C[0x40];                                     // 0x033C(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         BitPad_37C_0 : 5;                                  // 0x037C(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bMature : 1;                                       // 0x037C(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bManualWordWrap : 1;                               // 0x037C(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSingleLine : 1;                                   // 0x037C(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsAmbisonics : 1;                                 // 0x037D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ESoundWaveLoadingBehavior                     LoadingBehavior;                                   // 0x037E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37F[0x1];                                      // 0x037F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SpokenText;                                        // 0x0380(0x0010)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubtitlePriority;                                  // 0x0390(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0394(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0398(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumChannels;                                       // 0x039C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoundWaveCuePoint>             CuePoints;                                         // 0x03A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         SampleRate;                                        // 0x03B0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B4[0xC];                                      // 0x03B4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSubtitleCue>                   Subtitles;                                         // 0x03C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UCurveTable*                            Curves;                                            // 0x03D0(0x0008)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                            InternalCurves;                                    // 0x03D8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E0[0x50];                                     // 0x03E0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSoundAssetCompressionType(ESoundAssetCompressionType InSoundAssetCompressionType, bool bMarkDirty);

	TArray<struct FSoundWaveCuePoint> GetCuePoints() const;
	TArray<struct FSoundWaveCuePoint> GetLoopRegions() const;
	ESoundAssetCompressionType GetSoundAssetCompressionType() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundWave")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundWave")
	}
	static class USoundWave* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundWave>();
	}
};
DUMPER7_ASSERTS_USoundWave;

// Class Engine.AnimNotifyState
// 0x0008 (0x0030 - 0x0028)
class UAnimNotifyState : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetDefaultTriggerWeightThreshold() const;
	class FString GetNotifyName() const;
	bool Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, const struct FAnimNotifyEventReference& EventReference) const;
	bool Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, const struct FAnimNotifyEventReference& EventReference) const;
	bool Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime, const struct FAnimNotifyEventReference& EventReference) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimNotifyState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimNotifyState")
	}
	static class UAnimNotifyState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState>();
	}
};
DUMPER7_ASSERTS_UAnimNotifyState;

// Class Engine.LightmassImportanceVolume
// 0x0000 (0x02D0 - 0x02D0)
class ALightmassImportanceVolume final : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LightmassImportanceVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LightmassImportanceVolume")
	}
	static class ALightmassImportanceVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALightmassImportanceVolume>();
	}
};
DUMPER7_ASSERTS_ALightmassImportanceVolume;

// Class Engine.SkinnedMeshComponent
// 0x0340 (0x08F0 - 0x05B0)
class USkinnedMeshComponent : public UMeshComponent
{
public:
	uint8                                         Pad_5A8[0x8];                                      // 0x05A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x05B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkinnedAsset*                          SkinnedAsset;                                      // 0x05B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class USkinnedMeshComponent>   LeaderPoseComponent;                               // 0x05C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ESkinCacheUsage>                       SkinCacheUsage;                                    // 0x05C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSetMeshDeformer;                                  // 0x05D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5D9[0x7];                                      // 0x05D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshDeformer*                          MeshDeformer;                                      // 0x05E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMeshDeformerInstanceSettings*          MeshDeformerInstanceSettings;                      // 0x05E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMeshDeformerInstance*                  MeshDeformerInstance;                              // 0x05F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F8[0x178];                                    // 0x05F8(0x0178)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsAsset*                          PhysicsAssetOverride;                              // 0x0770(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcedLodModel;                                    // 0x0778(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinLodModel;                                       // 0x077C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_780[0x8];                                      // 0x0780(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StreamingDistanceMultiplier;                       // 0x0788(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78C[0xC];                                      // 0x078C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSkelMeshComponentLODInfo>      LODInfo;                                           // 0x0798(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A8[0x24];                                     // 0x07A8(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	EVisibilityBasedAnimTickOption                VisibilityBasedAnimTickOption;                     // 0x07CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7CD[0x1];                                      // 0x07CD(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         BitPad_7CE_0 : 3;                                  // 0x07CE(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bOverrideMinLOD : 1;                               // 0x07CE(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseBoundsFromLeaderPoseComponent : 1;             // 0x07CE(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceWireframe : 1;                               // 0x07CE(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableMorphTarget : 1;                           // 0x07CE(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHideSkin : 1;                                     // 0x07CE(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPerBoneMotionBlur : 1;                            // 0x07CF(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bComponentUseFixedSkelBounds : 1;                  // 0x07CF(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConsiderAllBodiesForBounds : 1;                   // 0x07CF(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSyncAttachParentLOD : 1;                          // 0x07CF(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanHighlightSelectedSections : 1;                 // 0x07CF(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRecentlyRendered : 1;                             // 0x07CF(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastCapsuleDirectShadow : 1;                      // 0x07CF(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastCapsuleIndirectShadow : 1;                    // 0x07CF(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCPUSkinning : 1;                                  // 0x07D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableUpdateRateOptimizations : 1;                // 0x07D0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisplayDebugUpdateRateOptimizations : 1;          // 0x07D0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRenderStatic : 1;                                 // 0x07D0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreLeaderPoseComponentLOD : 1;                 // 0x07D0(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_7D0_5 : 2;                                  // 0x07D0(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bCachedLocalBoundsUpToDate : 1;                    // 0x07D0(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bCachedWorldSpaceBoundsUpToDate : 1;               // 0x07D1(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         BitPad_7D1_1 : 1;                                  // 0x07D1(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bForceMeshObjectUpdate : 1;                        // 0x07D1(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bForceUpdateDynamicDataImmediately : 1;            // 0x07D1(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         BitPad_7D1_4 : 4;                                  // 0x07D1(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         BitPad_7D2_0 : 1;                                  // 0x07D2(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bFollowerShouldTickPose : 1;                       // 0x07D2(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_7D3[0x1];                                      // 0x07D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CapsuleIndirectShadowMinVisibility;                // 0x07D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D8[0x38];                                     // 0x07D8(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoxSphereBounds                       CachedWorldOrLocalSpaceBounds;                     // 0x0810(0x0038)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_848[0x8];                                      // 0x0848(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                CachedWorldToLocalTransform;                       // 0x0850(0x0080)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_8D0[0x20];                                     // 0x08D0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearSkinWeightOverride(int32 LODIndex);
	void ClearSkinWeightProfile();
	void ClearVertexColorOverride(int32 LODIndex);
	void HideBoneByName(class FName BoneName, EPhysBodyOp PhysBodyOption);
	bool IsBoneHiddenByName(class FName BoneName);
	bool IsMaterialSectionShown(int32 MaterialID, int32 LODIndex);
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);
	void SetCastCapsuleDirectShadow(bool bNewValue);
	void SetCastCapsuleIndirectShadow(bool bNewValue);
	void SetForcedLOD(int32 InNewForcedLOD);
	void SetLeaderPoseComponent(class USkinnedMeshComponent* NewLeaderBoneComponent, bool bForceUpdate, bool bInFollowerShouldTickPose);
	void SetMeshDeformer(class UMeshDeformer* InMeshDeformer);
	void SetMinLOD(int32 InNewMinLOD);
	void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);
	void SetPostSkinningOffsets(int32 LODIndex, const TArray<struct FVector>& Offsets);
	void SetPreSkinningOffsets(int32 LODIndex, const TArray<struct FVector>& Offsets);
	void SetRenderStatic(bool bNewValue);
	void SetSkinnedAssetAndUpdate(class USkinnedAsset* NewMesh, bool bReinitPose);
	void SetSkinWeightOverride(int32 LODIndex, const TArray<struct FSkelMeshSkinWeightInfo>& SkinWeights);
	bool SetSkinWeightProfile(class FName InProfileName);
	void SetVertexColorOverride_LinearColor(int32 LODIndex, const TArray<struct FLinearColor>& VertexColors);
	void SetVertexOffsetUsage(int32 LODIndex, int32 Usage);
	void ShowAllMaterialSections(int32 LODIndex);
	void ShowMaterialSection(int32 MaterialID, int32 SectionIndex, bool bShow, int32 LODIndex);
	void TransformFromBoneSpace(class FName BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void UnHideBoneByName(class FName BoneName);
	void UnloadSkinWeightProfile(class FName InProfileName);
	void UnsetMeshDeformer();

	bool BoneIsChildOf(class FName BoneName, class FName ParentBoneName) const;
	class FName FindClosestBone_K2(const struct FVector& TestLocation, struct FVector* BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset) const;
	int32 GetBoneIndex(class FName BoneName) const;
	class FName GetBoneName(int32 BoneIndex) const;
	struct FTransform GetBoneTransform(class FName InBoneName, ERelativeTransformSpace TransformSpace) const;
	class FName GetCurrentSkinWeightProfileName() const;
	struct FTransform GetDeltaTransformFromRefPose(class FName BoneName, class FName BaseName) const;
	int32 GetForcedLOD() const;
	class UMeshDeformerInstance* GetMeshDeformerInstance() const;
	int32 GetNumBones() const;
	int32 GetNumLODs() const;
	class FName GetParentBone(class FName BoneName) const;
	int32 GetPredictedLODLevel() const;
	struct FVector GetRefPosePosition(int32 BoneIndex) const;
	struct FTransform GetRefPoseTransform(int32 BoneIndex) const;
	class USkeletalMesh* GetSkeletalMesh_DEPRECATED() const;
	class USkinnedAsset* GetSkinnedAsset() const;
	class FName GetSocketBoneName(class FName InSocketName) const;
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(class FName BoneName, float* OutTwistAngle, float* OutSwingAngle) const;
	int32 GetVertexOffsetUsage(int32 LODIndex) const;
	bool IsUsingSkinWeightProfile() const;
	void TransformToBoneSpace(class FName BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkinnedMeshComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkinnedMeshComponent")
	}
	static class USkinnedMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkinnedMeshComponent>();
	}
};
DUMPER7_ASSERTS_USkinnedMeshComponent;

// Class Engine.DataAsset
// 0x0008 (0x0030 - 0x0028)
class UDataAsset : public UObject
{
public:
	TSubclassOf<class UDataAsset>                 NativeClass;                                       // 0x0028(0x0008)(ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DataAsset")
	}
	static class UDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataAsset>();
	}
};
DUMPER7_ASSERTS_UDataAsset;

// Class Engine.PrimaryDataAsset
// 0x0000 (0x0030 - 0x0030)
class UPrimaryDataAsset : public UDataAsset
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PrimaryDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PrimaryDataAsset")
	}
	static class UPrimaryDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryDataAsset>();
	}
};
DUMPER7_ASSERTS_UPrimaryDataAsset;

// Class Engine.SkeletalMeshComponent
// 0x06B0 (0x0FA0 - 0x08F0)
class USkeletalMeshComponent : public USkinnedMeshComponent
{
public:
	class USkeletalMesh*                          SkeletalMeshAsset;                                 // 0x08F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UObject>                    AnimBlueprintGeneratedClass;                       // 0x08F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>              AnimClass;                                         // 0x0900(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimInstance*                          AnimScriptInstance;                                // 0x0908(0x0008)(ZeroConstructor, Transient, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimInstance*                          PostProcessAnimInstance;                           // 0x0910(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSingleAnimationPlayData               AnimationData;                                     // 0x0918(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_930[0x10];                                     // 0x0930(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RootBoneTranslation;                               // 0x0940(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineCheckBoundsScale;                              // 0x0958(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_970[0x20];                                     // 0x0970(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimInstance*>                  LinkedInstances;                                   // 0x0990(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9A0[0x10];                                     // 0x09A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     CachedBoneSpaceTransforms;                         // 0x09B0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FTransform>                     CachedComponentSpaceTransforms;                    // 0x09C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9D0[0xA0];                                     // 0x09D0(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GlobalAnimRateScale;                               // 0x0A70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKinematicBonesUpdateToPhysics                KinematicBonesUpdateType;                          // 0x0A74(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicsTransformUpdateMode                   PhysicsTransformUpdateMode;                        // 0x0A75(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A76[0x1];                                      // 0x0A76(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	EAnimationMode                                AnimationMode;                                     // 0x0A77(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A78[0x1];                                      // 0x0A78(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bDisablePostProcessBlueprint : 1;                  // 0x0A79(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         BitPad_A79_1 : 1;                                  // 0x0A79(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bUpdateOverlapsOnAnimationFinalize : 1;            // 0x0A79(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_A79_3 : 1;                                  // 0x0A79(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bHasValidBodies : 1;                               // 0x0A79(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bBlendPhysics : 1;                                 // 0x0A79(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnablePhysicsOnDedicatedServer : 1;               // 0x0A79(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUpdateMeshWhenKinematic : 1;                      // 0x0A79(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUpdateJointsFromAnimation : 1;                    // 0x0A7A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowClothActors : 1;                             // 0x0A7A(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableClothSimulation : 1;                       // 0x0A7A(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_A7A_3 : 5;                                  // 0x0A7A(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_A7B[0x5];                                      // 0x0A7B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bDisableRigidBodyAnimNode : 1;                     // 0x0A80(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bAllowAnimCurveEvaluation : 1;                     // 0x0A80(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         BitPad_A80_2 : 3;                                  // 0x0A80(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bCollideWithEnvironment : 1;                       // 0x0A80(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCollideWithAttachedChildren : 1;                  // 0x0A80(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceCollisionUpdate : 1;                         // 0x0A80(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLocalSpaceSimulation : 1;                         // 0x0A81(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bResetAfterTeleport : 1;                           // 0x0A81(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_A81_2 : 1;                                  // 0x0A81(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bDeferKinematicBoneUpdate : 1;                     // 0x0A81(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNoSkeletonUpdate : 1;                             // 0x0A81(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPauseAnims : 1;                                   // 0x0A81(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseRefPoseOnInitAnim : 1;                         // 0x0A81(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnablePerPolyCollision : 1;                       // 0x0A81(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceRefpose : 1;                                 // 0x0A82(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOnlyAllowAutonomousTickPose : 1;                  // 0x0A82(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsAutonomousTickPose : 1;                         // 0x0A82(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOldForceRefPose : 1;                              // 0x0A82(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowPrePhysBones : 1;                             // 0x0A82(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRequiredBonesUpToDate : 1;                        // 0x0A82(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAnimTreeInitialised : 1;                          // 0x0A82(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIncludeComponentLocationIntoBounds : 1;           // 0x0A82(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableLineCheckWithBounds : 1;                    // 0x0A83(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPropagateCurvesToFollowers : 1;                   // 0x0A83(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSkipKinematicUpdateWhenInterpolating : 1;         // 0x0A83(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSkipBoundsUpdateWhenInterpolating : 1;            // 0x0A83(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_A83_4 : 2;                                  // 0x0A83(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bNeedsQueuedAnimEventsDispatched : 1;              // 0x0A83(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint16                                        CachedAnimCurveUidVersion;                         // 0x0A84(0x0002)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A86[0x2];                                      // 0x0A86(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClothBlendWeight;                                  // 0x0A88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWaitForParallelClothTask;                         // 0x0A8C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFilteredAnimCurvesIsAllowList;                    // 0x0A8D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint16                                        CachedMeshCurveMetaDataVersion;                    // 0x0A8E(0x0002)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           FilteredAnimCurves;                                // 0x0A90(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UBodySetup*                             BodySetup;                                         // 0x0AA0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA8[0x4];                                      // 0x0AA8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClothMaxDistanceScale;                             // 0x0AAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 ConstraintIndex)> OnConstraintBroken;                        // 0x0AB0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 ConstraintIndex)> OnPlasticDeformation;                      // 0x0AC0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UClothingSimulationFactory> ClothingSimulationFactory;                         // 0x0AD0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD8[0x100];                                    // 0x0AD8(0x0100)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TeleportDistanceThreshold;                         // 0x0BD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TeleportRotationThreshold;                         // 0x0BDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BE0[0x8];                                      // 0x0BE0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        LastPoseTickFrame;                                 // 0x0BE8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BEC[0x94];                                     // 0x0BEC(0x0094)(Fixing Size After Last Property [ Dumper-7 ])
	class UClothingSimulationInteractor*          ClothingInteractor;                                // 0x0C80(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C88[0xB8];                                     // 0x0C88(0x00B8)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnAnimInitialized;                                 // 0x0D40(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_D50[0x250];                                    // 0x0D50(0x0250)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AccumulateAllBodiesBelowPhysicsBlendWeight(const class FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void AddForceToAllBodiesBelow(const struct FVector& Force, class FName BoneName, bool bAccelChange, bool bIncludeSelf);
	void AddImpulseToAllBodiesBelow(const struct FVector& Impulse, class FName BoneName, bool bVelChange, bool bIncludeSelf);
	void AllowAnimCurveEvaluation(class FName NameOfCurve, bool bAllow);
	void BindClothToLeaderPoseComponent();
	void BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, class FName InBoneName);
	void ClearMorphTargets();
	class FName FindConstraintBoneName(int32 ConstraintIndex);
	void ForceClothNextUpdateTeleport();
	void ForceClothNextUpdateTeleportAndReset();
	class UClass* GetAnimClass();
	struct FVector GetBoneLinearVelocity(const class FName& InBoneName);
	struct FConstraintInstanceAccessor GetConstraintByName(class FName ConstraintName, bool bIncludesTerminated);
	void GetConstraints(bool bIncludesTerminated, TArray<struct FConstraintInstanceAccessor>* OutConstraints);
	void GetConstraintsFromBody(class FName BodyName, bool bParentConstraints, bool bChildConstraints, bool bIncludesTerminated, TArray<struct FConstraintInstanceAccessor>* OutConstraints);
	void GetCurrentJointAngles(class FName InBoneName, float* Swing1Angle, float* TwistAngle, float* Swing2Angle);
	bool GetFloatAttribute(const class FName& BoneName, const class FName& AttributeName, float DefaultValue, float* OutValue, ECustomBoneAttributeLookup LookupType);
	bool GetFloatAttribute_Ref(const class FName& BoneName, const class FName& AttributeName, float& OutValue, ECustomBoneAttributeLookup LookupType);
	bool GetIntegerAttribute(const class FName& BoneName, const class FName& AttributeName, int32 DefaultValue, int32* OutValue, ECustomBoneAttributeLookup LookupType);
	bool GetIntegerAttribute_Ref(const class FName& BoneName, const class FName& AttributeName, int32& OutValue, ECustomBoneAttributeLookup LookupType);
	bool GetStringAttribute(const class FName& BoneName, const class FName& AttributeName, const class FString& DefaultValue, class FString* OutValue, ECustomBoneAttributeLookup LookupType);
	bool GetStringAttribute_Ref(const class FName& BoneName, const class FName& AttributeName, class FString& OutValue, ECustomBoneAttributeLookup LookupType);
	bool GetTransformAttribute(const class FName& BoneName, const class FName& AttributeName, const struct FTransform& DefaultValue, struct FTransform* OutValue, ECustomBoneAttributeLookup LookupType);
	bool GetTransformAttribute_Ref(const class FName& BoneName, const class FName& AttributeName, struct FTransform& OutValue, ECustomBoneAttributeLookup LookupType);
	bool IsBodyGravityEnabled(class FName BoneName);
	void LinkAnimClassLayers(TSubclassOf<class UAnimInstance> InClass);
	void LinkAnimGraphByTag(class FName InTag, TSubclassOf<class UAnimInstance> InClass);
	void OverrideAnimationData(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);
	void Play(bool bLooping);
	void PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping);
	void ResetAllBodiesSimulatePhysics();
	void ResetAllowedAnimCurveEvaluation();
	void ResetAnimInstanceDynamics(ETeleportType InTeleportType);
	void ResetClothTeleportMode();
	void ResumeClothingSimulation();
	void SetAllBodiesBelowLinearVelocity(const class FName& InBoneName, const struct FVector& LinearVelocity, bool bIncludeSelf);
	void SetAllBodiesBelowPhysicsBlendWeight(const class FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);
	void SetAllBodiesBelowPhysicsDisabled(const class FName& InBoneName, bool bDisabled, bool bIncludeSelf);
	void SetAllBodiesBelowSimulatePhysics(const class FName& InBoneName, bool bNewSimulate, bool bIncludeSelf);
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllowAnimCurveEvaluation(bool bInAllow);
	void SetAllowClothActors(bool bInAllow);
	void SetAllowedAnimCurvesEvaluation(const TArray<class FName>& List, bool bAllow);
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);
	void SetAngularLimits(class FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);
	void SetAnimation(class UAnimationAsset* NewAnimToPlay);
	void SetAnimationMode(EAnimationMode InAnimationMode, bool bForceInitAnimScriptInstance);
	void SetAnimClass(class UClass* NewClass);
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, class FName BoneName);
	void SetClothMaxDistanceScale(float Scale);
	void SetConstraintProfile(class FName JointName, class FName ProfileName, bool bDefaultIfNotFound);
	void SetConstraintProfileForAll(class FName ProfileName, bool bDefaultIfNotFound);
	void SetDisableAnimCurves(bool bInDisableAnimCurves);
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);
	void SetEnableBodyGravity(bool bEnableGravity, class FName BoneName);
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, class FName BoneName, bool bIncludeSelf);
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);
	void SetMorphTarget(class FName MorphTargetName, float Value, bool bRemoveZeroWeight);
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, class FName BoneName, bool bIncludeSelf);
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);
	void SetPlayRate(float Rate);
	void SetPosition(float InPos, bool bFireNotifies);
	void SetSkeletalMeshAsset(class USkeletalMesh* NewMesh);
	void SetTeleportDistanceThreshold(float Threshold);
	void SetTeleportRotationThreshold(float Threshold);
	void SetUpdateAnimationInEditor(const bool NewUpdateState);
	void SetUpdateClothInEditor(const bool NewUpdateState);
	void SnapshotPose(struct FPoseSnapshot& Snapshot);
	void Stop();
	void SuspendClothingSimulation();
	void TermBodiesBelow(class FName ParentBoneName);
	void ToggleDisablePostProcessBlueprint();
	void UnbindClothFromLeaderPoseComponent(bool bRestoreSimulationSpace);
	void UnlinkAnimClassLayers(TSubclassOf<class UAnimInstance> InClass);

	bool GetAllowClothActors() const;
	bool GetAllowedAnimCurveEvaluate() const;
	bool GetAllowRigidBodyAnimNode() const;
	EAnimationMode GetAnimationMode() const;
	class UAnimInstance* GetAnimInstance() const;
	float GetBoneMass(class FName BoneName, bool bScaleMass) const;
	class UClothingSimulationInteractor* GetClothingSimulationInteractor() const;
	float GetClothMaxDistanceScale() const;
	bool GetDisableAnimCurves() const;
	bool GetDisablePostProcessBlueprint() const;
	class UAnimInstance* GetLinkedAnimGraphInstanceByTag(class FName InTag) const;
	void GetLinkedAnimGraphInstancesByTag(class FName InTag, TArray<class UAnimInstance*>* OutLinkedInstances) const;
	class UAnimInstance* GetLinkedAnimLayerInstanceByClass(TSubclassOf<class UAnimInstance> InClass) const;
	class UAnimInstance* GetLinkedAnimLayerInstanceByGroup(class FName InGroup) const;
	float GetMorphTarget(class FName MorphTargetName) const;
	float GetPlayRate() const;
	float GetPosition() const;
	class UAnimInstance* GetPostProcessInstance() const;
	struct FVector GetSkeletalCenterOfMass() const;
	class USkeletalMesh* GetSkeletalMeshAsset() const;
	float GetTeleportDistanceThreshold() const;
	float GetTeleportRotationThreshold() const;
	bool HasValidAnimationInstance() const;
	bool IsClothingSimulationSuspended() const;
	bool IsPlaying() const;
	bool K2_GetClosestPointOnPhysicsAsset(const struct FVector& WorldPosition, struct FVector* ClosestWorldPosition, struct FVector* Normal, class FName* BoneName, float* Distance) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkeletalMeshComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkeletalMeshComponent")
	}
	static class USkeletalMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkeletalMeshComponent>();
	}
};
DUMPER7_ASSERTS_USkeletalMeshComponent;

// Class Engine.MaterialExpressionParticleSubUVProperties
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionParticleSubUVProperties final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionParticleSubUVProperties")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionParticleSubUVProperties")
	}
	static class UMaterialExpressionParticleSubUVProperties* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionParticleSubUVProperties>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionParticleSubUVProperties;

// Class Engine.SoundEffectPreset
// 0x0040 (0x0068 - 0x0028)
class USoundEffectPreset : public UObject
{
public:
	uint8                                         Pad_28[0x40];                                      // 0x0028(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundEffectPreset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundEffectPreset")
	}
	static class USoundEffectPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundEffectPreset>();
	}
};
DUMPER7_ASSERTS_USoundEffectPreset;

// Class Engine.MovementComponent
// 0x0068 (0x0108 - 0x00A0)
class UMovementComponent : public UActorComponent
{
public:
	class USceneComponent*                        UpdatedComponent;                                  // 0x00A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    UpdatedPrimitive;                                  // 0x00A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x8];                                       // 0x00B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlaneConstraintNormal;                             // 0x00D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PlaneConstraintOrigin;                             // 0x00E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bUpdateOnlyIfRendered : 1;                         // 0x0100(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAutoUpdateTickRegistration : 1;                   // 0x0100(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTickBeforeOwner : 1;                              // 0x0100(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAutoRegisterUpdatedComponent : 1;                 // 0x0100(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConstrainToPlane : 1;                             // 0x0100(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSnapToPlaneAtStart : 1;                           // 0x0100(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAutoRegisterPhysicsVolumeUpdates : 1;             // 0x0100(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bComponentShouldUpdatePhysicsVolume : 1;           // 0x0100(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_101[0x2];                                      // 0x0101(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	EPlaneConstraintAxisSetting                   PlaneConstraintAxisSetting;                        // 0x0103(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool K2_MoveUpdatedComponent(const struct FVector& Delta, const struct FRotator& NewRotation, struct FHitResult* OutHit, bool bSweep, bool bTeleport);
	void PhysicsVolumeChanged(class APhysicsVolume* NewVolume);
	void SetPlaneConstraintAxisSetting(EPlaneConstraintAxisSetting NewAxisSetting);
	void SetPlaneConstraintEnabled(bool bEnabled);
	void SetPlaneConstraintFromVectors(const struct FVector& Forward, const struct FVector& Up);
	void SetPlaneConstraintNormal(const struct FVector& PlaneNormal);
	void SetPlaneConstraintOrigin(const struct FVector& PlaneOrigin);
	void SetUpdatedComponent(class USceneComponent* NewUpdatedComponent);
	void SnapUpdatedComponentToPlane();
	void StopMovementImmediately();

	struct FVector ConstrainDirectionToPlane(const struct FVector& Direction) const;
	struct FVector ConstrainLocationToPlane(const struct FVector& Location) const;
	struct FVector ConstrainNormalToPlane(const struct FVector& Normal) const;
	float GetGravityZ() const;
	float GetMaxSpeed() const;
	class APhysicsVolume* GetPhysicsVolume() const;
	EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting() const;
	const struct FVector GetPlaneConstraintNormal() const;
	const struct FVector GetPlaneConstraintOrigin() const;
	bool IsExceedingMaxSpeed(float MaxSpeed) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MovementComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MovementComponent")
	}
	static class UMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovementComponent>();
	}
};
DUMPER7_ASSERTS_UMovementComponent;

// Class Engine.RotatingMovementComponent
// 0x0038 (0x0140 - 0x0108)
class URotatingMovementComponent final : public UMovementComponent
{
public:
	struct FRotator                               RotationRate;                                      // 0x0108(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PivotTranslation;                                  // 0x0120(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRotationInLocalSpace : 1;                         // 0x0138(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RotatingMovementComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RotatingMovementComponent")
	}
	static class URotatingMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URotatingMovementComponent>();
	}
};
DUMPER7_ASSERTS_URotatingMovementComponent;

// Class Engine.AnimInstance
// 0x0328 (0x0350 - 0x0028)
#pragma pack(push, 0x1)
class alignas(0x10) UAnimInstance : public UObject
{
public:
	class USkeleton*                              CurrentSkeleton;                                   // 0x0028(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionMode                               RootMotionMode;                                    // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseMultiThreadedAnimationUpdate : 1;              // 0x0031(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsingCopyPoseFromMesh : 1;                        // 0x0031(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_31_2 : 2;                                   // 0x0031(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bReceiveNotifiesFromLinkedInstances : 1;           // 0x0031(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPropagateNotifiesToLinkedInstances : 1;           // 0x0031(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseMainInstanceMontageEvaluationData : 1;         // 0x0031(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bQueueMontageEvents : 1;                           // 0x0031(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UAnimMontage* Montage, bool bInterrupted)> OnMontageBlendingOut; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UAnimMontage* Montage)> OnMontageStarted;                    // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UAnimMontage* Montage, bool bInterrupted)> OnMontageEnded;   // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnAllMontageInstancesEnded;                        // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0xD8];                                      // 0x0078(0x00D8)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNotifyQueue                       NotifyQueue;                                       // 0x0150(0x0070)(Transient, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>               ActiveAnimNotifyState;                             // 0x01C0(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEventReference>      ActiveAnimNotifyEventReference;                    // 0x01D0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0[0x168];                                    // 0x01E0(0x0168)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BlueprintBeginPlay();
	void BlueprintInitializeAnimation();
	void BlueprintLinkedAnimationLayersInitialized();
	void BlueprintPostEvaluateAnimation();
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void ClearAllTransitionEvents();
	void ClearMorphTargets();
	void ClearTransitionEvents(const class FName EventName);
	class FName GetCurrentStateName(int32 MachineIndex);
	bool GetCurveValueWithDefault(class FName CurveName, float DefaultValue, float* OutValue);
	float GetInstanceAssetPlayerLength(int32 AssetPlayerIndex);
	float GetInstanceAssetPlayerTime(int32 AssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFraction(int32 AssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFromEnd(int32 AssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFromEndFraction(int32 AssetPlayerIndex);
	float GetInstanceCurrentStateElapsedTime(int32 MachineIndex);
	float GetInstanceMachineWeight(int32 MachineIndex);
	float GetInstanceStateWeight(int32 MachineIndex, int32 StateIndex);
	float GetInstanceTransitionCrossfadeDuration(int32 MachineIndex, int32 TransitionIndex);
	float GetInstanceTransitionTimeElapsed(int32 MachineIndex, int32 TransitionIndex);
	float GetInstanceTransitionTimeElapsedFraction(int32 MachineIndex, int32 TransitionIndex);
	float GetRelevantAnimLength(int32 MachineIndex, int32 StateIndex);
	float GetRelevantAnimTime(int32 MachineIndex, int32 StateIndex);
	float GetRelevantAnimTimeFraction(int32 MachineIndex, int32 StateIndex);
	float GetRelevantAnimTimeRemaining(int32 MachineIndex, int32 StateIndex);
	float GetRelevantAnimTimeRemainingFraction(int32 MachineIndex, int32 StateIndex);
	void LinkAnimClassLayers(TSubclassOf<class UAnimInstance> InClass);
	void LinkAnimGraphByTag(class FName InTag, TSubclassOf<class UAnimInstance> InClass);
	void LockAIResources(bool bLockMovement, bool LockAILogic);
	void Montage_JumpToSection(class FName SectionName, const class UAnimMontage* Montage);
	void Montage_JumpToSectionsEnd(class FName SectionName, const class UAnimMontage* Montage);
	void Montage_Pause(const class UAnimMontage* Montage);
	float Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);
	float Montage_PlayWithBlendIn(class UAnimMontage* MontageToPlay, const struct FAlphaBlendArgs& BlendIn, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);
	float Montage_PlayWithBlendSettings(class UAnimMontage* MontageToPlay, const struct FMontageBlendSettings& BlendInSettings, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);
	void Montage_Resume(const class UAnimMontage* Montage);
	void Montage_SetNextSection(class FName SectionNameToChange, class FName NextSection, const class UAnimMontage* Montage);
	void Montage_SetPlayRate(const class UAnimMontage* Montage, float NewPlayRate);
	void Montage_SetPosition(const class UAnimMontage* Montage, float NewPosition);
	void Montage_Stop(float InBlendOutTime, const class UAnimMontage* Montage);
	void Montage_StopGroupByName(float InBlendOutTime, class FName GroupName);
	void Montage_StopWithBlendOut(const struct FAlphaBlendArgs& BlendOut, const class UAnimMontage* Montage);
	void Montage_StopWithBlendSettings(const struct FMontageBlendSettings& BlendOutSettings, const class UAnimMontage* Montage);
	void MontageSync_Follow(const class UAnimMontage* MontageFollower, const class UAnimInstance* OtherAnimInstance, const class UAnimMontage* MontageLeader);
	void MontageSync_StopFollowing(const class UAnimMontage* MontageFollower);
	class UAnimMontage* PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* Asset, class FName SlotNodeName, float BlendInTime, float BlendoutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);
	class UAnimMontage* PlaySlotAnimationAsDynamicMontage_WithBlendArgs(class UAnimSequenceBase* Asset, class FName SlotNodeName, const struct FAlphaBlendArgs& BlendIn, const struct FAlphaBlendArgs& BlendOut, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);
	class UAnimMontage* PlaySlotAnimationAsDynamicMontage_WithBlendSettings(class UAnimSequenceBase* Asset, class FName SlotNodeName, const struct FMontageBlendSettings& BlendInSettings, const struct FMontageBlendSettings& BlendOutSettings, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);
	bool QueryAndMarkTransitionEvent(int32 MachineIndex, int32 TransitionIndex, class FName EventName);
	bool QueryTransitionEvent(int32 MachineIndex, int32 TransitionIndex, class FName EventName);
	void RemovePoseSnapshot(class FName SnapshotName);
	void RequestSlotGroupInertialization(class FName InSlotGroupName, float Duration, const class UBlendProfile* BlendProfile);
	bool RequestTransitionEvent(const class FName EventName, const double RequestTimeout, const ETransitionRequestQueueMode QueueMode, const ETransitionRequestOverwriteMode OverwriteMode);
	void ResetDynamics(ETeleportType InTeleportType);
	void SavePoseSnapshot(class FName SnapshotName);
	void SetMorphTarget(class FName MorphTargetName, float Value);
	void SetPropagateNotifiesToLinkedInstances(bool bSet);
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);
	void SetRootMotionMode(ERootMotionMode Value);
	void SetUseMainInstanceMontageEvaluationData(bool bSet);
	void SnapshotPose(struct FPoseSnapshot& Snapshot);
	void StopSlotAnimation(float InBlendOutTime, class FName SlotNodeName);
	void UnlinkAnimClassLayers(TSubclassOf<class UAnimInstance> InClass);
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);
	bool WasAnimNotifyNameTriggeredInAnyState(class FName NotifyName);
	bool WasAnimNotifyNameTriggeredInSourceState(int32 MachineIndex, int32 StateIndex, class FName NotifyName);
	bool WasAnimNotifyNameTriggeredInStateMachine(int32 MachineIndex, class FName NotifyName);
	bool WasAnimNotifyStateActiveInAnyState(TSubclassOf<class UAnimNotifyState> AnimNotifyStateType);
	bool WasAnimNotifyStateActiveInSourceState(int32 MachineIndex, int32 StateIndex, TSubclassOf<class UAnimNotifyState> AnimNotifyStateType);
	bool WasAnimNotifyStateActiveInStateMachine(int32 MachineIndex, TSubclassOf<class UAnimNotifyState> AnimNotifyStateType);
	bool WasAnimNotifyTriggeredInAnyState(TSubclassOf<class UAnimNotify> AnimNotifyType);
	bool WasAnimNotifyTriggeredInSourceState(int32 MachineIndex, int32 StateIndex, TSubclassOf<class UAnimNotify> AnimNotifyType);
	bool WasAnimNotifyTriggeredInStateMachine(int32 MachineIndex, TSubclassOf<class UAnimNotify> AnimNotifyType);

	float Blueprint_GetSlotMontageLocalWeight(class FName SlotNodeName) const;
	float CalculateDirection(const struct FVector& Velocity, const struct FRotator& BaseRotation) const;
	void GetActiveCurveNames(EAnimCurveType CurveType, TArray<class FName>* OutNames) const;
	void GetAllCurveNames(TArray<class FName>* OutNames) const;
	class UAnimMontage* GetCurrentActiveMontage() const;
	float GetCurveValue(class FName CurveName) const;
	float GetDeltaSeconds() const;
	class UAnimInstance* GetLinkedAnimGraphInstanceByTag(class FName InTag) const;
	void GetLinkedAnimGraphInstancesByTag(class FName InTag, TArray<class UAnimInstance*>* OutLinkedInstances) const;
	class UAnimInstance* GetLinkedAnimLayerInstanceByClass(TSubclassOf<class UAnimInstance> InClass) const;
	class UAnimInstance* GetLinkedAnimLayerInstanceByGroup(class FName InGroup) const;
	class UAnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(class FName InGroup, TSubclassOf<class UAnimInstance> InClass) const;
	void GetLinkedAnimLayerInstancesByGroup(class FName InGroup, TArray<class UAnimInstance*>* OutLinkedInstances) const;
	class AActor* GetOwningActor() const;
	class USkeletalMeshComponent* GetOwningComponent() const;
	bool GetPropagateNotifiesToLinkedInstances() const;
	bool GetReceiveNotifiesFromLinkedInstances() const;
	struct FMarkerSyncAnimPosition GetSyncGroupPosition(class FName InSyncGroupName) const;
	bool GetTimeToClosestMarker(class FName SyncGroup, class FName MarkerName, float* OutMarkerTime) const;
	bool HasMarkerBeenHitThisFrame(class FName SyncGroup, class FName MarkerName) const;
	bool IsAnyMontagePlaying() const;
	bool IsPlayingSlotAnimation(const class UAnimSequenceBase* Asset, class FName SlotNodeName) const;
	bool IsSlotActive(class FName SlotNodeName) const;
	bool IsSyncGroupBetweenMarkers(class FName InSyncGroupName, class FName PreviousMarker, class FName NextMarker, bool bRespectMarkerOrder) const;
	bool IsUsingMainInstanceMontageEvaluationData() const;
	float Montage_GetBlendTime(const class UAnimMontage* Montage) const;
	class FName Montage_GetCurrentSection(const class UAnimMontage* Montage) const;
	float Montage_GetEffectivePlayRate(const class UAnimMontage* Montage) const;
	bool Montage_GetIsStopped(const class UAnimMontage* Montage) const;
	float Montage_GetPlayRate(const class UAnimMontage* Montage) const;
	float Montage_GetPosition(const class UAnimMontage* Montage) const;
	bool Montage_IsActive(const class UAnimMontage* Montage) const;
	bool Montage_IsPlaying(const class UAnimMontage* Montage) const;
	class APawn* TryGetPawnOwner() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimInstance")
	}
	static class UAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimInstance>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_UAnimInstance;

// Class Engine.ScriptViewportClient
// 0x0010 (0x0038 - 0x0028)
class UScriptViewportClient : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ScriptViewportClient")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ScriptViewportClient")
	}
	static class UScriptViewportClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScriptViewportClient>();
	}
};
DUMPER7_ASSERTS_UScriptViewportClient;

// Class Engine.DynamicBlueprintBinding
// 0x0000 (0x0028 - 0x0028)
class UDynamicBlueprintBinding : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DynamicBlueprintBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DynamicBlueprintBinding")
	}
	static class UDynamicBlueprintBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicBlueprintBinding>();
	}
};
DUMPER7_ASSERTS_UDynamicBlueprintBinding;

// Class Engine.AudioEngineSubsystem
// 0x0000 (0x0030 - 0x0030)
class UAudioEngineSubsystem : public UDynamicSubsystem
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AudioEngineSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AudioEngineSubsystem")
	}
	static class UAudioEngineSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioEngineSubsystem>();
	}
};
DUMPER7_ASSERTS_UAudioEngineSubsystem;

// Class Engine.ProjectileMovementComponent
// 0x0158 (0x0260 - 0x0108)
#pragma pack(push, 0x1)
class alignas(0x10) UProjectileMovementComponent : public UMovementComponent
{
public:
	float                                         InitialSpeed;                                      // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRotationFollowsVelocity : 1;                      // 0x0110(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRotationRemainsVertical : 1;                      // 0x0110(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldBounce : 1;                                 // 0x0110(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInitialVelocityInLocalSpace : 1;                  // 0x0110(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceSubStepping : 1;                             // 0x0110(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSimulationEnabled : 1;                            // 0x0110(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSweepCollision : 1;                               // 0x0110(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsHomingProjectile : 1;                           // 0x0110(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bBounceAngleAffectsFriction : 1;                   // 0x0111(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSliding : 1;                                    // 0x0111(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInterpMovement : 1;                               // 0x0111(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInterpRotation : 1;                               // 0x0111(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bThrottleInterpolation : 1;                        // 0x0111(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_111_5 : 3;                                  // 0x0111(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_112[0x6];                                      // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bInterpolationUseScopedMovement : 1;               // 0x0118(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreviousHitTime;                                   // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreviousHitNormal;                                 // 0x0120(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProjectileGravityScale;                            // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Buoyancy;                                          // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bounciness;                                        // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Friction;                                          // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BounceVelocityStopSimulatingThreshold;             // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFrictionFraction;                               // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity)> OnProjectileBounce; // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FHitResult& ImpactResult)> OnProjectileStop;          // 0x0160(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         HomingAccelerationMagnitude;                       // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USceneComponent>         HomingTargetComponent;                             // 0x0174(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSimulationTimeStep;                             // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSimulationIterations;                           // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BounceAdditionalIterations;                        // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpLocationTime;                                // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpRotationTime;                                // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpLocationMaxLagDistance;                      // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpLocationSnapToTargetDistance;                // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrottleInterpolationThresholdNotRenderedShortTime; // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrottleInterpolationThresholdNotRenderedLongTime; // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThrottleInterpolationSkipFramesRecent;             // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThrottleInterpolationSkipFramesNotRecent;          // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8[0xB0];                                     // 0x01A8(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MoveInterpolationTarget(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void ResetInterpolation();
	void SetInterpolatedComponent(class USceneComponent* Component);
	void SetVelocityInLocalSpace(const struct FVector& NewVelocity);
	void StopSimulating(const struct FHitResult& HitResult);

	bool IsInterpolationComplete() const;
	bool IsVelocityUnderSimulationThreshold() const;
	struct FVector LimitVelocity(const struct FVector& NewVelocity) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ProjectileMovementComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ProjectileMovementComponent")
	}
	static class UProjectileMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProjectileMovementComponent>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_UProjectileMovementComponent;

// Class Engine.NavigationObjectBase
// 0x0028 (0x02C0 - 0x0298)
class ANavigationObjectBase : public AActor
{
public:
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      CapsuleComponent;                                  // 0x02A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBillboardComponent*                    GoodSprite;                                        // 0x02A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBillboardComponent*                    BadSprite;                                         // 0x02B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bIsPIEPlayerStart : 1;                             // 0x02B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NavigationObjectBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NavigationObjectBase")
	}
	static class ANavigationObjectBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANavigationObjectBase>();
	}
};
DUMPER7_ASSERTS_ANavigationObjectBase;

// Class Engine.PlayerStart
// 0x0008 (0x02C8 - 0x02C0)
class APlayerStart : public ANavigationObjectBase
{
public:
	class FName                                   PlayerStartTag;                                    // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlayerStart")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlayerStart")
	}
	static class APlayerStart* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerStart>();
	}
};
DUMPER7_ASSERTS_APlayerStart;

// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (0x0240 - 0x0240)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTextureSampleParameter2D")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTextureSampleParameter2D")
	}
	static class UMaterialExpressionTextureSampleParameter2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTextureSampleParameter2D>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTextureSampleParameter2D;

// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0008 (0x0248 - 0x0240)
class UMaterialExpressionTextureSampleParameterSubUV final : public UMaterialExpressionTextureSampleParameter2D
{
public:
	uint8                                         bBlend : 1;                                        // 0x0240(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTextureSampleParameterSubUV")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTextureSampleParameterSubUV")
	}
	static class UMaterialExpressionTextureSampleParameterSubUV* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTextureSampleParameterSubUV>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTextureSampleParameterSubUV;

// Class Engine.MaterialExpressionRayTracingQualitySwitch
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionRayTracingQualitySwitch final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Normal;                                            // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       RayTraced;                                         // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionRayTracingQualitySwitch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionRayTracingQualitySwitch")
	}
	static class UMaterialExpressionRayTracingQualitySwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionRayTracingQualitySwitch>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionRayTracingQualitySwitch;

// Class Engine.SoundWaveProcedural
// 0x0050 (0x0480 - 0x0430)
class USoundWaveProcedural : public USoundWave
{
public:
	uint8                                         Pad_430[0x50];                                     // 0x0430(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundWaveProcedural")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundWaveProcedural")
	}
	static class USoundWaveProcedural* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundWaveProcedural>();
	}
};
DUMPER7_ASSERTS_USoundWaveProcedural;

// Class Engine.SoundEffectSubmixPreset
// 0x0000 (0x0068 - 0x0068)
class USoundEffectSubmixPreset : public USoundEffectPreset
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundEffectSubmixPreset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundEffectSubmixPreset")
	}
	static class USoundEffectSubmixPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundEffectSubmixPreset>();
	}
};
DUMPER7_ASSERTS_USoundEffectSubmixPreset;

// Class Engine.MaterialExpressionVolumetricCloudEmptySpaceSkippingInput
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionVolumetricCloudEmptySpaceSkippingInput final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionVolumetricCloudEmptySpaceSkippingInput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionVolumetricCloudEmptySpaceSkippingInput")
	}
	static class UMaterialExpressionVolumetricCloudEmptySpaceSkippingInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionVolumetricCloudEmptySpaceSkippingInput>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionVolumetricCloudEmptySpaceSkippingInput;

// Class Engine.ActorChannel
// 0x0230 (0x0298 - 0x0068)
class UActorChannel final : public UChannel
{
public:
	class AActor*                                 Actor;                                             // 0x0068(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0xF0];                                      // 0x0070(0x00F0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        CreateSubObjects;                                  // 0x0160(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_170[0x128];                                    // 0x0170(0x0128)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActorChannel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActorChannel")
	}
	static class UActorChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorChannel>();
	}
};
DUMPER7_ASSERTS_UActorChannel;

// Class Engine.Engine
// 0x1050 (0x1078 - 0x0028)
class UEngine : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFont*                                  TinyFont;                                          // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                        TinyFontName;                                      // 0x0038(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                  SmallFont;                                         // 0x0058(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                        SmallFontName;                                     // 0x0060(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                  MediumFont;                                        // 0x0080(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                        MediumFontName;                                    // 0x0088(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                  LargeFont;                                         // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                        LargeFontName;                                     // 0x00B0(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                  SubtitleFont;                                      // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                        SubtitleFontName;                                  // 0x00D8(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFont*>                          AdditionalFonts;                                   // 0x00F8(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class FString>                         AdditionalFontNames;                               // 0x0108(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay, NativeAccessSpecifierPublic)
	TSubclassOf<class UConsole>                   ConsoleClass;                                      // 0x0118(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         ConsoleClassName;                                  // 0x0120(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameViewportClient>        GameViewportClientClass;                           // 0x0140(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         GameViewportClientClassName;                       // 0x0148(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULocalPlayer>               LocalPlayerClass;                                  // 0x0168(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         LocalPlayerClassName;                              // 0x0170(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWorldSettings>             WorldSettingsClass;                                // 0x0190(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         WorldSettingsClassName;                            // 0x0198(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         NavigationSystemClassName;                         // 0x01B8(0x0020)(ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationSystemBase>      NavigationSystemClass;                             // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         NavigationSystemConfigClassName;                   // 0x01E0(0x0020)(ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationSystemConfig>    NavigationSystemConfigClass;                       // 0x0200(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         AvoidanceManagerClassName;                         // 0x0208(0x0020)(ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAvoidanceManager>          AvoidanceManagerClass;                             // 0x0228(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         AIControllerClassName;                             // 0x0230(0x0020)(ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPhysicsCollisionHandler>   PhysicsCollisionHandlerClass;                      // 0x0250(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         PhysicsCollisionHandlerClassName;                  // 0x0258(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         GameUserSettingsClassName;                         // 0x0278(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameUserSettings>          GameUserSettingsClass;                             // 0x0298(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameUserSettings*                      GameUserSettings;                                  // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ALevelScriptActor>          LevelScriptActorClass;                             // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         LevelScriptActorClassName;                         // 0x02B0(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         DefaultBlueprintBaseClassName;                     // 0x02D0(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         GameSingletonClassName;                            // 0x02F0(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                GameSingleton;                                     // 0x0310(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         AssetManagerClassName;                             // 0x0318(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAssetManager*                          AssetManager;                                      // 0x0338(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DefaultTexture;                                    // 0x0340(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DefaultTextureName;                                // 0x0348(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               DefaultDiffuseTexture;                             // 0x0368(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DefaultDiffuseTextureName;                         // 0x0370(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DefaultBSPVertexTexture;                           // 0x0390(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DefaultBSPVertexTextureName;                       // 0x0398(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             HighFrequencyNoiseTexture;                         // 0x03B8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        HighFrequencyNoiseTextureName;                     // 0x03C0(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DefaultBokehTexture;                               // 0x03E0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DefaultBokehTextureName;                           // 0x03E8(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DefaultBloomKernelTexture;                         // 0x0408(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DefaultBloomKernelTextureName;                     // 0x0410(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DefaultFilmGrainTexture;                           // 0x0430(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DefaultFilmGrainTextureName;                       // 0x0438(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              WireframeMaterial;                                 // 0x0458(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WireframeMaterialName;                             // 0x0460(0x0010)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              DebugMeshMaterial;                                 // 0x0470(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DebugMeshMaterialName;                             // 0x0478(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              NaniteHiddenSectionMaterial;                       // 0x0498(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NaniteHiddenSectionMaterialName;                   // 0x04A0(0x0010)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              EmissiveMeshMaterial;                              // 0x04B0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        EmissiveMeshMaterialName;                          // 0x04B8(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              LevelColorationLitMaterial;                        // 0x04D8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelColorationLitMaterialName;                    // 0x04E0(0x0010)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              LevelColorationUnlitMaterial;                      // 0x04F0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelColorationUnlitMaterialName;                  // 0x04F8(0x0010)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              LightingTexelDensityMaterial;                      // 0x0508(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LightingTexelDensityName;                          // 0x0510(0x0010)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              ShadedLevelColorationLitMaterial;                  // 0x0520(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShadedLevelColorationLitMaterialName;              // 0x0528(0x0010)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              ShadedLevelColorationUnlitMaterial;                // 0x0538(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShadedLevelColorationUnlitMaterialName;            // 0x0540(0x0010)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              RemoveSurfaceMaterial;                             // 0x0550(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        RemoveSurfaceMaterialName;                         // 0x0558(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              VertexColorMaterial;                               // 0x0578(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VertexColorMaterialName;                           // 0x0580(0x0010)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              VertexColorViewModeMaterial_ColorOnly;             // 0x0590(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VertexColorViewModeMaterialName_ColorOnly;         // 0x0598(0x0010)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              VertexColorViewModeMaterial_AlphaAsColor;          // 0x05A8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VertexColorViewModeMaterialName_AlphaAsColor;      // 0x05B0(0x0010)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              VertexColorViewModeMaterial_RedOnly;               // 0x05C0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VertexColorViewModeMaterialName_RedOnly;           // 0x05C8(0x0010)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              VertexColorViewModeMaterial_GreenOnly;             // 0x05D8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VertexColorViewModeMaterialName_GreenOnly;         // 0x05E0(0x0010)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              VertexColorViewModeMaterial_BlueOnly;              // 0x05F0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VertexColorViewModeMaterialName_BlueOnly;          // 0x05F8(0x0010)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DebugEditorMaterialName;                           // 0x0608(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              ConstraintLimitMaterial;                           // 0x0628(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ConstraintLimitMaterialX;                          // 0x0630(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ConstraintLimitMaterialXAxis;                      // 0x0638(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ConstraintLimitMaterialY;                          // 0x0640(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ConstraintLimitMaterialYAxis;                      // 0x0648(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ConstraintLimitMaterialZ;                          // 0x0650(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ConstraintLimitMaterialZAxis;                      // 0x0658(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ConstraintLimitMaterialPrismatic;                  // 0x0660(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              InvalidLightmapSettingsMaterial;                   // 0x0668(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        InvalidLightmapSettingsMaterialName;               // 0x0670(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              PreviewShadowsIndicatorMaterial;                   // 0x0690(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        PreviewShadowsIndicatorMaterialName;               // 0x0698(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              ArrowMaterial;                                     // 0x06B8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ArrowMaterialYellow;                               // 0x06C0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ArrowMaterialName;                                 // 0x06C8(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightingOnlyBrightness;                            // 0x06E8(0x0010)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   ShaderComplexityColors;                            // 0x06F8(0x0010)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   QuadComplexityColors;                              // 0x0708(0x0010)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   LightComplexityColors;                             // 0x0718(0x0010)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   StationaryLightOverlapColors;                      // 0x0728(0x0010)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   LODColorationColors;                               // 0x0738(0x0010)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   HLODColorationColors;                              // 0x0748(0x0010)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   StreamingAccuracyColors;                           // 0x0758(0x0010)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	struct FLinearColor                           GPUSkinCacheVisualizationExcludedColor;            // 0x0768(0x0010)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GPUSkinCacheVisualizationIncludedColor;            // 0x0778(0x0010)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GPUSkinCacheVisualizationRecomputeTangentsColor;   // 0x0788(0x0010)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GPUSkinCacheVisualizationLowMemoryThresholdInMB;   // 0x0798(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GPUSkinCacheVisualizationHighMemoryThresholdInMB;  // 0x079C(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GPUSkinCacheVisualizationLowMemoryColor;           // 0x07A0(0x0010)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GPUSkinCacheVisualizationMidMemoryColor;           // 0x07B0(0x0010)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GPUSkinCacheVisualizationHighMemoryColor;          // 0x07C0(0x0010)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   GPUSkinCacheVisualizationRayTracingLODOffsetColors; // 0x07D0(0x0010)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	float                                         MaxPixelShaderAdditiveComplexityCount;             // 0x07E0(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxES3PixelShaderAdditiveComplexityCount;          // 0x07E4(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLightMapDensity;                                // 0x07E8(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdealLightMapDensity;                              // 0x07EC(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLightMapDensity;                                // 0x07F0(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRenderLightMapDensityGrayscale : 1;               // 0x07F4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_7F5[0x3];                                      // 0x07F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderLightMapDensityGrayscaleScale;               // 0x07F8(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RenderLightMapDensityColorScale;                   // 0x07FC(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightMapDensityVertexMappedColor;                  // 0x0800(0x0010)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightMapDensitySelectedColor;                      // 0x0810(0x0010)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStatColorMapping>              StatColorMappings;                                 // 0x0820(0x0010)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      DefaultPhysMaterial;                               // 0x0830(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DefaultPhysMaterialName;                           // 0x0838(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      DefaultDestructiblePhysMaterial;                   // 0x0858(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DefaultDestructiblePhysMaterialName;               // 0x0860(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameNameRedirect>              ActiveGameNameRedirects;                           // 0x0880(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FClassRedirect>                 ActiveClassRedirects;                              // 0x0890(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FPluginRedirect>                ActivePluginRedirects;                             // 0x08A0(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FStructRedirect>                ActiveStructRedirects;                             // 0x08B0(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	class UTexture2D*                             PreIntegratedSkinBRDFTexture;                      // 0x08C0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        PreIntegratedSkinBRDFTextureName;                  // 0x08C8(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             BlueNoiseScalarTexture;                            // 0x08E8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             BlueNoiseVec2Texture;                              // 0x08F0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        BlueNoiseScalarTextureName;                        // 0x08F8(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        BlueNoiseVec2TextureName;                          // 0x0918(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2DArray*                        GlintTexture;                                      // 0x0938(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2DArray*                        GlintTexture2;                                     // 0x0940(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        GlintTextureName;                                  // 0x0948(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        GlintTexture2Name;                                 // 0x0968(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumeTexture*                         SimpleVolumeTexture;                               // 0x0988(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SimpleVolumeTextureName;                           // 0x0990(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumeTexture*                         SimpleVolumeEnvTexture;                            // 0x09B0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SimpleVolumeEnvTextureName;                        // 0x09B8(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             MiniFontTexture;                                   // 0x09D8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        MiniFontTextureName;                               // 0x09E0(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               WeightMapPlaceholderTexture;                       // 0x0A00(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        WeightMapPlaceholderTextureName;                   // 0x0A08(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             LightMapDensityTexture;                            // 0x0A28(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        LightMapDensityTextureName;                        // 0x0A30(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A50[0x8];                                      // 0x0A50(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameViewportClient*                    GameViewport;                                      // 0x0A58(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         DeferredCommands;                                  // 0x0A60(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         NearClipPlane;                                     // 0x0A70(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bSubtitlesEnabled : 1;                             // 0x0A74(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSubtitlesForcedOff : 1;                           // 0x0A74(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A75[0x3];                                      // 0x0A75(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaximumLoopIterationCount;                         // 0x0A78(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCanBlueprintsTickByDefault : 1;                   // 0x0A7C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOptimizeAnimBlueprintMemberVariableAccess : 1;    // 0x0A7C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowMultiThreadedAnimationUpdate : 1;            // 0x0A7C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableEditorPSysRealtimeLOD : 1;                  // 0x0A7C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_A7C_4 : 1;                                  // 0x0A7C(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bSmoothFrameRate : 1;                              // 0x0A7C(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseFixedFrameRate : 1;                            // 0x0A7C(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A7D[0x3];                                      // 0x0A7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FixedFrameRate;                                    // 0x0A80(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            SmoothedFrameRateRange;                            // 0x0A84(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A94[0x4];                                      // 0x0A94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UEngineCustomTimeStep*                  CustomTimeStep;                                    // 0x0A98(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AA0[0x20];                                     // 0x0AA0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         CustomTimeStepClassName;                           // 0x0AC0(0x0020)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTimecodeProvider*                      TimecodeProvider;                                  // 0x0AE0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AE8[0x20];                                     // 0x0AE8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         TimecodeProviderClassName;                         // 0x0B08(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateDefaultTimecode;                          // 0x0B28(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B29[0x3];                                      // 0x0B29(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameRate                             GenerateDefaultTimecodeFrameRate;                  // 0x0B2C(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GenerateDefaultTimecodeFrameDelay;                 // 0x0B34(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCheckForMultiplePawnsSpawnedInAFrame : 1;         // 0x0B38(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B39[0x3];                                      // 0x0B39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumPawnsAllowedToBeSpawnedInAFrame;                // 0x0B3C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bShouldGenerateLowQualityLightmaps : 1;            // 0x0B40(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Config, GlobalConfig, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B41[0x3];                                      // 0x0B41(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 C_WorldBox;                                        // 0x0B44(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 C_BrushWire;                                       // 0x0B48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 C_AddWire;                                         // 0x0B4C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 C_SubtractWire;                                    // 0x0B50(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 C_SemiSolidWire;                                   // 0x0B54(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 C_NonSolidWire;                                    // 0x0B58(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 C_WireBackground;                                  // 0x0B5C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 C_ScaleBoxHi;                                      // 0x0B60(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 C_VolumeCollision;                                 // 0x0B64(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 C_BSPCollision;                                    // 0x0B68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 C_OrthoBackground;                                 // 0x0B6C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 C_Volume;                                          // 0x0B70(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 C_BrushShape;                                      // 0x0B74(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B78[0x8];                                      // 0x0B78(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectoryPath                         GameScreenshotSaveDirectory;                       // 0x0B80(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseStaticMeshMinLODPerQualityLevels;               // 0x0B90(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSkeletalMeshMinLODPerQualityLevels;             // 0x0B91(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseGrassVarityPerQualityLevels;                    // 0x0B92(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransitionType                               TransitionType;                                    // 0x0B93(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B94[0x4];                                      // 0x0B94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TransitionDescription;                             // 0x0B98(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransitionGameMode;                                // 0x0BA8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAllowMatureLanguage : 1;                          // 0x0BB8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_BB9[0x3];                                      // 0x0BB9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraRotationThreshold;                           // 0x0BBC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraTranslationThreshold;                        // 0x0BC0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrimitiveProbablyVisibleTime;                      // 0x0BC4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxOcclusionPixelsFraction;                        // 0x0BC8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPauseOnLossOfFocus : 1;                           // 0x0BCC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_BCD[0x3];                                      // 0x0BCD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxParticleResize;                                 // 0x0BD0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxParticleResizeWarn;                             // 0x0BD4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDropNoteInfo>                  PendingDroppedNotes;                               // 0x0BD8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	float                                         NetClientTicksPerSecond;                           // 0x0BE8(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayGamma;                                      // 0x0BEC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDesiredFrameRate;                               // 0x0BF0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DefaultSelectedMaterialColor;                      // 0x0BF4(0x0010)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                           SelectedMaterialColor;                             // 0x0C04(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                           SelectionOutlineColor;                             // 0x0C14(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                           SubduedSelectionOutlineColor;                      // 0x0C24(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                           SelectedMaterialColorOverride;                     // 0x0C34(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsOverridingSelectedColor;                        // 0x0C44(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C45[0x3];                                      // 0x0C45(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bEnableOnScreenDebugMessages : 1;                  // 0x0C48(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableOnScreenDebugMessagesDisplay : 1;           // 0x0C48(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSuppressMapWarnings : 1;                          // 0x0C48(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableAILogging : 1;                             // 0x0C48(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C49[0x3];                                      // 0x0C49(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        bEnableVisualLogRecordingOnStart;                  // 0x0C4C(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScreenSaverInhibitorSemaphore;                     // 0x0C50(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bLockReadOnlyLevels : 1;                           // 0x0C54(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C55[0x3];                                      // 0x0C55(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParticleEventManagerClassPath;                     // 0x0C58(0x0010)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelectionHighlightIntensity;                       // 0x0C68(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BSPSelectionHighlightIntensity;                    // 0x0C6C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelectionHighlightIntensityBillboards;             // 0x0C70(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C74[0x294];                                    // 0x0C74(0x0294)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        GlobalNetTravelCount;                              // 0x0F08(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F0C[0x4];                                      // 0x0F0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNetDriverDefinition>           NetDriverDefinitions;                              // 0x0F10(0x0010)(ZeroConstructor, Transient, Config, NativeAccessSpecifierPublic)
	TArray<struct FIrisNetDriverConfig>           IrisNetDriverConfigs;                              // 0x0F20(0x0010)(ZeroConstructor, Transient, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                         ServerActors;                                      // 0x0F30(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                         RuntimeServerActors;                               // 0x0F40(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         NetErrorLogInterval;                               // 0x0F50(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bStartedLoadMapMovie : 1;                          // 0x0F54(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F55[0x3B];                                     // 0x0F55(0x003B)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NextWorldContextHandle;                            // 0x0F90(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F94[0xE4];                                     // 0x0F94(0x00E4)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEngine* GetEngine();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Engine")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Engine")
	}
	static class UEngine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEngine>();
	}
};
DUMPER7_ASSERTS_UEngine;

// Class Engine.GameEngine
// 0x0058 (0x10D0 - 0x1078)
class UGameEngine final : public UEngine
{
public:
	float                                         MaxDeltaTime;                                      // 0x1078(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerFlushLogInterval;                            // 0x107C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameInstance*                          GameInstance;                                      // 0x1080(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1088[0x48];                                    // 0x1088(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UGameEngine* GetEngine();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GameEngine")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GameEngine")
	}
	static class UGameEngine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameEngine>();
	}
};
DUMPER7_ASSERTS_UGameEngine;

// Class Engine.MaterialExpressionPreviousFrameSwitch
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionPreviousFrameSwitch final : public UMaterialExpression
{
public:
	struct FExpressionInput                       CurrentFrame;                                      // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       PreviousFrame;                                     // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionPreviousFrameSwitch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionPreviousFrameSwitch")
	}
	static class UMaterialExpressionPreviousFrameSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionPreviousFrameSwitch>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionPreviousFrameSwitch;

// Class Engine.KismetMaterialLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetMaterialLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent, class FName OptionalName, EMIDCreationFlags CreationFlags);
	static float GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, class FName ParameterName);
	static struct FLinearColor GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, class FName ParameterName);
	static void SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, class FName ParameterName, float ParameterValue);
	static void SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, class FName ParameterName, const struct FLinearColor& ParameterValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("KismetMaterialLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"KismetMaterialLibrary")
	}
	static class UKismetMaterialLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKismetMaterialLibrary>();
	}
};
DUMPER7_ASSERTS_UKismetMaterialLibrary;

// Class Engine.AnimationAssetExtensions
// 0x0000 (0x0028 - 0x0028)
class UAnimationAssetExtensions final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimationAssetExtensions")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimationAssetExtensions")
	}
	static class UAnimationAssetExtensions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimationAssetExtensions>();
	}
};
DUMPER7_ASSERTS_UAnimationAssetExtensions;

// Class Engine.PoseWatchFolder
// 0x0000 (0x0028 - 0x0028)
class UPoseWatchFolder final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PoseWatchFolder")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PoseWatchFolder")
	}
	static class UPoseWatchFolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseWatchFolder>();
	}
};
DUMPER7_ASSERTS_UPoseWatchFolder;

// Class Engine.AnimLayerInterface
// 0x0000 (0x0000 - 0x0000)
class IAnimLayerInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimLayerInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimLayerInterface")
	}
	static class IAnimLayerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAnimLayerInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IAnimLayerInterface;

// Class Engine.MaterialExpressionTruncate
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionTruncate final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTruncate")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTruncate")
	}
	static class UMaterialExpressionTruncate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTruncate>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTruncate;

// Class Engine.AnimationAsset
// 0x0058 (0x0080 - 0x0028)
class UAnimationAsset : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeleton*                              Skeleton;                                          // 0x0038(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x20];                                      // 0x0040(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMetaData*>                  MetaData;                                          // 0x0060(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UAssetUserData*>                 AssetUserData;                                     // 0x0070(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	float GetPlayLength() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimationAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimationAsset")
	}
	static class UAnimationAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimationAsset>();
	}
};
DUMPER7_ASSERTS_UAnimationAsset;

// Class Engine.AnimSequenceBase
// 0x0030 (0x00B0 - 0x0080)
class UAnimSequenceBase : public UAnimationAsset
{
public:
	TArray<struct FAnimNotifyEvent>               Notifies;                                          // 0x0080(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         SequenceLength;                                    // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawCurveTracks                        RawCurveData;                                      // 0x0098(0x0010)(Protected, NativeAccessSpecifierProtected)
	float                                         RateScale;                                         // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x00AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimSequenceBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimSequenceBase")
	}
	static class UAnimSequenceBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimSequenceBase>();
	}
};
DUMPER7_ASSERTS_UAnimSequenceBase;

// Class Engine.InputDeviceProperty
// 0x0008 (0x0030 - 0x0028)
class UInputDeviceProperty : public UObject
{
public:
	float                                         PropertyDuration;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyDeviceProperty(const struct FPlatformUserId& UserId, const struct FInputDeviceId& DeviceID);
	void EvaluateDeviceProperty(const struct FPlatformUserId& PlatformUser, const struct FInputDeviceId& DeviceID, const float DeltaTime, const float Duration);
	void ResetDeviceProperty(const struct FPlatformUserId& PlatformUser, const struct FInputDeviceId& DeviceID, bool bForceReset);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InputDeviceProperty")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InputDeviceProperty")
	}
	static class UInputDeviceProperty* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputDeviceProperty>();
	}
};
DUMPER7_ASSERTS_UInputDeviceProperty;

// Class Engine.InputDeviceTriggerEffect
// 0x0010 (0x0040 - 0x0030)
class UInputDeviceTriggerEffect : public UInputDeviceProperty
{
public:
	struct FDeviceTriggerBaseData                 BaseTriggerData;                                   // 0x0030(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0xE];                                       // 0x0032(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InputDeviceTriggerEffect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InputDeviceTriggerEffect")
	}
	static class UInputDeviceTriggerEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputDeviceTriggerEffect>();
	}
};
DUMPER7_ASSERTS_UInputDeviceTriggerEffect;

// Class Engine.InputDeviceTriggerResistanceProperty
// 0x0080 (0x00C0 - 0x0040)
class UInputDeviceTriggerResistanceProperty final : public UInputDeviceTriggerEffect
{
public:
	struct FDeviceTriggerTriggerResistanceData    TriggerData;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FDeviceTriggerTriggerResistanceData> DeviceOverrideData;                // 0x0050(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_A0[0x20];                                      // 0x00A0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InputDeviceTriggerResistanceProperty")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InputDeviceTriggerResistanceProperty")
	}
	static class UInputDeviceTriggerResistanceProperty* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputDeviceTriggerResistanceProperty>();
	}
};
DUMPER7_ASSERTS_UInputDeviceTriggerResistanceProperty;

// Class Engine.ClusterUnionActor
// 0x0008 (0x02A0 - 0x0298)
class AClusterUnionActor final : public AActor
{
public:
	class UClusterUnionComponent*                 ClusterUnion;                                      // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UClusterUnionComponent* GetClusterUnionComponent() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ClusterUnionActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ClusterUnionActor")
	}
	static class AClusterUnionActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AClusterUnionActor>();
	}
};
DUMPER7_ASSERTS_AClusterUnionActor;

// Class Engine.MaterialExpressionRotator
// 0x0060 (0x0110 - 0x00B0)
class UMaterialExpressionRotator final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Coordinate;                                        // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Time;                                              // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         CenterX;                                           // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterY;                                           // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ConstCoordinate;                                   // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionRotator")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionRotator")
	}
	static class UMaterialExpressionRotator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionRotator>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionRotator;

// Class Engine.RawAnimSequenceTrackExtensions
// 0x0000 (0x0028 - 0x0028)
class URawAnimSequenceTrackExtensions final : public UBlueprintFunctionLibrary
{
public:
	static TArray<struct FVector> GetPositionalKeys(const struct FRawAnimSequenceTrack& Track);
	static TArray<struct FQuat> GetRotationalKeys(const struct FRawAnimSequenceTrack& Track);
	static TArray<struct FVector> GetScaleKeys(const struct FRawAnimSequenceTrack& Track);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RawAnimSequenceTrackExtensions")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RawAnimSequenceTrackExtensions")
	}
	static class URawAnimSequenceTrackExtensions* GetDefaultObj()
	{
		return GetDefaultObjImpl<URawAnimSequenceTrackExtensions>();
	}
};
DUMPER7_ASSERTS_URawAnimSequenceTrackExtensions;

// Class Engine.AssetExportTask
// 0x0050 (0x0078 - 0x0028)
class UAssetExportTask final : public UObject
{
public:
	class UObject*                                Object;                                            // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExporter*                              Exporter;                                          // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplaceIdentical;                                 // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrompt;                                           // 0x004A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutomated;                                        // 0x004B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFileArchive;                                   // 0x004C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWriteEmptyFiles;                                  // 0x004D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        IgnoreObjectList;                                  // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UObject*                                Options;                                           // 0x0060(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Errors;                                            // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AssetExportTask")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AssetExportTask")
	}
	static class UAssetExportTask* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetExportTask>();
	}
};
DUMPER7_ASSERTS_UAssetExportTask;

// Class Engine.ForceFeedbackEffect
// 0x0078 (0x00A0 - 0x0028)
class UForceFeedbackEffect final : public UObject
{
public:
	TArray<struct FForceFeedbackChannelDetails>   ChannelDetails;                                    // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FForceFeedbackEffectOverridenChannelDetails> PerDeviceOverrides;        // 0x0038(0x0050)(Edit, NativeAccessSpecifierPublic)
	TArray<class UInputDeviceProperty*>           DeviceProperties;                                  // 0x0088(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ForceFeedbackEffect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ForceFeedbackEffect")
	}
	static class UForceFeedbackEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UForceFeedbackEffect>();
	}
};
DUMPER7_ASSERTS_UForceFeedbackEffect;

// Class Engine.AssetManagerSettings
// 0x00C8 (0x0100 - 0x0038)
class UAssetManagerSettings final : public UDeveloperSettings
{
public:
	TArray<struct FPrimaryAssetTypeInfo>          PrimaryAssetTypesToScan;                           // 0x0038(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FDirectoryPath>                 DirectoriesToExclude;                              // 0x0048(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FPrimaryAssetRulesOverride>     PrimaryAssetRules;                                 // 0x0058(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FPrimaryAssetRulesCustomOverride> CustomPrimaryAssetRules;                         // 0x0068(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bOnlyCookProductionAssets;                         // 0x0078(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldManagerDetermineTypeAndName;                // 0x0079(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldGuessTypeAndNameInEditor;                   // 0x007A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAcquireMissingChunksOnLoad;                 // 0x007B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldWarnAboutInvalidAssets;                     // 0x007C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAssetManagerRedirect>          PrimaryAssetIdRedirects;                           // 0x0080(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FAssetManagerRedirect>          PrimaryAssetTypeRedirects;                         // 0x0090(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FAssetManagerRedirect>          AssetPathRedirects;                                // 0x00A0(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TSet<class FName>                             MetaDataTagsForAssetRegistry;                      // 0x00B0(0x0050)(Edit, Config, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AssetManagerSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AssetManagerSettings")
	}
	static class UAssetManagerSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetManagerSettings>();
	}
};
DUMPER7_ASSERTS_UAssetManagerSettings;

// Class Engine.MaterialExpressionStrataUtilityBase
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionStrataUtilityBase : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataUtilityBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataUtilityBase")
	}
	static class UMaterialExpressionStrataUtilityBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataUtilityBase>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataUtilityBase;

// Class Engine.MaterialExpressionStrataThinFilm
// 0x00C8 (0x0178 - 0x00B0)
class UMaterialExpressionStrataThinFilm final : public UMaterialExpressionStrataUtilityBase
{
public:
	struct FExpressionInput                       Normal;                                            // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       F0;                                                // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       F90;                                               // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Thickness;                                         // 0x0128(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       IOR;                                               // 0x0150(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataThinFilm")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataThinFilm")
	}
	static class UMaterialExpressionStrataThinFilm* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataThinFilm>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataThinFilm;

// Class Engine.SoundNode
// 0x0020 (0x0048 - 0x0028)
class USoundNode : public UObject
{
public:
	TArray<class USoundNode*>                     ChildNodes;                                        // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNode")
	}
	static class USoundNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNode>();
	}
};
DUMPER7_ASSERTS_USoundNode;

// Class Engine.SoundNodeDialoguePlayer
// 0x0028 (0x0070 - 0x0048)
class USoundNodeDialoguePlayer final : public USoundNode
{
public:
	struct FDialogueWaveParameter                 DialogueWaveParameter;                             // 0x0048(0x0020)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bLooping : 1;                                      // 0x0068(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeDialoguePlayer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeDialoguePlayer")
	}
	static class USoundNodeDialoguePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeDialoguePlayer>();
	}
};
DUMPER7_ASSERTS_USoundNodeDialoguePlayer;

// Class Engine.MaterialExpressionParticleDirection
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionParticleDirection final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionParticleDirection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionParticleDirection")
	}
	static class UMaterialExpressionParticleDirection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionParticleDirection>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionParticleDirection;

// Class Engine.AsyncPhysicsData
// 0x0008 (0x0030 - 0x0028)
class UAsyncPhysicsData final : public UObject
{
public:
	int32                                         ServerFrame;                                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ReplicationRedundancy;                             // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AsyncPhysicsData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AsyncPhysicsData")
	}
	static class UAsyncPhysicsData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncPhysicsData>();
	}
};
DUMPER7_ASSERTS_UAsyncPhysicsData;

// Class Engine.AudioPanelWidgetInterface
// 0x0000 (0x0000 - 0x0000)
class IAudioPanelWidgetInterface final
{
public:
	class FText GetEditorName();
	class FName GetIconBrushName();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AudioPanelWidgetInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AudioPanelWidgetInterface")
	}
	static class IAudioPanelWidgetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAudioPanelWidgetInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IAudioPanelWidgetInterface;

// Class Engine.AnimNotify_PauseClothingSimulation
// 0x0000 (0x0038 - 0x0038)
class UAnimNotify_PauseClothingSimulation final : public UAnimNotify
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimNotify_PauseClothingSimulation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimNotify_PauseClothingSimulation")
	}
	static class UAnimNotify_PauseClothingSimulation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PauseClothingSimulation>();
	}
};
DUMPER7_ASSERTS_UAnimNotify_PauseClothingSimulation;

// Class Engine.MaterialExpressionConstant4Vector
// 0x0010 (0x00C0 - 0x00B0)
class UMaterialExpressionConstant4Vector final : public UMaterialExpression
{
public:
	struct FLinearColor                           Constant;                                          // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionConstant4Vector")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionConstant4Vector")
	}
	static class UMaterialExpressionConstant4Vector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionConstant4Vector>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionConstant4Vector;

// Class Engine.BlendableInterface
// 0x0000 (0x0000 - 0x0000)
class IBlendableInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BlendableInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BlendableInterface")
	}
	static class IBlendableInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBlendableInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IBlendableInterface;

// Class Engine.CurveSourceInterface
// 0x0000 (0x0000 - 0x0000)
class ICurveSourceInterface final
{
public:
	class FName GetBindingName() const;
	void GetCurves(TArray<struct FNamedCurveValue>* OutValues) const;
	float GetCurveValue(class FName CurveName) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CurveSourceInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CurveSourceInterface")
	}
	static class ICurveSourceInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICurveSourceInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ICurveSourceInterface;

// Class Engine.AnalysisProperties
// 0x0010 (0x0038 - 0x0028)
class UAnalysisProperties final : public UObject
{
public:
	class FString                                 Function;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnalysisProperties")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnalysisProperties")
	}
	static class UAnalysisProperties* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnalysisProperties>();
	}
};
DUMPER7_ASSERTS_UAnalysisProperties;

// Class Engine.SoundNodeRandom
// 0x0030 (0x0078 - 0x0048)
class USoundNodeRandom final : public USoundNode
{
public:
	TArray<float>                                 Weights;                                           // 0x0048(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                  HasBeenUsed;                                       // 0x0058(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                         NumRandomUsed;                                     // 0x0068(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreselectAtLevelLoad;                              // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bShouldExcludeFromBranchCulling : 1;               // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSoundCueExcludedFromBranchCulling : 1;            // 0x0070(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRandomizeWithoutReplacement : 1;                  // 0x0070(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeRandom")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeRandom")
	}
	static class USoundNodeRandom* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeRandom>();
	}
};
DUMPER7_ASSERTS_USoundNodeRandom;

// Class Engine.MaterialExpressionFmod
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionFmod final : public UMaterialExpression
{
public:
	struct FExpressionInput                       A;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       B;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionFmod")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionFmod")
	}
	static class UMaterialExpressionFmod* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionFmod>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionFmod;

// Class Engine.BlendSpace
// 0x0140 (0x01C0 - 0x0080)
class UBlendSpace : public UAnimationAsset
{
public:
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bContainsRotationOffsetMeshSpaceSamples;           // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInterpolationParameter                InterpolationParam[0x3];                           // 0x008C(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TargetWeightInterpolationSpeedPerSec;              // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetWeightInterpolationEaseInOut;               // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMeshSpaceBlending;                           // 0x00C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x00C2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimLength;                                        // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENotifyTriggerMode                            NotifyTriggerMode;                                 // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterpolateUsingGrid;                             // 0x00C9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPreferredTriangulationDirection              PreferredTriangulationDirection;                   // 0x00CA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlendSpacePerBoneBlendMode                   PerBoneBlendMode;                                  // 0x00CB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPerBoneInterpolation>          ManualPerBoneOverrides;                            // 0x00D0(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FBlendSpaceBlendProfile                PerBoneBlendProfile;                               // 0x00E0(0x0010)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SampleIndexWithMarkers;                            // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBlendSample>                   SampleData;                                        // 0x0108(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FEditorElement>                 GridSamples;                                       // 0x0118(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FBlendSpaceData                        BlendSpaceData;                                    // 0x0128(0x0020)(Protected, NativeAccessSpecifierProtected)
	struct FBlendParameter                        BlendParameters[0x3];                              // 0x0148(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	EBlendSpaceAxis                               AxisToScaleAnimation;                              // 0x01A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 DimensionIndices;                                  // 0x01B0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BlendSpace")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BlendSpace")
	}
	static class UBlendSpace* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlendSpace>();
	}
};
DUMPER7_ASSERTS_UBlendSpace;

// Class Engine.SoundNodeSoundClass
// 0x0010 (0x0058 - 0x0048)
class USoundNodeSoundClass final : public USoundNode
{
public:
	class USoundClass*                            SoundClassOverride;                                // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeSoundClass")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeSoundClass")
	}
	static class USoundNodeSoundClass* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeSoundClass>();
	}
};
DUMPER7_ASSERTS_USoundNodeSoundClass;

// Class Engine.MaterialExpressionSubtract
// 0x0058 (0x0108 - 0x00B0)
class UMaterialExpressionSubtract final : public UMaterialExpression
{
public:
	struct FExpressionInput                       A;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       B;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstA;                                            // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstB;                                            // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSubtract")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSubtract")
	}
	static class UMaterialExpressionSubtract* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSubtract>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSubtract;

// Class Engine.AnimationAttributeIdentifierExtensions
// 0x0000 (0x0028 - 0x0028)
class UAnimationAttributeIdentifierExtensions final : public UBlueprintFunctionLibrary
{
public:
	static bool IsValid(struct FAnimationAttributeIdentifier& Identifier);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimationAttributeIdentifierExtensions")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimationAttributeIdentifierExtensions")
	}
	static class UAnimationAttributeIdentifierExtensions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimationAttributeIdentifierExtensions>();
	}
};
DUMPER7_ASSERTS_UAnimationAttributeIdentifierExtensions;

// Class Engine.Breakpoint
// 0x0000 (0x0028 - 0x0028)
class UBreakpoint final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Breakpoint")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Breakpoint")
	}
	static class UBreakpoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBreakpoint>();
	}
};
DUMPER7_ASSERTS_UBreakpoint;

// Class Engine.BlueprintExtension
// 0x0000 (0x0028 - 0x0028)
class UBlueprintExtension final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BlueprintExtension")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BlueprintExtension")
	}
	static class UBlueprintExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintExtension>();
	}
};
DUMPER7_ASSERTS_UBlueprintExtension;

// Class Engine.MaterialExpressionParameter
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	class FName                                   ParameterName;                                     // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ExpressionGUID;                                    // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Group;                                             // 0x00C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortPriority;                                      // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionParameter")
	}
	static class UMaterialExpressionParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionParameter>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionParameter;

// Class Engine.MaterialExpressionDoubleVectorParameter
// 0x0028 (0x0100 - 0x00D8)
class UMaterialExpressionDoubleVectorParameter final : public UMaterialExpressionParameter
{
public:
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4d                              DefaultValue;                                      // 0x00E0(0x0020)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDoubleVectorParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDoubleVectorParameter")
	}
	static class UMaterialExpressionDoubleVectorParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDoubleVectorParameter>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDoubleVectorParameter;

// Class Engine.BookmarkBase
// 0x0000 (0x0028 - 0x0028)
class UBookmarkBase : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BookmarkBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BookmarkBase")
	}
	static class UBookmarkBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBookmarkBase>();
	}
};
DUMPER7_ASSERTS_UBookmarkBase;

// Class Engine.AnimNotifyState_TimedParticleEffect
// 0x0048 (0x0078 - 0x0030)
class UAnimNotifyState_TimedParticleEffect final : public UAnimNotifyState
{
public:
	class UParticleSystem*                        PSTemplate;                                        // 0x0030(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0038(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0040(0x0018)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0058(0x0018)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDestroyAtEnd;                                     // 0x0070(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimNotifyState_TimedParticleEffect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimNotifyState_TimedParticleEffect")
	}
	static class UAnimNotifyState_TimedParticleEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedParticleEffect>();
	}
};
DUMPER7_ASSERTS_UAnimNotifyState_TimedParticleEffect;

// Class Engine.VirtualTexturePoolConfig
// 0x0018 (0x0040 - 0x0028)
class UVirtualTexturePoolConfig final : public UObject
{
public:
	int32                                         DefaultSizeInMegabyte;                             // 0x0028(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVirtualTextureSpacePoolConfig> Pools;                                             // 0x0030(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VirtualTexturePoolConfig")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VirtualTexturePoolConfig")
	}
	static class UVirtualTexturePoolConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVirtualTexturePoolConfig>();
	}
};
DUMPER7_ASSERTS_UVirtualTexturePoolConfig;

// Class Engine.MaterialExpressionParticleSpeed
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionParticleSpeed final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionParticleSpeed")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionParticleSpeed")
	}
	static class UMaterialExpressionParticleSpeed* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionParticleSpeed>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionParticleSpeed;

// Class Engine.BookMark2D
// 0x0010 (0x0038 - 0x0028)
class UBookMark2D final : public UBookmarkBase
{
public:
	float                                         Zoom2D;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              Location;                                          // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BookMark2D")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BookMark2D")
	}
	static class UBookMark2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBookMark2D>();
	}
};
DUMPER7_ASSERTS_UBookMark2D;

// Class Engine.ReflectionCapture
// 0x0008 (0x02A0 - 0x0298)
class AReflectionCapture : public AActor
{
public:
	class UReflectionCaptureComponent*            CaptureComponent;                                  // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ReflectionCapture")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ReflectionCapture")
	}
	static class AReflectionCapture* GetDefaultObj()
	{
		return GetDefaultObjImpl<AReflectionCapture>();
	}
};
DUMPER7_ASSERTS_AReflectionCapture;

// Class Engine.AnimSingleNodeInstance
// 0x0010 (0x0360 - 0x0350)
class UAnimSingleNodeInstance final : public UAnimInstance
{
public:
	class UAnimationAsset*                        CurrentAsset;                                      // 0x0348(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             PostEvaluateAnimEvent;                             // 0x0350(0x0010)(ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	float GetLength();
	const class UMirrorDataTable* GetMirrorDataTable();
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);
	void SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);
	void SetBlendSpacePosition(const struct FVector& InPosition);
	void SetLooping(bool bIsLooping);
	void SetMirrorDataTable(const class UMirrorDataTable* MirrorDataTable);
	void SetPlaying(bool bIsPlaying);
	void SetPlayRate(float InPlayRate);
	void SetPosition(float InPosition, bool bFireNotifies);
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);
	void SetPreviewCurveOverride(const class FName& PoseName, float Value, bool bRemoveIfZero);
	void SetReverse(bool bInReverse);
	void StopAnim();

	class UAnimationAsset* GetAnimationAsset() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimSingleNodeInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimSingleNodeInstance")
	}
	static class UAnimSingleNodeInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimSingleNodeInstance>();
	}
};
DUMPER7_ASSERTS_UAnimSingleNodeInstance;

// Class Engine.MaterialExpressionDBufferTexture
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionDBufferTexture final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Coordinates;                                       // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	EDBufferTextureId                             DBufferTextureId;                                  // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDBufferTexture")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDBufferTexture")
	}
	static class UMaterialExpressionDBufferTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDBufferTexture>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDBufferTexture;

// Class Engine.BoxReflectionCapture
// 0x0000 (0x02A0 - 0x02A0)
class ABoxReflectionCapture final : public AReflectionCapture
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BoxReflectionCapture")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BoxReflectionCapture")
	}
	static class ABoxReflectionCapture* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABoxReflectionCapture>();
	}
};
DUMPER7_ASSERTS_ABoxReflectionCapture;

// Class Engine.PreviewMeshCollection
// 0x0020 (0x0050 - 0x0030)
class UPreviewMeshCollection final : public UDataAsset
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeleton*                              Skeleton;                                          // 0x0038(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPreviewMeshCollectionEntry>    SkeletalMeshes;                                    // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PreviewMeshCollection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PreviewMeshCollection")
	}
	static class UPreviewMeshCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPreviewMeshCollection>();
	}
};
DUMPER7_ASSERTS_UPreviewMeshCollection;

// Class Engine.ReflectionCaptureComponent
// 0x0070 (0x0310 - 0x02A0)
class UReflectionCaptureComponent : public USceneComponent
{
public:
	class UBillboardComponent*                    CaptureOffsetComponent;                            // 0x02A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReflectionSourceType                         ReflectionSourceType;                              // 0x02A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           Cubemap;                                           // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceCubemapAngle;                                // 0x02B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x02BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CaptureOffset;                                     // 0x02C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MapBuildDataId;                                    // 0x02D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E8[0x28];                                     // 0x02E8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ReflectionCaptureComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ReflectionCaptureComponent")
	}
	static class UReflectionCaptureComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReflectionCaptureComponent>();
	}
};
DUMPER7_ASSERTS_UReflectionCaptureComponent;

// Class Engine.SoundSubmixBase
// 0x0018 (0x0040 - 0x0028)
class USoundSubmixBase : public UObject
{
public:
	bool                                          bAutoDisable;                                      // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoDisableTime;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundSubmixBase*>               ChildSubmixes;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundSubmixBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundSubmixBase")
	}
	static class USoundSubmixBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundSubmixBase>();
	}
};
DUMPER7_ASSERTS_USoundSubmixBase;

// Class Engine.SoundSubmixWithParentBase
// 0x0008 (0x0048 - 0x0040)
class USoundSubmixWithParentBase : public USoundSubmixBase
{
public:
	class USoundSubmixBase*                       ParentSubmix;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundSubmixWithParentBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundSubmixWithParentBase")
	}
	static class USoundSubmixWithParentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundSubmixWithParentBase>();
	}
};
DUMPER7_ASSERTS_USoundSubmixWithParentBase;

// Class Engine.SoundSubmix
// 0x0168 (0x01B0 - 0x0048)
class USoundSubmix final : public USoundSubmixWithParentBase
{
public:
	uint8                                         bMuteWhenBackgrounded : 1;                         // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USoundEffectSubmixPreset*>       SubmixEffectChain;                                 // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class USoundfieldEncodingSettingsBase*        AmbisonicsPluginSettings;                          // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnvelopeFollowerAttackTime;                        // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnvelopeFollowerReleaseTime;                       // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutputVolume;                                      // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetLevel;                                          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DryLevel;                                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoundModulationDestinationSettings    OutputVolumeModulation;                            // 0x0080(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSoundModulationDestinationSettings    WetLevelModulation;                                // 0x00D8(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSoundModulationDestinationSettings    DryLevelModulation;                                // 0x0130(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         bSendToAudioLink : 1;                              // 0x0188(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioLinkSettingsAbstract*             AudioLinkSettings;                                 // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class USoundWave* ResultingSoundWave)> OnSubmixRecordedFileDone; // 0x0198(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8[0x8];                                      // 0x01A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddEnvelopeFollowerDelegate(const class UObject* WorldContextObject, const TDelegate<void(const TArray<float>& Envelope)>& OnSubmixEnvelopeBP);
	void AddSpectralAnalysisDelegate(const class UObject* WorldContextObject, const TArray<struct FSoundSubmixSpectralAnalysisBandSettings>& InBandSettings, const TDelegate<void(const TArray<float>& Magnitude)>& OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);
	void RemoveSpectralAnalysisDelegate(const class UObject* WorldContextObject, const TDelegate<void(const TArray<float>& Magnitude)>& OnSubmixSpectralAnalysisBP);
	void SetDryVolumeModulation(const struct FSoundModulationDestinationSettings& InVolMod);
	void SetOutputVolumeModulation(const struct FSoundModulationDestinationSettings& InVolMod);
	void SetSubmixDryLevel(const class UObject* WorldContextObject, float InDryLevel);
	void SetSubmixOutputVolume(const class UObject* WorldContextObject, float InOutputVolume);
	void SetSubmixWetLevel(const class UObject* WorldContextObject, float InWetLevel);
	void SetWetVolumeModulation(const struct FSoundModulationDestinationSettings& InVolMod);
	void StartEnvelopeFollowing(const class UObject* WorldContextObject);
	void StartRecordingOutput(const class UObject* WorldContextObject, float ExpectedDuration);
	void StartSpectralAnalysis(const class UObject* WorldContextObject, EFFTSize FFTSize, EFFTPeakInterpolationMethod InterpolationMethod, EFFTWindowType WindowType, float HopSize, EAudioSpectrumType SpectrumType);
	void StopEnvelopeFollowing(const class UObject* WorldContextObject);
	void StopRecordingOutput(const class UObject* WorldContextObject, EAudioRecordingExportType ExportType, const class FString& Name_0, const class FString& Path, class USoundWave* ExistingSoundWaveToOverwrite);
	void StopSpectralAnalysis(const class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundSubmix")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundSubmix")
	}
	static class USoundSubmix* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundSubmix>();
	}
};
DUMPER7_ASSERTS_USoundSubmix;

// Class Engine.MaterialExpressionBreakMaterialAttributes
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionBreakMaterialAttributes final : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput               MaterialAttributes;                                // 0x00B0(0x0030)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionBreakMaterialAttributes")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionBreakMaterialAttributes")
	}
	static class UMaterialExpressionBreakMaterialAttributes* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionBreakMaterialAttributes>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionBreakMaterialAttributes;

// Class Engine.BoxReflectionCaptureComponent
// 0x0020 (0x0330 - 0x0310)
class UBoxReflectionCaptureComponent final : public UReflectionCaptureComponent
{
public:
	float                                         BoxTransitionDistance;                             // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          PreviewInfluenceBox;                               // 0x0318(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          PreviewCaptureBox;                                 // 0x0320(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BoxReflectionCaptureComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BoxReflectionCaptureComponent")
	}
	static class UBoxReflectionCaptureComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBoxReflectionCaptureComponent>();
	}
};
DUMPER7_ASSERTS_UBoxReflectionCaptureComponent;

// Class Engine.DataTable
// 0x0088 (0x00B0 - 0x0028)
class UDataTable : public UObject
{
public:
	class UScriptStruct*                          RowStruct;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, uint8*>                     RowMap;                                            // 0x0030(0x0050)(So, here's a RowMap. Good luck with it.)
	uint8                                         bStripFromClientBuilds : 1;                        // 0x0080(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreExtraFields : 1;                            // 0x0080(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreMissingFields : 1;                          // 0x0080(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ImportKeyField;                                    // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x18];                                      // 0x0098(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DataTable")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DataTable")
	}
	static class UDataTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataTable>();
	}
};
DUMPER7_ASSERTS_UDataTable;

// Class Engine.MirrorDataTable
// 0x0140 (0x01F0 - 0x00B0)
class UMirrorDataTable final : public UDataTable
{
public:
	TArray<struct FMirrorFindReplaceExpression>   MirrorFindReplaceExpressions;                      // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EAxis                                         MirrorAxis;                                        // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeleton*                              Skeleton;                                          // 0x00C8(0x0008)(Edit, ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x120];                                     // 0x00D0(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MirrorDataTable")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MirrorDataTable")
	}
	static class UMirrorDataTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMirrorDataTable>();
	}
};
DUMPER7_ASSERTS_UMirrorDataTable;

// Class Engine.BuiltInAttributesExtensions
// 0x0000 (0x0028 - 0x0028)
class UBuiltInAttributesExtensions final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BuiltInAttributesExtensions")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BuiltInAttributesExtensions")
	}
	static class UBuiltInAttributesExtensions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuiltInAttributesExtensions>();
	}
};
DUMPER7_ASSERTS_UBuiltInAttributesExtensions;

// Class Engine.ChaosBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UChaosBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static const class UChaosEventRelay* GetEventRelayFromContext(class UObject* ContextObject);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ChaosBlueprintLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ChaosBlueprintLibrary")
	}
	static class UChaosBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChaosBlueprintLibrary>();
	}
};
DUMPER7_ASSERTS_UChaosBlueprintLibrary;

// Class Engine.MaterialExpressionFeatureLevelSwitch
// 0x00F0 (0x01A0 - 0x00B0)
class UMaterialExpressionFeatureLevelSwitch final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Default;                                           // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Inputs[0x5];                                       // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionFeatureLevelSwitch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionFeatureLevelSwitch")
	}
	static class UMaterialExpressionFeatureLevelSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionFeatureLevelSwitch>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionFeatureLevelSwitch;

// Class Engine.ChaosEventRelay
// 0x0040 (0x0068 - 0x0028)
class UChaosEventRelay final : public UObject
{
public:
	TMulticastInlineDelegate<void(const TArray<struct FCollisionChaosEvent>& CollisionEvents)> OnCollisionEvent; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<struct FChaosBreakEvent>& BreakEvents)> OnBreakEvent; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<struct FChaosRemovalEvent>& RemovalEvents)> OnRemovalEvent; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<struct FChaosCrumblingEvent>& CrumblingEvents)> OnCrumblingEvent; // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ChaosEventRelay")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ChaosEventRelay")
	}
	static class UChaosEventRelay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChaosEventRelay>();
	}
};
DUMPER7_ASSERTS_UChaosEventRelay;

// Class Engine.AnimSequence
// 0x0148 (0x01F8 - 0x00B0)
class UAnimSequence final : public UAnimSequenceBase
{
public:
	class UAnimBoneCompressionSettings*           BoneCompressionSettings;                           // 0x00B0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimCurveCompressionSettings*          CurveCompressionSettings;                          // 0x00B8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x80];                                      // 0x00C0(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	class UVariableFrameStrippingSettings*        VariableFrameStrippingSettings;                    // 0x0140(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAdditiveAnimationType                        AdditiveAnimType;                                  // 0x0148(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAdditiveBasePoseType                         RefPoseType;                                       // 0x0149(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A[0x2];                                      // 0x014A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RefFrameIndex;                                     // 0x014C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RefPoseSeq;                                        // 0x0150(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RetargetSource;                                    // 0x0158(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     RetargetSourceAssetReferencePose;                  // 0x0160(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	EAnimInterpolationType                        Interpolation;                                     // 0x0170(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRootMotion;                                 // 0x0171(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionRootLock                           RootMotionRootLock;                                // 0x0172(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceRootLock;                                    // 0x0173(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseNormalizedRootMotionScale;                     // 0x0174(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRootMotionSettingsCopiedFromMontage;              // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_176[0x2];                                      // 0x0176(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAnimSyncMarker>                AuthoredSyncMarkers;                               // 0x0178(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_188[0x10];                                     // 0x0188(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameRate                             TargetFrameRate;                                   // 0x0198(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPerPlatformFrameRate                  PlatformTargetFrameRate;                           // 0x01A0(0x0008)(Edit, EditConst, NoDestructor, AssetRegistrySearchable, Protected, NativeAccessSpecifierProtected)
	TMap<struct FAnimationAttributeIdentifier, struct FAttributeCurve> AttributeCurves;              // 0x01A8(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimSequence")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimSequence")
	}
	static class UAnimSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimSequence>();
	}
};
DUMPER7_ASSERTS_UAnimSequence;

// Class Engine.ContentBundleManager
// 0x0010 (0x0038 - 0x0028)
class UContentBundleManager final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ContentBundleManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ContentBundleManager")
	}
	static class UContentBundleManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContentBundleManager>();
	}
};
DUMPER7_ASSERTS_UContentBundleManager;

// Class Engine.MaterialExpressionPerInstanceCustomData3Vector
// 0x0040 (0x00F0 - 0x00B0)
class UMaterialExpressionPerInstanceCustomData3Vector final : public UMaterialExpression
{
public:
	struct FExpressionInput                       DefaultValue;                                      // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           ConstDefaultValue;                                 // 0x00D8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        DataIndex;                                         // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionPerInstanceCustomData3Vector")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionPerInstanceCustomData3Vector")
	}
	static class UMaterialExpressionPerInstanceCustomData3Vector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionPerInstanceCustomData3Vector>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionPerInstanceCustomData3Vector;

// Class Engine.Player
// 0x0020 (0x0048 - 0x0028)
class UPlayer : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentNetSpeed;                                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConfiguredInternetSpeed;                           // 0x003C(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConfiguredLanSpeed;                                // 0x0040(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Player")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Player")
	}
	static class UPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayer>();
	}
};
DUMPER7_ASSERTS_UPlayer;

// Class Engine.NetConnection
// 0x1DB0 (0x1DF8 - 0x0048)
class UNetConnection : public UPlayer
{
public:
	TArray<class UChildConnection*>               Children;                                          // 0x0048(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	class UNetDriver*                             Driver;                                            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPackageMap>                PackageMapClass;                                   // 0x0060(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPackageMap*                            PackageMap;                                        // 0x0068(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UChannel*>                       OpenChannels;                                      // 0x0070(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         SentTemporaries;                                   // 0x0080(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class AActor*                                 ViewTarget;                                        // 0x0090(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OwningActor;                                       // 0x0098(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPacket;                                         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InternalAck : 1;                                   // 0x00A4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_A5[0xBB];                                      // 0x00A5(0x00BB)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       PlayerId;                                          // 0x0160(0x0030)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_190[0x48];                                     // 0x0190(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LastReceiveTime;                                   // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0[0x11D0];                                   // 0x01E0(0x11D0)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultMaxChannelSize;                             // 0x13B0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13B4[0x334];                                   // 0x13B4(0x0334)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UChannel*>                       ChannelsToTick;                                    // 0x16E8(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16F8[0x700];                                   // 0x16F8(0x0700)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NetConnection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NetConnection")
	}
	static class UNetConnection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetConnection>();
	}
};
DUMPER7_ASSERTS_UNetConnection;

// Class Engine.BillboardComponent
// 0x0030 (0x05A0 - 0x0570)
class UBillboardComponent final : public UPrimitiveComponent
{
public:
	class UTexture2D*                             Sprite;                                            // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsScreenSizeScaled : 1;                           // 0x0578(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_579[0x3];                                      // 0x0579(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScreenSize;                                        // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         U;                                                 // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UL;                                                // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         V;                                                 // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VL;                                                // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OpacityMaskRefVal;                                 // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_594[0xC];                                      // 0x0594(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetOpacityMaskRefVal(float RefVal);
	void SetSprite(class UTexture2D* NewSprite);
	void SetSpriteAndUV(class UTexture2D* NewSprite, int32 NewU, int32 NewUL, int32 NewV, int32 NewVL);
	void SetUV(int32 NewU, int32 NewUL, int32 NewV, int32 NewVL);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BillboardComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BillboardComponent")
	}
	static class UBillboardComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBillboardComponent>();
	}
};
DUMPER7_ASSERTS_UBillboardComponent;

// Class Engine.MaterialExpressionNoise
// 0x0078 (0x0128 - 0x00B0)
class UMaterialExpressionNoise final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Position;                                          // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       FilterWidth;                                       // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quality;                                           // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoiseFunction                                NoiseFunction;                                     // 0x0108(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bTurbulence : 1;                                   // 0x010C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Levels;                                            // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutputMin;                                         // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutputMax;                                         // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelScale;                                        // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bTiling : 1;                                       // 0x0120(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        RepeatSize;                                        // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionNoise")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionNoise")
	}
	static class UMaterialExpressionNoise* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionNoise>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionNoise;

// Class Engine.ChildConnection
// 0x0008 (0x1E00 - 0x1DF8)
class UChildConnection final : public UNetConnection
{
public:
	class UNetConnection*                         Parent;                                            // 0x1DF8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ChildConnection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ChildConnection")
	}
	static class UChildConnection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChildConnection>();
	}
};
DUMPER7_ASSERTS_UChildConnection;

// Class Engine.AsyncActionLoadPrimaryAssetBase
// 0x0048 (0x0078 - 0x0030)
class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
{
public:
	uint8                                         Pad_30[0x48];                                      // 0x0030(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AsyncActionLoadPrimaryAssetBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AsyncActionLoadPrimaryAssetBase")
	}
	static class UAsyncActionLoadPrimaryAssetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncActionLoadPrimaryAssetBase>();
	}
};
DUMPER7_ASSERTS_UAsyncActionLoadPrimaryAssetBase;

// Class Engine.AsyncActionLoadPrimaryAssetList
// 0x0010 (0x0088 - 0x0078)
class UAsyncActionLoadPrimaryAssetList final : public UAsyncActionLoadPrimaryAssetBase
{
public:
	TMulticastInlineDelegate<void(const TArray<class UObject*>& Loaded)> Completed;                  // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UAsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(class UObject* WorldContextObject, const TArray<struct FPrimaryAssetId>& PrimaryAssetList, const TArray<class FName>& LoadBundles);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AsyncActionLoadPrimaryAssetList")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AsyncActionLoadPrimaryAssetList")
	}
	static class UAsyncActionLoadPrimaryAssetList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncActionLoadPrimaryAssetList>();
	}
};
DUMPER7_ASSERTS_UAsyncActionLoadPrimaryAssetList;

// Class Engine.PlatformInterfaceBase
// 0x0010 (0x0038 - 0x0028)
class UPlatformInterfaceBase : public UObject
{
public:
	TArray<struct FDelegateArray>                 AllDelegates;                                      // 0x0028(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlatformInterfaceBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlatformInterfaceBase")
	}
	static class UPlatformInterfaceBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlatformInterfaceBase>();
	}
};
DUMPER7_ASSERTS_UPlatformInterfaceBase;

// Class Engine.StaticMeshDescriptionBulkData
// 0x0000 (0x0028 - 0x0028)
class UStaticMeshDescriptionBulkData final : public UMeshDescriptionBaseBulkData
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("StaticMeshDescriptionBulkData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"StaticMeshDescriptionBulkData")
	}
	static class UStaticMeshDescriptionBulkData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaticMeshDescriptionBulkData>();
	}
};
DUMPER7_ASSERTS_UStaticMeshDescriptionBulkData;

// Class Engine.MaterialExpressionClamp
// 0x0088 (0x0138 - 0x00B0)
class UMaterialExpressionClamp final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Min;                                               // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Max;                                               // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	EClampMode                                    ClampMode;                                         // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDefault;                                        // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDefault;                                        // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionClamp")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionClamp")
	}
	static class UMaterialExpressionClamp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionClamp>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionClamp;

// Class Engine.CloudStorageBase
// 0x0018 (0x0050 - 0x0038)
class UCloudStorageBase final : public UPlatformInterfaceBase
{
public:
	TArray<class FString>                         LocalCloudFiles;                                   // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bSuppressDelegateCalls : 1;                        // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CloudStorageBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CloudStorageBase")
	}
	static class UCloudStorageBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCloudStorageBase>();
	}
};
DUMPER7_ASSERTS_UCloudStorageBase;

// Class Engine.SkeletalMeshActor
// 0x0080 (0x0318 - 0x0298)
class ASkeletalMeshActor : public AActor
{
public:
	uint8                                         bShouldDoAnimNotifies : 1;                         // 0x0298(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMesh*                          ReplicatedMesh;                                    // 0x02A8(0x0008)(Net, ZeroConstructor, Transient, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                          ReplicatedPhysAsset;                               // 0x02B0(0x0008)(Net, ZeroConstructor, Transient, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ReplicatedMaterial0;                               // 0x02B8(0x0008)(Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ReplicatedMaterial1;                               // 0x02C0(0x0008)(Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C8[0x50];                                     // 0x02C8(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_ReplicatedMaterial0();
	void OnRep_ReplicatedMaterial1();
	void OnRep_ReplicatedMesh();
	void OnRep_ReplicatedPhysAsset();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkeletalMeshActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkeletalMeshActor")
	}
	static class ASkeletalMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASkeletalMeshActor>();
	}
};
DUMPER7_ASSERTS_ASkeletalMeshActor;

// Class Engine.ContentBundleTypeFactory
// 0x0000 (0x0028 - 0x0028)
class UContentBundleTypeFactory final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ContentBundleTypeFactory")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ContentBundleTypeFactory")
	}
	static class UContentBundleTypeFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContentBundleTypeFactory>();
	}
};
DUMPER7_ASSERTS_UContentBundleTypeFactory;

// Class Engine.ControlChannel
// 0x0018 (0x0080 - 0x0068)
class UControlChannel : public UChannel
{
public:
	uint8                                         Pad_68[0x18];                                      // 0x0068(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ControlChannel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ControlChannel")
	}
	static class UControlChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlChannel>();
	}
};
DUMPER7_ASSERTS_UControlChannel;

// Class Engine.MaterialExpressionFunctionInput
// 0x00B0 (0x0160 - 0x00B0)
class UMaterialExpressionFunctionInput final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Preview;                                           // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   InputName;                                         // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x00E0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ID;                                                // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFunctionInputType                            InputType;                                         // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0xF];                                      // 0x0101(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4f                              PreviewValue;                                      // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUsePreviewValueAsDefault : 1;                     // 0x0120(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortPriority;                                      // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCompilingFunctionPreview : 1;                     // 0x0128(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_129[0x37];                                     // 0x0129(0x0037)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionFunctionInput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionFunctionInput")
	}
	static class UMaterialExpressionFunctionInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionFunctionInput>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionFunctionInput;

// Class Engine.WorldPartition
// 0x00D8 (0x0100 - 0x0028)
class alignas(0x10) UWorldPartition final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorDescContainer*                    ActorDescContainer;                                // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorldPartitionRuntimeHash*             RuntimeHash;                                       // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableStreaming;                                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWorldPartitionServerStreamingMode            ServerStreamingMode;                               // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWorldPartitionServerStreamingOutMode         ServerStreamingOutMode;                            // 0x0042(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x9D];                                      // 0x0043(0x009D)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataLayerManager*                      DataLayerManager;                                  // 0x00E0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWorldPartitionStreamingPolicy*         StreamingPolicy;                                   // 0x00E8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartition")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartition")
	}
	static class UWorldPartition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartition>();
	}
};
DUMPER7_ASSERTS_UWorldPartition;

// Class Engine.InitialActiveSoundParams
// 0x0010 (0x0038 - 0x0028)
class UInitialActiveSoundParams final : public UObject
{
public:
	TArray<struct FAudioParameter>                AudioParams;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InitialActiveSoundParams")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InitialActiveSoundParams")
	}
	static class UInitialActiveSoundParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInitialActiveSoundParams>();
	}
};
DUMPER7_ASSERTS_UInitialActiveSoundParams;

// Class Engine.DataLayerLoadingPolicy
// 0x0000 (0x0028 - 0x0028)
class UDataLayerLoadingPolicy final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DataLayerLoadingPolicy")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DataLayerLoadingPolicy")
	}
	static class UDataLayerLoadingPolicy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataLayerLoadingPolicy>();
	}
};
DUMPER7_ASSERTS_UDataLayerLoadingPolicy;

// Class Engine.MaterialExpressionGIReplace
// 0x0078 (0x0128 - 0x00B0)
class UMaterialExpressionGIReplace final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Default;                                           // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       StaticIndirect;                                    // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       DynamicIndirect;                                   // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionGIReplace")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionGIReplace")
	}
	static class UMaterialExpressionGIReplace* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionGIReplace>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionGIReplace;

// Class Engine.DataLayerManager
// 0x00B0 (0x00D8 - 0x0028)
class UDataLayerManager final : public UObject
{
public:
	TMulticastInlineDelegate<void(const class UDataLayerInstance* DataLayer, EDataLayerRuntimeState State)> OnDataLayerInstanceRuntimeStateChanged; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSet<class UObject*>                          ReferencedObjects;                                 // 0x0038(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0x50];                                      // 0x0088(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetDataLayerInstanceRuntimeState(const class UDataLayerInstance* InDataLayerInstance, EDataLayerRuntimeState InState, bool bInIsRecursive);
	bool SetDataLayerRuntimeState(const class UDataLayerAsset* InDataLayerAsset, EDataLayerRuntimeState InState, bool bInIsRecursive);

	EDataLayerRuntimeState GetDataLayerInstanceEffectiveRuntimeState(const class UDataLayerInstance* InDataLayerInstance) const;
	const class UDataLayerInstance* GetDataLayerInstanceFromAsset(const class UDataLayerAsset* InDataLayerAsset) const;
	const class UDataLayerInstance* GetDataLayerInstanceFromName(const class FName& InDataLayerInstanceName) const;
	EDataLayerRuntimeState GetDataLayerInstanceRuntimeState(const class UDataLayerInstance* InDataLayerInstance) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DataLayerManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DataLayerManager")
	}
	static class UDataLayerManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataLayerManager>();
	}
};
DUMPER7_ASSERTS_UDataLayerManager;

// Class Engine.DebugGarbageCollectionGraph
// 0x0020 (0x0048 - 0x0028)
class UDebugGarbageCollectionGraph final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DebugGarbageCollectionGraph")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DebugGarbageCollectionGraph")
	}
	static class UDebugGarbageCollectionGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDebugGarbageCollectionGraph>();
	}
};
DUMPER7_ASSERTS_UDebugGarbageCollectionGraph;

// Class Engine.NavMovementComponent
// 0x0048 (0x0150 - 0x0108)
class UNavMovementComponent : public UMovementComponent
{
public:
	struct FNavAgentProperties                    NavAgentProps;                                     // 0x0108(0x0038)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FixedPathBrakingDistance;                          // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bUpdateNavAgentWithOwnersCollision : 1;            // 0x0144(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bUseAccelerationForPaths : 1;                      // 0x0144(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, GlobalConfig, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bUseFixedBrakingDistanceForPaths : 1;              // 0x0144(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	struct FMovementProperties                    MovementState;                                     // 0x0145(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_146[0x2];                                      // 0x0146(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                PathFollowingComp;                                 // 0x0148(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void StopActiveMovement();
	void StopMovementKeepPathing();

	bool IsCrouching() const;
	bool IsFalling() const;
	bool IsFlying() const;
	bool IsMovingOnGround() const;
	bool IsSwimming() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NavMovementComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NavMovementComponent")
	}
	static class UNavMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavMovementComponent>();
	}
};
DUMPER7_ASSERTS_UNavMovementComponent;

// Class Engine.PawnMovementComponent
// 0x0008 (0x0158 - 0x0150)
class UPawnMovementComponent : public UNavMovementComponent
{
public:
	class APawn*                                  PawnOwner;                                         // 0x0150(0x0008)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AddInputVector(const struct FVector& WorldVector, bool bForce);
	struct FVector ConsumeInputVector();
	void MulticastAsyncPhysicsStateAction(const class UPrimitiveComponent* ActionComponent, const class FName BoneName, const struct FAsyncPhysicsTimestamp& Timestamp, const EPhysicsStateAction ActionType, const struct FVector& ActionDatas, const struct FVector& ActionPosition);
	void ServerAsyncPhysicsStateAction(const class UPrimitiveComponent* ActionComponent, const class FName BoneName, const struct FAsyncPhysicsTimestamp& Timestamp, const EPhysicsStateAction ActionType, const struct FVector& ActionDatas, const struct FVector& ActionPosition);

	struct FVector GetLastInputVector() const;
	class APawn* GetPawnOwner() const;
	struct FVector GetPendingInputVector() const;
	bool IsMoveInputIgnored() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PawnMovementComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PawnMovementComponent")
	}
	static class UPawnMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPawnMovementComponent>();
	}
};
DUMPER7_ASSERTS_UPawnMovementComponent;

// Class Engine.MaterialExpressionPanner
// 0x0088 (0x0138 - 0x00B0)
class UMaterialExpressionPanner final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Coordinate;                                        // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Time;                                              // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Speed;                                             // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         SpeedX;                                            // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedY;                                            // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ConstCoordinate;                                   // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFractionalPart;                                   // 0x0134(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionPanner")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionPanner")
	}
	static class UMaterialExpressionPanner* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionPanner>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionPanner;

// Class Engine.DemoNetConnection
// 0x0050 (0x1E48 - 0x1DF8)
class UDemoNetConnection final : public UNetConnection
{
public:
	uint8                                         Pad_1DF8[0x50];                                    // 0x1DF8(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DemoNetConnection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DemoNetConnection")
	}
	static class UDemoNetConnection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDemoNetConnection>();
	}
};
DUMPER7_ASSERTS_UDemoNetConnection;

// Class Engine.AnimCompositeBase
// 0x0008 (0x00B8 - 0x00B0)
class UAnimCompositeBase : public UAnimSequenceBase
{
public:
	struct FFrameRate                             CommonTargetFrameRate;                             // 0x00B0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimCompositeBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimCompositeBase")
	}
	static class UAnimCompositeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimCompositeBase>();
	}
};
DUMPER7_ASSERTS_UAnimCompositeBase;

// Class Engine.AnimComposite
// 0x0010 (0x00C8 - 0x00B8)
class UAnimComposite final : public UAnimCompositeBase
{
public:
	struct FAnimTrack                             AnimationTrack;                                    // 0x00B8(0x0010)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimComposite")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimComposite")
	}
	static class UAnimComposite* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimComposite>();
	}
};
DUMPER7_ASSERTS_UAnimComposite;

// Class Engine.PendingNetGame
// 0x0098 (0x00C0 - 0x0028)
class UPendingNetGame : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UNetDriver*                             NetDriver;                                         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDemoNetDriver*                         DemoNetDriver;                                     // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x80];                                      // 0x0040(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PendingNetGame")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PendingNetGame")
	}
	static class UPendingNetGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPendingNetGame>();
	}
};
DUMPER7_ASSERTS_UPendingNetGame;

// Class Engine.RendererOverrideSettings
// 0x0008 (0x0040 - 0x0038)
class URendererOverrideSettings final : public UDeveloperSettings
{
public:
	uint8                                         bSupportAllShaderPermutations : 1;                 // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RendererOverrideSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RendererOverrideSettings")
	}
	static class URendererOverrideSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<URendererOverrideSettings>();
	}
};
DUMPER7_ASSERTS_URendererOverrideSettings;

// Class Engine.MaterialExpressionConstant2Vector
// 0x0008 (0x00B8 - 0x00B0)
class UMaterialExpressionConstant2Vector final : public UMaterialExpression
{
public:
	float                                         R;                                                 // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         G;                                                 // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionConstant2Vector")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionConstant2Vector")
	}
	static class UMaterialExpressionConstant2Vector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionConstant2Vector>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionConstant2Vector;

// Class Engine.DemoPendingNetGame
// 0x0000 (0x00C0 - 0x00C0)
class UDemoPendingNetGame final : public UPendingNetGame
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DemoPendingNetGame")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DemoPendingNetGame")
	}
	static class UDemoPendingNetGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDemoPendingNetGame>();
	}
};
DUMPER7_ASSERTS_UDemoPendingNetGame;

// Class Engine.AsyncActionChangePrimaryAssetBundles
// 0x0010 (0x0088 - 0x0078)
class UAsyncActionChangePrimaryAssetBundles final : public UAsyncActionLoadPrimaryAssetBase
{
public:
	TMulticastInlineDelegate<void()>              Completed;                                         // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(class UObject* WorldContextObject, const TArray<class FName>& NewBundles, const TArray<class FName>& OldBundles);
	static class UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(class UObject* WorldContextObject, const TArray<struct FPrimaryAssetId>& PrimaryAssetList, const TArray<class FName>& AddBundles, const TArray<class FName>& RemoveBundles);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AsyncActionChangePrimaryAssetBundles")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AsyncActionChangePrimaryAssetBundles")
	}
	static class UAsyncActionChangePrimaryAssetBundles* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncActionChangePrimaryAssetBundles>();
	}
};
DUMPER7_ASSERTS_UAsyncActionChangePrimaryAssetBundles;

// Class Engine.DeviceProfileFragment
// 0x0010 (0x0038 - 0x0028)
class UDeviceProfileFragment final : public UObject
{
public:
	TArray<class FString>                         CVars;                                             // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DeviceProfileFragment")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DeviceProfileFragment")
	}
	static class UDeviceProfileFragment* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDeviceProfileFragment>();
	}
};
DUMPER7_ASSERTS_UDeviceProfileFragment;

// Class Engine.DialogueSoundWaveProxy
// 0x0018 (0x0180 - 0x0168)
class UDialogueSoundWaveProxy final : public USoundBase
{
public:
	uint8                                         Pad_168[0x18];                                     // 0x0168(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DialogueSoundWaveProxy")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DialogueSoundWaveProxy")
	}
	static class UDialogueSoundWaveProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogueSoundWaveProxy>();
	}
};
DUMPER7_ASSERTS_UDialogueSoundWaveProxy;

// Class Engine.MaterialExpressionVectorParameter
// 0x0078 (0x0150 - 0x00D8)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                           DefaultValue;                                      // 0x00D8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomPrimitiveData;                           // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PrimitiveDataIndex;                                // 0x00E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FParameterChannelNames                 ChannelNames;                                      // 0x00F0(0x0060)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionVectorParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionVectorParameter")
	}
	static class UMaterialExpressionVectorParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionVectorParameter>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionVectorParameter;

// Class Engine.Light
// 0x0010 (0x02A8 - 0x0298)
class ALight : public AActor
{
public:
	class ULightComponent*                        LightComponent;                                    // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bEnabled : 1;                                      // 0x02A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_bEnabled();
	void SetAffectTranslucentLighting(bool bNewValue);
	void SetBrightness(float NewBrightness);
	void SetCastShadows(bool bNewValue);
	void SetEnabled(bool bSetEnabled);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void ToggleEnabled();

	float GetBrightness() const;
	struct FLinearColor GetLightColor() const;
	bool IsEnabled() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Light")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Light")
	}
	static class ALight* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALight>();
	}
};
DUMPER7_ASSERTS_ALight;

// Class Engine.AudioSubsystemCollectionRoot
// 0x0008 (0x0030 - 0x0028)
class UAudioSubsystemCollectionRoot final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AudioSubsystemCollectionRoot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AudioSubsystemCollectionRoot")
	}
	static class UAudioSubsystemCollectionRoot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioSubsystemCollectionRoot>();
	}
};
DUMPER7_ASSERTS_UAudioSubsystemCollectionRoot;

// Class Engine.MaterialExpressionComment
// 0x0038 (0x00E8 - 0x00B0)
class UMaterialExpressionComment final : public UMaterialExpression
{
public:
	int32                                         SizeX;                                             // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x00B8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CommentColor;                                      // 0x00C8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FontSize;                                          // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCommentBubbleVisible_InDetailsPanel : 1;          // 0x00DC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bColorCommentBubble : 1;                           // 0x00DC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bGroupMode;                                        // 0x00E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionComment")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionComment")
	}
	static class UMaterialExpressionComment* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionComment>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionComment;

// Class Engine.DirectionalLight
// 0x0000 (0x02A8 - 0x02A8)
class ADirectionalLight final : public ALight
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DirectionalLight")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DirectionalLight")
	}
	static class ADirectionalLight* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADirectionalLight>();
	}
};
DUMPER7_ASSERTS_ADirectionalLight;

// Class Engine.Distribution
// 0x0008 (0x0030 - 0x0028)
class UDistribution : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Distribution")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Distribution")
	}
	static class UDistribution* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDistribution>();
	}
};
DUMPER7_ASSERTS_UDistribution;

// Class Engine.AsyncActionLoadPrimaryAsset
// 0x0010 (0x0088 - 0x0078)
class UAsyncActionLoadPrimaryAsset final : public UAsyncActionLoadPrimaryAssetBase
{
public:
	TMulticastInlineDelegate<void(class UObject* Loaded)> Completed;                                 // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UAsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(class UObject* WorldContextObject, const struct FPrimaryAssetId& PrimaryAsset, const TArray<class FName>& LoadBundles);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AsyncActionLoadPrimaryAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AsyncActionLoadPrimaryAsset")
	}
	static class UAsyncActionLoadPrimaryAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncActionLoadPrimaryAsset>();
	}
};
DUMPER7_ASSERTS_UAsyncActionLoadPrimaryAsset;

// Class Engine.MaterialExpressionExponential
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionExponential final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionExponential")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionExponential")
	}
	static class UMaterialExpressionExponential* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionExponential>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionExponential;

// Class Engine.DistributionFloat
// 0x0008 (0x0038 - 0x0030)
class UDistributionFloat : public UDistribution
{
public:
	uint8                                         bCanBeBaked : 1;                                   // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_30_1 : 1;                                   // 0x0030(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bBakedDataSuccesfully : 1;                         // 0x0030(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DistributionFloat")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DistributionFloat")
	}
	static class UDistributionFloat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDistributionFloat>();
	}
};
DUMPER7_ASSERTS_UDistributionFloat;

// Class Engine.DistributionFloatConstant
// 0x0008 (0x0040 - 0x0038)
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                         Constant;                                          // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DistributionFloatConstant")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DistributionFloatConstant")
	}
	static class UDistributionFloatConstant* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDistributionFloatConstant>();
	}
};
DUMPER7_ASSERTS_UDistributionFloatConstant;

// Class Engine.DistributionFloatConstantCurve
// 0x0018 (0x0050 - 0x0038)
class UDistributionFloatConstantCurve final : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                      ConstantCurve;                                     // 0x0038(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DistributionFloatConstantCurve")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DistributionFloatConstantCurve")
	}
	static class UDistributionFloatConstantCurve* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDistributionFloatConstantCurve>();
	}
};
DUMPER7_ASSERTS_UDistributionFloatConstantCurve;

// Class Engine.SMInstanceElementWorldInterface
// 0x0008 (0x0030 - 0x0028)
class USMInstanceElementWorldInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SMInstanceElementWorldInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SMInstanceElementWorldInterface")
	}
	static class USMInstanceElementWorldInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<USMInstanceElementWorldInterface>();
	}
};
DUMPER7_ASSERTS_USMInstanceElementWorldInterface;

// Class Engine.MaterialExpressionVolumetricCloudEmptySpaceSkippingOutput
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionVolumetricCloudEmptySpaceSkippingOutput final : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                       ContainsMatter;                                    // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionVolumetricCloudEmptySpaceSkippingOutput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionVolumetricCloudEmptySpaceSkippingOutput")
	}
	static class UMaterialExpressionVolumetricCloudEmptySpaceSkippingOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionVolumetricCloudEmptySpaceSkippingOutput>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionVolumetricCloudEmptySpaceSkippingOutput;

// Class Engine.DistributionFloatParameterBase
// 0x0020 (0x0060 - 0x0040)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	class FName                                   ParameterName;                                     // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinInput;                                          // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxInput;                                          // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinOutput;                                         // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxOutput;                                         // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDistributionParamMode                        ParamMode;                                         // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DistributionFloatParameterBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DistributionFloatParameterBase")
	}
	static class UDistributionFloatParameterBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDistributionFloatParameterBase>();
	}
};
DUMPER7_ASSERTS_UDistributionFloatParameterBase;

// Class Engine.DistributionFloatParticleParameter
// 0x0000 (0x0060 - 0x0060)
class UDistributionFloatParticleParameter final : public UDistributionFloatParameterBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DistributionFloatParticleParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DistributionFloatParticleParameter")
	}
	static class UDistributionFloatParticleParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDistributionFloatParticleParameter>();
	}
};
DUMPER7_ASSERTS_UDistributionFloatParticleParameter;

// Class Engine.ObjectElementSelectionInterface
// 0x0008 (0x0030 - 0x0028)
class UObjectElementSelectionInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ObjectElementSelectionInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ObjectElementSelectionInterface")
	}
	static class UObjectElementSelectionInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObjectElementSelectionInterface>();
	}
};
DUMPER7_ASSERTS_UObjectElementSelectionInterface;

// Class Engine.DistributionFloatUniform
// 0x0008 (0x0040 - 0x0038)
class UDistributionFloatUniform final : public UDistributionFloat
{
public:
	float                                         Min;                                               // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DistributionFloatUniform")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DistributionFloatUniform")
	}
	static class UDistributionFloatUniform* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDistributionFloatUniform>();
	}
};
DUMPER7_ASSERTS_UDistributionFloatUniform;

// Class Engine.AssetManager
// 0x04A8 (0x04D0 - 0x0028)
class UAssetManager : public UObject
{
public:
	uint8                                         Pad_28[0x308];                                     // 0x0028(0x0308)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        ObjectReferenceList;                               // 0x0330(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bIsGlobalAsyncScanEnvironment;                     // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldGuessTypeAndName;                           // 0x0341(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldUseSynchronousLoad;                         // 0x0342(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsLoadingFromPakFiles;                            // 0x0343(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldAcquireMissingChunksOnLoad;                 // 0x0344(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnlyCookProductionAssets;                         // 0x0345(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_346[0x2];                                      // 0x0346(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumBulkScanRequests;                               // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsPrimaryAssetDirectoryCurrent;                   // 0x034C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsManagementDatabaseCurrent;                      // 0x034D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUpdateManagementDatabaseAfterScan;                // 0x034E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIncludeOnlyOnDiskAssets;                          // 0x034F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasCompletedInitialScan;                          // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfSpawnedNotifications;                      // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_358[0x178];                                    // 0x0358(0x0178)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AssetManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AssetManager")
	}
	static class UAssetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetManager>();
	}
};
DUMPER7_ASSERTS_UAssetManager;

// Class Engine.GameInstanceSubsystem
// 0x0000 (0x0030 - 0x0030)
class UGameInstanceSubsystem : public USubsystem
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GameInstanceSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GameInstanceSubsystem")
	}
	static class UGameInstanceSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameInstanceSubsystem>();
	}
};
DUMPER7_ASSERTS_UGameInstanceSubsystem;

// Class Engine.MaterialExpressionCosine
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionCosine final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         Period;                                            // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionCosine")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionCosine")
	}
	static class UMaterialExpressionCosine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionCosine>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionCosine;

// Class Engine.DistributionFloatUniformCurve
// 0x0018 (0x0050 - 0x0038)
class UDistributionFloatUniformCurve final : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                   ConstantCurve;                                     // 0x0038(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DistributionFloatUniformCurve")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DistributionFloatUniformCurve")
	}
	static class UDistributionFloatUniformCurve* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDistributionFloatUniformCurve>();
	}
};
DUMPER7_ASSERTS_UDistributionFloatUniformCurve;

// Class Engine.DistributionVector
// 0x0008 (0x0038 - 0x0030)
class UDistributionVector : public UDistribution
{
public:
	uint8                                         bCanBeBaked : 1;                                   // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDirty : 1;                                      // 0x0030(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bBakedDataSuccesfully : 1;                         // 0x0030(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DistributionVector")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DistributionVector")
	}
	static class UDistributionVector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDistributionVector>();
	}
};
DUMPER7_ASSERTS_UDistributionVector;

// Class Engine.AudioBus
// 0x0010 (0x0038 - 0x0028)
class UAudioBus final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EAudioBusChannels                             AudioBusChannels;                                  // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AudioBus")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AudioBus")
	}
	static class UAudioBus* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioBus>();
	}
};
DUMPER7_ASSERTS_UAudioBus;

// Class Engine.MaterialExpressionFontSample
// 0x0010 (0x00C0 - 0x00B0)
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                  Font;                                              // 0x00B0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FontTexturePage;                                   // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionFontSample")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionFontSample")
	}
	static class UMaterialExpressionFontSample* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionFontSample>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionFontSample;

// Class Engine.MaterialExpressionFontSampleParameter
// 0x0028 (0x00E8 - 0x00C0)
class UMaterialExpressionFontSampleParameter final : public UMaterialExpressionFontSample
{
public:
	class FName                                   ParameterName;                                     // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ExpressionGUID;                                    // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Group;                                             // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortPriority;                                      // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionFontSampleParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionFontSampleParameter")
	}
	static class UMaterialExpressionFontSampleParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionFontSampleParameter>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionFontSampleParameter;

// Class Engine.DistributionVectorConstant
// 0x0020 (0x0058 - 0x0038)
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                                Constant;                                          // 0x0038(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLockAxes : 1;                                     // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EDistributionVectorLockFlags                  LockedAxes;                                        // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DistributionVectorConstant")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DistributionVectorConstant")
	}
	static class UDistributionVectorConstant* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDistributionVectorConstant>();
	}
};
DUMPER7_ASSERTS_UDistributionVectorConstant;

// Class Engine.MaterialExpressionTangent
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionTangent final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         Period;                                            // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTangent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTangent")
	}
	static class UMaterialExpressionTangent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTangent>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTangent;

// Class Engine.DistributionVectorConstantCurve
// 0x0020 (0x0058 - 0x0038)
class UDistributionVectorConstantCurve final : public UDistributionVector
{
public:
	struct FInterpCurveVector                     ConstantCurve;                                     // 0x0038(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLockAxes : 1;                                     // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EDistributionVectorLockFlags                  LockedAxes;                                        // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DistributionVectorConstantCurve")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DistributionVectorConstantCurve")
	}
	static class UDistributionVectorConstantCurve* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDistributionVectorConstantCurve>();
	}
};
DUMPER7_ASSERTS_UDistributionVectorConstantCurve;

// Class Engine.NetPushModelHelpers
// 0x0000 (0x0028 - 0x0028)
class UNetPushModelHelpers final : public UBlueprintFunctionLibrary
{
public:
	static void MarkPropertyDirty(class UObject* Object, class FName PropertyName);
	static void MarkPropertyDirtyFromRepIndex(class UObject* Object, int32 RepIndex, class FName PropertyName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NetPushModelHelpers")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NetPushModelHelpers")
	}
	static class UNetPushModelHelpers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetPushModelHelpers>();
	}
};
DUMPER7_ASSERTS_UNetPushModelHelpers;

// Class Engine.MaterialExpressionDecalMipmapLevel
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionDecalMipmapLevel final : public UMaterialExpression
{
public:
	struct FExpressionInput                       TextureSize;                                       // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstWidth;                                        // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstHeight;                                       // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDecalMipmapLevel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDecalMipmapLevel")
	}
	static class UMaterialExpressionDecalMipmapLevel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDecalMipmapLevel>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDecalMipmapLevel;

// Class Engine.DistributionVectorParameterBase
// 0x0070 (0x00C8 - 0x0058)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	class FName                                   ParameterName;                                     // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MinInput;                                          // 0x0060(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaxInput;                                          // 0x0078(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MinOutput;                                         // 0x0090(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaxOutput;                                         // 0x00A8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDistributionParamMode                        ParamModes[0x3];                                   // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C3[0x5];                                       // 0x00C3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DistributionVectorParameterBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DistributionVectorParameterBase")
	}
	static class UDistributionVectorParameterBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDistributionVectorParameterBase>();
	}
};
DUMPER7_ASSERTS_UDistributionVectorParameterBase;

// Class Engine.PoseWatchPoseElement
// 0x0000 (0x0028 - 0x0028)
class UPoseWatchPoseElement final : public UPoseWatchElement
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PoseWatchPoseElement")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PoseWatchPoseElement")
	}
	static class UPoseWatchPoseElement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseWatchPoseElement>();
	}
};
DUMPER7_ASSERTS_UPoseWatchPoseElement;

// Class Engine.RPCDoSDetectionConfig
// 0x0060 (0x0088 - 0x0028)
class URPCDoSDetectionConfig final : public UObject
{
public:
	bool                                          bRPCDoSDetection;                                  // 0x0028(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRPCDoSAnalytics;                                  // 0x0029(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HitchTimeQuotaMS;                                  // 0x002C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitchSuspendDetectionTimeMS;                       // 0x0030(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         DetectionSeverity;                                 // 0x0038(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	int32                                         InitialConnectToleranceMS;                         // 0x0048(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           RPCBlockWhitelist;                                 // 0x0050(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           RPCBlockAllowlist;                                 // 0x0060(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FRPCAnalyticsThreshold>         RPCAnalyticsThresholds;                            // 0x0070(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	double                                        RPCAnalyticsOverrideChance;                        // 0x0080(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RPCDoSDetectionConfig")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RPCDoSDetectionConfig")
	}
	static class URPCDoSDetectionConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<URPCDoSDetectionConfig>();
	}
};
DUMPER7_ASSERTS_URPCDoSDetectionConfig;

// Class Engine.MaterialExpressionStep
// 0x0058 (0x0108 - 0x00B0)
class UMaterialExpressionStep final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Y;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       X;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstY;                                            // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstX;                                            // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStep")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStep")
	}
	static class UMaterialExpressionStep* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStep>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStep;

// Class Engine.DistributionVectorParticleParameter
// 0x0000 (0x00C8 - 0x00C8)
class UDistributionVectorParticleParameter final : public UDistributionVectorParameterBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DistributionVectorParticleParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DistributionVectorParticleParameter")
	}
	static class UDistributionVectorParticleParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDistributionVectorParticleParameter>();
	}
};
DUMPER7_ASSERTS_UDistributionVectorParticleParameter;

// Class Engine.DistributionVectorUniform
// 0x0040 (0x0078 - 0x0038)
class UDistributionVectorUniform final : public UDistributionVector
{
public:
	struct FVector                                Max;                                               // 0x0038(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Min;                                               // 0x0050(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLockAxes : 1;                                     // 0x0068(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EDistributionVectorLockFlags                  LockedAxes;                                        // 0x006C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDistributionVectorMirrorFlags                MirrorFlags[0x3];                                  // 0x006D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseExtremes : 1;                                  // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DistributionVectorUniform")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DistributionVectorUniform")
	}
	static class UDistributionVectorUniform* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDistributionVectorUniform>();
	}
};
DUMPER7_ASSERTS_UDistributionVectorUniform;

// Class Engine.LocalMessage
// 0x0000 (0x0028 - 0x0028)
class ULocalMessage : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LocalMessage")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LocalMessage")
	}
	static class ULocalMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocalMessage>();
	}
};
DUMPER7_ASSERTS_ULocalMessage;

// Class Engine.EngineMessage
// 0x0080 (0x00A8 - 0x0028)
class UEngineMessage final : public ULocalMessage
{
public:
	class FString                                 FailedPlaceMessage;                                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MaxedOutMessage;                                   // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnteredMessage;                                    // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeftMessage;                                       // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GlobalNameChange;                                  // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpecEnteredMessage;                                // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewPlayerMessage;                                  // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewSpecMessage;                                    // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EngineMessage")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EngineMessage")
	}
	static class UEngineMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEngineMessage>();
	}
};
DUMPER7_ASSERTS_UEngineMessage;

// Class Engine.DistributionVectorUniformCurve
// 0x0028 (0x0060 - 0x0038)
class UDistributionVectorUniformCurve final : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                 ConstantCurve;                                     // 0x0038(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLockAxes1 : 1;                                    // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLockAxes2 : 1;                                    // 0x0050(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EDistributionVectorLockFlags                  LockedAxes[0x2];                                   // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDistributionVectorMirrorFlags                MirrorFlags[0x3];                                  // 0x0056(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUseExtremes : 1;                                  // 0x005C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DistributionVectorUniformCurve")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DistributionVectorUniformCurve")
	}
	static class UDistributionVectorUniformCurve* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDistributionVectorUniformCurve>();
	}
};
DUMPER7_ASSERTS_UDistributionVectorUniformCurve;

// Class Engine.SkyAtmosphereComponent
// 0x0100 (0x03A0 - 0x02A0)
class USkyAtmosphereComponent : public USceneComponent
{
public:
	ESkyAtmosphereTransformMode                   TransformMode;                                     // 0x02A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BottomRadius;                                      // 0x02A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GroundAlbedo;                                      // 0x02A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AtmosphereHeight;                                  // 0x02AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiScatteringFactor;                             // 0x02B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceSampleCountScale;                             // 0x02B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayleighScatteringScale;                           // 0x02B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RayleighScattering;                                // 0x02BC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayleighExponentialDistribution;                   // 0x02CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieScatteringScale;                                // 0x02D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MieScattering;                                     // 0x02D4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieAbsorptionScale;                                // 0x02E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MieAbsorption;                                     // 0x02E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieAnisotropy;                                     // 0x02F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieExponentialDistribution;                        // 0x02FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OtherAbsorptionScale;                              // 0x0300(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OtherAbsorption;                                   // 0x0304(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTentDistribution                      OtherTentDistribution;                             // 0x0314(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyLuminanceFactor;                                // 0x0320(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialPespectiveViewDistanceScale;                 // 0x0330(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightFogContribution;                             // 0x0334(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransmittanceMinLightElevationAngle;               // 0x0338(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialPerspectiveStartDepth;                       // 0x033C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_340[0x40];                                     // 0x0340(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  bStaticLightingBuiltGUID;                          // 0x0380(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_390[0x10];                                     // 0x0390(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FLinearColor GetAtmosphereTransmitanceOnGroundAtPlanetTop(class UDirectionalLightComponent* DirectionalLight);
	struct FVector GetOverridenAtmosphereLightDirection(int32 AtmosphereLightIndex);
	bool IsAtmosphereLightDirectionOverriden(int32 AtmosphereLightIndex);
	void OverrideAtmosphereLightDirection(int32 AtmosphereLightIndex, const struct FVector& LightDirection);
	void ResetAtmosphereLightDirectionOverride(int32 AtmosphereLightIndex);
	void SetAerialPespectiveViewDistanceScale(float NewValue);
	void SetAtmosphereHeight(float NewValue);
	void SetBottomRadius(float NewValue);
	void SetGroundAlbedo(const struct FColor& NewValue);
	void SetHeightFogContribution(float NewValue);
	void SetMieAbsorption(const struct FLinearColor& NewValue);
	void SetMieAbsorptionScale(float NewValue);
	void SetMieAnisotropy(float NewValue);
	void SetMieExponentialDistribution(float NewValue);
	void SetMieScattering(const struct FLinearColor& NewValue);
	void SetMieScatteringScale(float NewValue);
	void SetMultiScatteringFactor(float NewValue);
	void SetOtherAbsorption(const struct FLinearColor& NewValue);
	void SetOtherAbsorptionScale(float NewValue);
	void SetRayleighExponentialDistribution(float NewValue);
	void SetRayleighScattering(const struct FLinearColor& NewValue);
	void SetRayleighScatteringScale(float NewValue);
	void SetSkyLuminanceFactor(const struct FLinearColor& NewValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkyAtmosphereComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkyAtmosphereComponent")
	}
	static class USkyAtmosphereComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkyAtmosphereComponent>();
	}
};
DUMPER7_ASSERTS_USkyAtmosphereComponent;

// Class Engine.SkeletalMeshEditorData
// 0x0000 (0x0028 - 0x0028)
class USkeletalMeshEditorData final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkeletalMeshEditorData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkeletalMeshEditorData")
	}
	static class USkeletalMeshEditorData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkeletalMeshEditorData>();
	}
};
DUMPER7_ASSERTS_USkeletalMeshEditorData;

// Class Engine.MaterialExpressionDDY
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionDDY final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Value;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDDY")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDDY")
	}
	static class UMaterialExpressionDDY* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDDY>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDDY;

// Class Engine.GraphNodeContextMenuContext
// 0x0028 (0x0050 - 0x0028)
class UGraphNodeContextMenuContext final : public UObject
{
public:
	class UBlueprint*                             Blueprint;                                         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEdGraph*                               Graph;                                             // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEdGraphNode*                           Node;                                              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsDebugging;                                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GraphNodeContextMenuContext")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GraphNodeContextMenuContext")
	}
	static class UGraphNodeContextMenuContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGraphNodeContextMenuContext>();
	}
};
DUMPER7_ASSERTS_UGraphNodeContextMenuContext;

// Class Engine.EdGraphPin_Deprecated
// 0x00F0 (0x0118 - 0x0028)
class UEdGraphPin_Deprecated final : public UObject
{
public:
	class FString                                 PinName;                                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PinToolTip;                                        // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEdGraphPinDirection                          Direction;                                         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEdGraphPinType                        PinType;                                           // 0x0050(0x0058)(NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 DefaultValue;                                      // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AutogeneratedDefaultValue;                         // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                DefaultObject;                                     // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DefaultTextValue;                                  // 0x00D0(0x0018)(NativeAccessSpecifierPublic)
	TArray<class UEdGraphPin_Deprecated*>         LinkedTo;                                          // 0x00E8(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UEdGraphPin_Deprecated*>         SubPins;                                           // 0x00F8(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UEdGraphPin_Deprecated*                 ParentPin;                                         // 0x0108(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEdGraphPin_Deprecated*                 ReferencePassThroughConnection;                    // 0x0110(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EdGraphPin_Deprecated")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EdGraphPin_Deprecated")
	}
	static class UEdGraphPin_Deprecated* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEdGraphPin_Deprecated>();
	}
};
DUMPER7_ASSERTS_UEdGraphPin_Deprecated;

// Class Engine.AnimBoneCompressionCodec
// 0x0010 (0x0038 - 0x0028)
class UAnimBoneCompressionCodec : public UObject
{
public:
	class FString                                 Description;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimBoneCompressionCodec")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimBoneCompressionCodec")
	}
	static class UAnimBoneCompressionCodec* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimBoneCompressionCodec>();
	}
};
DUMPER7_ASSERTS_UAnimBoneCompressionCodec;

// Class Engine.AnimCompress
// 0x0008 (0x0040 - 0x0038)
class UAnimCompress : public UAnimBoneCompressionCodec
{
public:
	uint8                                         bNeedsSkeleton : 1;                                // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EAnimationCompressionFormat                   TranslationCompressionFormat;                      // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationCompressionFormat                   RotationCompressionFormat;                         // 0x003D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationCompressionFormat                   ScaleCompressionFormat;                            // 0x003E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimCompress")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimCompress")
	}
	static class UAnimCompress* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimCompress>();
	}
};
DUMPER7_ASSERTS_UAnimCompress;

// Class Engine.AnimCompress_RemoveEverySecondKey
// 0x0008 (0x0048 - 0x0040)
class UAnimCompress_RemoveEverySecondKey final : public UAnimCompress
{
public:
	int32                                         MinKeys;                                           // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bStartAtSecondKey : 1;                             // 0x0044(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimCompress_RemoveEverySecondKey")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimCompress_RemoveEverySecondKey")
	}
	static class UAnimCompress_RemoveEverySecondKey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimCompress_RemoveEverySecondKey>();
	}
};
DUMPER7_ASSERTS_UAnimCompress_RemoveEverySecondKey;

// Class Engine.MaterialExpressionCameraPositionWS
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionCameraPositionWS final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionCameraPositionWS")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionCameraPositionWS")
	}
	static class UMaterialExpressionCameraPositionWS* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionCameraPositionWS>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionCameraPositionWS;

// Class Engine.EdGraphSchema
// 0x0000 (0x0028 - 0x0028)
class UEdGraphSchema final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EdGraphSchema")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EdGraphSchema")
	}
	static class UEdGraphSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEdGraphSchema>();
	}
};
DUMPER7_ASSERTS_UEdGraphSchema;

// Class Engine.Emitter
// 0x0050 (0x02E8 - 0x0298)
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*               ParticleSystemComponent;                           // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bDestroyOnSystemFinish : 1;                        // 0x02A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPostUpdateTickGroup : 1;                          // 0x02A0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCurrentlyActive : 1;                              // 0x02A0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class FName EventName, float EmitterTime, const struct FVector& Location, const struct FVector& Velocity)> OnParticleSpawn; // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName EventName, float EmitterTime, int32 ParticleCount)> OnParticleBurst; // 0x02B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName EventName, float EmitterTime, int32 ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction)> OnParticleDeath; // 0x02C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName EventName, float EmitterTime, int32 ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction, const struct FVector& Normal, class FName BoneName, class UPhysicalMaterial* PhysMat)> OnParticleCollide; // 0x02D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void Activate();
	void Deactivate();
	void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
	void OnRep_bCurrentlyActive();
	void SetActorParameter(class FName ParameterName, class AActor* Param);
	void SetColorParameter(class FName ParameterName, const struct FLinearColor& Param);
	void SetFloatParameter(class FName ParameterName, float Param);
	void SetMaterialParameter(class FName ParameterName, class UMaterialInterface* Param);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void SetVectorParameter(class FName ParameterName, const struct FVector& Param);
	void ToggleActive();

	bool IsActive() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Emitter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Emitter")
	}
	static class AEmitter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEmitter>();
	}
};
DUMPER7_ASSERTS_AEmitter;

// Class Engine.OnlineEngineInterface
// 0x0000 (0x0028 - 0x0028)
class UOnlineEngineInterface : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("OnlineEngineInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"OnlineEngineInterface")
	}
	static class UOnlineEngineInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlineEngineInterface>();
	}
};
DUMPER7_ASSERTS_UOnlineEngineInterface;

// Class Engine.MaterialExpressionDistanceFieldApproxAO
// 0x00B8 (0x0168 - 0x00B0)
class UMaterialExpressionDistanceFieldApproxAO final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Position;                                          // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Normal;                                            // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       BaseDistance;                                      // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         BaseDistanceDefault;                               // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExpressionInput                       Radius;                                            // 0x0130(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         RadiusDefault;                                     // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumSteps;                                          // 0x015C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepScaleDefault;                                  // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDistanceFieldApproxAO")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDistanceFieldApproxAO")
	}
	static class UMaterialExpressionDistanceFieldApproxAO* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDistanceFieldApproxAO>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDistanceFieldApproxAO;

// Class Engine.EmitterCameraLensEffectBase
// 0x0098 (0x0380 - 0x02E8)
class AEmitterCameraLensEffectBase final : public AEmitter
{
public:
	uint8                                         Pad_2E8[0x8];                                      // 0x02E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        PS_CameraEffect;                                   // 0x02F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerCameraManager*                   BaseCamera;                                        // 0x02F8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTransform                             RelativeTransform;                                 // 0x0300(0x0060)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BaseFoV;                                           // 0x0360(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAllowMultipleInstances : 1;                       // 0x0364(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bResetWhenRetriggered : 1;                         // 0x0364(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_365[0x3];                                      // 0x0365(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AActor>>             EmittersToTreatAsSame;                             // 0x0368(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         DistFromCamera;                                    // 0x0378(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EmitterCameraLensEffectBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EmitterCameraLensEffectBase")
	}
	static class AEmitterCameraLensEffectBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEmitterCameraLensEffectBase>();
	}
};
DUMPER7_ASSERTS_AEmitterCameraLensEffectBase;

// Class Engine.OnlineSession
// 0x0000 (0x0028 - 0x0028)
class UOnlineSession : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("OnlineSession")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"OnlineSession")
	}
	static class UOnlineSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlineSession>();
	}
};
DUMPER7_ASSERTS_UOnlineSession;

// Class Engine.MaterialExpressionStrataEyeBSDF
// 0x0148 (0x01F8 - 0x00B0)
class UMaterialExpressionStrataEyeBSDF final : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                       DiffuseColor;                                      // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Roughness;                                         // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       CorneaNormal;                                      // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       IrisNormal;                                        // 0x0128(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       IrisPlaneNormal;                                   // 0x0150(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       IrisMask;                                          // 0x0178(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       IrisDistance;                                      // 0x01A0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       EmissiveColor;                                     // 0x01C8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	class USubsurfaceProfile*                     SubsurfaceProfile;                                 // 0x01F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataEyeBSDF")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataEyeBSDF")
	}
	static class UMaterialExpressionStrataEyeBSDF* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataEyeBSDF>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataEyeBSDF;

// Class Engine.ViewModeUtils
// 0x0000 (0x0028 - 0x0028)
class UViewModeUtils final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ViewModeUtils")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ViewModeUtils")
	}
	static class UViewModeUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UViewModeUtils>();
	}
};
DUMPER7_ASSERTS_UViewModeUtils;

// Class Engine.EngineBaseTypes
// 0x0000 (0x0028 - 0x0028)
class UEngineBaseTypes final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EngineBaseTypes")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EngineBaseTypes")
	}
	static class UEngineBaseTypes* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEngineBaseTypes>();
	}
};
DUMPER7_ASSERTS_UEngineBaseTypes;

// Class Engine.AnimCompress_RemoveLinearKeys
// 0x0020 (0x0060 - 0x0040)
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{
public:
	float                                         MaxPosDiff;                                        // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngleDiff;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxScaleDiff;                                      // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEffectorDiff;                                   // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinEffectorDiff;                                   // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectorDiffSocket;                                // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParentKeyScale;                                    // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRetarget : 1;                                     // 0x005C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bActuallyFilterLinearKeys : 1;                     // 0x005C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimCompress_RemoveLinearKeys")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimCompress_RemoveLinearKeys")
	}
	static class UAnimCompress_RemoveLinearKeys* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimCompress_RemoveLinearKeys>();
	}
};
DUMPER7_ASSERTS_UAnimCompress_RemoveLinearKeys;

// Class Engine.SoundConcurrency
// 0x0020 (0x0048 - 0x0028)
class USoundConcurrency final : public UObject
{
public:
	struct FSoundConcurrencySettings              Concurrency;                                       // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundConcurrency")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundConcurrency")
	}
	static class USoundConcurrency* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundConcurrency>();
	}
};
DUMPER7_ASSERTS_USoundConcurrency;

// Class Engine.MaterialExpressionObjectBounds
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionObjectBounds final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionObjectBounds")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionObjectBounds")
	}
	static class UMaterialExpressionObjectBounds* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionObjectBounds>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionObjectBounds;

// Class Engine.EngineTypes
// 0x0000 (0x0028 - 0x0028)
class UEngineTypes final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EngineTypes")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EngineTypes")
	}
	static class UEngineTypes* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEngineTypes>();
	}
};
DUMPER7_ASSERTS_UEngineTypes;

// Class Engine.ExponentialHeightFog
// 0x0010 (0x02A8 - 0x0298)
class AExponentialHeightFog final : public AInfo
{
public:
	class UExponentialHeightFogComponent*         Component;                                         // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bEnabled : 1;                                      // 0x02A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_bEnabled();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ExponentialHeightFog")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ExponentialHeightFog")
	}
	static class AExponentialHeightFog* GetDefaultObj()
	{
		return GetDefaultObjImpl<AExponentialHeightFog>();
	}
};
DUMPER7_ASSERTS_AExponentialHeightFog;

// Class Engine.AnimMetaData
// 0x0000 (0x0028 - 0x0028)
class UAnimMetaData final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimMetaData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimMetaData")
	}
	static class UAnimMetaData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimMetaData>();
	}
};
DUMPER7_ASSERTS_UAnimMetaData;

// Class Engine.MaterialExpressionCloudSampleAttribute
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionCloudSampleAttribute final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionCloudSampleAttribute")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionCloudSampleAttribute")
	}
	static class UMaterialExpressionCloudSampleAttribute* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionCloudSampleAttribute>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionCloudSampleAttribute;

// Class Engine.ExponentialHeightFogComponent
// 0x00E0 (0x0380 - 0x02A0)
class UExponentialHeightFogComponent final : public USceneComponent
{
public:
	float                                         FogDensity;                                        // 0x02A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x02A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogData              SecondFogData;                                     // 0x02A8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringColor;                              // 0x02B4(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringLuminance;                          // 0x02C4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyAtmosphereAmbientContributionColorScale;        // 0x02D4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           InscatteringColorCubemap;                          // 0x02E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InscatteringColorCubemapAngle;                     // 0x02F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InscatteringTextureTint;                           // 0x02F4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullyDirectionalInscatteringColorDistance;         // 0x0304(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonDirectionalInscatteringColorDistance;           // 0x0308(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x030C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x0310(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringColor;                      // 0x0314(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringLuminance;                  // 0x0324(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x0334(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x0338(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogCutoffDistance;                                 // 0x033C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableVolumetricFog;                              // 0x0340(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_341[0x3];                                      // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumetricFogScatteringDistribution;               // 0x0344(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 VolumetricFogAlbedo;                               // 0x0348(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricFogEmissive;                             // 0x034C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogExtinctionScale;                      // 0x035C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogDistance;                             // 0x0360(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogStartDistance;                        // 0x0364(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogNearFadeInDistance;                   // 0x0368(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogStaticLightingScatteringIntensity;    // 0x036C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLightColorsWithFogInscatteringColors;     // 0x0370(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_371[0xF];                                      // 0x0371(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetDirectionalInscatteringColor(const struct FLinearColor& Value);
	void SetDirectionalInscatteringExponent(float Value);
	void SetDirectionalInscatteringStartDistance(float Value);
	void SetFogCutoffDistance(float Value);
	void SetFogDensity(float Value);
	void SetFogHeightFalloff(float Value);
	void SetFogInscatteringColor(const struct FLinearColor& Value);
	void SetFogMaxOpacity(float Value);
	void SetFullyDirectionalInscatteringColorDistance(float Value);
	void SetInscatteringColorCubemap(class UTextureCube* Value);
	void SetInscatteringColorCubemapAngle(float Value);
	void SetInscatteringTextureTint(const struct FLinearColor& Value);
	void SetNonDirectionalInscatteringColorDistance(float Value);
	void SetSecondFogData(const struct FExponentialHeightFogData& NewValue);
	void SetSecondFogDensity(float Value);
	void SetSecondFogHeightFalloff(float Value);
	void SetSecondFogHeightOffset(float Value);
	void SetStartDistance(float Value);
	void SetVolumetricFog(bool bNewValue);
	void SetVolumetricFogAlbedo(const struct FColor& NewValue);
	void SetVolumetricFogDistance(float NewValue);
	void SetVolumetricFogEmissive(const struct FLinearColor& NewValue);
	void SetVolumetricFogExtinctionScale(float NewValue);
	void SetVolumetricFogScatteringDistribution(float NewValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ExponentialHeightFogComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ExponentialHeightFogComponent")
	}
	static class UExponentialHeightFogComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExponentialHeightFogComponent>();
	}
};
DUMPER7_ASSERTS_UExponentialHeightFogComponent;

// Class Engine.AnimStreamable
// 0x0048 (0x00F8 - 0x00B0)
class UAnimStreamable final : public UAnimSequenceBase
{
public:
	int32                                         NumberOfKeys;                                      // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimInterpolationType                        Interpolation;                                     // 0x00B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RetargetSource;                                    // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameRate                             SamplingFrameRate;                                 // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x10];                                      // 0x00C8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimBoneCompressionSettings*           BoneCompressionSettings;                           // 0x00D8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimCurveCompressionSettings*          CurveCompressionSettings;                          // 0x00E0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVariableFrameStrippingSettings*        VariableFrameStrippingSettings;                    // 0x00E8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRootMotion;                                 // 0x00F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionRootLock                           RootMotionRootLock;                                // 0x00F1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceRootLock;                                    // 0x00F2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseNormalizedRootMotionScale;                     // 0x00F3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimStreamable")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimStreamable")
	}
	static class UAnimStreamable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimStreamable>();
	}
};
DUMPER7_ASSERTS_UAnimStreamable;

// Class Engine.Exporter
// 0x0050 (0x0078 - 0x0028)
class UExporter : public UObject
{
public:
	TSubclassOf<class UObject>                    SupportedClass;                                    // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ExportRootScope;                                   // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         FormatExtension;                                   // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         FormatDescription;                                 // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PreferredFormatIndex;                              // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextIndent;                                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bText : 1;                                         // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSelectedOnly : 1;                                 // 0x0060(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceFileOperations : 1;                          // 0x0060(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAssetExportTask*                       ExportTask;                                        // 0x0068(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool RunAssetExportTask(class UAssetExportTask* Task);
	static bool RunAssetExportTasks(const TArray<class UAssetExportTask*>& ExportTasks);

	bool ScriptRunAssetExportTask(class UAssetExportTask* Task);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Exporter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Exporter")
	}
	static class UExporter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExporter>();
	}
};
DUMPER7_ASSERTS_UExporter;

// Class Engine.SoundNodeGroupControl
// 0x0010 (0x0058 - 0x0048)
class USoundNodeGroupControl final : public USoundNode
{
public:
	TArray<int32>                                 GroupSizes;                                        // 0x0048(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeGroupControl")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeGroupControl")
	}
	static class USoundNodeGroupControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeGroupControl>();
	}
};
DUMPER7_ASSERTS_USoundNodeGroupControl;

// Class Engine.MaterialExpressionExecBegin
// 0x0008 (0x00B8 - 0x00B0)
class UMaterialExpressionExecBegin final : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                  Exec;                                              // 0x00B0(0x0008)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionExecBegin")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionExecBegin")
	}
	static class UMaterialExpressionExecBegin* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionExecBegin>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionExecBegin;

// Class Engine.FieldNotificationLibrary
// 0x0000 (0x0028 - 0x0028)
class UFieldNotificationLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void BroadcastFieldsValueChanged(class UObject* Object, const TArray<struct FFieldNotificationId>& FieldIds);
	static void BroadcastFieldValueChanged(class UObject* Object, const struct FFieldNotificationId& FieldId);
	static bool SetPropertyValueAndBroadcast(bool NewValueByRef, const int32& OldValue, const int32& NewValue, class UObject* Object, class UObject* NetOwner, bool bHasLocalRepNotify, bool bShouldFlushDormancyOnSet, bool bIsNetProperty);
	static bool SetPropertyValueAndBroadcastFields(bool NewValueByRef, const int32& OldValue, const int32& NewValue, class UObject* Object, class UObject* NetOwner, bool bHasLocalRepNotify, bool bShouldFlushDormancyOnSet, bool bIsNetProperty, const TArray<struct FFieldNotificationId>& ExtraFieldIds);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FieldNotificationLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FieldNotificationLibrary")
	}
	static class UFieldNotificationLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFieldNotificationLibrary>();
	}
};
DUMPER7_ASSERTS_UFieldNotificationLibrary;

// Class Engine.SoundNodeLooping
// 0x0008 (0x0050 - 0x0048)
class USoundNodeLooping final : public USoundNode
{
public:
	int32                                         LoopCount;                                         // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLoopIndefinitely : 1;                             // 0x004C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeLooping")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeLooping")
	}
	static class USoundNodeLooping* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeLooping>();
	}
};
DUMPER7_ASSERTS_USoundNodeLooping;

// Class Engine.MaterialExpressionStrataAdd
// 0x0058 (0x0108 - 0x00B0)
class UMaterialExpressionStrataAdd final : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                       A;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       B;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bUseParameterBlending : 1;                         // 0x0100(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataAdd")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataAdd")
	}
	static class UMaterialExpressionStrataAdd* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataAdd>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataAdd;

// Class Engine.FontImportOptions
// 0x00B0 (0x00D8 - 0x0028)
class UFontImportOptions final : public UObject
{
public:
	struct FFontImportOptionsData                 Data;                                              // 0x0028(0x00B0)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FontImportOptions")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FontImportOptions")
	}
	static class UFontImportOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFontImportOptions>();
	}
};
DUMPER7_ASSERTS_UFontImportOptions;

// Class Engine.ForceFeedbackAttenuation
// 0x00C0 (0x00E8 - 0x0028)
class UForceFeedbackAttenuation final : public UObject
{
public:
	struct FForceFeedbackAttenuationSettings      Attenuation;                                       // 0x0028(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ForceFeedbackAttenuation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ForceFeedbackAttenuation")
	}
	static class UForceFeedbackAttenuation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UForceFeedbackAttenuation>();
	}
};
DUMPER7_ASSERTS_UForceFeedbackAttenuation;

// Class Engine.MaterialExpressionDistance
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionDistance final : public UMaterialExpression
{
public:
	struct FExpressionInput                       A;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       B;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDistance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDistance")
	}
	static class UMaterialExpressionDistance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDistance>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDistance;

// Class Engine.GameNetworkManager
// 0x00A8 (0x0340 - 0x0298)
class AGameNetworkManager final : public AInfo
{
public:
	float                                         BadPacketLossThreshold;                            // 0x0298(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeverePacketLossThreshold;                         // 0x029C(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BadPingThreshold;                                  // 0x02A0(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeverePingThreshold;                               // 0x02A4(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdjustedNetSpeed;                                  // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastNetSpeedUpdateTime;                            // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalNetBandwidth;                                 // 0x02B0(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinDynamicBandwidth;                               // 0x02B4(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxDynamicBandwidth;                               // 0x02B8(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsStandbyCheckingEnabled : 1;                     // 0x02BC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasStandbyCheatTriggered : 1;                     // 0x02BC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StandbyRxCheatTime;                                // 0x02C0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandbyTxCheatTime;                                // 0x02C4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentMissingForRxStandby;                        // 0x02C8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentMissingForTxStandby;                        // 0x02CC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentForBadPing;                                 // 0x02D0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JoinInProgressStandbyWaitTime;                     // 0x02D4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveRepSize;                                       // 0x02D8(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MAXPOSITIONERRORSQUARED;                           // 0x02DC(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MAXNEARZEROVELOCITYSQUARED;                        // 0x02E0(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CLIENTADJUSTUPDATECOST;                            // 0x02E4(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MAXCLIENTUPDATEINTERVAL;                           // 0x02E8(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxClientForcedUpdateDuration;                     // 0x02EC(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerForcedUpdateHitchThreshold;                  // 0x02F0(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerForcedUpdateHitchCooldown;                   // 0x02F4(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMoveDeltaTime;                                  // 0x02F8(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxClientSmoothingDeltaTime;                       // 0x02FC(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClientNetSendMoveDeltaTime;                        // 0x0300(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClientNetSendMoveDeltaTimeThrottled;               // 0x0304(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClientNetSendMoveDeltaTimeStationary;              // 0x0308(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClientNetSendMoveThrottleAtNetSpeed;               // 0x030C(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClientNetSendMoveThrottleOverPlayerCount;          // 0x0310(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClientErrorUpdateRateLimit;                        // 0x0314(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClientNetCamUpdateDeltaTime;                       // 0x0318(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClientNetCamUpdatePositionLimit;                   // 0x031C(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientAuthorativePosition;                         // 0x0320(0x0001)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMovementTimeDiscrepancyDetection;                 // 0x0321(0x0001)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMovementTimeDiscrepancyResolution;                // 0x0322(0x0001)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_323[0x1];                                      // 0x0323(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovementTimeDiscrepancyMaxTimeMargin;              // 0x0324(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementTimeDiscrepancyMinTimeMargin;              // 0x0328(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementTimeDiscrepancyResolutionRate;             // 0x032C(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementTimeDiscrepancyDriftAllowance;             // 0x0330(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x0334(0x0001)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDistanceBasedRelevancy;                        // 0x0335(0x0001)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_336[0xA];                                      // 0x0336(0x000A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GameNetworkManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GameNetworkManager")
	}
	static class AGameNetworkManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameNetworkManager>();
	}
};
DUMPER7_ASSERTS_AGameNetworkManager;

// Class Engine.AnimCurveCompressionSettings
// 0x0008 (0x0030 - 0x0028)
class UAnimCurveCompressionSettings final : public UObject
{
public:
	class UAnimCurveCompressionCodec*             Codec;                                             // 0x0028(0x0008)(Edit, ExportObject, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimCurveCompressionSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimCurveCompressionSettings")
	}
	static class UAnimCurveCompressionSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimCurveCompressionSettings>();
	}
};
DUMPER7_ASSERTS_UAnimCurveCompressionSettings;

// Class Engine.ParticleModuleBeamBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleBeamBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleBeamBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleBeamBase")
	}
	static class UParticleModuleBeamBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleBeamBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleBeamBase;

// Class Engine.ParticleModuleBeamNoise
// 0x0190 (0x01C0 - 0x0030)
class UParticleModuleBeamNoise final : public UParticleModuleBeamBase
{
public:
	uint8                                         bLowFreq_Enabled : 1;                              // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Frequency;                                         // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Frequency_LowRange;                                // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionVector                 NoiseRange;                                        // 0x0040(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  NoiseRangeScale;                                   // 0x00A0(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bNRScaleEmitterTime : 1;                           // 0x00D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionVector                 NoiseSpeed;                                        // 0x00D8(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bSmooth : 1;                                       // 0x0138(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NoiseLockRadius;                                   // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bNoiseLock : 1;                                    // 0x0140(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOscillate : 1;                                    // 0x0140(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NoiseLockTime;                                     // 0x0144(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseTension;                                      // 0x0148(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseNoiseTangents : 1;                             // 0x014C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionFloat                  NoiseTangentStrength;                              // 0x0150(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         NoiseTessellation;                                 // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bTargetNoise : 1;                                  // 0x0184(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FrequencyDistance;                                 // 0x0188(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bApplyNoiseScale : 1;                              // 0x018C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_18D[0x3];                                      // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionFloat                  NoiseScale;                                        // 0x0190(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleBeamNoise")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleBeamNoise")
	}
	static class UParticleModuleBeamNoise* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleBeamNoise>();
	}
};
DUMPER7_ASSERTS_UParticleModuleBeamNoise;

// Class Engine.SpotLight
// 0x0008 (0x02B0 - 0x02A8)
class ASpotLight : public ALight
{
public:
	class USpotLightComponent*                    SpotLightComponent;                                // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetInnerConeAngle(float NewInnerConeAngle);
	void SetOuterConeAngle(float NewOuterConeAngle);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SpotLight")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SpotLight")
	}
	static class ASpotLight* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpotLight>();
	}
};
DUMPER7_ASSERTS_ASpotLight;

// Class Engine.Texture2D
// 0x00B0 (0x0280 - 0x01D0)
#pragma pack(push, 0x1)
class alignas(0x10) UTexture2D : public UTexture
{
public:
	int32                                         FirstResourceMemMip;                               // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bTemporarilyDisableStreaming : 1;                  // 0x01CC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	ETextureAddress                               AddressX;                                          // 0x01CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressY;                                          // 0x01CE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF[0x1];                                      // 0x01CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              ImportedSize;                                      // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D8[0xA0];                                     // 0x01D8(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 Blueprint_GetSizeX() const;
	int32 Blueprint_GetSizeY() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Texture2D")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Texture2D")
	}
	static class UTexture2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTexture2D>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_UTexture2D;

// Class Engine.LightMapVirtualTexture2D
// 0x0010 (0x0290 - 0x0280)
class ULightMapVirtualTexture2D final : public UTexture2D
{
public:
	TArray<int8>                                  TypeToLayer;                                       // 0x0278(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_288[0x8];                                      // 0x0288(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LightMapVirtualTexture2D")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LightMapVirtualTexture2D")
	}
	static class ULightMapVirtualTexture2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULightMapVirtualTexture2D>();
	}
};
DUMPER7_ASSERTS_ULightMapVirtualTexture2D;

// Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance")
	}
	static class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance;

// Class Engine.GeneratedMeshAreaLight
// 0x0000 (0x02B0 - 0x02B0)
class AGeneratedMeshAreaLight final : public ASpotLight
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GeneratedMeshAreaLight")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GeneratedMeshAreaLight")
	}
	static class AGeneratedMeshAreaLight* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGeneratedMeshAreaLight>();
	}
};
DUMPER7_ASSERTS_AGeneratedMeshAreaLight;

// Class Engine.TextureRenderTarget2D
// 0x0030 (0x0200 - 0x01D0)
#pragma pack(push, 0x1)
class alignas(0x10) UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int32                                         SizeX;                                             // 0x01D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x01D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ClearColor;                                        // 0x01D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressX;                                          // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressY;                                          // 0x01E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bForceLinearGamma : 1;                             // 0x01EA(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHDR : 1;                                          // 0x01EA(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGPUSharedFlag : 1;                                // 0x01EA(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ETextureRenderTargetFormat                    RenderTargetFormat;                                // 0x01EB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAutoGenerateMips : 1;                             // 0x01EC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ETextureFilter                                MipsSamplerFilter;                                 // 0x01ED(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               MipsAddressU;                                      // 0x01EE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               MipsAddressV;                                      // 0x01EF(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPixelFormat                                  OverrideFormat;                                    // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TextureRenderTarget2D")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TextureRenderTarget2D")
	}
	static class UTextureRenderTarget2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextureRenderTarget2D>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_UTextureRenderTarget2D;

// Class Engine.CanvasRenderTarget2D
// 0x0020 (0x0220 - 0x0200)
class UCanvasRenderTarget2D final : public UTextureRenderTarget2D
{
public:
	TMulticastInlineDelegate<void(class UCanvas* Canvas, int32 Width, int32 Height)> OnCanvasRenderTargetUpdate; // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UWorld>                  World;                                             // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldClearRenderTargetOnReceiveUpdate;           // 0x0210(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_211[0xF];                                      // 0x0211(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(class UObject* WorldContextObject, TSubclassOf<class UCanvasRenderTarget2D> CanvasRenderTarget2DClass, int32 Width, int32 Height);

	void GetSize(int32* Width, int32* Height);
	void ReceiveUpdate(class UCanvas* Canvas, int32 Width, int32 Height);
	void UpdateResource();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CanvasRenderTarget2D")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CanvasRenderTarget2D")
	}
	static class UCanvasRenderTarget2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCanvasRenderTarget2D>();
	}
};
DUMPER7_ASSERTS_UCanvasRenderTarget2D;

// Class Engine.MaterialExpressionLogarithm10
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionLogarithm10 final : public UMaterialExpression
{
public:
	struct FExpressionInput                       X;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionLogarithm10")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionLogarithm10")
	}
	static class UMaterialExpressionLogarithm10* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLogarithm10>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionLogarithm10;

// Class Engine.HapticFeedbackEffect_Base
// 0x0000 (0x0028 - 0x0028)
class UHapticFeedbackEffect_Base : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HapticFeedbackEffect_Base")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HapticFeedbackEffect_Base")
	}
	static class UHapticFeedbackEffect_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHapticFeedbackEffect_Base>();
	}
};
DUMPER7_ASSERTS_UHapticFeedbackEffect_Base;

// Class Engine.ShapeComponent
// 0x0020 (0x0590 - 0x0570)
class UShapeComponent : public UPrimitiveComponent
{
public:
	class UBodySetup*                             ShapeBodySetup;                                    // 0x0570(0x0008)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ShapeColor;                                        // 0x0578(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDrawOnlyIfSelected : 1;                           // 0x057C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldCollideWhenPlacing : 1;                     // 0x057C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDynamicObstacle : 1;                              // 0x057C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_57D[0x3];                                      // 0x057D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavAreaBase>               AreaClassOverride;                                 // 0x0580(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bUseSystemDefaultObstacleAreaClass : 1;            // 0x0588(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_589[0x7];                                      // 0x0589(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ShapeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ShapeComponent")
	}
	static class UShapeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShapeComponent>();
	}
};
DUMPER7_ASSERTS_UShapeComponent;

// Class Engine.HapticFeedbackEffect_Buffer
// 0x0018 (0x0040 - 0x0028)
class UHapticFeedbackEffect_Buffer final : public UHapticFeedbackEffect_Base
{
public:
	TArray<uint8>                                 Amplitudes;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SampleRate;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HapticFeedbackEffect_Buffer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HapticFeedbackEffect_Buffer")
	}
	static class UHapticFeedbackEffect_Buffer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHapticFeedbackEffect_Buffer>();
	}
};
DUMPER7_ASSERTS_UHapticFeedbackEffect_Buffer;

// Class Engine.ActorDescContainer
// 0x0000 (0x0028 - 0x0028)
class UActorDescContainer final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActorDescContainer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActorDescContainer")
	}
	static class UActorDescContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorDescContainer>();
	}
};
DUMPER7_ASSERTS_UActorDescContainer;

// Class Engine.MaterialExpressionPathTracingBufferTexture
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionPathTracingBufferTexture final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Coordinates;                                       // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	EPathTracingBufferTextureId                   PathTracingBufferTextureId;                        // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionPathTracingBufferTexture")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionPathTracingBufferTexture")
	}
	static class UMaterialExpressionPathTracingBufferTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionPathTracingBufferTexture>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionPathTracingBufferTexture;

// Class Engine.HapticFeedbackEffect_Curve
// 0x0110 (0x0138 - 0x0028)
class UHapticFeedbackEffect_Curve final : public UHapticFeedbackEffect_Base
{
public:
	struct FHapticFeedbackDetails_Curve           HapticDetails;                                     // 0x0028(0x0110)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HapticFeedbackEffect_Curve")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HapticFeedbackEffect_Curve")
	}
	static class UHapticFeedbackEffect_Curve* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHapticFeedbackEffect_Curve>();
	}
};
DUMPER7_ASSERTS_UHapticFeedbackEffect_Curve;

// Class Engine.ApplicationLifecycleComponent
// 0x0090 (0x0130 - 0x00A0)
class UApplicationLifecycleComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void()>              ApplicationWillDeactivateDelegate;                 // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ApplicationHasReactivatedDelegate;                 // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ApplicationWillEnterBackgroundDelegate;            // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ApplicationHasEnteredForegroundDelegate;           // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ApplicationWillTerminateDelegate;                  // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ApplicationShouldUnloadResourcesDelegate;          // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<class FString>& StartupArguments)> ApplicationReceivedStartupArgumentsDelegate; // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ETemperatureSeverityType Severity)> OnTemperatureChangeDelegate;   // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bInLowPowerMode)> OnLowPowerModeDelegate;                     // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ApplicationLifecycleComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ApplicationLifecycleComponent")
	}
	static class UApplicationLifecycleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UApplicationLifecycleComponent>();
	}
};
DUMPER7_ASSERTS_UApplicationLifecycleComponent;

// Class Engine.HapticFeedbackEffect_SoundWave
// 0x0020 (0x0048 - 0x0028)
class UHapticFeedbackEffect_SoundWave final : public UHapticFeedbackEffect_Base
{
public:
	class USoundWave*                             SoundWave;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseStereo;                                        // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x17];                                      // 0x0031(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HapticFeedbackEffect_SoundWave")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HapticFeedbackEffect_SoundWave")
	}
	static class UHapticFeedbackEffect_SoundWave* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHapticFeedbackEffect_SoundWave>();
	}
};
DUMPER7_ASSERTS_UHapticFeedbackEffect_SoundWave;

// Class Engine.WorldPartitionHLODSourceActors
// 0x0000 (0x0028 - 0x0028)
class UWorldPartitionHLODSourceActors : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionHLODSourceActors")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionHLODSourceActors")
	}
	static class UWorldPartitionHLODSourceActors* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionHLODSourceActors>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionHLODSourceActors;

// Class Engine.MaterialExpressionParticleMotionBlurFade
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionParticleMotionBlurFade final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionParticleMotionBlurFade")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionParticleMotionBlurFade")
	}
	static class UMaterialExpressionParticleMotionBlurFade* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionParticleMotionBlurFade>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionParticleMotionBlurFade;

// Class Engine.ParticleModuleBeamModifier
// 0x0108 (0x0138 - 0x0030)
class UParticleModuleBeamModifier final : public UParticleModuleBeamBase
{
public:
	EBeamModifierType                             ModifierType;                                      // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBeamModifierOptions                   PositionOptions;                                   // 0x0034(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                 Position;                                          // 0x0038(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FBeamModifierOptions                   TangentOptions;                                    // 0x0098(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionVector                 Tangent;                                           // 0x00A0(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bAbsoluteTangent : 1;                              // 0x0100(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBeamModifierOptions                   StrengthOptions;                                   // 0x0104(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  Strength;                                          // 0x0108(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleBeamModifier")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleBeamModifier")
	}
	static class UParticleModuleBeamModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleBeamModifier>();
	}
};
DUMPER7_ASSERTS_UParticleModuleBeamModifier;

// Class Engine.WorldPartitionHLODSourceActorsFromCell
// 0x0000 (0x0028 - 0x0028)
class UWorldPartitionHLODSourceActorsFromCell final : public UWorldPartitionHLODSourceActors
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionHLODSourceActorsFromCell")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionHLODSourceActorsFromCell")
	}
	static class UWorldPartitionHLODSourceActorsFromCell* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionHLODSourceActorsFromCell>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionHLODSourceActorsFromCell;

// Class Engine.WorldPartitionHLODSourceActorsFromLevel
// 0x0000 (0x0028 - 0x0028)
class UWorldPartitionHLODSourceActorsFromLevel final : public UWorldPartitionHLODSourceActors
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionHLODSourceActorsFromLevel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionHLODSourceActorsFromLevel")
	}
	static class UWorldPartitionHLODSourceActorsFromLevel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionHLODSourceActorsFromLevel>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionHLODSourceActorsFromLevel;

// Class Engine.MaterialExpressionSparseVolumeTextureBase
// 0x0008 (0x00B8 - 0x00B0)
class UMaterialExpressionSparseVolumeTextureBase : public UMaterialExpression
{
public:
	class USparseVolumeTexture*                   SparseVolumeTexture;                               // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSparseVolumeTextureBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSparseVolumeTextureBase")
	}
	static class UMaterialExpressionSparseVolumeTextureBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSparseVolumeTextureBase>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSparseVolumeTextureBase;

// Class Engine.MaterialExpressionSparseVolumeTextureSample
// 0x0080 (0x0138 - 0x00B8)
class UMaterialExpressionSparseVolumeTextureSample : public UMaterialExpressionSparseVolumeTextureBase
{
public:
	struct FExpressionInput                       Coordinates;                                       // 0x00B8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       TextureObject;                                     // 0x00E0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       MipLevel;                                          // 0x0108(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	ESamplerSourceMode                            SamplerSource;                                     // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSparseVolumeTextureSample")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSparseVolumeTextureSample")
	}
	static class UMaterialExpressionSparseVolumeTextureSample* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSparseVolumeTextureSample>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSparseVolumeTextureSample;

// Class Engine.MaterialExpressionSparseVolumeTextureSampleParameter
// 0x0028 (0x0160 - 0x0138)
class UMaterialExpressionSparseVolumeTextureSampleParameter : public UMaterialExpressionSparseVolumeTextureSample
{
public:
	class FName                                   ParameterName;                                     // 0x0138(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ExpressionGUID;                                    // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Group;                                             // 0x0150(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortPriority;                                      // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSparseVolumeTextureSampleParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSparseVolumeTextureSampleParameter")
	}
	static class UMaterialExpressionSparseVolumeTextureSampleParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSparseVolumeTextureSampleParameter>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSparseVolumeTextureSampleParameter;

// Class Engine.HLODTemplatedInstancedStaticMeshComponent
// 0x0010 (0x0780 - 0x0770)
class UHLODTemplatedInstancedStaticMeshComponent final : public UInstancedStaticMeshComponent
{
public:
	TSubclassOf<class AActor>                     TemplateActorClass;                                // 0x0770(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TemplateComponentName;                             // 0x0778(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HLODTemplatedInstancedStaticMeshComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HLODTemplatedInstancedStaticMeshComponent")
	}
	static class UHLODTemplatedInstancedStaticMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHLODTemplatedInstancedStaticMeshComponent>();
	}
};
DUMPER7_ASSERTS_UHLODTemplatedInstancedStaticMeshComponent;

// Class Engine.Commandlet
// 0x0058 (0x0080 - 0x0028)
class UCommandlet : public UObject
{
public:
	class FString                                 HelpDescription;                                   // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HelpUsage;                                         // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HelpWebLink;                                       // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         HelpParamNames;                                    // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         HelpParamDescriptions;                             // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         IsServer : 1;                                      // 0x0078(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         IsClient : 1;                                      // 0x0078(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         IsEditor : 1;                                      // 0x0078(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         LogToConsole : 1;                                  // 0x0078(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ShowErrorCount : 1;                                // 0x0078(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ShowProgress : 1;                                  // 0x0078(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         FastExit : 1;                                      // 0x0078(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         UseCommandletResultAsExitCode : 1;                 // 0x0078(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Commandlet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Commandlet")
	}
	static class UCommandlet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommandlet>();
	}
};
DUMPER7_ASSERTS_UCommandlet;

// Class Engine.MaterialExpressionMax
// 0x0058 (0x0108 - 0x00B0)
class UMaterialExpressionMax final : public UMaterialExpression
{
public:
	struct FExpressionInput                       A;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       B;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstA;                                            // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstB;                                            // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionMax")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionMax")
	}
	static class UMaterialExpressionMax* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionMax>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionMax;

// Class Engine.AnimationDataController
// 0x0000 (0x0000 - 0x0000)
class IAnimationDataController final
{
public:
	bool AddAttribute(const struct FAnimationAttributeIdentifier& AttributeIdentifier, bool bShouldTransact);
	bool AddBoneCurve(class FName BoneName, bool bShouldTransact);
	int32 AddBoneTrack(class FName BoneName, bool bShouldTransact);
	bool AddCurve(const struct FAnimationCurveIdentifier& CurveId, int32 CurveFlags, bool bShouldTransact);
	void CloseBracket(bool bShouldTransact);
	bool DuplicateAttribute(const struct FAnimationAttributeIdentifier& AttributeIdentifier, const struct FAnimationAttributeIdentifier& NewAttributeIdentifier, bool bShouldTransact);
	bool DuplicateCurve(const struct FAnimationCurveIdentifier& CopyCurveId, const struct FAnimationCurveIdentifier& NewCurveId, bool bShouldTransact);
	void FindOrAddCurveNamesOnSkeleton(class USkeleton* Skeleton, ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact);
	int32 InsertBoneTrack(class FName BoneName, int32 DesiredIndex, bool bShouldTransact);
	void OpenBracket(const class FText& InTitle, bool bShouldTransact);
	int32 RemoveAllAttributes(bool bShouldTransact);
	int32 RemoveAllAttributesForBone(const class FName& BoneName, bool bShouldTransact);
	void RemoveAllBoneTracks(bool bShouldTransact);
	void RemoveAllCurvesOfType(ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact);
	bool RemoveAttribute(const struct FAnimationAttributeIdentifier& AttributeIdentifier, bool bShouldTransact);
	bool RemoveAttributeKey(const struct FAnimationAttributeIdentifier& AttributeIdentifier, float Time, bool bShouldTransact);
	bool RemoveBoneTrack(class FName BoneName, bool bShouldTransact);
	bool RemoveCurve(const struct FAnimationCurveIdentifier& CurveId, bool bShouldTransact);
	bool RemoveCurveKey(const struct FAnimationCurveIdentifier& CurveId, float Time, bool bShouldTransact);
	bool RemoveTransformCurveKey(const struct FAnimationCurveIdentifier& CurveId, float Time, bool bShouldTransact);
	bool RenameCurve(const struct FAnimationCurveIdentifier& CurveToRenameId, const struct FAnimationCurveIdentifier& NewCurveId, bool bShouldTransact);
	void Resize(float Length, float T0, float T1, bool bShouldTransact);
	void ResizeInFrames(const struct FFrameNumber& NewLengthInFrames, const struct FFrameNumber& T0, const struct FFrameNumber& T1, bool bShouldTransact);
	void ResizeNumberOfFrames(const struct FFrameNumber& NewLengthInFrames, const struct FFrameNumber& T0, const struct FFrameNumber& T1, bool bShouldTransact);
	void ResizePlayLength(float NewLength, float T0, float T1, bool bShouldTransact);
	bool ScaleCurve(const struct FAnimationCurveIdentifier& CurveId, float Origin, float Factor, bool bShouldTransact);
	bool SetBoneTrackKeys(class FName BoneName, const TArray<struct FVector>& PositionalKeys, const TArray<struct FQuat>& RotationalKeys, const TArray<struct FVector>& ScalingKeys, bool bShouldTransact);
	bool SetCurveColor(const struct FAnimationCurveIdentifier& CurveId, const struct FLinearColor& Color, bool bShouldTransact);
	bool SetCurveFlag(const struct FAnimationCurveIdentifier& CurveId, EAnimAssetCurveFlags Flag, bool bState, bool bShouldTransact);
	bool SetCurveFlags(const struct FAnimationCurveIdentifier& CurveId, int32 Flags_0, bool bShouldTransact);
	bool SetCurveKey(const struct FAnimationCurveIdentifier& CurveId, const struct FRichCurveKey& Key, bool bShouldTransact);
	bool SetCurveKeys(const struct FAnimationCurveIdentifier& CurveId, const TArray<struct FRichCurveKey>& CurveKeys, bool bShouldTransact);
	void SetFrameRate(const struct FFrameRate& FrameRate, bool bShouldTransact);
	void SetModel(TScriptInterface<class IAnimationDataModel> InModel);
	void SetNumberOfFrames(const struct FFrameNumber& NewLengthInFrames, bool bShouldTransact);
	void SetPlayLength(float Length, bool bShouldTransact);
	bool SetTransformCurveKey(const struct FAnimationCurveIdentifier& CurveId, float Time, const struct FTransform& Value, bool bShouldTransact);
	bool SetTransformCurveKeys(const struct FAnimationCurveIdentifier& CurveId, const TArray<struct FTransform>& TransformValues, const TArray<float>& TimeKeys, bool bShouldTransact);
	void UpdateCurveNamesFromSkeleton(const class USkeleton* Skeleton, ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact);

	TScriptInterface<class IAnimationDataModel> GetModelInterface() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimationDataController")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimationDataController")
	}
	static class IAnimationDataController* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAnimationDataController>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IAnimationDataController;

// Class Engine.ChildActorComponent
// 0x0040 (0x02E0 - 0x02A0)
class UChildActorComponent final : public USceneComponent
{
public:
	TSubclassOf<class AActor>                     ChildActorClass;                                   // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 ChildActor;                                        // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, TextExportTransient, NonPIEDuplicateTransient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 ChildActorTemplate;                                // 0x02B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B8[0x18];                                     // 0x02B8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bChildActorIsTransient : 1;                        // 0x02D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_2D1[0xF];                                      // 0x02D1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnChildActorDestroyed(class AActor* Actor);
	void OnRep_ChildActor();
	void SetChildActorClass(TSubclassOf<class AActor> InClass);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ChildActorComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ChildActorComponent")
	}
	static class UChildActorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChildActorComponent>();
	}
};
DUMPER7_ASSERTS_UChildActorComponent;

// Class Engine.AnimationDataModel
// 0x0000 (0x0000 - 0x0000)
class IAnimationDataModel final
{
public:
	class UAnimSequence* GetAnimationSequence() const;
	const TArray<struct FBoneAnimationTrack> GetBoneAnimationTracks() const;
	const struct FBoneAnimationTrack GetBoneTrackByIndex(int32 TrackIndex) const;
	const struct FBoneAnimationTrack GetBoneTrackByName(class FName TrackName) const;
	int32 GetBoneTrackIndex(const struct FBoneAnimationTrack& Track) const;
	int32 GetBoneTrackIndexByName(class FName TrackName) const;
	void GetBoneTrackNames(TArray<class FName>* OutNames) const;
	struct FFrameRate GetFrameRate() const;
	int32 GetNumberOfFloatCurves() const;
	int32 GetNumberOfFrames() const;
	int32 GetNumberOfKeys() const;
	int32 GetNumberOfTransformCurves() const;
	int32 GetNumBoneTracks() const;
	double GetPlayLength() const;
	bool IsValidBoneTrackIndex(int32 TrackIndex) const;
	bool IsValidBoneTrackName(const class FName& TrackName) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimationDataModel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimationDataModel")
	}
	static class IAnimationDataModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAnimationDataModel>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IAnimationDataModel;

// Class Engine.DataLayerAsset
// 0x0008 (0x0030 - 0x0028)
class UDataLayerAsset final : public UObject
{
public:
	EDataLayerType                                DataLayerType;                                     // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSupportsActorFilters;                             // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 DebugColor;                                        // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	struct FColor GetDebugColor() const;
	EDataLayerType GetType() const;
	bool IsRuntime() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DataLayerAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DataLayerAsset")
	}
	static class UDataLayerAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataLayerAsset>();
	}
};
DUMPER7_ASSERTS_UDataLayerAsset;

// Class Engine.MaterialExpressionGenericConstant
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionGenericConstant : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionGenericConstant")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionGenericConstant")
	}
	static class UMaterialExpressionGenericConstant* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionGenericConstant>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionGenericConstant;

// Class Engine.InGameAdManager
// 0x0028 (0x0060 - 0x0038)
class UInGameAdManager final : public UPlatformInterfaceBase
{
public:
	uint8                                         bShouldPauseWhileAdOpen : 1;                       // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TDelegate<void()>>                     ClickedBannerDelegates;                            // 0x0040(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<TDelegate<void()>>                     ClosedAdDelegates;                                 // 0x0050(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InGameAdManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InGameAdManager")
	}
	static class UInGameAdManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInGameAdManager>();
	}
};
DUMPER7_ASSERTS_UInGameAdManager;

// Class Engine.BrushComponent
// 0x0010 (0x0580 - 0x0570)
class UBrushComponent final : public UPrimitiveComponent
{
public:
	class UModel*                                 Brush;                                             // 0x0570(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBodySetup*                             BrushBodySetup;                                    // 0x0578(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BrushComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BrushComponent")
	}
	static class UBrushComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBrushComponent>();
	}
};
DUMPER7_ASSERTS_UBrushComponent;

// Class Engine.Interface_ActorSubobject
// 0x0000 (0x0000 - 0x0000)
class IInterface_ActorSubobject final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Interface_ActorSubobject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Interface_ActorSubobject")
	}
	static class IInterface_ActorSubobject* GetDefaultObj()
	{
		return GetDefaultObjImpl<IInterface_ActorSubobject>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IInterface_ActorSubobject;

// Class Engine.Interface_AssetUserData
// 0x0000 (0x0000 - 0x0000)
class IInterface_AssetUserData final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Interface_AssetUserData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Interface_AssetUserData")
	}
	static class IInterface_AssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<IInterface_AssetUserData>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IInterface_AssetUserData;

// Class Engine.MaterialExpressionParticleSubUV
// 0x0008 (0x01C0 - 0x01B8)
class UMaterialExpressionParticleSubUV final : public UMaterialExpressionTextureSample
{
public:
	uint8                                         bBlend : 1;                                        // 0x01B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionParticleSubUV")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionParticleSubUV")
	}
	static class UMaterialExpressionParticleSubUV* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionParticleSubUV>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionParticleSubUV;

// Class Engine.ParticleModuleCollisionBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleCollisionBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleCollisionBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleCollisionBase")
	}
	static class UParticleModuleCollisionBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleCollisionBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleCollisionBase;

// Class Engine.ParticleModuleCollisionGPU
// 0x0078 (0x00A8 - 0x0030)
class UParticleModuleCollisionGPU final : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionFloat                  Resilience;                                        // 0x0030(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  ResilienceScaleOverLife;                           // 0x0060(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Friction;                                          // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomSpread;                                      // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomDistribution;                                // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusScale;                                       // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusBias;                                        // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EParticleCollisionResponse                    Response;                                          // 0x00A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EParticleCollisionMode                        CollisionMode;                                     // 0x00A5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleCollisionGPU")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleCollisionGPU")
	}
	static class UParticleModuleCollisionGPU* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleCollisionGPU>();
	}
};
DUMPER7_ASSERTS_UParticleModuleCollisionGPU;

// Class Engine.Interface_AsyncCompilation
// 0x0000 (0x0000 - 0x0000)
class IInterface_AsyncCompilation final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Interface_AsyncCompilation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Interface_AsyncCompilation")
	}
	static class IInterface_AsyncCompilation* GetDefaultObj()
	{
		return GetDefaultObjImpl<IInterface_AsyncCompilation>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IInterface_AsyncCompilation;

// Class Engine.CheatManagerExtension
// 0x0000 (0x0028 - 0x0028)
class UCheatManagerExtension final : public UObject
{
public:
	void AddedToCheatManager();
	void RemovedFromCheatManager();

	class APlayerController* GetPlayerController() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CheatManagerExtension")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CheatManagerExtension")
	}
	static class UCheatManagerExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatManagerExtension>();
	}
};
DUMPER7_ASSERTS_UCheatManagerExtension;

// Class Engine.ParticleModuleEventReceiverKillParticles
// 0x0008 (0x0048 - 0x0040)
class UParticleModuleEventReceiverKillParticles final : public UParticleModuleEventReceiverBase
{
public:
	uint8                                         bStopSpawning : 1;                                 // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleEventReceiverKillParticles")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleEventReceiverKillParticles")
	}
	static class UParticleModuleEventReceiverKillParticles* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleEventReceiverKillParticles>();
	}
};
DUMPER7_ASSERTS_UParticleModuleEventReceiverKillParticles;

// Class Engine.BoneReferenceSkeletonProvider
// 0x0000 (0x0000 - 0x0000)
class IBoneReferenceSkeletonProvider final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BoneReferenceSkeletonProvider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BoneReferenceSkeletonProvider")
	}
	static class IBoneReferenceSkeletonProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBoneReferenceSkeletonProvider>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IBoneReferenceSkeletonProvider;

// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x0030 (0x0108 - 0x00D8)
class UMaterialExpressionStaticComponentMaskParameter final : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                       Input;                                             // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         DefaultR : 1;                                      // 0x0100(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         DefaultG : 1;                                      // 0x0100(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         DefaultB : 1;                                      // 0x0100(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         DefaultA : 1;                                      // 0x0100(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStaticComponentMaskParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStaticComponentMaskParameter")
	}
	static class UMaterialExpressionStaticComponentMaskParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStaticComponentMaskParameter>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStaticComponentMaskParameter;

// Class Engine.Interface_CollisionDataProvider
// 0x0000 (0x0000 - 0x0000)
class IInterface_CollisionDataProvider final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Interface_CollisionDataProvider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Interface_CollisionDataProvider")
	}
	static class IInterface_CollisionDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IInterface_CollisionDataProvider>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IInterface_CollisionDataProvider;

// Class Engine.DataTableFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UDataTableFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool DoesDataTableRowExist(class UDataTable* Table, class FName RowName);
	static void EvaluateCurveTableRow(class UCurveTable* CurveTable, class FName RowName, float InXY, EEvaluateCurveTableResult* OutResult, float* OutXY, const class FString& ContextString);
	static TArray<class FString> GetDataTableColumnAsString(const class UDataTable* DataTable, class FName PropertyName);
	static bool GetDataTableRowFromName(class UDataTable* Table, class FName RowName, struct FTableRowBase* OutRow);
	static void GetDataTableRowNames(class UDataTable* Table, TArray<class FName>* OutRowNames);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DataTableFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DataTableFunctionLibrary")
	}
	static class UDataTableFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataTableFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_UDataTableFunctionLibrary;

// Class Engine.MaterialExpressionShadingModel
// 0x0008 (0x00B8 - 0x00B0)
class UMaterialExpressionShadingModel final : public UMaterialExpression
{
public:
	EMaterialShadingModel                         ShadingModel;                                      // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionShadingModel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionShadingModel")
	}
	static class UMaterialExpressionShadingModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionShadingModel>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionShadingModel;

// Class Engine.Interface_PostProcessVolume
// 0x0000 (0x0000 - 0x0000)
class IInterface_PostProcessVolume final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Interface_PostProcessVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Interface_PostProcessVolume")
	}
	static class IInterface_PostProcessVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<IInterface_PostProcessVolume>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IInterface_PostProcessVolume;

// Class Engine.HeterogeneousVolumeComponent
// 0x0040 (0x05F0 - 0x05B0)
class UHeterogeneousVolumeComponent final : public UMeshComponent
{
public:
	struct FIntVector                             VolumeResolution;                                  // 0x05A8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frame;                                             // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameRate;                                         // 0x05B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartFrame;                                        // 0x05BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndFrame;                                          // 0x05C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPlaying : 1;                                      // 0x05C4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLooping : 1;                                      // 0x05C4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5C5[0x3];                                      // 0x05C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        MipLevel;                                          // 0x05C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIssueBlockingRequests : 1;                        // 0x05CC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5CD[0x3];                                      // 0x05CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StepFactor;                                        // 0x05D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowStepFactor;                                  // 0x05D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowBiasFactor;                                  // 0x05D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightingDownsampleFactor;                          // 0x05DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               MaterialInstanceDynamic;                           // 0x05E0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E8[0x8];                                      // 0x05E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Play();
	void SetEndFrame(float NewValue);
	void SetFrame(float NewValue);
	void SetFrameRate(float NewValue);
	void SetLooping(bool NewValue);
	void SetPlaying(bool NewValue);
	void SetStartFrame(float NewValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HeterogeneousVolumeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HeterogeneousVolumeComponent")
	}
	static class UHeterogeneousVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeterogeneousVolumeComponent>();
	}
};
DUMPER7_ASSERTS_UHeterogeneousVolumeComponent;

// Class Engine.Interface_PreviewMeshProvider
// 0x0000 (0x0000 - 0x0000)
class IInterface_PreviewMeshProvider final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Interface_PreviewMeshProvider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Interface_PreviewMeshProvider")
	}
	static class IInterface_PreviewMeshProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IInterface_PreviewMeshProvider>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IInterface_PreviewMeshProvider;

// Class Engine.WorldPartitionDestructibleHLODComponent
// 0x0010 (0x02B0 - 0x02A0)
class UWorldPartitionDestructibleHLODComponent : public USceneComponent
{
public:
	TArray<class FName>                           DestructibleActors;                                // 0x02A0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionDestructibleHLODComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionDestructibleHLODComponent")
	}
	static class UWorldPartitionDestructibleHLODComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionDestructibleHLODComponent>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionDestructibleHLODComponent;

// Class Engine.WorldPartitionDestructibleHLODMeshComponent
// 0x0160 (0x0410 - 0x02B0)
class UWorldPartitionDestructibleHLODMeshComponent final : public UWorldPartitionDestructibleHLODComponent
{
public:
	class UMaterialInterface*                     DestructibleHLODMaterial;                          // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FWorldPartitionDestructibleHLODState   DestructibleHLODState;                             // 0x02B8(0x0148)(Net, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               VisibilityMaterial;                                // 0x0400(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTexture2DDynamic*                      VisibilityTexture;                                 // 0x0408(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionDestructibleHLODMeshComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionDestructibleHLODMeshComponent")
	}
	static class UWorldPartitionDestructibleHLODMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionDestructibleHLODMeshComponent>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionDestructibleHLODMeshComponent;

// Class Engine.MaterialExpressionIf
// 0x00D8 (0x0188 - 0x00B0)
class UMaterialExpressionIf final : public UMaterialExpression
{
public:
	struct FExpressionInput                       A;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       B;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       AGreaterThanB;                                     // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       AEqualsB;                                          // 0x0128(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       ALessThanB;                                        // 0x0150(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         EqualsThreshold;                                   // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstB;                                            // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstAEqualsB;                                     // 0x0180(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionIf")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionIf")
	}
	static class UMaterialExpressionIf* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionIf>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionIf;

// Class Engine.PhysicsComponent
// 0x0000 (0x0000 - 0x0000)
class IPhysicsComponent final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PhysicsComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PhysicsComponent")
	}
	static class IPhysicsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<IPhysicsComponent>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IPhysicsComponent;

// Class Engine.ISMPartitionInstanceManager
// 0x0000 (0x0000 - 0x0000)
class IISMPartitionInstanceManager final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ISMPartitionInstanceManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ISMPartitionInstanceManager")
	}
	static class IISMPartitionInstanceManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<IISMPartitionInstanceManager>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IISMPartitionInstanceManager;

// Class Engine.ISMPartitionInstanceManagerProvider
// 0x0000 (0x0000 - 0x0000)
class IISMPartitionInstanceManagerProvider final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ISMPartitionInstanceManagerProvider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ISMPartitionInstanceManagerProvider")
	}
	static class IISMPartitionInstanceManagerProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IISMPartitionInstanceManagerProvider>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IISMPartitionInstanceManagerProvider;

// Class Engine.MaterialExpressionPerInstanceRandom
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionPerInstanceRandom final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionPerInstanceRandom")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionPerInstanceRandom")
	}
	static class UMaterialExpressionPerInstanceRandom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionPerInstanceRandom>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionPerInstanceRandom;

// Class Engine.WorldPartitionObjectResolver
// 0x0000 (0x0000 - 0x0000)
class IWorldPartitionObjectResolver final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionObjectResolver")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionObjectResolver")
	}
	static class IWorldPartitionObjectResolver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IWorldPartitionObjectResolver>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IWorldPartitionObjectResolver;

// Class Engine.DataDrivenCVarEngineSubsystem
// 0x0010 (0x0040 - 0x0030)
class UDataDrivenCVarEngineSubsystem final : public UEngineSubsystem
{
public:
	TMulticastInlineDelegate<void(const class FString& CVarName)> OnDataDrivenCVarDelegate;          // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DataDrivenCVarEngineSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DataDrivenCVarEngineSubsystem")
	}
	static class UDataDrivenCVarEngineSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataDrivenCVarEngineSubsystem>();
	}
};
DUMPER7_ASSERTS_UDataDrivenCVarEngineSubsystem;

// Class Engine.MaterialExpressionPreSkinnedLocalBounds
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionPreSkinnedLocalBounds final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionPreSkinnedLocalBounds")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionPreSkinnedLocalBounds")
	}
	static class UMaterialExpressionPreSkinnedLocalBounds* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionPreSkinnedLocalBounds>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionPreSkinnedLocalBounds;

// Class Engine.KismetTextLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetTextLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FText AsCurrency_Float(float Value, ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits, int32 MinimumFractionalDigits, int32 MaximumFractionalDigits, const class FString& CurrencyCode);
	static class FText AsCurrency_Integer(int32 Value, ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits, int32 MinimumFractionalDigits, int32 MaximumFractionalDigits, const class FString& CurrencyCode);
	static class FText AsCurrencyBase(int32 BaseValue, const class FString& CurrencyCode);
	static class FText AsDate_DateTime(const struct FDateTime& InDateTime);
	static class FText AsDateTime_DateTime(const struct FDateTime& In);
	static class FText AsPercent_Float(float Value, ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits, int32 MinimumFractionalDigits, int32 MaximumFractionalDigits);
	static class FText AsTime_DateTime(const struct FDateTime& In);
	static class FText AsTimespan_Timespan(const struct FTimespan& InTimespan);
	static class FText AsTimeZoneDate_DateTime(const struct FDateTime& InDateTime, const class FString& InTimeZone);
	static class FText AsTimeZoneDateTime_DateTime(const struct FDateTime& InDateTime, const class FString& InTimeZone);
	static class FText AsTimeZoneTime_DateTime(const struct FDateTime& InDateTime, const class FString& InTimeZone);
	static class FText Conv_BoolToText(bool InBool);
	static class FText Conv_ByteToText(uint8 Value);
	static class FText Conv_ColorToText(const struct FLinearColor& InColor);
	static class FText Conv_DoubleToText(double Value, ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits, int32 MinimumFractionalDigits, int32 MaximumFractionalDigits);
	static class FText Conv_Int64ToText(int64 Value, bool bAlwaysSign, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits);
	static class FText Conv_IntToText(int32 Value, bool bAlwaysSign, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits);
	static class FText Conv_NameToText(class FName InName);
	static class FText Conv_ObjectToText(class UObject* InObj);
	static class FText Conv_RotatorToText(const struct FRotator& InRot);
	static class FText Conv_StringToText(const class FString& InString);
	static class FString Conv_TextToString(const class FText& InText);
	static class FText Conv_TransformToText(const struct FTransform& InTrans);
	static class FText Conv_Vector2dToText(const struct FVector2D& InVec);
	static class FText Conv_VectorToText(const struct FVector& InVec);
	static bool EqualEqual_IgnoreCase_TextText(const class FText& A, const class FText& B);
	static bool EqualEqual_TextText(const class FText& A, const class FText& B);
	static bool FindTextInLocalizationTable(const class FString& Namespace, const class FString& Key, class FText* OutText, const class FString& SourceString);
	static class FText Format(const class FText& InPattern, const TArray<struct FFormatArgumentData>& InArgs);
	static class FText GetEmptyText();
	static void IsPolyglotDataValid(const struct FPolyglotTextData& PolyglotData, bool* IsValid, class FText* ErrorMessage);
	static bool NotEqual_IgnoreCase_TextText(const class FText& A, const class FText& B);
	static bool NotEqual_TextText(const class FText& A, const class FText& B);
	static class FText PolyglotDataToText(const struct FPolyglotTextData& PolyglotData);
	static bool StringTableIdAndKeyFromText(const class FText& Text, class FName* OutTableId, class FString* OutKey);
	static class FText TextFromStringTable(const class FName TableId, const class FString& Key);
	static bool TextIsCultureInvariant(const class FText& InText);
	static bool TextIsEmpty(const class FText& InText);
	static bool TextIsFromStringTable(const class FText& Text);
	static bool TextIsTransient(const class FText& InText);
	static class FText TextToLower(const class FText& InText);
	static class FText TextToUpper(const class FText& InText);
	static class FText TextTrimPreceding(const class FText& InText);
	static class FText TextTrimPrecedingAndTrailing(const class FText& InText);
	static class FText TextTrimTrailing(const class FText& InText);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("KismetTextLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"KismetTextLibrary")
	}
	static class UKismetTextLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKismetTextLibrary>();
	}
};
DUMPER7_ASSERTS_UKismetTextLibrary;

// Class Engine.ParticleModuleLifetimeBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleLifetimeBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLifetimeBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLifetimeBase")
	}
	static class UParticleModuleLifetimeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLifetimeBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLifetimeBase;

// Class Engine.ParticleModuleLifetime
// 0x0030 (0x0060 - 0x0030)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                  Lifetime;                                          // 0x0030(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLifetime")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLifetime")
	}
	static class UParticleModuleLifetime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLifetime>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLifetime;

// Class Engine.ParticleModuleLifetime_Seeded
// 0x0020 (0x0080 - 0x0060)
class UParticleModuleLifetime_Seeded final : public UParticleModuleLifetime
{
public:
	struct FParticleRandomSeedInfo                RandomSeedInfo;                                    // 0x0060(0x0020)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLifetime_Seeded")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLifetime_Seeded")
	}
	static class UParticleModuleLifetime_Seeded* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLifetime_Seeded>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLifetime_Seeded;

// Class Engine.ParticleModuleAttractorBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleAttractorBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleAttractorBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleAttractorBase")
	}
	static class UParticleModuleAttractorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleAttractorBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleAttractorBase;

// Class Engine.ParticleModuleAttractorPointGravity
// 0x0058 (0x0088 - 0x0030)
class UParticleModuleAttractorPointGravity final : public UParticleModuleAttractorBase
{
public:
	struct FVector                                Position;                                          // 0x0030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDistributionFloat*                     Strength;                                          // 0x0050(0x0008)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  StrengthRaw;                                       // 0x0058(0x0030)(Edit, NoClear, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleAttractorPointGravity")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleAttractorPointGravity")
	}
	static class UParticleModuleAttractorPointGravity* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleAttractorPointGravity>();
	}
};
DUMPER7_ASSERTS_UParticleModuleAttractorPointGravity;

// Class Engine.LevelInstanceEditorPivotInterface
// 0x0000 (0x0000 - 0x0000)
class ILevelInstanceEditorPivotInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelInstanceEditorPivotInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelInstanceEditorPivotInterface")
	}
	static class ILevelInstanceEditorPivotInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ILevelInstanceEditorPivotInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ILevelInstanceEditorPivotInterface;

// Class Engine.DecalActor
// 0x0008 (0x02A0 - 0x0298)
class ADecalActor final : public AActor
{
public:
	class UDecalComponent*                        Decal;                                             // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);

	class UMaterialInterface* GetDecalMaterial() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DecalActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DecalActor")
	}
	static class ADecalActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADecalActor>();
	}
};
DUMPER7_ASSERTS_ADecalActor;

// Class Engine.ParticleModuleCollision
// 0x0190 (0x01C0 - 0x0030)
class UParticleModuleCollision final : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                 DampingFactor;                                     // 0x0030(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                 DampingFactorRotation;                             // 0x0090(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  MaxCollisions;                                     // 0x00F0(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EParticleCollisionComplete                    CollisionCompletionOption;                         // 0x0120(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      CollisionTypes;                                    // 0x0128(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bApplyPhysics : 1;                                 // 0x0140(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreTriggerVolumes : 1;                         // 0x0140(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionFloat                  ParticleMass;                                      // 0x0148(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         DirScalar;                                         // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPawnsDoNotDecrementCount : 1;                     // 0x017C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOnlyVerticalNormalsDecrementCount : 1;            // 0x017C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VerticalFudgeFactor;                               // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionFloat                  DelayAmount;                                       // 0x0188(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bDropDetail : 1;                                   // 0x01B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCollideOnlyIfVisible : 1;                         // 0x01B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreSourceActor : 1;                            // 0x01B8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxCollisionDistance;                              // 0x01BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleCollision")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleCollision")
	}
	static class UParticleModuleCollision* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleCollision>();
	}
};
DUMPER7_ASSERTS_UParticleModuleCollision;

// Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionSkyAtmosphereLightDiskLuminance final : public UMaterialExpression
{
public:
	int32                                         LightIndex;                                        // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExpressionInput                       DiskAngularDiameterOverride;                       // 0x00B8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSkyAtmosphereLightDiskLuminance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSkyAtmosphereLightDiskLuminance")
	}
	static class UMaterialExpressionSkyAtmosphereLightDiskLuminance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSkyAtmosphereLightDiskLuminance>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSkyAtmosphereLightDiskLuminance;

// Class Engine.World
// 0x08C0 (0x08E8 - 0x0028)
class UWorld final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevel*                                 PersistentLevel;                                   // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetDriver*                             NetDriver;                                         // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULineBatchComponent*                    LineBatcher;                                       // 0x0040(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULineBatchComponent*                    PersistentLineBatcher;                             // 0x0048(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULineBatchComponent*                    ForegroundLineBatcher;                             // 0x0050(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameNetworkManager*                    NetworkManager;                                    // 0x0058(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsCollisionHandler*               PhysicsCollisionHandler;                           // 0x0060(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ExtraReferencedObjects;                            // 0x0068(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        PerModuleDataObjects;                              // 0x0078(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class ULevelStreaming*>                StreamingLevels;                                   // 0x0088(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FStreamingLevelsToConsider             StreamingLevelsToConsider;                         // 0x0098(0x0028)(Transient, DuplicateTransient, NativeAccessSpecifierPrivate)
	class AServerStreamingLevelsVisibility*       ServerStreamingLevelsVisibility;                   // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 StreamingLevelsPrefix;                             // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevel*                                 CurrentLevelPendingVisibility;                     // 0x00E0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULevel*                                 CurrentLevelPendingInvisibility;                   // 0x00E8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDemoNetDriver*                         DemoNetDriver;                                     // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AParticleEventManager*                  MyParticleEventManager;                            // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APhysicsVolume*                         DefaultPhysicsVolume;                              // 0x0100(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_108[0x36];                                     // 0x0108(0x0036)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         BitPad_13E_0 : 2;                                  // 0x013E(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bAreConstraintsDirty : 1;                          // 0x013E(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_13F[0x9];                                      // 0x013F(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	class UNavigationSystemBase*                  NavigationSystem;                                  // 0x0148(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGameModeBase*                          AuthorityGameMode;                                 // 0x0150(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGameStateBase*                         GameState;                                         // 0x0158(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAISystemBase*                          AISystem;                                          // 0x0160(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAvoidanceManager*                      AvoidanceManager;                                  // 0x0168(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class ULevel*>                         Levels;                                            // 0x0170(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<struct FLevelCollection>               LevelCollections;                                  // 0x0180(0x0010)(ZeroConstructor, Transient, NonTransactional, NativeAccessSpecifierPrivate)
	uint8                                         Pad_190[0x28];                                     // 0x0190(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          OwningGameInstance;                                // 0x01B8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMaterialParameterCollectionInstance*> ParameterCollectionInstances;                // 0x01C0(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UCanvas*                                CanvasForRenderingToTarget;                        // 0x01D0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCanvas*                                CanvasForDrawMaterialToRenderTarget;               // 0x01D8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E0[0x70];                                     // 0x01E0(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsFieldComponent*                 PhysicsField;                                      // 0x0250(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        LWILastAssignedUID;                                // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UActorComponent*>                  ComponentsThatNeedPreEndOfFrameSync;               // 0x0260(0x0050)(ExportObject, Transient, NonTransactional, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UActorComponent*>                ComponentsThatNeedEndOfFrameUpdate;                // 0x02B0(0x0010)(ExportObject, ZeroConstructor, Transient, NonTransactional, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UActorComponent*>                ComponentsThatNeedEndOfFrameUpdate_OnGameThread;   // 0x02C0(0x0010)(ExportObject, ZeroConstructor, Transient, NonTransactional, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D0[0x440];                                    // 0x02D0(0x0440)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorldComposition*                      WorldComposition;                                  // 0x0710(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UContentBundleManager*                  ContentBundleManager;                              // 0x0718(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_720[0xB0];                                     // 0x0720(0x00B0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWorldPSCPool                          PSCPool;                                           // 0x07D0(0x0058)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_828[0xC0];                                     // 0x0828(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UWorld* GetWorld();

	void HandleTimelineScrubbed();
	class AWorldSettings* K2_GetWorldSettings();

	class UDataLayerManager* GetDataLayerManager() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("World")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"World")
	}
	static class UWorld* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorld>();
	}
};
DUMPER7_ASSERTS_UWorld;

// Class Engine.AudioVolume
// 0x0070 (0x0340 - 0x02D0)
class AAudioVolume final : public AVolume
{
public:
	float                                         Priority;                                          // 0x02D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bEnabled : 1;                                      // 0x02D4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReverbSettings                        Settings;                                          // 0x02D8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	struct FInteriorSettings                      AmbientZoneSettings;                               // 0x02F8(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAudioVolumeSubmixSendSettings> SubmixSendSettings;                                // 0x0320(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FAudioVolumeSubmixOverrideSettings> SubmixOverrideSettings;                        // 0x0330(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void OnRep_bEnabled();
	void SetEnabled(bool bNewEnabled);
	void SetInteriorSettings(const struct FInteriorSettings& NewInteriorSettings);
	void SetPriority(float NewPriority);
	void SetReverbSettings(const struct FReverbSettings& NewReverbSettings);
	void SetSubmixOverrideSettings(const TArray<struct FAudioVolumeSubmixOverrideSettings>& NewSubmixOverrideSettings);
	void SetSubmixSendSettings(const TArray<struct FAudioVolumeSubmixSendSettings>& NewSubmixSendSettings);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AudioVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AudioVolume")
	}
	static class AAudioVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAudioVolume>();
	}
};
DUMPER7_ASSERTS_AAudioVolume;

// Class Engine.LevelStreaming
// 0x0178 (0x01A0 - 0x0028)
#pragma pack(push, 0x1)
class alignas(0x10) ULevelStreaming : public UObject
{
public:
	TSoftObjectPtr<class UWorld>                  WorldAsset;                                        // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         StreamingPriority;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PackageNameToLoad;                                 // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LODPackageNames;                                   // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x10];                                      // 0x0070(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LevelTransform;                                    // 0x0080(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClientOnlyVisible;                                // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LevelLODIndex;                                     // 0x00E4(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BitPad_E8_0 : 3;                                   // 0x00E8(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bShouldBeVisible : 1;                              // 0x00E8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bShouldBeLoaded : 1;                               // 0x00E8(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         BitPad_E8_5 : 3;                                   // 0x00E8(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_E9[0x2];                                       // 0x00E9(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bLocked : 1;                                       // 0x00EB(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsStatic : 1;                                     // 0x00EB(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldBlockOnLoad : 1;                            // 0x00EB(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldBlockOnUnload : 1;                          // 0x00EB(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableDistanceStreaming : 1;                     // 0x00EB(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawOnLevelStatusMap : 1;                         // 0x00EB(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	struct FLinearColor                           LevelColor;                                        // 0x00EC(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ALevelStreamingVolume*>          EditorStreamingVolumes;                            // 0x0100(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         MinTimeBetweenVolumeUnloadRequests;                // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnLevelLoaded;                                     // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnLevelUnloaded;                                   // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnLevelShown;                                      // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnLevelHidden;                                     // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class ULevel*                                 LoadedLevel;                                       // 0x0158(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULevel*                                 PendingUnloadLevel;                                // 0x0160(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_168[0x30];                                     // 0x0168(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class ULevelStreaming* CreateInstance(const class FString& UniqueInstanceName);
	class ALevelScriptActor* GetLevelScriptActor();
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);
	void SetLevelLODIndex(int32 LODIndex);
	void SetPriority(int32 NewPriority);
	void SetShouldBeLoaded(bool bInShouldBeLoaded);
	void SetShouldBeVisible(bool bInShouldBeVisible);

	bool GetIsRequestingUnloadAndRemoval() const;
	class ULevel* GetLoadedLevel() const;
	class FName GetWorldAssetPackageFName() const;
	bool IsLevelLoaded() const;
	bool IsLevelVisible() const;
	bool IsStreamingStatePending() const;
	bool ShouldBeLoaded() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelStreaming")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelStreaming")
	}
	static class ULevelStreaming* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelStreaming>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_ULevelStreaming;

// Class Engine.AutomationTestSettings
// 0x0330 (0x0358 - 0x0028)
class UAutomationTestSettings final : public UObject
{
public:
	TArray<class FString>                         EngineTestModules;                                 // 0x0028(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                         EditorTestModules;                                 // 0x0038(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        AutomationTestmap;                                 // 0x0048(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps;                    // 0x0068(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                         AssetsToOpen;                                      // 0x0078(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                         MapsToPIETest;                                     // 0x0088(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bUseAllProjectMapsToPlayInPIE;                     // 0x0098(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBuildPromotionTestSettings            BuildPromotionTest;                                // 0x00A0(0x01F0)(Edit, Config, NativeAccessSpecifierPublic)
	struct FMaterialEditorPromotionSettings       MaterialEditorPromotionTest;                       // 0x0290(0x0030)(Edit, Config, NativeAccessSpecifierPublic)
	struct FParticleEditorPromotionSettings       ParticleEditorPromotionTest;                       // 0x02C0(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	struct FBlueprintEditorPromotionSettings      BlueprintEditorPromotionTest;                      // 0x02D0(0x0030)(Edit, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                         TestLevelFolders;                                  // 0x0300(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FExternalToolDefinition>        ExternalTools;                                     // 0x0310(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FEditorImportExportTestDefinition> ImportExportTestDefinitions;                    // 0x0320(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FLaunchOnTestSettings>          LaunchOnSettings;                                  // 0x0330(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FIntPoint                              DefaultScreenshotResolution;                       // 0x0340(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PIETestDuration;                                   // 0x0348(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultInteractiveFramerate;                       // 0x034C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultInteractiveFramerateWaitTime;               // 0x0350(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultInteractiveFramerateDuration;               // 0x0354(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AutomationTestSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AutomationTestSettings")
	}
	static class UAutomationTestSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAutomationTestSettings>();
	}
};
DUMPER7_ASSERTS_UAutomationTestSettings;

// Class Engine.MaterialExpressionLinearInterpolate
// 0x0088 (0x0138 - 0x00B0)
class UMaterialExpressionLinearInterpolate final : public UMaterialExpression
{
public:
	struct FExpressionInput                       A;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       B;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Alpha;                                             // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstA;                                            // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstB;                                            // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstAlpha;                                        // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionLinearInterpolate")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionLinearInterpolate")
	}
	static class UMaterialExpressionLinearInterpolate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLinearInterpolate>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionLinearInterpolate;

// Class Engine.LevelStreamingAlwaysLoaded
// 0x0000 (0x01A0 - 0x01A0)
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelStreamingAlwaysLoaded")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelStreamingAlwaysLoaded")
	}
	static class ULevelStreamingAlwaysLoaded* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelStreamingAlwaysLoaded>();
	}
};
DUMPER7_ASSERTS_ULevelStreamingAlwaysLoaded;

// Class Engine.InputComponent
// 0x0088 (0x0128 - 0x00A0)
class UInputComponent : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x70];                                      // 0x00A0(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedKeyToActionInfo>         CachedKeyToActionInfo;                             // 0x0110(0x0010)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_120[0x8];                                      // 0x0120(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInputOwnerEndPlayed(class AActor* InOwner, EEndPlayReason EndPlayReason);

	float GetControllerAnalogKeyState(const struct FKey& Key) const;
	void GetControllerAnalogStickState(EControllerAnalogStick WhichStick, float* StickX, float* StickY) const;
	float GetControllerKeyTimeDown(const struct FKey& Key) const;
	void GetControllerMouseDelta(float* DeltaX, float* DeltaY) const;
	struct FVector GetControllerVectorKeyState(const struct FKey& Key) const;
	void GetTouchState(int32 FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed) const;
	bool IsControllerKeyDown(const struct FKey& Key) const;
	bool WasControllerKeyJustPressed(const struct FKey& Key) const;
	bool WasControllerKeyJustReleased(const struct FKey& Key) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InputComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InputComponent")
	}
	static class UInputComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputComponent>();
	}
};
DUMPER7_ASSERTS_UInputComponent;

// Class Engine.LevelStreamingDynamic
// 0x0000 (0x01A0 - 0x01A0)
class ULevelStreamingDynamic : public ULevelStreaming
{
public:
	uint8                                         bInitiallyLoaded : 1;                              // 0x0198(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInitiallyVisible : 1;                             // 0x0198(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class ULevelStreamingDynamic* LoadLevelInstance(class UObject* WorldContextObject, const class FString& LevelName, const struct FVector& Location, const struct FRotator& Rotation, bool* bOutSuccess, const class FString& OptionalLevelNameOverride, TSubclassOf<class ULevelStreamingDynamic> OptionalLevelStreamingClass, bool bLoadAsTempPackage);
	static class ULevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(class UObject* WorldContextObject, TSoftObjectPtr<class UWorld> Level, const struct FVector& Location, const struct FRotator& Rotation, bool* bOutSuccess, const class FString& OptionalLevelNameOverride, TSubclassOf<class ULevelStreamingDynamic> OptionalLevelStreamingClass, bool bLoadAsTempPackage);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelStreamingDynamic")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelStreamingDynamic")
	}
	static class ULevelStreamingDynamic* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelStreamingDynamic>();
	}
};
DUMPER7_ASSERTS_ULevelStreamingDynamic;

// Class Engine.LevelStreamingPersistent
// 0x0000 (0x01A0 - 0x01A0)
class ULevelStreamingPersistent final : public ULevelStreaming
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelStreamingPersistent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelStreamingPersistent")
	}
	static class ULevelStreamingPersistent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelStreamingPersistent>();
	}
};
DUMPER7_ASSERTS_ULevelStreamingPersistent;

// Class Engine.MaterialExpressionHairColor
// 0x0078 (0x0128 - 0x00B0)
class UMaterialExpressionHairColor final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Melanin;                                           // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Redness;                                           // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       DyeColor;                                          // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionHairColor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionHairColor")
	}
	static class UMaterialExpressionHairColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionHairColor>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionHairColor;

// Class Engine.LevelStreamingVolume
// 0x0018 (0x02E8 - 0x02D0)
class ALevelStreamingVolume final : public AVolume
{
public:
	TArray<class FName>                           StreamingLevelNames;                               // 0x02D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         bEditorPreVisOnly : 1;                             // 0x02E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisabled : 1;                                     // 0x02E0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EStreamingVolumeUsage                         StreamingUsage;                                    // 0x02E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E5[0x3];                                      // 0x02E5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelStreamingVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelStreamingVolume")
	}
	static class ALevelStreamingVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALevelStreamingVolume>();
	}
};
DUMPER7_ASSERTS_ALevelStreamingVolume;

// Class Engine.ReporterBase
// 0x0008 (0x0030 - 0x0028)
class UReporterBase : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ReporterBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ReporterBase")
	}
	static class UReporterBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReporterBase>();
	}
};
DUMPER7_ASSERTS_UReporterBase;

// Class Engine.WorldPartitionDestructibleInHLODInterface
// 0x0000 (0x0000 - 0x0000)
class IWorldPartitionDestructibleInHLODInterface final
{
public:
	void SetHLODDestructionTag(const struct FWorldPartitionHLODDestructionTag& InDestructionTag);

	struct FWorldPartitionHLODDestructionTag GetHLODDestructionTag() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionDestructibleInHLODInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionDestructibleInHLODInterface")
	}
	static class IWorldPartitionDestructibleInHLODInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IWorldPartitionDestructibleInHLODInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IWorldPartitionDestructibleInHLODInterface;

// Class Engine.MaterialExpressionLength
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionLength final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionLength")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionLength")
	}
	static class UMaterialExpressionLength* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLength>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionLength;

// Class Engine.SphereComponent
// 0x0010 (0x05A0 - 0x0590)
class USphereComponent : public UShapeComponent
{
public:
	float                                         SphereRadius;                                      // 0x0590(0x0004)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_594[0xC];                                      // 0x0594(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);

	float GetScaledSphereRadius() const;
	float GetShapeScale() const;
	float GetUnscaledSphereRadius() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SphereComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SphereComponent")
	}
	static class USphereComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USphereComponent>();
	}
};
DUMPER7_ASSERTS_USphereComponent;

// Class Engine.DrawSphereComponent
// 0x0000 (0x05A0 - 0x05A0)
class UDrawSphereComponent final : public USphereComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DrawSphereComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DrawSphereComponent")
	}
	static class UDrawSphereComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDrawSphereComponent>();
	}
};
DUMPER7_ASSERTS_UDrawSphereComponent;

// Class Engine.MaterialExpressionParticleRelativeTime
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionParticleRelativeTime final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionParticleRelativeTime")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionParticleRelativeTime")
	}
	static class UMaterialExpressionParticleRelativeTime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionParticleRelativeTime>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionParticleRelativeTime;

// Class Engine.LightMapTexture2D
// 0x0000 (0x0280 - 0x0280)
class ULightMapTexture2D final : public UTexture2D
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LightMapTexture2D")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LightMapTexture2D")
	}
	static class ULightMapTexture2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULightMapTexture2D>();
	}
};
DUMPER7_ASSERTS_ULightMapTexture2D;

// Class Engine.AnimCurveCompressionCodec
// 0x0010 (0x0038 - 0x0028)
class UAnimCurveCompressionCodec : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimCurveCompressionCodec")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimCurveCompressionCodec")
	}
	static class UAnimCurveCompressionCodec* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimCurveCompressionCodec>();
	}
};
DUMPER7_ASSERTS_UAnimCurveCompressionCodec;

// Class Engine.LightmassPortal
// 0x0008 (0x02A0 - 0x0298)
class ALightmassPortal final : public AActor
{
public:
	class ULightmassPortalComponent*              PortalComponent;                                   // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LightmassPortal")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LightmassPortal")
	}
	static class ALightmassPortal* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALightmassPortal>();
	}
};
DUMPER7_ASSERTS_ALightmassPortal;

// Class Engine.SCS_Node
// 0x00B0 (0x00D8 - 0x0028)
class USCS_Node final : public UObject
{
public:
	TSubclassOf<class UObject>                    ComponentClass;                                    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ComponentTemplate;                                 // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlueprintCookedComponentInstancingData CookedComponentInstancingData;                    // 0x0038(0x0048)(NativeAccessSpecifierPublic)
	class FName                                   AttachToName;                                      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentComponentOrVariableName;                     // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentComponentOwnerClassName;                     // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsParentComponentNative;                          // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USCS_Node*>                      ChildNodes;                                        // 0x00A0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FBPVariableMetaDataEntry>       MetaDataArray;                                     // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                  VariableGuid;                                      // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InternalVariableName;                              // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SCS_Node")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SCS_Node")
	}
	static class USCS_Node* GetDefaultObj()
	{
		return GetDefaultObjImpl<USCS_Node>();
	}
};
DUMPER7_ASSERTS_USCS_Node;

// Class Engine.MaterialExpressionCustom
// 0x0068 (0x0118 - 0x00B0)
class UMaterialExpressionCustom final : public UMaterialExpression
{
public:
	class FString                                 Code;                                              // 0x00B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomMaterialOutputType                     OutputType;                                        // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x00C8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCustomInput>                   Inputs;                                            // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomOutput>                  AdditionalOutputs;                                 // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomDefine>                  AdditionalDefines;                                 // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         IncludeFilePaths;                                  // 0x0108(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionCustom")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionCustom")
	}
	static class UMaterialExpressionCustom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionCustom>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionCustom;

// Class Engine.LightmassPortalComponent
// 0x0010 (0x02B0 - 0x02A0)
class ULightmassPortalComponent final : public USceneComponent
{
public:
	class UBoxComponent*                          PreviewBox;                                        // 0x02A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8[0x8];                                      // 0x02A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LightmassPortalComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LightmassPortalComponent")
	}
	static class ULightmassPortalComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULightmassPortalComponent>();
	}
};
DUMPER7_ASSERTS_ULightmassPortalComponent;

// Class Engine.AnimCompress_BitwiseCompressOnly
// 0x0000 (0x0040 - 0x0040)
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimCompress_BitwiseCompressOnly")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimCompress_BitwiseCompressOnly")
	}
	static class UAnimCompress_BitwiseCompressOnly* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimCompress_BitwiseCompressOnly>();
	}
};
DUMPER7_ASSERTS_UAnimCompress_BitwiseCompressOnly;

// Class Engine.LocalHeightFog
// 0x0008 (0x02A0 - 0x0298)
class ALocalHeightFog final : public AInfo
{
public:
	class ULocalHeightFogComponent*               LocalHeightFogVolume;                              // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LocalHeightFog")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LocalHeightFog")
	}
	static class ALocalHeightFog* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALocalHeightFog>();
	}
};
DUMPER7_ASSERTS_ALocalHeightFog;

// Class Engine.MapBuildDataRegistry
// 0x0210 (0x0238 - 0x0028)
class UMapBuildDataRegistry final : public UObject
{
public:
	ELightingBuildQuality                         LevelLightingQuality;                              // 0x0028(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x20F];                                     // 0x0029(0x020F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MapBuildDataRegistry")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MapBuildDataRegistry")
	}
	static class UMapBuildDataRegistry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMapBuildDataRegistry>();
	}
};
DUMPER7_ASSERTS_UMapBuildDataRegistry;

// Class Engine.MaterialExpressionComposite
// 0x0020 (0x00D0 - 0x00B0)
class UMaterialExpressionComposite final : public UMaterialExpression
{
public:
	class FString                                 SubgraphName;                                      // 0x00B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialExpressionPinBase*             InputExpressions;                                  // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialExpressionPinBase*             OutputExpressions;                                 // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionComposite")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionComposite")
	}
	static class UMaterialExpressionComposite* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionComposite>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionComposite;

// Class Engine.MaterialExpressionAbs
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionAbs final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionAbs")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionAbs")
	}
	static class UMaterialExpressionAbs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionAbs>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionAbs;

// Class Engine.DrawFrustumComponent
// 0x0020 (0x0590 - 0x0570)
class UDrawFrustumComponent final : public UPrimitiveComponent
{
public:
	bool                                          bFrustumEnabled;                                   // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_571[0x3];                                      // 0x0571(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 FrustumColor;                                      // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrustumAngle;                                      // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrustumAspectRatio;                                // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrustumStartDist;                                  // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrustumEndDist;                                    // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Texture;                                           // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DrawFrustumComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DrawFrustumComponent")
	}
	static class UDrawFrustumComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDrawFrustumComponent>();
	}
};
DUMPER7_ASSERTS_UDrawFrustumComponent;

// Class Engine.TextureCubeArray
// 0x0090 (0x0260 - 0x01D0)
class UTextureCubeArray final : public UTexture
{
public:
	uint8                                         Pad_1C8[0x98];                                     // 0x01C8(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TextureCubeArray")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TextureCubeArray")
	}
	static class UTextureCubeArray* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextureCubeArray>();
	}
};
DUMPER7_ASSERTS_UTextureCubeArray;

// Class Engine.MaterialExpressionMakeMaterialAttributes
// 0x0438 (0x04E8 - 0x00B0)
class UMaterialExpressionMakeMaterialAttributes final : public UMaterialExpression
{
public:
	struct FExpressionInput                       BaseColor;                                         // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Metallic;                                          // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Specular;                                          // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Roughness;                                         // 0x0128(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Anisotropy;                                        // 0x0150(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       EmissiveColor;                                     // 0x0178(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Opacity;                                           // 0x01A0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       OpacityMask;                                       // 0x01C8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Normal;                                            // 0x01F0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Tangent;                                           // 0x0218(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       WorldPositionOffset;                               // 0x0240(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       SubsurfaceColor;                                   // 0x0268(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       ClearCoat;                                         // 0x0290(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       ClearCoatRoughness;                                // 0x02B8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       AmbientOcclusion;                                  // 0x02E0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Refraction;                                        // 0x0308(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       CustomizedUVs[0x8];                                // 0x0330(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       PixelDepthOffset;                                  // 0x0470(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       ShadingModel;                                      // 0x0498(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       displacement;                                      // 0x04C0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionMakeMaterialAttributes")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionMakeMaterialAttributes")
	}
	static class UMaterialExpressionMakeMaterialAttributes* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionMakeMaterialAttributes>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionMakeMaterialAttributes;

// Class Engine.MaterialExpressionAbsorptionMediumMaterialOutput
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionAbsorptionMediumMaterialOutput final : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                       TransmittanceColor;                                // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionAbsorptionMediumMaterialOutput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionAbsorptionMediumMaterialOutput")
	}
	static class UMaterialExpressionAbsorptionMediumMaterialOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionAbsorptionMediumMaterialOutput>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionAbsorptionMediumMaterialOutput;

// Class Engine.MaterialExpressionActorPositionWS
// 0x0008 (0x00B8 - 0x00B0)
class UMaterialExpressionActorPositionWS final : public UMaterialExpression
{
public:
	EPositionOrigin                               OriginType;                                        // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionActorPositionWS")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionActorPositionWS")
	}
	static class UMaterialExpressionActorPositionWS* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionActorPositionWS>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionActorPositionWS;

// Class Engine.MaterialExpressionPathTracingRayTypeSwitch
// 0x00C8 (0x0178 - 0x00B0)
class UMaterialExpressionPathTracingRayTypeSwitch final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Main;                                              // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Shadow;                                            // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       IndirectDiffuse;                                   // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       IndirectSpecular;                                  // 0x0128(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       IndirectVolume;                                    // 0x0150(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionPathTracingRayTypeSwitch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionPathTracingRayTypeSwitch")
	}
	static class UMaterialExpressionPathTracingRayTypeSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionPathTracingRayTypeSwitch>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionPathTracingRayTypeSwitch;

// Class Engine.MaterialExpressionAdd
// 0x0058 (0x0108 - 0x00B0)
class UMaterialExpressionAdd final : public UMaterialExpression
{
public:
	struct FExpressionInput                       A;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       B;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstA;                                            // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstB;                                            // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionAdd")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionAdd")
	}
	static class UMaterialExpressionAdd* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionAdd>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionAdd;

// Class Engine.AnimNotifyLibrary
// 0x0000 (0x0028 - 0x0028)
class UAnimNotifyLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float GetCurrentAnimationNotifyStateTime(const struct FAnimNotifyEventReference& EventReference);
	static float GetCurrentAnimationNotifyStateTimeRatio(const struct FAnimNotifyEventReference& EventReference);
	static float GetCurrentAnimationTime(const struct FAnimNotifyEventReference& EventReference);
	static float GetCurrentAnimationTimeRatio(const struct FAnimNotifyEventReference& EventReference);
	static bool NotifyStateReachedEnd(const struct FAnimNotifyEventReference& EventReference);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimNotifyLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimNotifyLibrary")
	}
	static class UAnimNotifyLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyLibrary>();
	}
};
DUMPER7_ASSERTS_UAnimNotifyLibrary;

// Class Engine.CheckBoxStyleAsset
// 0x0AD8 (0x0B00 - 0x0028)
class UCheckBoxStyleAsset final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCheckBoxStyle                         CheckBoxStyle;                                     // 0x0030(0x0AD0)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CheckBoxStyleAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CheckBoxStyleAsset")
	}
	static class UCheckBoxStyleAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheckBoxStyleAsset>();
	}
};
DUMPER7_ASSERTS_UCheckBoxStyleAsset;

// Class Engine.MaterialExpressionRerouteBase
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionRerouteBase : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionRerouteBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionRerouteBase")
	}
	static class UMaterialExpressionRerouteBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionRerouteBase>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionRerouteBase;

// Class Engine.MaterialExpressionNamedRerouteBase
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionNamedRerouteBase : public UMaterialExpressionRerouteBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionNamedRerouteBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionNamedRerouteBase")
	}
	static class UMaterialExpressionNamedRerouteBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionNamedRerouteBase>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionNamedRerouteBase;

// Class Engine.MaterialExpressionNamedRerouteUsage
// 0x0018 (0x00C8 - 0x00B0)
class UMaterialExpressionNamedRerouteUsage final : public UMaterialExpressionNamedRerouteBase
{
public:
	class UMaterialExpressionNamedRerouteDeclaration* Declaration;                                   // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  DeclarationGuid;                                   // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionNamedRerouteUsage")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionNamedRerouteUsage")
	}
	static class UMaterialExpressionNamedRerouteUsage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionNamedRerouteUsage>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionNamedRerouteUsage;

// Class Engine.AnimCurveCompressionCodec_UniformIndexable
// 0x0000 (0x0038 - 0x0038)
class UAnimCurveCompressionCodec_UniformIndexable final : public UAnimCurveCompressionCodec
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimCurveCompressionCodec_UniformIndexable")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimCurveCompressionCodec_UniformIndexable")
	}
	static class UAnimCurveCompressionCodec_UniformIndexable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimCurveCompressionCodec_UniformIndexable>();
	}
};
DUMPER7_ASSERTS_UAnimCurveCompressionCodec_UniformIndexable;

// Class Engine.MaterialExpressionScalarParameter
// 0x0010 (0x00E8 - 0x00D8)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                         DefaultValue;                                      // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomPrimitiveData;                           // 0x00DC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PrimitiveDataIndex;                                // 0x00DD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE[0x2];                                       // 0x00DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SliderMin;                                         // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderMax;                                         // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionScalarParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionScalarParameter")
	}
	static class UMaterialExpressionScalarParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionScalarParameter>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionScalarParameter;

// Class Engine.MaterialExpressionAntialiasedTextureMask
// 0x0008 (0x0248 - 0x0240)
class UMaterialExpressionAntialiasedTextureMask final : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                         Threshold;                                         // 0x0240(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureColorChannel                          Channel;                                           // 0x0244(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionAntialiasedTextureMask")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionAntialiasedTextureMask")
	}
	static class UMaterialExpressionAntialiasedTextureMask* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionAntialiasedTextureMask>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionAntialiasedTextureMask;

// Class Engine.LineBatchComponent
// 0x0040 (0x05B0 - 0x0570)
class ULineBatchComponent final : public UPrimitiveComponent
{
public:
	uint8                                         Pad_570[0x40];                                     // 0x0570(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LineBatchComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LineBatchComponent")
	}
	static class ULineBatchComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULineBatchComponent>();
	}
};
DUMPER7_ASSERTS_ULineBatchComponent;

// Class Engine.UserInterfaceSettings
// 0x0278 (0x02B0 - 0x0038)
class UUserInterfaceSettings final : public UDeveloperSettings
{
public:
	ERenderFocusRule                              RenderFocusRule;                                   // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EMouseCursor, struct FHardwareCursorReference> HardwareCursors;                             // 0x0040(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	TMap<EMouseCursor, struct FSoftClassPath>     SoftwareCursors;                                   // 0x0090(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         DefaultCursor;                                     // 0x00E0(0x0020)(ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         TextEditBeamCursor;                                // 0x0100(0x0020)(ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         CrosshairsCursor;                                  // 0x0120(0x0020)(ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         HandCursor;                                        // 0x0140(0x0020)(ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         GrabHandCursor;                                    // 0x0160(0x0020)(ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         GrabHandClosedCursor;                              // 0x0180(0x0020)(ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         SlashedCircleCursor;                               // 0x01A0(0x0020)(ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApplicationScale;                                  // 0x01C0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIScalingRule                                UIScaleRule;                                       // 0x01C4(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C5[0x3];                                      // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         CustomScalingRuleClass;                            // 0x01C8(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     UIScaleCurve;                                      // 0x01E8(0x0088)(Edit, Config, NativeAccessSpecifierPublic)
	bool                                          bAllowHighDPIInGameMode;                           // 0x0270(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              DesignScreenSize;                                  // 0x0274(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadWidgetsOnDedicatedServer;                     // 0x027C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAuthorizeAutomaticWidgetVariableCreation;         // 0x027D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27E[0x2];                                      // 0x027E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        CursorClasses;                                     // 0x0280(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TSubclassOf<class UObject>                    CustomScalingRuleClassInstance;                    // 0x0290(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDPICustomScalingRule*                  CustomScalingRule;                                 // 0x0298(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A0[0x10];                                     // 0x02A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("UserInterfaceSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"UserInterfaceSettings")
	}
	static class UUserInterfaceSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUserInterfaceSettings>();
	}
};
DUMPER7_ASSERTS_UUserInterfaceSettings;

// Class Engine.MaterialExpressionMultiply
// 0x0058 (0x0108 - 0x00B0)
class UMaterialExpressionMultiply final : public UMaterialExpression
{
public:
	struct FExpressionInput                       A;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       B;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstA;                                            // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstB;                                            // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionMultiply")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionMultiply")
	}
	static class UMaterialExpressionMultiply* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionMultiply>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionMultiply;

// Class Engine.MaterialExpressionAppendVector
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionAppendVector final : public UMaterialExpression
{
public:
	struct FExpressionInput                       A;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       B;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionAppendVector")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionAppendVector")
	}
	static class UMaterialExpressionAppendVector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionAppendVector>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionAppendVector;

// Class Engine.MaterialExpressionArccosine
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionArccosine final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionArccosine")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionArccosine")
	}
	static class UMaterialExpressionArccosine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionArccosine>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionArccosine;

// Class Engine.BlueprintMapLibrary
// 0x0000 (0x0028 - 0x0028)
class UBlueprintMapLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void Map_Add(const TMap<int32, int32>& TargetMap, const int32& Key, const int32& Value);
	static void Map_Clear(const TMap<int32, int32>& TargetMap);
	static bool Map_Contains(const TMap<int32, int32>& TargetMap, const int32& Key);
	static bool Map_Find(const TMap<int32, int32>& TargetMap, const int32& Key, int32* Value);
	static bool Map_IsEmpty(const TMap<int32, int32>& TargetMap);
	static bool Map_IsNotEmpty(const TMap<int32, int32>& TargetMap);
	static void Map_Keys(const TMap<int32, int32>& TargetMap, TArray<int32>* Keys);
	static int32 Map_Length(const TMap<int32, int32>& TargetMap);
	static bool Map_Remove(const TMap<int32, int32>& TargetMap, const int32& Key);
	static void Map_Values(const TMap<int32, int32>& TargetMap, TArray<int32>* Values);
	static void SetMapPropertyByName(class UObject* Object, class FName PropertyName, const TMap<int32, int32>& Value);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BlueprintMapLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BlueprintMapLibrary")
	}
	static class UBlueprintMapLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintMapLibrary>();
	}
};
DUMPER7_ASSERTS_UBlueprintMapLibrary;

// Class Engine.MaterialExpressionGetLocal
// 0x0008 (0x00B8 - 0x00B0)
class UMaterialExpressionGetLocal final : public UMaterialExpression
{
public:
	class FName                                   LocalName;                                         // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionGetLocal")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionGetLocal")
	}
	static class UMaterialExpressionGetLocal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionGetLocal>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionGetLocal;

// Class Engine.MaterialExpressionArccosineFast
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionArccosineFast final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionArccosineFast")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionArccosineFast")
	}
	static class UMaterialExpressionArccosineFast* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionArccosineFast>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionArccosineFast;

// Class Engine.AnimNotify_PlaySound
// 0x0020 (0x0058 - 0x0038)
class UAnimNotify_PlaySound final : public UAnimNotify
{
public:
	class USoundBase*                             Sound;                                             // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFollow : 1;                                       // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachName;                                        // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimNotify_PlaySound")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimNotify_PlaySound")
	}
	static class UAnimNotify_PlaySound* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PlaySound>();
	}
};
DUMPER7_ASSERTS_UAnimNotify_PlaySound;

// Class Engine.MaterialExpressionArcsine
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionArcsine final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionArcsine")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionArcsine")
	}
	static class UMaterialExpressionArcsine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionArcsine>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionArcsine;

// Class Engine.SoundNodeAttenuation
// 0x03E0 (0x0428 - 0x0048)
class USoundNodeAttenuation final : public USoundNode
{
public:
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundAttenuationSettings              AttenuationOverrides;                              // 0x0050(0x03D0)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bOverrideAttenuation : 1;                          // 0x0420(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_421[0x7];                                      // 0x0421(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeAttenuation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeAttenuation")
	}
	static class USoundNodeAttenuation* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeAttenuation>();
	}
};
DUMPER7_ASSERTS_USoundNodeAttenuation;

// Class Engine.MaterialExpressionObjectRadius
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionObjectRadius final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionObjectRadius")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionObjectRadius")
	}
	static class UMaterialExpressionObjectRadius* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionObjectRadius>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionObjectRadius;

// Class Engine.MaterialExpressionArcsineFast
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionArcsineFast final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionArcsineFast")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionArcsineFast")
	}
	static class UMaterialExpressionArcsineFast* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionArcsineFast>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionArcsineFast;

// Class Engine.AnimNotifyStateMachineInspectionLibrary
// 0x0000 (0x0028 - 0x0028)
class UAnimNotifyStateMachineInspectionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool IsTriggeredByState(const struct FAnimNotifyEventReference& EventReference, class UAnimInstance* AnimInstance, class FName StateName);
	static bool IsTriggeredByStateInStateMachine(const struct FAnimNotifyEventReference& EventReference, class UAnimInstance* AnimInstance, class FName StateMachineName, class FName StateName);
	static bool IsTriggeredByStateMachine(const struct FAnimNotifyEventReference& EventReference, class UAnimInstance* AnimInstance, class FName StateMachineName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimNotifyStateMachineInspectionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimNotifyStateMachineInspectionLibrary")
	}
	static class UAnimNotifyStateMachineInspectionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyStateMachineInspectionLibrary>();
	}
};
DUMPER7_ASSERTS_UAnimNotifyStateMachineInspectionLibrary;

// Class Engine.MaterialExpressionArctangent
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionArctangent final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionArctangent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionArctangent")
	}
	static class UMaterialExpressionArctangent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionArctangent>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionArctangent;

// Class Engine.MaterialExpressionArctangent2
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionArctangent2 final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Y;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       X;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionArctangent2")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionArctangent2")
	}
	static class UMaterialExpressionArctangent2* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionArctangent2>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionArctangent2;

// Class Engine.MaterialExpressionDecalDerivative
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionDecalDerivative final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDecalDerivative")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDecalDerivative")
	}
	static class UMaterialExpressionDecalDerivative* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDecalDerivative>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDecalDerivative;

// Class Engine.MaterialExpressionArctangent2Fast
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionArctangent2Fast final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Y;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       X;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionArctangent2Fast")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionArctangent2Fast")
	}
	static class UMaterialExpressionArctangent2Fast* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionArctangent2Fast>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionArctangent2Fast;

// Class Engine.AudioParameterConversionStatics
// 0x0000 (0x0028 - 0x0028)
class UAudioParameterConversionStatics final : public UBlueprintFunctionLibrary
{
public:
	static struct FAudioParameter BooleanArrayToAudioParameter(class FName Name_0, const TArray<bool>& Bools);
	static struct FAudioParameter BooleanToAudioParameter(class FName Name_0, bool Bool);
	static struct FAudioParameter FloatArrayToAudioParameter(class FName Name_0, const TArray<float>& Floats);
	static struct FAudioParameter FloatToAudioParameter(class FName Name_0, float float_0);
	static struct FAudioParameter IntegerArrayToAudioParameter(class FName Name_0, const TArray<int32>& Integers);
	static struct FAudioParameter IntegerToAudioParameter(class FName Name_0, int32 Integer);
	static struct FAudioParameter ObjectArrayToAudioParameter(class FName Name_0, const TArray<class UObject*>& Objects);
	static struct FAudioParameter ObjectToAudioParameter(class FName Name_0, class UObject* Object);
	static struct FAudioParameter StringArrayToAudioParameter(class FName Name_0, const TArray<class FString>& Strings);
	static struct FAudioParameter StringToAudioParameter(class FName Name_0, const class FString& String);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AudioParameterConversionStatics")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AudioParameterConversionStatics")
	}
	static class UAudioParameterConversionStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioParameterConversionStatics>();
	}
};
DUMPER7_ASSERTS_UAudioParameterConversionStatics;

// Class Engine.VisualLoggerAutomationTests
// 0x0000 (0x0028 - 0x0028)
class UVisualLoggerAutomationTests final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VisualLoggerAutomationTests")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VisualLoggerAutomationTests")
	}
	static class UVisualLoggerAutomationTests* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVisualLoggerAutomationTests>();
	}
};
DUMPER7_ASSERTS_UVisualLoggerAutomationTests;

// Class Engine.MaterialExpressionShadowReplace
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionShadowReplace final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Default;                                           // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Shadow;                                            // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionShadowReplace")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionShadowReplace")
	}
	static class UMaterialExpressionShadowReplace* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionShadowReplace>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionShadowReplace;

// Class Engine.MaterialExpressionArctangentFast
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionArctangentFast final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionArctangentFast")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionArctangentFast")
	}
	static class UMaterialExpressionArctangentFast* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionArctangentFast>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionArctangentFast;

// Class Engine.MaterialExpressionAtmosphericFogColor
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionAtmosphericFogColor final : public UMaterialExpression
{
public:
	struct FExpressionInput                       WorldPosition;                                     // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionAtmosphericFogColor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionAtmosphericFogColor")
	}
	static class UMaterialExpressionAtmosphericFogColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionAtmosphericFogColor>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionAtmosphericFogColor;

// Class Engine.CameraModifier
// 0x0020 (0x0048 - 0x0028)
class UCameraModifier : public UObject
{
public:
	uint8                                         bDebug : 1;                                        // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExclusive : 1;                                    // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         Priority;                                          // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CameraOwner;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AlphaInTime;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AlphaOutTime;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Alpha;                                             // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BlueprintModifyCamera(float DeltaTime, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float FOV, struct FVector* NewViewLocation, struct FRotator* NewViewRotation, float* NewFOV);
	void BlueprintModifyPostProcess(float DeltaTime, float* PostProcessBlendWeight, struct FPostProcessSettings* PostProcessSettings);
	void DisableModifier(bool bImmediate);
	void EnableModifier();
	void OnCameraOwnerDestroyed(class AActor* InOwner);

	class AActor* GetViewTarget() const;
	bool IsDisabled() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CameraModifier")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CameraModifier")
	}
	static class UCameraModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraModifier>();
	}
};
DUMPER7_ASSERTS_UCameraModifier;

// Class Engine.MaterialExpressionInverseLinearInterpolate
// 0x0088 (0x0138 - 0x00B0)
class UMaterialExpressionInverseLinearInterpolate final : public UMaterialExpression
{
public:
	struct FExpressionInput                       A;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       B;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Value;                                             // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstA;                                            // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstB;                                            // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstValue;                                        // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClampResult;                                      // 0x0134(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionInverseLinearInterpolate")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionInverseLinearInterpolate")
	}
	static class UMaterialExpressionInverseLinearInterpolate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionInverseLinearInterpolate>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionInverseLinearInterpolate;

// Class Engine.MaterialExpressionAtmosphericLightColor
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionAtmosphericLightColor final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionAtmosphericLightColor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionAtmosphericLightColor")
	}
	static class UMaterialExpressionAtmosphericLightColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionAtmosphericLightColor>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionAtmosphericLightColor;

// Class Engine.SmokeTestCommandlet
// 0x0000 (0x0080 - 0x0080)
class USmokeTestCommandlet final : public UCommandlet
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SmokeTestCommandlet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SmokeTestCommandlet")
	}
	static class USmokeTestCommandlet* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmokeTestCommandlet>();
	}
};
DUMPER7_ASSERTS_USmokeTestCommandlet;

// Class Engine.MaterialExpressionAtmosphericLightVector
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionAtmosphericLightVector final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionAtmosphericLightVector")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionAtmosphericLightVector")
	}
	static class UMaterialExpressionAtmosphericLightVector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionAtmosphericLightVector>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionAtmosphericLightVector;

// Class Engine.VirtualTexture
// 0x0000 (0x0028 - 0x0028)
class UVirtualTexture : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VirtualTexture")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VirtualTexture")
	}
	static class UVirtualTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVirtualTexture>();
	}
};
DUMPER7_ASSERTS_UVirtualTexture;

// Class Engine.LightMapVirtualTexture
// 0x0000 (0x0028 - 0x0028)
class ULightMapVirtualTexture final : public UVirtualTexture
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LightMapVirtualTexture")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LightMapVirtualTexture")
	}
	static class ULightMapVirtualTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULightMapVirtualTexture>();
	}
};
DUMPER7_ASSERTS_ULightMapVirtualTexture;

// Class Engine.MaterialExpressionParticleRadius
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionParticleRadius final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionParticleRadius")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionParticleRadius")
	}
	static class UMaterialExpressionParticleRadius* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionParticleRadius>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionParticleRadius;

// Class Engine.MaterialExpressionBentNormalCustomOutput
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionBentNormalCustomOutput final : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionBentNormalCustomOutput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionBentNormalCustomOutput")
	}
	static class UMaterialExpressionBentNormalCustomOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionBentNormalCustomOutput>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionBentNormalCustomOutput;

// Class Engine.AnimNotify_ResetDynamics
// 0x0000 (0x0038 - 0x0038)
class UAnimNotify_ResetDynamics final : public UAnimNotify
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimNotify_ResetDynamics")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimNotify_ResetDynamics")
	}
	static class UAnimNotify_ResetDynamics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_ResetDynamics>();
	}
};
DUMPER7_ASSERTS_UAnimNotify_ResetDynamics;

// Class Engine.MaterialExpressionBinaryOp
// 0x0058 (0x0108 - 0x00B0)
class UMaterialExpressionBinaryOp : public UMaterialExpression
{
public:
	struct FExpressionInput                       A;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       B;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstA;                                            // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstB;                                            // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionBinaryOp")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionBinaryOp")
	}
	static class UMaterialExpressionBinaryOp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionBinaryOp>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionBinaryOp;

// Class Engine.MaterialExpressionLess
// 0x0000 (0x0108 - 0x0108)
class UMaterialExpressionLess final : public UMaterialExpressionBinaryOp
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionLess")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionLess")
	}
	static class UMaterialExpressionLess* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLess>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionLess;

// Class Engine.MaterialExpressionObjectOrientation
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionObjectOrientation final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionObjectOrientation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionObjectOrientation")
	}
	static class UMaterialExpressionObjectOrientation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionObjectOrientation>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionObjectOrientation;

// Class Engine.MaterialExpressionBlackBody
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionBlackBody final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Temp;                                              // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionBlackBody")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionBlackBody")
	}
	static class UMaterialExpressionBlackBody* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionBlackBody>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionBlackBody;

// Class Engine.CameraLensEffectInterface
// 0x0000 (0x0000 - 0x0000)
class ICameraLensEffectInterface final
{
public:
	TArray<class UFXSystemComponent*> GetParticleComponents() const;
	class UFXSystemComponent* GetPrimaryParticleComponent() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CameraLensEffectInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CameraLensEffectInterface")
	}
	static class ICameraLensEffectInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICameraLensEffectInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ICameraLensEffectInterface;

// Class Engine.MaterialExpressionBlendMaterialAttributes
// 0x0090 (0x0140 - 0x00B0)
class UMaterialExpressionBlendMaterialAttributes final : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput               A;                                                 // 0x00B0(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMaterialAttributesInput               B;                                                 // 0x00E0(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Alpha;                                             // 0x0110(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	EMaterialAttributeBlend                       PixelAttributeBlendType;                           // 0x0138(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialAttributeBlend                       VertexAttributeBlendType;                          // 0x0139(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionBlendMaterialAttributes")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionBlendMaterialAttributes")
	}
	static class UMaterialExpressionBlendMaterialAttributes* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionBlendMaterialAttributes>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionBlendMaterialAttributes;

// Class Engine.MaterialExpressionBumpOffset
// 0x0088 (0x0138 - 0x00B0)
class UMaterialExpressionBumpOffset final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Coordinate;                                        // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Height;                                            // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       HeightRatioInput;                                  // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         HeightRatio;                                       // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReferencePlane;                                    // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ConstCoordinate;                                   // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionBumpOffset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionBumpOffset")
	}
	static class UMaterialExpressionBumpOffset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionBumpOffset>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionBumpOffset;

// Class Engine.MaterialExpressionCameraVectorWS
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionCameraVectorWS final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionCameraVectorWS")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionCameraVectorWS")
	}
	static class UMaterialExpressionCameraVectorWS* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionCameraVectorWS>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionCameraVectorWS;

// Class Engine.DefaultPawn
// 0x0028 (0x0348 - 0x0320)
class ADefaultPawn : public APawn
{
public:
	float                                         BaseTurnRate;                                      // 0x0320(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseLookUpRate;                                    // 0x0324(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPawnMovementComponent*                 MovementComponent;                                 // 0x0328(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                       CollisionComponent;                                // 0x0330(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                   MeshComponent;                                     // 0x0338(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bAddDefaultMovementBindings : 1;                   // 0x0340(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void LookUpAtRate(float Rate);
	void MoveForward(float Val);
	void MoveRight(float Val);
	void MoveUp_World(float Val);
	void TurnAtRate(float Rate);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DefaultPawn")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DefaultPawn")
	}
	static class ADefaultPawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADefaultPawn>();
	}
};
DUMPER7_ASSERTS_ADefaultPawn;

// Class Engine.SpectatorPawn
// 0x0000 (0x0348 - 0x0348)
class ASpectatorPawn : public ADefaultPawn
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SpectatorPawn")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SpectatorPawn")
	}
	static class ASpectatorPawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpectatorPawn>();
	}
};
DUMPER7_ASSERTS_ASpectatorPawn;

// Class Engine.MaterialExpressionCeil
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionCeil final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionCeil")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionCeil")
	}
	static class UMaterialExpressionCeil* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionCeil>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionCeil;

// Class Engine.MaterialExpressionChannelMaskParameter
// 0x0030 (0x0180 - 0x0150)
class UMaterialExpressionChannelMaskParameter final : public UMaterialExpressionVectorParameter
{
public:
	EChannelMaskParameterColor                    MaskChannel;                                       // 0x0150(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExpressionInput                       Input;                                             // 0x0158(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionChannelMaskParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionChannelMaskParameter")
	}
	static class UMaterialExpressionChannelMaskParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionChannelMaskParameter>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionChannelMaskParameter;

// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionClearCoatNormalCustomOutput final : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionClearCoatNormalCustomOutput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionClearCoatNormalCustomOutput")
	}
	static class UMaterialExpressionClearCoatNormalCustomOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionClearCoatNormalCustomOutput>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionClearCoatNormalCustomOutput;

// Class Engine.MaterialExpressionCollectionParameter
// 0x0020 (0x00D0 - 0x00B0)
class UMaterialExpressionCollectionParameter final : public UMaterialExpression
{
public:
	class UMaterialParameterCollection*           Collection;                                        // 0x00B0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ParameterId;                                       // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionCollectionParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionCollectionParameter")
	}
	static class UMaterialExpressionCollectionParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionCollectionParameter>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionCollectionParameter;

// Class Engine.MaterialExpressionComponentMask
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionComponentMask final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         R : 1;                                             // 0x00D8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         G : 1;                                             // 0x00D8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         B : 1;                                             // 0x00D8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         A : 1;                                             // 0x00D8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionComponentMask")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionComponentMask")
	}
	static class UMaterialExpressionComponentMask* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionComponentMask>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionComponentMask;

// Class Engine.MaterialExpressionConstant
// 0x0008 (0x00B8 - 0x00B0)
class UMaterialExpressionConstant final : public UMaterialExpression
{
public:
	float                                         R;                                                 // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionConstant")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionConstant")
	}
	static class UMaterialExpressionConstant* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionConstant>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionConstant;

// Class Engine.MaterialExpressionConstant3Vector
// 0x0010 (0x00C0 - 0x00B0)
class UMaterialExpressionConstant3Vector final : public UMaterialExpression
{
public:
	struct FLinearColor                           Constant;                                          // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionConstant3Vector")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionConstant3Vector")
	}
	static class UMaterialExpressionConstant3Vector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionConstant3Vector>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionConstant3Vector;

// Class Engine.MaterialExpressionConstantBiasScale
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionConstantBiasScale final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         Bias;                                              // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionConstantBiasScale")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionConstantBiasScale")
	}
	static class UMaterialExpressionConstantBiasScale* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionConstantBiasScale>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionConstantBiasScale;

// Class Engine.MaterialExpressionCrossProduct
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionCrossProduct final : public UMaterialExpression
{
public:
	struct FExpressionInput                       A;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       B;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionCrossProduct")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionCrossProduct")
	}
	static class UMaterialExpressionCrossProduct* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionCrossProduct>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionCrossProduct;

// Class Engine.MaterialExpressionCurveAtlasRowParameter
// 0x0038 (0x0120 - 0x00E8)
class UMaterialExpressionCurveAtlasRowParameter final : public UMaterialExpressionScalarParameter
{
public:
	class UCurveLinearColor*                      Curve;                                             // 0x00E8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColorAtlas*                 Atlas;                                             // 0x00F0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExpressionInput                       InputTime;                                         // 0x00F8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionCurveAtlasRowParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionCurveAtlasRowParameter")
	}
	static class UMaterialExpressionCurveAtlasRowParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionCurveAtlasRowParameter>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionCurveAtlasRowParameter;

// Class Engine.MaterialExpressionDataDrivenShaderPlatformInfoSwitch
// 0x0068 (0x0118 - 0x00B0)
class UMaterialExpressionDataDrivenShaderPlatformInfoSwitch final : public UMaterialExpression
{
public:
	struct FExpressionInput                       InputTrue;                                         // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       InputFalse;                                        // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FDataDrivenShaderPlatformInfoInput> DDSPIPropertyNames;                            // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bContainsInvalidProperty : 1;                      // 0x0110(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<class FString> GetNameOptions() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDataDrivenShaderPlatformInfoSwitch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDataDrivenShaderPlatformInfoSwitch")
	}
	static class UMaterialExpressionDataDrivenShaderPlatformInfoSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDataDrivenShaderPlatformInfoSwitch>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDataDrivenShaderPlatformInfoSwitch;

// Class Engine.MaterialExpressionDDX
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionDDX final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Value;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDDX")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDDX")
	}
	static class UMaterialExpressionDDX* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDDX>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDDX;

// Class Engine.MaterialExpressionDecalColor
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionDecalColor final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDecalColor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDecalColor")
	}
	static class UMaterialExpressionDecalColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDecalColor>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDecalColor;

// Class Engine.MaterialExpressionDecalLifetimeOpacity
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionDecalLifetimeOpacity final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDecalLifetimeOpacity")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDecalLifetimeOpacity")
	}
	static class UMaterialExpressionDecalLifetimeOpacity* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDecalLifetimeOpacity>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDecalLifetimeOpacity;

// Class Engine.MaterialExpressionDeltaTime
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionDeltaTime final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDeltaTime")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDeltaTime")
	}
	static class UMaterialExpressionDeltaTime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDeltaTime>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDeltaTime;

// Class Engine.MaterialExpressionDepthFade
// 0x0058 (0x0108 - 0x00B0)
class UMaterialExpressionDepthFade final : public UMaterialExpression
{
public:
	struct FExpressionInput                       InOpacity;                                         // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       FadeDistance;                                      // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         OpacityDefault;                                    // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeDistanceDefault;                               // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDepthFade")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDepthFade")
	}
	static class UMaterialExpressionDepthFade* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDepthFade>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDepthFade;

// Class Engine.MaterialExpressionDepthOfFieldFunction
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionDepthOfFieldFunction final : public UMaterialExpression
{
public:
	EDepthOfFieldFunctionValue                    FunctionValue;                                     // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExpressionInput                       Depth;                                             // 0x00B8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDepthOfFieldFunction")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDepthOfFieldFunction")
	}
	static class UMaterialExpressionDepthOfFieldFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDepthOfFieldFunction>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDepthOfFieldFunction;

// Class Engine.MaterialExpressionDesaturation
// 0x0060 (0x0110 - 0x00B0)
class UMaterialExpressionDesaturation final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Fraction;                                          // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           LuminanceFactors;                                  // 0x0100(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDesaturation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDesaturation")
	}
	static class UMaterialExpressionDesaturation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDesaturation>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDesaturation;

// Class Engine.MaterialExpressionDistanceCullFade
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionDistanceCullFade final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDistanceCullFade")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDistanceCullFade")
	}
	static class UMaterialExpressionDistanceCullFade* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDistanceCullFade>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDistanceCullFade;

// Class Engine.MaterialExpressionDistanceFieldGradient
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionDistanceFieldGradient final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Position;                                          // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDistanceFieldGradient")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDistanceFieldGradient")
	}
	static class UMaterialExpressionDistanceFieldGradient* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDistanceFieldGradient>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDistanceFieldGradient;

// Class Engine.MaterialExpressionDistanceFieldsRenderingSwitch
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionDistanceFieldsRenderingSwitch final : public UMaterialExpression
{
public:
	struct FExpressionInput                       No;                                                // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Yes;                                               // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDistanceFieldsRenderingSwitch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDistanceFieldsRenderingSwitch")
	}
	static class UMaterialExpressionDistanceFieldsRenderingSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDistanceFieldsRenderingSwitch>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDistanceFieldsRenderingSwitch;

// Class Engine.MaterialExpressionDistanceToNearestSurface
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionDistanceToNearestSurface final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Position;                                          // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDistanceToNearestSurface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDistanceToNearestSurface")
	}
	static class UMaterialExpressionDistanceToNearestSurface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDistanceToNearestSurface>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDistanceToNearestSurface;

// Class Engine.EngineHandlerComponentFactory
// 0x0000 (0x0028 - 0x0028)
class UEngineHandlerComponentFactory final : public UHandlerComponentFactory
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EngineHandlerComponentFactory")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EngineHandlerComponentFactory")
	}
	static class UEngineHandlerComponentFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEngineHandlerComponentFactory>();
	}
};
DUMPER7_ASSERTS_UEngineHandlerComponentFactory;

// Class Engine.MaterialExpressionDivide
// 0x0058 (0x0108 - 0x00B0)
class UMaterialExpressionDivide final : public UMaterialExpression
{
public:
	struct FExpressionInput                       A;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       B;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstA;                                            // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstB;                                            // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDivide")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDivide")
	}
	static class UMaterialExpressionDivide* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDivide>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDivide;

// Class Engine.MaterialExpressionDotProduct
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionDotProduct final : public UMaterialExpression
{
public:
	struct FExpressionInput                       A;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       B;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDotProduct")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDotProduct")
	}
	static class UMaterialExpressionDotProduct* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDotProduct>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDotProduct;

// Class Engine.MaterialExpressionDynamicParameter
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionDynamicParameter final : public UMaterialExpression
{
public:
	TArray<class FString>                         ParamNames;                                        // 0x00B0(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           DefaultValue;                                      // 0x00C0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ParameterIndex;                                    // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionDynamicParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionDynamicParameter")
	}
	static class UMaterialExpressionDynamicParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionDynamicParameter>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionDynamicParameter;

// Class Engine.MaterialExpressionExecEnd
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionExecEnd final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionExecEnd")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionExecEnd")
	}
	static class UMaterialExpressionExecEnd* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionExecEnd>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionExecEnd;

// Class Engine.MaterialExpressionExponential2
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionExponential2 final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionExponential2")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionExponential2")
	}
	static class UMaterialExpressionExponential2* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionExponential2>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionExponential2;

// Class Engine.SoundNodeModulator
// 0x0010 (0x0058 - 0x0048)
class USoundNodeModulator final : public USoundNode
{
public:
	float                                         PitchMin;                                          // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMax;                                          // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMin;                                         // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMax;                                         // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeModulator")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeModulator")
	}
	static class USoundNodeModulator* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeModulator>();
	}
};
DUMPER7_ASSERTS_USoundNodeModulator;

// Class Engine.MaterialExpressionEyeAdaptation
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionEyeAdaptation final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionEyeAdaptation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionEyeAdaptation")
	}
	static class UMaterialExpressionEyeAdaptation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionEyeAdaptation>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionEyeAdaptation;

// Class Engine.MaterialExpressionEyeAdaptationInverse
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionEyeAdaptationInverse final : public UMaterialExpression
{
public:
	struct FExpressionInput                       LightValueInput;                                   // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       AlphaInput;                                        // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionEyeAdaptationInverse")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionEyeAdaptationInverse")
	}
	static class UMaterialExpressionEyeAdaptationInverse* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionEyeAdaptationInverse>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionEyeAdaptationInverse;

// Class Engine.MaterialExpressionFloor
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionFloor final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionFloor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionFloor")
	}
	static class UMaterialExpressionFloor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionFloor>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionFloor;

// Class Engine.MaterialExpressionForLoop
// 0x0088 (0x0138 - 0x00B0)
class UMaterialExpressionForLoop final : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                  LoopBody;                                          // 0x00B0(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionExecOutput                  Completed;                                         // 0x00B8(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       StartIndex;                                        // 0x00C0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       EndIndex;                                          // 0x00E8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       IndexStep;                                         // 0x0110(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionForLoop")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionForLoop")
	}
	static class UMaterialExpressionForLoop* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionForLoop>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionForLoop;

// Class Engine.SoundNodeAssetReferencer
// 0x0000 (0x0048 - 0x0048)
class USoundNodeAssetReferencer : public USoundNode
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeAssetReferencer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeAssetReferencer")
	}
	static class USoundNodeAssetReferencer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeAssetReferencer>();
	}
};
DUMPER7_ASSERTS_USoundNodeAssetReferencer;

// Class Engine.SoundNodeWavePlayer
// 0x0038 (0x0080 - 0x0048)
class USoundNodeWavePlayer final : public USoundNodeAssetReferencer
{
public:
	TSoftObjectPtr<class USoundWave>              SoundWaveAssetPtr;                                 // 0x0048(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundWave*                             SoundWave;                                         // 0x0070(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BitPad_78_0 : 1;                                   // 0x0078(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bLooping : 1;                                      // 0x0078(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeWavePlayer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeWavePlayer")
	}
	static class USoundNodeWavePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeWavePlayer>();
	}
};
DUMPER7_ASSERTS_USoundNodeWavePlayer;

// Class Engine.MaterialExpressionFrac
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionFrac final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionFrac")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionFrac")
	}
	static class UMaterialExpressionFrac* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionFrac>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionFrac;

// Class Engine.MaterialExpressionFresnel
// 0x0088 (0x0138 - 0x00B0)
class UMaterialExpressionFresnel final : public UMaterialExpression
{
public:
	struct FExpressionInput                       ExponentIn;                                        // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         Exponent;                                          // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExpressionInput                       BaseReflectFractionIn;                             // 0x00E0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         BaseReflectFraction;                               // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExpressionInput                       Normal;                                            // 0x0110(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionFresnel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionFresnel")
	}
	static class UMaterialExpressionFresnel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionFresnel>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionFresnel;

// Class Engine.MaterialExpressionConstantDouble
// 0x0008 (0x00B8 - 0x00B0)
class UMaterialExpressionConstantDouble final : public UMaterialExpressionGenericConstant
{
public:
	double                                        Value;                                             // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionConstantDouble")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionConstantDouble")
	}
	static class UMaterialExpressionConstantDouble* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionConstantDouble>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionConstantDouble;

// Class Engine.MaterialExpressionGetMaterialAttributes
// 0x0040 (0x00F0 - 0x00B0)
class UMaterialExpressionGetMaterialAttributes final : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput               MaterialAttributes;                                // 0x00B0(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          AttributeGetTypes;                                 // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionGetMaterialAttributes")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionGetMaterialAttributes")
	}
	static class UMaterialExpressionGetMaterialAttributes* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionGetMaterialAttributes>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionGetMaterialAttributes;

// Class Engine.MaterialExpressionHairAttributes
// 0x0008 (0x00B8 - 0x00B0)
class UMaterialExpressionHairAttributes final : public UMaterialExpression
{
public:
	uint8                                         bUseTangentSpace : 1;                              // 0x00B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionHairAttributes")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionHairAttributes")
	}
	static class UMaterialExpressionHairAttributes* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionHairAttributes>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionHairAttributes;

// Class Engine.MaterialExpressionHsvToRgb
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionHsvToRgb final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionHsvToRgb")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionHsvToRgb")
	}
	static class UMaterialExpressionHsvToRgb* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionHsvToRgb>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionHsvToRgb;

// Class Engine.MaterialExpressionIfThenElse
// 0x0038 (0x00E8 - 0x00B0)
class UMaterialExpressionIfThenElse final : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                  Then;                                              // 0x00B0(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionExecOutput                  Else;                                              // 0x00B8(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Condition;                                         // 0x00C0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionIfThenElse")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionIfThenElse")
	}
	static class UMaterialExpressionIfThenElse* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionIfThenElse>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionIfThenElse;

// Class Engine.MaterialExpressionIsOrthographic
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionIsOrthographic final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionIsOrthographic")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionIsOrthographic")
	}
	static class UMaterialExpressionIsOrthographic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionIsOrthographic>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionIsOrthographic;

// Class Engine.MaterialExpressionLightmapUVs
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionLightmapUVs final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionLightmapUVs")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionLightmapUVs")
	}
	static class UMaterialExpressionLightmapUVs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLightmapUVs>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionLightmapUVs;

// Class Engine.MaterialExpressionLightmassReplace
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionLightmassReplace final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Realtime;                                          // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Lightmass;                                         // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionLightmassReplace")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionLightmassReplace")
	}
	static class UMaterialExpressionLightmassReplace* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLightmassReplace>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionLightmassReplace;

// Class Engine.MaterialExpressionLightVector
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionLightVector final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionLightVector")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionLightVector")
	}
	static class UMaterialExpressionLightVector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLightVector>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionLightVector;

// Class Engine.GameInstance
// 0x0198 (0x01C0 - 0x0028)
class UGameInstance : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULocalPlayer*>                   LocalPlayers;                                      // 0x0038(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UOnlineSession*                         OnlineSession;                                     // 0x0048(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UObject*>                        ReferencedObjects;                                 // 0x0050(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_60[0x18];                                      // 0x0060(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class APawn* Pawn, class AController* Controller)> OnPawnControllerChangedDelegates; // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_88[0x18];                                      // 0x0088(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EInputDeviceConnectionState NewConnectionState, const struct FPlatformUserId& PlatformUserId, const struct FInputDeviceId& InputDeviceId)> OnInputDeviceConnectionChange; // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FInputDeviceId& InputDeviceId, const struct FPlatformUserId& NewUserPlatformId, const struct FPlatformUserId& OldUserPlatformId)> OnUserInputDevicePairingChange; // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x100];                                     // 0x00C0(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DebugCreatePlayer(int32 ControllerId);
	void DebugRemovePlayer(int32 ControllerId);
	void HandleNetworkError(ENetworkFailure FailureType, bool bIsServer);
	void HandleTravelError(ETravelFailure FailureType);
	void ReceiveInit();
	void ReceiveShutdown();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GameInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GameInstance")
	}
	static class UGameInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameInstance>();
	}
};
DUMPER7_ASSERTS_UGameInstance;

// Class Engine.PlatformGameInstance
// 0x00D0 (0x0290 - 0x01C0)
class UPlatformGameInstance final : public UGameInstance
{
public:
	TMulticastInlineDelegate<void()>              ApplicationWillDeactivateDelegate;                 // 0x01C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ApplicationHasReactivatedDelegate;                 // 0x01D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ApplicationWillEnterBackgroundDelegate;            // 0x01E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ApplicationHasEnteredForegroundDelegate;           // 0x01F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ApplicationWillTerminateDelegate;                  // 0x0200(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ApplicationShouldUnloadResourcesDelegate;          // 0x0210(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<class FString>& StartupArguments)> ApplicationReceivedStartupArgumentsDelegate; // 0x0220(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<uint8>& inArray)> ApplicationRegisteredForRemoteNotificationsDelegate; // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 inInt)>   ApplicationRegisteredForUserNotificationsDelegate; // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& InString)> ApplicationFailedToRegisterForRemoteNotificationsDelegate; // 0x0250(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& InString, EApplicationState inAppState)> ApplicationReceivedRemoteNotificationDelegate; // 0x0260(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& InString, int32 inInt, EApplicationState inAppState)> ApplicationReceivedLocalNotificationDelegate; // 0x0270(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EScreenOrientation inScreenOrientation)> ApplicationReceivedScreenOrientationChangedNotificationDelegate; // 0x0280(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlatformGameInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlatformGameInstance")
	}
	static class UPlatformGameInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlatformGameInstance>();
	}
};
DUMPER7_ASSERTS_UPlatformGameInstance;

// Class Engine.MaterialExpressionLogarithm
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionLogarithm final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionLogarithm")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionLogarithm")
	}
	static class UMaterialExpressionLogarithm* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLogarithm>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionLogarithm;

// Class Engine.MaterialExpressionLogarithm2
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionLogarithm2 final : public UMaterialExpression
{
public:
	struct FExpressionInput                       X;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionLogarithm2")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionLogarithm2")
	}
	static class UMaterialExpressionLogarithm2* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLogarithm2>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionLogarithm2;

// Class Engine.Layer
// 0x0020 (0x0048 - 0x0028)
class ULayer final : public UObject
{
public:
	class FName                                   LayerName;                                         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bIsVisible : 1;                                    // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLayerActorStats>               ActorStats;                                        // 0x0038(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Layer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Layer")
	}
	static class ULayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULayer>();
	}
};
DUMPER7_ASSERTS_ULayer;

// Class Engine.MaterialExpressionMapARPassthroughCameraUV
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionMapARPassthroughCameraUV final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Coordinates;                                       // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionMapARPassthroughCameraUV")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionMapARPassthroughCameraUV")
	}
	static class UMaterialExpressionMapARPassthroughCameraUV* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionMapARPassthroughCameraUV>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionMapARPassthroughCameraUV;

// Class Engine.MaterialExpressionMaterialAttributeLayers
// 0x0168 (0x0218 - 0x00B0)
class UMaterialExpressionMaterialAttributeLayers final : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput               Input;                                             // 0x00B0(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMaterialLayersFunctions               DefaultLayers;                                     // 0x00E0(0x0100)(Edit, NativeAccessSpecifierPublic)
	TArray<class UMaterialExpressionMaterialFunctionCall*> LayerCallers;                             // 0x01E0(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         NumActiveLayerCallers;                             // 0x01F0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialExpressionMaterialFunctionCall*> BlendCallers;                             // 0x01F8(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         NumActiveBlendCallers;                             // 0x0208(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLayerGraphBuilt;                                // 0x020C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20D[0xB];                                      // 0x020D(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionMaterialAttributeLayers")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionMaterialAttributeLayers")
	}
	static class UMaterialExpressionMaterialAttributeLayers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionMaterialAttributeLayers>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionMaterialAttributeLayers;

// Class Engine.MaterialExpressionMaterialProxyReplace
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionMaterialProxyReplace final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Realtime;                                          // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       MaterialProxy;                                     // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionMaterialProxyReplace")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionMaterialProxyReplace")
	}
	static class UMaterialExpressionMaterialProxyReplace* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionMaterialProxyReplace>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionMaterialProxyReplace;

// Class Engine.MaterialExpressionMin
// 0x0058 (0x0108 - 0x00B0)
class UMaterialExpressionMin final : public UMaterialExpression
{
public:
	struct FExpressionInput                       A;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       B;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstA;                                            // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstB;                                            // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionMin")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionMin")
	}
	static class UMaterialExpressionMin* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionMin>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionMin;

// Class Engine.LevelInstanceEditorObject
// 0x0000 (0x0028 - 0x0028)
class ULevelInstanceEditorObject final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelInstanceEditorObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelInstanceEditorObject")
	}
	static class ULevelInstanceEditorObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelInstanceEditorObject>();
	}
};
DUMPER7_ASSERTS_ULevelInstanceEditorObject;

// Class Engine.MaterialExpressionNamedRerouteDeclaration
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionNamedRerouteDeclaration final : public UMaterialExpressionNamedRerouteBase
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NodeColor;                                         // 0x00E0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  VariableGuid;                                      // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionNamedRerouteDeclaration")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionNamedRerouteDeclaration")
	}
	static class UMaterialExpressionNamedRerouteDeclaration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionNamedRerouteDeclaration>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionNamedRerouteDeclaration;

// Class Engine.MaterialExpressionNaniteReplace
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionNaniteReplace final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Default;                                           // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Nanite;                                            // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionNaniteReplace")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionNaniteReplace")
	}
	static class UMaterialExpressionNaniteReplace* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionNaniteReplace>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionNaniteReplace;

// Class Engine.MaterialExpressionNormalize
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionNormalize final : public UMaterialExpression
{
public:
	struct FExpressionInput                       VectorInput;                                       // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionNormalize")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionNormalize")
	}
	static class UMaterialExpressionNormalize* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionNormalize>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionNormalize;

// Class Engine.MaterialExpressionObjectLocalBounds
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionObjectLocalBounds final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionObjectLocalBounds")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionObjectLocalBounds")
	}
	static class UMaterialExpressionObjectLocalBounds* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionObjectLocalBounds>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionObjectLocalBounds;

// Class Engine.MaterialExpressionObjectPositionWS
// 0x0008 (0x00B8 - 0x00B0)
class UMaterialExpressionObjectPositionWS final : public UMaterialExpression
{
public:
	EPositionOrigin                               OriginType;                                        // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionObjectPositionWS")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionObjectPositionWS")
	}
	static class UMaterialExpressionObjectPositionWS* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionObjectPositionWS>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionObjectPositionWS;

// Class Engine.MaterialExpressionOneMinus
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionOneMinus final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionOneMinus")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionOneMinus")
	}
	static class UMaterialExpressionOneMinus* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionOneMinus>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionOneMinus;

// Class Engine.MaterialExpressionParticleColor
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionParticleColor final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionParticleColor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionParticleColor")
	}
	static class UMaterialExpressionParticleColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionParticleColor>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionParticleColor;

// Class Engine.MaterialExpressionParticleMacroUV
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionParticleMacroUV final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionParticleMacroUV")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionParticleMacroUV")
	}
	static class UMaterialExpressionParticleMacroUV* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionParticleMacroUV>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionParticleMacroUV;

// Class Engine.MaterialExpressionParticlePositionWS
// 0x0008 (0x00B8 - 0x00B0)
class UMaterialExpressionParticlePositionWS final : public UMaterialExpression
{
public:
	EPositionOrigin                               OriginType;                                        // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionParticlePositionWS")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionParticlePositionWS")
	}
	static class UMaterialExpressionParticlePositionWS* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionParticlePositionWS>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionParticlePositionWS;

// Class Engine.MaterialExpressionParticleRandom
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionParticleRandom final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionParticleRandom")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionParticleRandom")
	}
	static class UMaterialExpressionParticleRandom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionParticleRandom>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionParticleRandom;

// Class Engine.MaterialExpressionParticleSize
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionParticleSize final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionParticleSize")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionParticleSize")
	}
	static class UMaterialExpressionParticleSize* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionParticleSize>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionParticleSize;

// Class Engine.MaterialExpressionParticleSpriteRotation
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionParticleSpriteRotation final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionParticleSpriteRotation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionParticleSpriteRotation")
	}
	static class UMaterialExpressionParticleSpriteRotation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionParticleSpriteRotation>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionParticleSpriteRotation;

// Class Engine.MaterialExpressionPathTracingQualitySwitch
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionPathTracingQualitySwitch final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Normal;                                            // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       PathTraced;                                        // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionPathTracingQualitySwitch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionPathTracingQualitySwitch")
	}
	static class UMaterialExpressionPathTracingQualitySwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionPathTracingQualitySwitch>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionPathTracingQualitySwitch;

// Class Engine.MaterialExpressionPerInstanceCustomData
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionPerInstanceCustomData final : public UMaterialExpression
{
public:
	struct FExpressionInput                       DefaultValue;                                      // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstDefaultValue;                                 // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        DataIndex;                                         // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionPerInstanceCustomData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionPerInstanceCustomData")
	}
	static class UMaterialExpressionPerInstanceCustomData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionPerInstanceCustomData>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionPerInstanceCustomData;

// Class Engine.MaterialExpressionPerInstanceFadeAmount
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionPerInstanceFadeAmount final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionPerInstanceFadeAmount")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionPerInstanceFadeAmount")
	}
	static class UMaterialExpressionPerInstanceFadeAmount* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionPerInstanceFadeAmount>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionPerInstanceFadeAmount;

// Class Engine.MaterialExpressionPinBase
// 0x0018 (0x00C8 - 0x00B0)
class UMaterialExpressionPinBase final : public UMaterialExpression
{
public:
	TArray<struct FCompositeReroute>              ReroutePins;                                       // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EEdGraphPinDirection                          PinDirection;                                      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionPinBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionPinBase")
	}
	static class UMaterialExpressionPinBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionPinBase>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionPinBase;

// Class Engine.StringTable
// 0x0018 (0x0040 - 0x0028)
class UStringTable final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("StringTable")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"StringTable")
	}
	static class UStringTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStringTable>();
	}
};
DUMPER7_ASSERTS_UStringTable;

// Class Engine.ParticleModuleKillBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleKillBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleKillBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleKillBase")
	}
	static class UParticleModuleKillBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleKillBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleKillBase;

// Class Engine.ParticleModuleKillBox
// 0x00C8 (0x00F8 - 0x0030)
class UParticleModuleKillBox final : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                 LowerLeftCorner;                                   // 0x0030(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                 UpperRightCorner;                                  // 0x0090(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bAbsolute : 1;                                     // 0x00F0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bKillInside : 1;                                   // 0x00F0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAxisAlignedAndFixedSize : 1;                      // 0x00F0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleKillBox")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleKillBox")
	}
	static class UParticleModuleKillBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleKillBox>();
	}
};
DUMPER7_ASSERTS_UParticleModuleKillBox;

// Class Engine.MaterialExpressionPixelDepth
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionPixelDepth final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionPixelDepth")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionPixelDepth")
	}
	static class UMaterialExpressionPixelDepth* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionPixelDepth>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionPixelDepth;

// Class Engine.MaterialExpressionPixelNormalWS
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionPixelNormalWS final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionPixelNormalWS")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionPixelNormalWS")
	}
	static class UMaterialExpressionPixelNormalWS* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionPixelNormalWS>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionPixelNormalWS;

// Class Engine.MaterialExpressionPrecomputedAOMask
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionPrecomputedAOMask final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionPrecomputedAOMask")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionPrecomputedAOMask")
	}
	static class UMaterialExpressionPrecomputedAOMask* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionPrecomputedAOMask>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionPrecomputedAOMask;

// Class Engine.KismetArrayLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetArrayLibrary final : public UBlueprintFunctionLibrary
{
public:
	static int32 Array_Add(const TArray<int32>& TargetArray, const int32& NewItem);
	static int32 Array_AddUnique(const TArray<int32>& TargetArray, const int32& NewItem);
	static void Array_Append(const TArray<int32>& TargetArray, const TArray<int32>& SourceArray);
	static void Array_Clear(const TArray<int32>& TargetArray);
	static bool Array_Contains(const TArray<int32>& TargetArray, const int32& ItemToFind);
	static int32 Array_Find(const TArray<int32>& TargetArray, const int32& ItemToFind);
	static void Array_Get(const TArray<int32>& TargetArray, int32 Index_0, int32* Item);
	static bool Array_Identical(const TArray<int32>& ArrayA, const TArray<int32>& ArrayB);
	static void Array_Insert(const TArray<int32>& TargetArray, const int32& NewItem, int32 Index_0);
	static bool Array_IsEmpty(const TArray<int32>& TargetArray);
	static bool Array_IsNotEmpty(const TArray<int32>& TargetArray);
	static bool Array_IsValidIndex(const TArray<int32>& TargetArray, int32 IndexToTest);
	static int32 Array_LastIndex(const TArray<int32>& TargetArray);
	static int32 Array_Length(const TArray<int32>& TargetArray);
	static void Array_Random(const TArray<int32>& TargetArray, int32* OutItem, int32* OutIndex);
	static void Array_RandomFromStream(const TArray<int32>& TargetArray, struct FRandomStream& RandomStream, int32* OutItem, int32* OutIndex);
	static void Array_Remove(const TArray<int32>& TargetArray, int32 IndexToRemove);
	static bool Array_RemoveItem(const TArray<int32>& TargetArray, const int32& Item);
	static void Array_Resize(const TArray<int32>& TargetArray, int32 Size);
	static void Array_Reverse(const TArray<int32>& TargetArray);
	static void Array_Set(const TArray<int32>& TargetArray, int32 Index_0, const int32& Item, bool bSizeToFit);
	static void Array_Shuffle(const TArray<int32>& TargetArray);
	static void Array_ShuffleFromStream(const TArray<int32>& TargetArray, struct FRandomStream& RandomStream);
	static void Array_Swap(const TArray<int32>& TargetArray, int32 FirstIndex, int32 SecondIndex);
	static void FilterArray(const TArray<class AActor*>& TargetArray, TSubclassOf<class AActor> FilterClass, TArray<class AActor*>* FilteredArray);
	static void SetArrayPropertyByName(class UObject* Object, class FName PropertyName, const TArray<int32>& Value);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("KismetArrayLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"KismetArrayLibrary")
	}
	static class UKismetArrayLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKismetArrayLibrary>();
	}
};
DUMPER7_ASSERTS_UKismetArrayLibrary;

// Class Engine.MaterialExpressionPreSkinnedNormal
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionPreSkinnedNormal final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionPreSkinnedNormal")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionPreSkinnedNormal")
	}
	static class UMaterialExpressionPreSkinnedNormal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionPreSkinnedNormal>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionPreSkinnedNormal;

// Class Engine.ParticleModuleEventSendToGame
// 0x0000 (0x0028 - 0x0028)
class UParticleModuleEventSendToGame final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleEventSendToGame")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleEventSendToGame")
	}
	static class UParticleModuleEventSendToGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleEventSendToGame>();
	}
};
DUMPER7_ASSERTS_UParticleModuleEventSendToGame;

// Class Engine.MaterialExpressionPreSkinnedPosition
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionPreSkinnedPosition final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionPreSkinnedPosition")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionPreSkinnedPosition")
	}
	static class UMaterialExpressionPreSkinnedPosition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionPreSkinnedPosition>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionPreSkinnedPosition;

// Class Engine.MaterialFunctionMaterialLayerBlend
// 0x0000 (0x0068 - 0x0068)
class UMaterialFunctionMaterialLayerBlend final : public UMaterialFunction
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialFunctionMaterialLayerBlend")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialFunctionMaterialLayerBlend")
	}
	static class UMaterialFunctionMaterialLayerBlend* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialFunctionMaterialLayerBlend>();
	}
};
DUMPER7_ASSERTS_UMaterialFunctionMaterialLayerBlend;

// Class Engine.MaterialExpressionQualitySwitch
// 0x00C8 (0x0178 - 0x00B0)
class UMaterialExpressionQualitySwitch final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Default;                                           // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Inputs[0x4];                                       // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionQualitySwitch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionQualitySwitch")
	}
	static class UMaterialExpressionQualitySwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionQualitySwitch>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionQualitySwitch;

// Class Engine.NavAgentInterface
// 0x0000 (0x0000 - 0x0000)
class INavAgentInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NavAgentInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NavAgentInterface")
	}
	static class INavAgentInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INavAgentInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INavAgentInterface;

// Class Engine.MaterialExpressionReflectionCapturePassSwitch
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionReflectionCapturePassSwitch final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Default;                                           // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       reflection;                                        // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionReflectionCapturePassSwitch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionReflectionCapturePassSwitch")
	}
	static class UMaterialExpressionReflectionCapturePassSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionReflectionCapturePassSwitch>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionReflectionCapturePassSwitch;

// Class Engine.MaterialExpressionReflectionVectorWS
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionReflectionVectorWS final : public UMaterialExpression
{
public:
	struct FExpressionInput                       CustomWorldNormal;                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bNormalizeCustomWorldNormal : 1;                   // 0x00D8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionReflectionVectorWS")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionReflectionVectorWS")
	}
	static class UMaterialExpressionReflectionVectorWS* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionReflectionVectorWS>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionReflectionVectorWS;

// Class Engine.KismetStringLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetStringLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FString BuildString_Bool(const class FString& AppendTo, const class FString& Prefix, bool InBool, const class FString& Suffix);
	static class FString BuildString_Color(const class FString& AppendTo, const class FString& Prefix, const struct FLinearColor& InColor, const class FString& Suffix);
	static class FString BuildString_Double(const class FString& AppendTo, const class FString& Prefix, double InDouble, const class FString& Suffix);
	static class FString BuildString_Int(const class FString& AppendTo, const class FString& Prefix, int32 inInt, const class FString& Suffix);
	static class FString BuildString_IntVector(const class FString& AppendTo, const class FString& Prefix, const struct FIntVector& InIntVector, const class FString& Suffix);
	static class FString BuildString_Name(const class FString& AppendTo, const class FString& Prefix, class FName InName, const class FString& Suffix);
	static class FString BuildString_Object(const class FString& AppendTo, const class FString& Prefix, class UObject* InObj, const class FString& Suffix);
	static class FString BuildString_Rotator(const class FString& AppendTo, const class FString& Prefix, const struct FRotator& InRot, const class FString& Suffix);
	static class FString BuildString_Vector(const class FString& AppendTo, const class FString& Prefix, const struct FVector& InVector, const class FString& Suffix);
	static class FString BuildString_Vector2d(const class FString& AppendTo, const class FString& Prefix, const struct FVector2D& InVector2D, const class FString& Suffix);
	static class FString Concat_StrStr(const class FString& A, const class FString& B);
	static bool Contains(const class FString& SearchIn, const class FString& Substring, bool bUseCase, bool bSearchFromEnd);
	static class FString Conv_BoolToString(bool InBool);
	static class FString Conv_ByteToString(uint8 InByte);
	static class FString Conv_ColorToString(const struct FLinearColor& InColor);
	static class FString Conv_DoubleToString(double InDouble);
	static class FString Conv_InputDeviceIdToString(const struct FInputDeviceId& InDeviceId);
	static class FString Conv_Int64ToString(int64 inInt);
	static class FString Conv_IntPointToString(const struct FIntPoint& InIntPoint);
	static class FString Conv_IntToString(int32 inInt);
	static class FString Conv_IntVectorToString(const struct FIntVector& InIntVec);
	static class FString Conv_MatrixToString(const struct FMatrix& InMatrix);
	static class FString Conv_NameToString(class FName InName);
	static class FString Conv_ObjectToString(class UObject* InObj);
	static class FString Conv_PlatformUserIdToString(const struct FPlatformUserId& InPlatformUserId);
	static class FString Conv_RotatorToString(const struct FRotator& InRot);
	static void Conv_StringToColor(const class FString& InString, struct FLinearColor* OutConvertedColor, bool* OutIsValid);
	static double Conv_StringToDouble(const class FString& InString);
	static int32 Conv_StringToInt(const class FString& InString);
	static int64 Conv_StringToInt64(const class FString& InString);
	static class FName Conv_StringToName(const class FString& InString);
	static void Conv_StringToRotator(const class FString& InString, struct FRotator* OutConvertedRotator, bool* OutIsValid);
	static void Conv_StringToVector(const class FString& InString, struct FVector* OutConvertedVector, bool* OutIsValid);
	static void Conv_StringToVector2D(const class FString& InString, struct FVector2D* OutConvertedVector2D, bool* OutIsValid);
	static void Conv_StringToVector3f(const class FString& InString, struct FVector3f* OutConvertedVector, bool* OutIsValid);
	static class FString Conv_TransformToString(const struct FTransform& InTrans);
	static class FString Conv_Vector2dToString(const struct FVector2D& InVec);
	static class FString Conv_Vector3fToString(const struct FVector3f& InVec);
	static class FString Conv_VectorToString(const struct FVector& InVec);
	static int32 CullArray(const class FString& SourceString, TArray<class FString>* inArray);
	static bool EndsWith(const class FString& SourceString, const class FString& InSuffix, ESearchCase SearchCase);
	static bool EqualEqual_StriStri(const class FString& A, const class FString& B);
	static bool EqualEqual_StrStr(const class FString& A, const class FString& B);
	static int32 FindSubstring(const class FString& SearchIn, const class FString& Substring, bool bUseCase, bool bSearchFromEnd, int32 StartPosition);
	static TArray<class FString> GetCharacterArrayFromString(const class FString& SourceString);
	static int32 GetCharacterAsNumber(const class FString& SourceString, int32 Index_0);
	static class FString GetSubstring(const class FString& SourceString, int32 StartIndex, int32 Length);
	static bool IsEmpty(const class FString& InString);
	static bool IsNumeric(const class FString& SourceString);
	static class FString JoinStringArray(const TArray<class FString>& SourceArray, const class FString& Separator);
	static class FString Left(const class FString& SourceString, int32 Count);
	static class FString LeftChop(const class FString& SourceString, int32 Count);
	static class FString LeftPad(const class FString& SourceString, int32 ChCount);
	static int32 Len(const class FString& S);
	static bool MatchesWildcard(const class FString& SourceString, const class FString& Wildcard, ESearchCase SearchCase);
	static class FString Mid(const class FString& SourceString, int32 Start, int32 Count);
	static bool NotEqual_StriStri(const class FString& A, const class FString& B);
	static bool NotEqual_StrStr(const class FString& A, const class FString& B);
	static TArray<class FString> ParseIntoArray(const class FString& SourceString, const class FString& Delimiter, const bool CullEmptyStrings);
	static class FString Replace(const class FString& SourceString, const class FString& From, const class FString& To, ESearchCase SearchCase);
	static int32 ReplaceInline(class FString& SourceString, const class FString& SearchText, const class FString& ReplacementText, ESearchCase SearchCase);
	static class FString Reverse(const class FString& SourceString);
	static class FString Right(const class FString& SourceString, int32 Count);
	static class FString RightChop(const class FString& SourceString, int32 Count);
	static class FString RightPad(const class FString& SourceString, int32 ChCount);
	static bool Split(const class FString& SourceString, const class FString& InStr, class FString* LeftS, class FString* RightS, ESearchCase SearchCase, ESearchDir SearchDir);
	static bool StartsWith(const class FString& SourceString, const class FString& InPrefix, ESearchCase SearchCase);
	static class FString TimeSecondsToString(float InSeconds);
	static class FString ToLower(const class FString& SourceString);
	static class FString ToUpper(const class FString& SourceString);
	static class FString Trim(const class FString& SourceString);
	static class FString TrimTrailing(const class FString& SourceString);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("KismetStringLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"KismetStringLibrary")
	}
	static class UKismetStringLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKismetStringLibrary>();
	}
};
DUMPER7_ASSERTS_UKismetStringLibrary;

// Class Engine.MeshBudgetProjectSettings
// 0x0018 (0x0050 - 0x0038)
class UMeshBudgetProjectSettings final : public UDeveloperSettings
{
public:
	bool                                          bEnableStaticMeshBudget;                           // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStaticMeshBudgetInfo>          StaticMeshBudgetInfos;                             // 0x0040(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MeshBudgetProjectSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MeshBudgetProjectSettings")
	}
	static class UMeshBudgetProjectSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshBudgetProjectSettings>();
	}
};
DUMPER7_ASSERTS_UMeshBudgetProjectSettings;

// Class Engine.MaterialExpressionReroute
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionReroute final : public UMaterialExpressionRerouteBase
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionReroute")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionReroute")
	}
	static class UMaterialExpressionReroute* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionReroute>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionReroute;

// Class Engine.MaterialExpressionRgbToHsv
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionRgbToHsv final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionRgbToHsv")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionRgbToHsv")
	}
	static class UMaterialExpressionRgbToHsv* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionRgbToHsv>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionRgbToHsv;

// Class Engine.MicroTransactionBase
// 0x0030 (0x0068 - 0x0038)
class UMicroTransactionBase final : public UPlatformInterfaceBase
{
public:
	TArray<struct FPurchaseInfo>                  AvailableProducts;                                 // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 LastError;                                         // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastErrorSolution;                                 // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MicroTransactionBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MicroTransactionBase")
	}
	static class UMicroTransactionBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMicroTransactionBase>();
	}
};
DUMPER7_ASSERTS_UMicroTransactionBase;

// Class Engine.MaterialExpressionRound
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionRound final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionRound")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionRound")
	}
	static class UMaterialExpressionRound* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionRound>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionRound;

// Class Engine.ParticleEmitter
// 0x0198 (0x01C0 - 0x0028)
class UParticleEmitter : public UObject
{
public:
	class FName                                   EmitterName;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubUVDataOffset;                                   // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmitterRenderMode                            EmitterRenderMode;                                 // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EParticleSignificanceLevel                    SignificanceLevel;                                 // 0x0035(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x1];                                       // 0x0036(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUseLegacySpawningBehavior : 1;                    // 0x0037(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_37_1 : 3;                                   // 0x0037(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         ConvertedModules : 1;                              // 0x0037(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSoloing : 1;                                    // 0x0037(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCookedOut : 1;                                    // 0x0037(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisabledLODsKeepEmitterAlive : 1;                 // 0x0037(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableWhenInsignficant : 1;                      // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleLODLevel*>              LODLevels;                                         // 0x0040(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         PeakActiveParticles;                               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialAllocationCount;                            // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QualityLevelSpawnRateScale;                        // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        DetailModeBitmask;                                 // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x160];                                     // 0x0060(0x0160)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleEmitter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleEmitter")
	}
	static class UParticleEmitter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleEmitter>();
	}
};
DUMPER7_ASSERTS_UParticleEmitter;

// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionRuntimeVirtualTextureReplace final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Default;                                           // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       VirtualTextureOutput;                              // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionRuntimeVirtualTextureReplace")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionRuntimeVirtualTextureReplace")
	}
	static class UMaterialExpressionRuntimeVirtualTextureReplace* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionRuntimeVirtualTextureReplace>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionRuntimeVirtualTextureReplace;

// Class Engine.NetworkPhysicsSystem
// 0x0010 (0x0040 - 0x0030)
class UNetworkPhysicsSystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NetworkPhysicsSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NetworkPhysicsSystem")
	}
	static class UNetworkPhysicsSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetworkPhysicsSystem>();
	}
};
DUMPER7_ASSERTS_UNetworkPhysicsSystem;

// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
// 0x0088 (0x0138 - 0x00B0)
class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
{
public:
	struct FExpressionInput                       Coordinates;                                       // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       WorldPosition;                                     // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       MipValue;                                          // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	class URuntimeVirtualTexture*                 VirtualTexture;                                    // 0x0128(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeVirtualTextureMaterialType            MaterialType;                                      // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSinglePhysicalSpace;                              // 0x0131(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdaptive;                                         // 0x0132(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFeedback;                                   // 0x0133(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeVirtualTextureMipValueMode            MipValueMode;                                      // 0x0134(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeVirtualTextureTextureAddressMode      TextureAddressMode;                                // 0x0135(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136[0x2];                                      // 0x0136(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionRuntimeVirtualTextureSample")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionRuntimeVirtualTextureSample")
	}
	static class UMaterialExpressionRuntimeVirtualTextureSample* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionRuntimeVirtualTextureSample>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionRuntimeVirtualTextureSample;

// Class Engine.NavEdgeProviderInterface
// 0x0000 (0x0000 - 0x0000)
class INavEdgeProviderInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NavEdgeProviderInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NavEdgeProviderInterface")
	}
	static class INavEdgeProviderInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INavEdgeProviderInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INavEdgeProviderInterface;

// Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
// 0x0028 (0x0160 - 0x0138)
class UMaterialExpressionRuntimeVirtualTextureSampleParameter final : public UMaterialExpressionRuntimeVirtualTextureSample
{
public:
	class FName                                   ParameterName;                                     // 0x0138(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ExpressionGUID;                                    // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Group;                                             // 0x0150(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortPriority;                                      // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionRuntimeVirtualTextureSampleParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionRuntimeVirtualTextureSampleParameter")
	}
	static class UMaterialExpressionRuntimeVirtualTextureSampleParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionRuntimeVirtualTextureSampleParameter>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionRuntimeVirtualTextureSampleParameter;

// Class Engine.MaterialExpressionSamplePhysicsVectorField
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionSamplePhysicsVectorField final : public UMaterialExpression
{
public:
	struct FExpressionInput                       WorldPosition;                                     // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	EFieldVectorType                              FieldTarget;                                       // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSamplePhysicsVectorField")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSamplePhysicsVectorField")
	}
	static class UMaterialExpressionSamplePhysicsVectorField* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSamplePhysicsVectorField>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSamplePhysicsVectorField;

// Class Engine.MeshDeformerInstanceSettings
// 0x0000 (0x0028 - 0x0028)
class UMeshDeformerInstanceSettings final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MeshDeformerInstanceSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MeshDeformerInstanceSettings")
	}
	static class UMeshDeformerInstanceSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshDeformerInstanceSettings>();
	}
};
DUMPER7_ASSERTS_UMeshDeformerInstanceSettings;

// Class Engine.MaterialExpressionSamplePhysicsScalarField
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionSamplePhysicsScalarField final : public UMaterialExpression
{
public:
	struct FExpressionInput                       WorldPosition;                                     // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	EFieldScalarType                              FieldTarget;                                       // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSamplePhysicsScalarField")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSamplePhysicsScalarField")
	}
	static class UMaterialExpressionSamplePhysicsScalarField* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSamplePhysicsScalarField>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSamplePhysicsScalarField;

// Class Engine.ParticleModuleAccelerationDrag
// 0x0038 (0x0070 - 0x0038)
class UParticleModuleAccelerationDrag final : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                     DragCoefficient;                                   // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  DragCoefficientRaw;                                // 0x0040(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleAccelerationDrag")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleAccelerationDrag")
	}
	static class UParticleModuleAccelerationDrag* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleAccelerationDrag>();
	}
};
DUMPER7_ASSERTS_UParticleModuleAccelerationDrag;

// Class Engine.MaterialExpressionSceneDepth
// 0x0068 (0x0118 - 0x00B0)
class UMaterialExpressionSceneDepth final : public UMaterialExpression
{
public:
	EMaterialSceneAttributeInputMode              InputMode;                                         // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExpressionInput                       Input;                                             // 0x00B8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Coordinates;                                       // 0x00E0(0x0028)(Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ConstInput;                                        // 0x0108(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSceneDepth")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSceneDepth")
	}
	static class UMaterialExpressionSceneDepth* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSceneDepth>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSceneDepth;

// Class Engine.PhysicsConstraintComponent
// 0x02D0 (0x0570 - 0x02A0)
class UPhysicsConstraintComponent final : public USceneComponent
{
public:
	class AActor*                                 ConstraintActor1;                                  // 0x02A0(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConstrainComponentPropName            ComponentName1;                                    // 0x02A8(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 ConstraintActor2;                                  // 0x02B0(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConstrainComponentPropName            ComponentName2;                                    // 0x02B8(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C0[0x10];                                     // 0x02C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsConstraintTemplate*             ConstraintSetup;                                   // 0x02D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 ConstraintIndex)> OnConstraintBroken;                        // 0x02D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 ConstraintIndex)> OnPlasticDeformation;                      // 0x02E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FConstraintInstance                    ConstraintInstance;                                // 0x02F8(0x0278)(Edit, NativeAccessSpecifierPublic)

public:
	void BreakConstraint();
	void GetConstrainedComponents(class UPrimitiveComponent** OutComponent1, class FName* OutBoneName1, class UPrimitiveComponent** OutComponent2, class FName* OutBoneName2);
	struct FConstraintInstanceAccessor GetConstraint();
	void GetConstraintForce(struct FVector* OutLinearForce, struct FVector* OutAngularForce);
	bool IsBroken();
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);
	void SetAngularDriveMode(EAngularDriveMode DriveMode);
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularOrientationTarget(const struct FRotator& InPosTarget);
	void SetAngularPlasticity(bool bAngularPlasticity, float AngularPlasticityThreshold);
	void SetAngularSwing1Limit(EAngularConstraintMotion MotionType, float Swing1LimitAngle);
	void SetAngularSwing2Limit(EAngularConstraintMotion MotionType, float Swing2LimitAngle);
	void SetAngularTwistLimit(EAngularConstraintMotion ConstraintType, float TwistLimitAngle);
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);
	void SetAngularVelocityTarget(const struct FVector& InVelTarget);
	void SetConstrainedComponents(class UPrimitiveComponent* Component1, class FName BoneName1, class UPrimitiveComponent* Component2, class FName BoneName2);
	void SetConstraintReferenceFrame(EConstraintFrame Frame, const struct FTransform& RefFrame);
	void SetConstraintReferenceOrientation(EConstraintFrame Frame, const struct FVector& PriAxis, const struct FVector& SecAxis);
	void SetConstraintReferencePosition(EConstraintFrame Frame, const struct FVector& RefPosition);
	void SetContactTransferScale(float ContactTransferScale);
	void SetDisableCollision(bool bDisableCollision);
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);
	void SetLinearPlasticity(bool bLinearPlasticity, float LinearPlasticityThreshold, EConstraintPlasticityType PlasticityType);
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearPositionTarget(const struct FVector& InPosTarget);
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearVelocityTarget(const struct FVector& InVelTarget);
	void SetLinearXLimit(ELinearConstraintMotion ConstraintType, float LimitSize);
	void SetLinearYLimit(ELinearConstraintMotion ConstraintType, float LimitSize);
	void SetLinearZLimit(ELinearConstraintMotion ConstraintType, float LimitSize);
	void SetOrientationDriveSLERP(bool bEnableSLERP);
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);

	float GetCurrentSwing1() const;
	float GetCurrentSwing2() const;
	float GetCurrentTwist() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PhysicsConstraintComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PhysicsConstraintComponent")
	}
	static class UPhysicsConstraintComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsConstraintComponent>();
	}
};
DUMPER7_ASSERTS_UPhysicsConstraintComponent;

// Class Engine.MaterialExpressionSceneDepthWithoutWater
// 0x0048 (0x00F8 - 0x00B0)
class UMaterialExpressionSceneDepthWithoutWater final : public UMaterialExpression
{
public:
	EMaterialSceneAttributeInputMode              InputMode;                                         // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExpressionInput                       Input;                                             // 0x00B8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ConstInput;                                        // 0x00E0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallbackDepth;                                     // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSceneDepthWithoutWater")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSceneDepthWithoutWater")
	}
	static class UMaterialExpressionSceneDepthWithoutWater* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSceneDepthWithoutWater>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSceneDepthWithoutWater;

// Class Engine.MaterialExpressionSceneTexture
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionSceneTexture final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Coordinates;                                       // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	ESceneTextureId                               SceneTextureId;                                    // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFiltered;                                         // 0x00D9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSceneTexture")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSceneTexture")
	}
	static class UMaterialExpressionSceneTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSceneTexture>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSceneTexture;

// Class Engine.MaterialExpressionShaderStageSwitch
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionShaderStageSwitch final : public UMaterialExpression
{
public:
	struct FExpressionInput                       PixelShader;                                       // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       VertexShader;                                      // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionShaderStageSwitch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionShaderStageSwitch")
	}
	static class UMaterialExpressionShaderStageSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionShaderStageSwitch>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionShaderStageSwitch;

// Class Engine.MaterialExpressionShadingPathSwitch
// 0x00A0 (0x0150 - 0x00B0)
class UMaterialExpressionShadingPathSwitch final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Default;                                           // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Inputs[0x3];                                       // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionShadingPathSwitch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionShadingPathSwitch")
	}
	static class UMaterialExpressionShadingPathSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionShadingPathSwitch>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionShadingPathSwitch;

// Class Engine.LightmassCharacterIndirectDetailVolume
// 0x0000 (0x02D0 - 0x02D0)
class ALightmassCharacterIndirectDetailVolume final : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LightmassCharacterIndirectDetailVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LightmassCharacterIndirectDetailVolume")
	}
	static class ALightmassCharacterIndirectDetailVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALightmassCharacterIndirectDetailVolume>();
	}
};
DUMPER7_ASSERTS_ALightmassCharacterIndirectDetailVolume;

// Class Engine.MaterialExpressionSign
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionSign final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSign")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSign")
	}
	static class UMaterialExpressionSign* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSign>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSign;

// Class Engine.MaterialExpressionSine
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionSine final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         Period;                                            // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSine")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSine")
	}
	static class UMaterialExpressionSine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSine>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSine;

// Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput
// 0x00A0 (0x0150 - 0x00B0)
class UMaterialExpressionSingleLayerWaterMaterialOutput final : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                       ScatteringCoefficients;                            // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       AbsorptionCoefficients;                            // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       PhaseG;                                            // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       ColorScaleBehindWater;                             // 0x0128(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSingleLayerWaterMaterialOutput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSingleLayerWaterMaterialOutput")
	}
	static class UMaterialExpressionSingleLayerWaterMaterialOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSingleLayerWaterMaterialOutput>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSingleLayerWaterMaterialOutput;

// Class Engine.ActorInstanceHandleInterface
// 0x0020 (0x0048 - 0x0028)
class UActorInstanceHandleInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActorInstanceHandleInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActorInstanceHandleInterface")
	}
	static class UActorInstanceHandleInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorInstanceHandleInterface>();
	}
};
DUMPER7_ASSERTS_UActorInstanceHandleInterface;

// Class Engine.ParticleModuleAttractorPoint
// 0x00C8 (0x00F8 - 0x0030)
class UParticleModuleAttractorPoint final : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                 Position;                                          // 0x0030(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  Range;                                             // 0x0090(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  Strength;                                          // 0x00C0(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         StrengthByDistance : 1;                            // 0x00F0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectBaseVelocity : 1;                           // 0x00F0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideVelocity : 1;                             // 0x00F0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseWorldSpacePosition : 1;                        // 0x00F0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Positive_X : 1;                                    // 0x00F0(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Positive_Y : 1;                                    // 0x00F0(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Positive_Z : 1;                                    // 0x00F0(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Negative_X : 1;                                    // 0x00F0(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Negative_Y : 1;                                    // 0x00F1(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Negative_Z : 1;                                    // 0x00F1(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleAttractorPoint")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleAttractorPoint")
	}
	static class UParticleModuleAttractorPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleAttractorPoint>();
	}
};
DUMPER7_ASSERTS_UParticleModuleAttractorPoint;

// Class Engine.VOIPTalker
// 0x0040 (0x00E0 - 0x00A0)
class UVOIPTalker final : public UActorComponent
{
public:
	struct FVoiceSettings                         Settings;                                          // 0x00A0(0x0018)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x28];                                      // 0x00B8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UVOIPTalker* CreateTalkerForPlayer(class APlayerState* OwningState);

	void BPOnTalkingBegin(class UAudioComponent* AudioComponent);
	void BPOnTalkingEnd();
	float GetVoiceLevel();
	void RegisterWithPlayerState(class APlayerState* OwningState);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VOIPTalker")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VOIPTalker")
	}
	static class UVOIPTalker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVOIPTalker>();
	}
};
DUMPER7_ASSERTS_UVOIPTalker;

// Class Engine.MaterialExpressionSkyAtmosphereLightDirection
// 0x0008 (0x00B8 - 0x00B0)
class UMaterialExpressionSkyAtmosphereLightDirection final : public UMaterialExpression
{
public:
	int32                                         LightIndex;                                        // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSkyAtmosphereLightDirection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSkyAtmosphereLightDirection")
	}
	static class UMaterialExpressionSkyAtmosphereLightDirection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSkyAtmosphereLightDirection>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSkyAtmosphereLightDirection;

// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionSkyAtmosphereLightIlluminance final : public UMaterialExpression
{
public:
	int32                                         LightIndex;                                        // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExpressionInput                       WorldPosition;                                     // 0x00B8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSkyAtmosphereLightIlluminance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSkyAtmosphereLightIlluminance")
	}
	static class UMaterialExpressionSkyAtmosphereLightIlluminance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSkyAtmosphereLightIlluminance>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSkyAtmosphereLightIlluminance;

// Class Engine.LocationVolume
// 0x0010 (0x02E0 - 0x02D0)
class ALocationVolume final : public AVolume
{
public:
	uint8                                         Pad_2D0[0x8];                                      // 0x02D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 DebugColor;                                        // 0x02D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsRuntime : 1;                                    // 0x02DC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Load();
	void Unload();

	bool IsLoaded() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LocationVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LocationVolume")
	}
	static class ALocationVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALocationVolume>();
	}
};
DUMPER7_ASSERTS_ALocationVolume;

// Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionSkyAtmosphereAerialPerspective final : public UMaterialExpression
{
public:
	struct FExpressionInput                       WorldPosition;                                     // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSkyAtmosphereAerialPerspective")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSkyAtmosphereAerialPerspective")
	}
	static class UMaterialExpressionSkyAtmosphereAerialPerspective* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSkyAtmosphereAerialPerspective>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSkyAtmosphereAerialPerspective;

// Class Engine.MaterialExpressionSkyAtmosphereViewLuminance
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionSkyAtmosphereViewLuminance final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSkyAtmosphereViewLuminance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSkyAtmosphereViewLuminance")
	}
	static class UMaterialExpressionSkyAtmosphereViewLuminance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSkyAtmosphereViewLuminance>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSkyAtmosphereViewLuminance;

// Class Engine.ParticleModuleAttractorLine
// 0x0090 (0x00C0 - 0x0030)
class UParticleModuleAttractorLine final : public UParticleModuleAttractorBase
{
public:
	struct FVector                                EndPoint0;                                         // 0x0030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPoint1;                                         // 0x0048(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  Range;                                             // 0x0060(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  Strength;                                          // 0x0090(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleAttractorLine")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleAttractorLine")
	}
	static class UParticleModuleAttractorLine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleAttractorLine>();
	}
};
DUMPER7_ASSERTS_UParticleModuleAttractorLine;

// Class Engine.MaterialExpressionSkyLightEnvMapSample
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionSkyLightEnvMapSample final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Direction;                                         // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Roughness;                                         // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSkyLightEnvMapSample")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSkyLightEnvMapSample")
	}
	static class UMaterialExpressionSkyLightEnvMapSample* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSkyLightEnvMapSample>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSkyLightEnvMapSample;

// Class Engine.MaterialExpressionSmoothStep
// 0x0088 (0x0138 - 0x00B0)
class UMaterialExpressionSmoothStep final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Min;                                               // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Max;                                               // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Value;                                             // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstMin;                                          // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstMax;                                          // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstValue;                                        // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSmoothStep")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSmoothStep")
	}
	static class UMaterialExpressionSmoothStep* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSmoothStep>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSmoothStep;

// Class Engine.GameViewportClient
// 0x0378 (0x03B0 - 0x0038)
class UGameViewportClient : public UScriptViewportClient
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UConsole*                               ViewportConsole;                                   // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDebugDisplayProperty>          DebugProperties;                                   // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxSplitscreenPlayers;                             // 0x0068(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0xC];                                       // 0x006C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorld*                                 World;                                             // 0x0078(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameInstance*                          GameInstance;                                      // 0x0080(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_88[0x328];                                     // 0x0088(0x0328)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetConsoleTarget(int32 PlayerIndex);
	void ShowTitleSafeArea();
	void SSSwapControllers();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GameViewportClient")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GameViewportClient")
	}
	static class UGameViewportClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameViewportClient>();
	}
};
DUMPER7_ASSERTS_UGameViewportClient;

// Class Engine.ParticleModuleEventGenerator
// 0x0010 (0x0040 - 0x0030)
class UParticleModuleEventGenerator final : public UParticleModuleEventBase
{
public:
	TArray<struct FParticleEvent_GenerateInfo>    Events;                                            // 0x0030(0x0010)(Edit, ExportObject, ZeroConstructor, NoClear, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleEventGenerator")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleEventGenerator")
	}
	static class UParticleModuleEventGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleEventGenerator>();
	}
};
DUMPER7_ASSERTS_UParticleModuleEventGenerator;

// Class Engine.MaterialExpressionSparseVolumeTextureObject
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionSparseVolumeTextureObject final : public UMaterialExpressionSparseVolumeTextureBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSparseVolumeTextureObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSparseVolumeTextureObject")
	}
	static class UMaterialExpressionSparseVolumeTextureObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSparseVolumeTextureObject>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSparseVolumeTextureObject;

// Class Engine.ImportantToggleSettingInterface
// 0x0000 (0x0000 - 0x0000)
class IImportantToggleSettingInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ImportantToggleSettingInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ImportantToggleSettingInterface")
	}
	static class IImportantToggleSettingInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IImportantToggleSettingInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IImportantToggleSettingInterface;

// Class Engine.MaterialExpressionSparseVolumeTextureObjectParameter
// 0x0000 (0x0160 - 0x0160)
class UMaterialExpressionSparseVolumeTextureObjectParameter final : public UMaterialExpressionSparseVolumeTextureSampleParameter
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSparseVolumeTextureObjectParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSparseVolumeTextureObjectParameter")
	}
	static class UMaterialExpressionSparseVolumeTextureObjectParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSparseVolumeTextureObjectParameter>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSparseVolumeTextureObjectParameter;

// Class Engine.ParticleModuleBeamTarget
// 0x0120 (0x0150 - 0x0030)
class UParticleModuleBeamTarget final : public UParticleModuleBeamBase
{
public:
	EBeam2SourceTargetMethod                      TargetMethod;                                      // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetName;                                        // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionVector                 Target;                                            // 0x0040(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bTargetAbsolute : 1;                               // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLockTarget : 1;                                   // 0x00A0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EBeam2SourceTargetTangentMethod               TargetTangentMethod;                               // 0x00A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionVector                 TargetTangent;                                     // 0x00A8(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bLockTargetTangent : 1;                            // 0x0108(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionFloat                  TargetStrength;                                    // 0x0110(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bLockTargetStength : 1;                            // 0x0140(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LockRadius;                                        // 0x0144(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleBeamTarget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleBeamTarget")
	}
	static class UParticleModuleBeamTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleBeamTarget>();
	}
};
DUMPER7_ASSERTS_UParticleModuleBeamTarget;

// Class Engine.MaterialExpressionSpeedTree
// 0x00B0 (0x0160 - 0x00B0)
class UMaterialExpressionSpeedTree final : public UMaterialExpression
{
public:
	struct FExpressionInput                       GeometryInput;                                     // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       WindInput;                                         // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       LODInput;                                          // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       ExtraBendWS;                                       // 0x0128(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	ESpeedTreeGeometryType                        GeometryType;                                      // 0x0150(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpeedTreeWindType                            WindType;                                          // 0x0151(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpeedTreeLODType                             LODType;                                           // 0x0152(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_153[0x1];                                      // 0x0153(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BillboardThreshold;                                // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccurateWindVelocities;                           // 0x0158(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSpeedTree")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSpeedTree")
	}
	static class UMaterialExpressionSpeedTree* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSpeedTree>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSpeedTree;

// Class Engine.MaterialExpressionSphereMask
// 0x00A8 (0x0158 - 0x00B0)
class UMaterialExpressionSphereMask final : public UMaterialExpression
{
public:
	struct FExpressionInput                       A;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       B;                                                 // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Radius;                                            // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Hardness;                                          // 0x0128(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         AttenuationRadius;                                 // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HardnessPercent;                                   // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSphereMask")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSphereMask")
	}
	static class UMaterialExpressionSphereMask* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSphereMask>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSphereMask;

// Class Engine.InputDelegateBinding
// 0x0000 (0x0028 - 0x0028)
class UInputDelegateBinding : public UDynamicBlueprintBinding
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InputDelegateBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InputDelegateBinding")
	}
	static class UInputDelegateBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputDelegateBinding>();
	}
};
DUMPER7_ASSERTS_UInputDelegateBinding;

// Class Engine.InputAxisDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputAxisDelegateBinding final : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisDelegateBinding> InputAxisDelegateBindings;                     // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InputAxisDelegateBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InputAxisDelegateBinding")
	}
	static class UInputAxisDelegateBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputAxisDelegateBinding>();
	}
};
DUMPER7_ASSERTS_UInputAxisDelegateBinding;

// Class Engine.ParticleModuleColor_Seeded
// 0x0020 (0x00E8 - 0x00C8)
class UParticleModuleColor_Seeded final : public UParticleModuleColor
{
public:
	struct FParticleRandomSeedInfo                RandomSeedInfo;                                    // 0x00C8(0x0020)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleColor_Seeded")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleColor_Seeded")
	}
	static class UParticleModuleColor_Seeded* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleColor_Seeded>();
	}
};
DUMPER7_ASSERTS_UParticleModuleColor_Seeded;

// Class Engine.MaterialExpressionSphericalParticleOpacity
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionSphericalParticleOpacity final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Density;                                           // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstantDensity;                                   // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSphericalParticleOpacity")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSphericalParticleOpacity")
	}
	static class UMaterialExpressionSphericalParticleOpacity* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSphericalParticleOpacity>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSphericalParticleOpacity;

// Class Engine.MaterialExpressionSquareRoot
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionSquareRoot final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSquareRoot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSquareRoot")
	}
	static class UMaterialExpressionSquareRoot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSquareRoot>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSquareRoot;

// Class Engine.MaterialExpressionStaticBool
// 0x0008 (0x00B8 - 0x00B0)
class UMaterialExpressionStaticBool final : public UMaterialExpression
{
public:
	uint8                                         Value : 1;                                         // 0x00B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStaticBool")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStaticBool")
	}
	static class UMaterialExpressionStaticBool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStaticBool>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStaticBool;

// Class Engine.MaterialExpressionStaticBoolParameter
// 0x0008 (0x00E0 - 0x00D8)
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{
public:
	uint8                                         DefaultValue : 1;                                  // 0x00D8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         DynamicBranch : 1;                                 // 0x00D8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStaticBoolParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStaticBoolParameter")
	}
	static class UMaterialExpressionStaticBoolParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStaticBoolParameter>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStaticBoolParameter;

// Class Engine.InputTouchDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputTouchDelegateBinding final : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings;                   // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InputTouchDelegateBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InputTouchDelegateBinding")
	}
	static class UInputTouchDelegateBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputTouchDelegateBinding>();
	}
};
DUMPER7_ASSERTS_UInputTouchDelegateBinding;

// Class Engine.MaterialExpressionStaticSwitch
// 0x0080 (0x0130 - 0x00B0)
class UMaterialExpressionStaticSwitch final : public UMaterialExpression
{
public:
	uint8                                         DefaultValue : 1;                                  // 0x00B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExpressionInput                       A;                                                 // 0x00B8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       B;                                                 // 0x00E0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Value;                                             // 0x0108(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStaticSwitch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStaticSwitch")
	}
	static class UMaterialExpressionStaticSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStaticSwitch>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStaticSwitch;

// Class Engine.ParticleModuleColorOverLife
// 0x0098 (0x00C8 - 0x0030)
class UParticleModuleColorOverLife final : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                 ColorOverLife;                                     // 0x0030(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  AlphaOverLife;                                     // 0x0090(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bClampAlpha : 1;                                   // 0x00C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleColorOverLife")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleColorOverLife")
	}
	static class UParticleModuleColorOverLife* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleColorOverLife>();
	}
};
DUMPER7_ASSERTS_UParticleModuleColorOverLife;

// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x0050 (0x0130 - 0x00E0)
class UMaterialExpressionStaticSwitchParameter final : public UMaterialExpressionStaticBoolParameter
{
public:
	struct FExpressionInput                       A;                                                 // 0x00E0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       B;                                                 // 0x0108(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStaticSwitchParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStaticSwitchParameter")
	}
	static class UMaterialExpressionStaticSwitchParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStaticSwitchParameter>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStaticSwitchParameter;

// Class Engine.MaterialExpressionStrataLegacyConversion
// 0x0360 (0x0410 - 0x00B0)
class UMaterialExpressionStrataLegacyConversion final : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                       BaseColor;                                         // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Metallic;                                          // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Specular;                                          // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Roughness;                                         // 0x0128(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Anisotropy;                                        // 0x0150(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       EmissiveColor;                                     // 0x0178(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Normal;                                            // 0x01A0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Tangent;                                           // 0x01C8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       SubsurfaceColor;                                   // 0x01F0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       ClearCoat;                                         // 0x0218(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       ClearCoatRoughness;                                // 0x0240(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Opacity;                                           // 0x0268(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       TransmittanceColor;                                // 0x0290(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       WaterScatteringCoefficients;                       // 0x02B8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       WaterAbsorptionCoefficients;                       // 0x02E0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       WaterPhaseG;                                       // 0x0308(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       ColorScaleBehindWater;                             // 0x0330(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       ClearCoatNormal;                                   // 0x0358(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       CustomTangent;                                     // 0x0380(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FShadingModelMaterialInput             ShadingModel;                                      // 0x03A8(0x0028)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D0[0x8];                                      // 0x03D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USubsurfaceProfile*                     SubsurfaceProfile;                                 // 0x03D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStrataMaterialInfo                    ConvertedStrataMaterialInfo;                       // 0x03E0(0x0030)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataLegacyConversion")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataLegacyConversion")
	}
	static class UMaterialExpressionStrataLegacyConversion* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataLegacyConversion>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataLegacyConversion;

// Class Engine.MaterialExpressionStrataHairBSDF
// 0x0118 (0x01C8 - 0x00B0)
class UMaterialExpressionStrataHairBSDF final : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                       BaseColor;                                         // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Scatter;                                           // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Specular;                                          // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Roughness;                                         // 0x0128(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Backlit;                                           // 0x0150(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Tangent;                                           // 0x0178(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       EmissiveColor;                                     // 0x01A0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataHairBSDF")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataHairBSDF")
	}
	static class UMaterialExpressionStrataHairBSDF* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataHairBSDF>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataHairBSDF;

// Class Engine.MaterialExpressionStrataSingleLayerWaterBSDF
// 0x01B8 (0x0268 - 0x00B0)
class UMaterialExpressionStrataSingleLayerWaterBSDF final : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                       BaseColor;                                         // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Metallic;                                          // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Specular;                                          // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Roughness;                                         // 0x0128(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Normal;                                            // 0x0150(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       EmissiveColor;                                     // 0x0178(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       TopMaterialOpacity;                                // 0x01A0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       WaterAlbedo;                                       // 0x01C8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       WaterExtinction;                                   // 0x01F0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       WaterPhaseG;                                       // 0x0218(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       ColorScaleBehindWater;                             // 0x0240(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataSingleLayerWaterBSDF")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataSingleLayerWaterBSDF")
	}
	static class UMaterialExpressionStrataSingleLayerWaterBSDF* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataSingleLayerWaterBSDF>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataSingleLayerWaterBSDF;

// Class Engine.MaterialExpressionStrataLightFunction
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionStrataLightFunction final : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                       Color;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataLightFunction")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataLightFunction")
	}
	static class UMaterialExpressionStrataLightFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataLightFunction>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataLightFunction;

// Class Engine.MaterialExpressionStrataPostProcess
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionStrataPostProcess final : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                       Color;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Opacity;                                           // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataPostProcess")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataPostProcess")
	}
	static class UMaterialExpressionStrataPostProcess* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataPostProcess>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataPostProcess;

// Class Engine.PhysicsVolume
// 0x0010 (0x02E0 - 0x02D0)
class APhysicsVolume : public AVolume
{
public:
	float                                         TerminalVelocity;                                  // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FluidFriction;                                     // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bWaterVolume : 1;                                  // 0x02DC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPhysicsOnContact : 1;                             // 0x02DC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PhysicsVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PhysicsVolume")
	}
	static class APhysicsVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<APhysicsVolume>();
	}
};
DUMPER7_ASSERTS_APhysicsVolume;

// Class Engine.PainCausingVolume
// 0x0028 (0x0308 - 0x02E0)
class APainCausingVolume final : public APhysicsVolume
{
public:
	uint8                                         bPainCausing : 1;                                  // 0x02E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamagePerSec;                                      // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PainInterval;                                      // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEntryPain : 1;                                    // 0x02F4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BACKUP_bPainCausing : 1;                           // 0x02F4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            DamageInstigator;                                  // 0x02F8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_300[0x8];                                      // 0x0300(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PainCausingVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PainCausingVolume")
	}
	static class APainCausingVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<APainCausingVolume>();
	}
};
DUMPER7_ASSERTS_APainCausingVolume;

// Class Engine.MaterialExpressionStrataUI
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionStrataUI final : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                       Color;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Opacity;                                           // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataUI")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataUI")
	}
	static class UMaterialExpressionStrataUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataUI>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataUI;

// Class Engine.MaterialExpressionStrataConvertToDecal
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionStrataConvertToDecal final : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                       DecalMaterial;                                     // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Coverage;                                          // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataConvertToDecal")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataConvertToDecal")
	}
	static class UMaterialExpressionStrataConvertToDecal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataConvertToDecal>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataConvertToDecal;

// Class Engine.MaterialExpressionStrataVerticalLayering
// 0x0080 (0x0130 - 0x00B0)
class UMaterialExpressionStrataVerticalLayering final : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                       top;                                               // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       base;                                              // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Thickness;                                         // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bUseParameterBlending : 1;                         // 0x0128(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataVerticalLayering")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataVerticalLayering")
	}
	static class UMaterialExpressionStrataVerticalLayering* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataVerticalLayering>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataVerticalLayering;

// Class Engine.MaterialExpressionStrataWeight
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionStrataWeight final : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                       A;                                                 // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Weight;                                            // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataWeight")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataWeight")
	}
	static class UMaterialExpressionStrataWeight* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataWeight>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataWeight;

// Class Engine.MaterialExpressionStrataTransmittanceToMFP
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionStrataTransmittanceToMFP final : public UMaterialExpressionStrataUtilityBase
{
public:
	struct FExpressionInput                       TransmittanceColor;                                // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Thickness;                                         // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataTransmittanceToMFP")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataTransmittanceToMFP")
	}
	static class UMaterialExpressionStrataTransmittanceToMFP* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataTransmittanceToMFP>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataTransmittanceToMFP;

// Class Engine.SoundNodeOscillator
// 0x0028 (0x0070 - 0x0048)
class USoundNodeOscillator final : public USoundNode
{
public:
	uint8                                         bModulateVolume : 1;                               // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bModulatePitch : 1;                                // 0x0048(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AmplitudeMin;                                      // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmplitudeMax;                                      // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrequencyMin;                                      // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrequencyMax;                                      // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetMin;                                         // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetMax;                                         // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterMin;                                         // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterMax;                                         // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeOscillator")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeOscillator")
	}
	static class USoundNodeOscillator* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeOscillator>();
	}
};
DUMPER7_ASSERTS_USoundNodeOscillator;

// Class Engine.MaterialExpressionStrataMetalnessToDiffuseAlbedoF0
// 0x0078 (0x0128 - 0x00B0)
class UMaterialExpressionStrataMetalnessToDiffuseAlbedoF0 final : public UMaterialExpressionStrataUtilityBase
{
public:
	struct FExpressionInput                       BaseColor;                                         // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Metallic;                                          // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Specular;                                          // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataMetalnessToDiffuseAlbedoF0")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataMetalnessToDiffuseAlbedoF0")
	}
	static class UMaterialExpressionStrataMetalnessToDiffuseAlbedoF0* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataMetalnessToDiffuseAlbedoF0>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataMetalnessToDiffuseAlbedoF0;

// Class Engine.MaterialExpressionStrataHazinessToSecondaryRoughness
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionStrataHazinessToSecondaryRoughness final : public UMaterialExpressionStrataUtilityBase
{
public:
	struct FExpressionInput                       BaseRoughness;                                     // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Haziness;                                          // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionStrataHazinessToSecondaryRoughness")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionStrataHazinessToSecondaryRoughness")
	}
	static class UMaterialExpressionStrataHazinessToSecondaryRoughness* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionStrataHazinessToSecondaryRoughness>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionStrataHazinessToSecondaryRoughness;

// Class Engine.MaterialExpressionSubsurfaceMediumMaterialOutput
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionSubsurfaceMediumMaterialOutput final : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                       MeanFreePath;                                      // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       ScatteringDistribution;                            // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSubsurfaceMediumMaterialOutput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSubsurfaceMediumMaterialOutput")
	}
	static class UMaterialExpressionSubsurfaceMediumMaterialOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSubsurfaceMediumMaterialOutput>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSubsurfaceMediumMaterialOutput;

// Class Engine.MaterialExpressionSwitch
// 0x0080 (0x0130 - 0x00B0)
class UMaterialExpressionSwitch final : public UMaterialExpression
{
public:
	class FString                                 Description;                                       // 0x00B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExpressionInput                       SwitchValue;                                       // 0x00C0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstSwitchValue;                                  // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExpressionInput                       Default;                                           // 0x00F0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstDefault;                                      // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSwitchCustomInput>             Inputs;                                            // 0x0120(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionSwitch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionSwitch")
	}
	static class UMaterialExpressionSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSwitch>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionSwitch;

// Class Engine.MaterialExpressionTangentOutput
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionTangentOutput final : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTangentOutput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTangentOutput")
	}
	static class UMaterialExpressionTangentOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTangentOutput>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTangentOutput;

// Class Engine.SoundSourceBus
// 0x0018 (0x0448 - 0x0430)
class USoundSourceBus final : public USoundWave
{
public:
	ESourceBusChannels                            SourceBusChannels;                                 // 0x0430(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_431[0x3];                                      // 0x0431(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SourceBusDuration;                                 // 0x0434(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioBus*                              AudioBus;                                          // 0x0438(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAutoDeactivateWhenSilent : 1;                     // 0x0440(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_441[0x7];                                      // 0x0441(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundSourceBus")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundSourceBus")
	}
	static class USoundSourceBus* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundSourceBus>();
	}
};
DUMPER7_ASSERTS_USoundSourceBus;

// Class Engine.MaterialExpressionTemporalSobol
// 0x0068 (0x0118 - 0x00B0)
class UMaterialExpressionTemporalSobol final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Index_0;                                           // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Seed;                                              // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint32                                        ConstIndex;                                        // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ConstSeed;                                         // 0x0108(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTemporalSobol")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTemporalSobol")
	}
	static class UMaterialExpressionTemporalSobol* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTemporalSobol>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTemporalSobol;

// Class Engine.MaterialExpressionTextureCoordinate
// 0x0010 (0x00C0 - 0x00B0)
class UMaterialExpressionTextureCoordinate final : public UMaterialExpression
{
public:
	int32                                         CoordinateIndex;                                   // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UTiling;                                           // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VTiling;                                           // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UnMirrorU : 1;                                     // 0x00BC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         UnMirrorV : 1;                                     // 0x00BC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTextureCoordinate")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTextureCoordinate")
	}
	static class UMaterialExpressionTextureCoordinate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTextureCoordinate>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTextureCoordinate;

// Class Engine.MaterialExpressionTextureObject
// 0x0000 (0x00C0 - 0x00C0)
class UMaterialExpressionTextureObject final : public UMaterialExpressionTextureBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTextureObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTextureObject")
	}
	static class UMaterialExpressionTextureObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTextureObject>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTextureObject;

// Class Engine.MaterialExpressionTextureObjectParameter
// 0x0000 (0x0240 - 0x0240)
class UMaterialExpressionTextureObjectParameter final : public UMaterialExpressionTextureSampleParameter
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTextureObjectParameter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTextureObjectParameter")
	}
	static class UMaterialExpressionTextureObjectParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTextureObjectParameter>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTextureObjectParameter;

// Class Engine.MaterialExpressionTextureSampleParameterCubeArray
// 0x0000 (0x0240 - 0x0240)
class UMaterialExpressionTextureSampleParameterCubeArray final : public UMaterialExpressionTextureSampleParameter
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTextureSampleParameterCubeArray")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTextureSampleParameterCubeArray")
	}
	static class UMaterialExpressionTextureSampleParameterCubeArray* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTextureSampleParameterCubeArray>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTextureSampleParameterCubeArray;

// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x0060 (0x0098 - 0x0038)
class UParticleModuleAccelerationOverLifetime final : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                 AccelOverLife;                                     // 0x0038(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleAccelerationOverLifetime")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleAccelerationOverLifetime")
	}
	static class UParticleModuleAccelerationOverLifetime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleAccelerationOverLifetime>();
	}
};
DUMPER7_ASSERTS_UParticleModuleAccelerationOverLifetime;

// Class Engine.MaterialExpressionTextureSampleParameterVolume
// 0x0000 (0x0240 - 0x0240)
class UMaterialExpressionTextureSampleParameterVolume final : public UMaterialExpressionTextureSampleParameter
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTextureSampleParameterVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTextureSampleParameterVolume")
	}
	static class UMaterialExpressionTextureSampleParameterVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTextureSampleParameterVolume>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTextureSampleParameterVolume;

// Class Engine.MaterialExpressionTime
// 0x0008 (0x00B8 - 0x00B0)
class UMaterialExpressionTime final : public UMaterialExpression
{
public:
	uint8                                         bIgnorePause : 1;                                  // 0x00B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Period : 1;                              // 0x00B0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Period;                                            // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTime")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTime")
	}
	static class UMaterialExpressionTime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTime>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTime;

// Class Engine.PrecomputedVisibilityVolume
// 0x0000 (0x02D0 - 0x02D0)
class APrecomputedVisibilityVolume final : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PrecomputedVisibilityVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PrecomputedVisibilityVolume")
	}
	static class APrecomputedVisibilityVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<APrecomputedVisibilityVolume>();
	}
};
DUMPER7_ASSERTS_APrecomputedVisibilityVolume;

// Class Engine.MaterialExpressionTransform
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionTransform final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	EMaterialVectorCoordTransformSource           TransformSourceType;                               // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialVectorCoordTransform                 TransformType;                                     // 0x00D9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTransform")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTransform")
	}
	static class UMaterialExpressionTransform* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTransform>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTransform;

// Class Engine.MaterialExpressionTransformPosition
// 0x0030 (0x00E0 - 0x00B0)
class UMaterialExpressionTransformPosition final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	EMaterialPositionTransformSource              TransformSourceType;                               // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialPositionTransformSource              TransformType;                                     // 0x00D9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTransformPosition")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTransformPosition")
	}
	static class UMaterialExpressionTransformPosition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTransformPosition>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTransformPosition;

// Class Engine.MaterialExpressionTruncateLWC
// 0x0028 (0x00D8 - 0x00B0)
class UMaterialExpressionTruncateLWC final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTruncateLWC")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTruncateLWC")
	}
	static class UMaterialExpressionTruncateLWC* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTruncateLWC>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTruncateLWC;

// Class Engine.ProxyLODMeshSimplificationSettings
// 0x0008 (0x0040 - 0x0038)
class UProxyLODMeshSimplificationSettings final : public UDeveloperSettings
{
public:
	class FName                                   ProxyLODMeshReductionModuleName;                   // 0x0038(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ProxyLODMeshSimplificationSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ProxyLODMeshSimplificationSettings")
	}
	static class UProxyLODMeshSimplificationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProxyLODMeshSimplificationSettings>();
	}
};
DUMPER7_ASSERTS_UProxyLODMeshSimplificationSettings;

// Class Engine.MaterialExpressionTwoSidedSign
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionTwoSidedSign final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionTwoSidedSign")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionTwoSidedSign")
	}
	static class UMaterialExpressionTwoSidedSign* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTwoSidedSign>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionTwoSidedSign;

// Class Engine.MaterialExpressionVectorNoise
// 0x0038 (0x00E8 - 0x00B0)
class UMaterialExpressionVectorNoise final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Position;                                          // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	EVectorNoiseFunction                          NoiseFunction;                                     // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Quality;                                           // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bTiling : 1;                                       // 0x00E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        TileSize;                                          // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionVectorNoise")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionVectorNoise")
	}
	static class UMaterialExpressionVectorNoise* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionVectorNoise>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionVectorNoise;

// Class Engine.MaterialExpressionVertexColor
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionVertexColor final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionVertexColor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionVertexColor")
	}
	static class UMaterialExpressionVertexColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionVertexColor>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionVertexColor;

// Class Engine.MaterialExpressionVertexInterpolator
// 0x0038 (0x00E8 - 0x00B0)
class UMaterialExpressionVertexInterpolator final : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                       Input;                                             // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x10];                                      // 0x00D8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionVertexInterpolator")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionVertexInterpolator")
	}
	static class UMaterialExpressionVertexInterpolator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionVertexInterpolator>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionVertexInterpolator;

// Class Engine.Material
// 0x0168 (0x0218 - 0x00B0)
class UMaterial final : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                      PhysMaterial;                                      // 0x00B0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterialMask*                  PhysMaterialMask;                                  // 0x00B8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysicalMaterialMap[0x8];                          // 0x00C0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPhysicalMaterial*>              RenderTracePhysicalMaterialOutputs;                // 0x0100(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	EMaterialDomain                               MaterialDomain;                                    // 0x0110(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlendMode                                    BlendMode;                                         // 0x0111(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDecalBlendMode                               DecalBlendMode;                                    // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialDecalResponse                        MaterialDecalResponse;                             // 0x0113(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMaterialOverrideNanite                NaniteOverrideMaterial;                            // 0x0118(0x0038)(Edit, NativeAccessSpecifierPublic)
	struct FDisplacementScaling                   DisplacementScaling;                               // 0x0150(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EMaterialShadingModel                         ShadingModel;                                      // 0x0158(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bCastDynamicShadowAsMasked : 1;                    // 0x0159(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	struct FMaterialShadingModelField             ShadingModels;                                     // 0x015A(0x0002)(NoDestructor, AssetRegistrySearchable, NativeAccessSpecifierPrivate)
	float                                         OpacityMaskClipValue;                              // 0x015C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableSeparateTranslucency : 1;                   // 0x0160(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bEnableResponsiveAA : 1;                           // 0x0160(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bScreenSpaceReflections : 1;                       // 0x0160(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bContactShadows : 1;                               // 0x0160(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         TwoSided : 1;                                      // 0x0160(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsThinSurface : 1;                                // 0x0160(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         DitheredLODTransition : 1;                         // 0x0160(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         DitherOpacityMask : 1;                             // 0x0160(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowNegativeEmissiveColor : 1;                   // 0x0161(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EMaterialTranslucencyPass                     TranslucencyPass;                                  // 0x0162(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETranslucencyLightingMode                     TranslucencyLightingMode;                          // 0x0163(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableMobileSeparateTranslucency : 1;             // 0x0164(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumCustomizedUVs;                                  // 0x0168(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslucencyDirectionalLightingIntensity;          // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslucentShadowDensityScale;                     // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslucentSelfShadowDensityScale;                 // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslucentSelfShadowSecondDensityScale;           // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslucentSelfShadowSecondOpacity;                // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslucentBackscatteringExponent;                 // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TranslucentMultipleScatteringExtinction;           // 0x0184(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslucentShadowStartOffset;                      // 0x0194(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDisableDepthTest : 1;                             // 0x0198(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bWriteOnlyAlpha : 1;                               // 0x0198(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateSphericalParticleNormals : 1;             // 0x0198(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTangentSpaceNormal : 1;                           // 0x0198(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseEmissiveForDynamicAreaLighting : 1;            // 0x0198(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedAsSpecialEngineMaterial : 1;                  // 0x0198(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithSkeletalMesh : 1;                         // 0x0198(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithEditorCompositing : 1;                    // 0x0198(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithParticleSprites : 1;                      // 0x0199(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithBeamTrails : 1;                           // 0x0199(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithMeshParticles : 1;                        // 0x0199(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithNiagaraSprites : 1;                       // 0x0199(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithNiagaraRibbons : 1;                       // 0x0199(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithNiagaraMeshParticles : 1;                 // 0x0199(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithGeometryCache : 1;                        // 0x0199(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithStaticLighting : 1;                       // 0x0199(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithMorphTargets : 1;                         // 0x019A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithSplineMeshes : 1;                         // 0x019A(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithInstancedStaticMeshes : 1;                // 0x019A(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithGeometryCollections : 1;                  // 0x019A(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsesDistortion : 1;                               // 0x019A(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRootNodeOverridesDefaultDistortion : 1;           // 0x019A(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithClothing : 1;                             // 0x019A(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_19A_7 : 1;                                  // 0x019A(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_19B[0x1];                                      // 0x019B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUsedWithWater : 1;                                // 0x019C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithHairStrands : 1;                          // 0x019C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithLidarPointCloud : 1;                      // 0x019C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithVirtualHeightfieldMesh : 1;               // 0x019C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithNanite : 1;                               // 0x019C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithVolumetricCloud : 1;                      // 0x019C(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsedWithHeterogeneousVolumes : 1;                 // 0x019C(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_19C_7 : 1;                                  // 0x019C(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUsedWithUI : 1;                                   // 0x01A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAutomaticallySetUsageInEditor : 1;                // 0x01A0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFullyRough : 1;                                   // 0x01A0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseFullPrecision : 1;                             // 0x01A0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EMaterialFloatPrecisionMode                   FloatPrecisionMode;                                // 0x01A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseLightmapDirectionality : 1;                    // 0x01A2(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMobileEnableHighQualityBRDF : 1;                  // 0x01A2(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseAlphaToCoverage : 1;                           // 0x01A2(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_1A2_3 : 5;                                  // 0x01A2(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_1A3[0x1];                                      // 0x01A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bForwardRenderUsePreintegratedGFForSimpleIBL : 1;  // 0x01A4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_1A4_1 : 7;                                  // 0x01A4(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_1A5[0x3];                                      // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUseHQForwardReflections : 1;                      // 0x01A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForwardBlendsSkyLightCubemaps : 1;                // 0x01A8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsePlanarForwardReflections : 1;                  // 0x01A8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNormalCurvatureToRoughness : 1;                   // 0x01A8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         AllowTranslucentCustomDepthWrites : 1;             // 0x01A8(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowFrontLayerTranslucency : 1;                  // 0x01A8(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Wireframe : 1;                                     // 0x01A8(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EMaterialShadingRate                          ShadingRate;                                       // 0x01A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCanMaskedBeAssumedOpaque : 1;                     // 0x01AA(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsMasked : 1;                                     // 0x01AA(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsPreviewMaterial : 1;                            // 0x01AA(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsFunctionPreviewMaterial : 1;                    // 0x01AA(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseMaterialAttributes : 1;                        // 0x01AA(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableExecWire : 1;                               // 0x01AA(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableNewHLSLGenerator : 1;                       // 0x01AA(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastRayTracedShadows : 1;                         // 0x01AA(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseTranslucencyVertexFog : 1;                     // 0x01AB(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bApplyCloudFogging : 1;                            // 0x01AB(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSky : 1;                                        // 0x01AB(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bComputeFogPerPixel : 1;                           // 0x01AB(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOutputTranslucentVelocity : 1;                    // 0x01AB(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowDevelopmentShaderCompile : 1;                // 0x01AB(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsMaterialEditorStatsMaterial : 1;                // 0x01AB(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EBlendableLocation                            BlendableLocation;                                 // 0x01AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BlendableOutputAlpha : 1;                          // 0x01AD(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableStencilTest : 1;                            // 0x01AD(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EMaterialStencilCompare                       StencilCompare;                                    // 0x01AE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StencilRefValue;                                   // 0x01AF(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERefractionMode                               RefractionMode;                                    // 0x01B0(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERefractionMode                               RefractionMethod;                                  // 0x01B1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERefractionCoverageMode                       RefractionCoverageMode;                            // 0x01B2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B3[0x1];                                      // 0x01B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BlendablePriority;                                 // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsBlendable : 1;                                  // 0x01B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        UsageFlagWarnings;                                 // 0x01BC(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0[0x4];                                      // 0x01C0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RefractionDepthBias;                               // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWorldPositionOffsetDisplacement;                // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysEvaluateWorldPositionOffset;                // 0x01CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD[0x7];                                      // 0x01CD(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  StateId;                                           // 0x01D4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4[0x34];                                     // 0x01E4(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Material")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Material")
	}
	static class UMaterial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterial>();
	}
};
DUMPER7_ASSERTS_UMaterial;

// Class Engine.MaterialExpressionVertexNormalWS
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionVertexNormalWS final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionVertexNormalWS")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionVertexNormalWS")
	}
	static class UMaterialExpressionVertexNormalWS* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionVertexNormalWS>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionVertexNormalWS;

// Class Engine.MaterialExpressionVertexTangentWS
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionVertexTangentWS final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionVertexTangentWS")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionVertexTangentWS")
	}
	static class UMaterialExpressionVertexTangentWS* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionVertexTangentWS>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionVertexTangentWS;

// Class Engine.MaterialExpressionViewProperty
// 0x0008 (0x00B8 - 0x00B0)
class UMaterialExpressionViewProperty final : public UMaterialExpression
{
public:
	EMaterialExposedViewProperty                  Property;                                          // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionViewProperty")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionViewProperty")
	}
	static class UMaterialExpressionViewProperty* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionViewProperty>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionViewProperty;

// Class Engine.MaterialExpressionViewSize
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionViewSize final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionViewSize")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionViewSize")
	}
	static class UMaterialExpressionViewSize* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionViewSize>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionViewSize;

// Class Engine.MeshMergeCullingVolume
// 0x0000 (0x02D0 - 0x02D0)
class AMeshMergeCullingVolume final : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MeshMergeCullingVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MeshMergeCullingVolume")
	}
	static class AMeshMergeCullingVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMeshMergeCullingVolume>();
	}
};
DUMPER7_ASSERTS_AMeshMergeCullingVolume;

// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
// 0x0050 (0x0100 - 0x00B0)
class UMaterialExpressionVirtualTextureFeatureSwitch final : public UMaterialExpression
{
public:
	struct FExpressionInput                       No;                                                // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Yes;                                               // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionVirtualTextureFeatureSwitch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionVirtualTextureFeatureSwitch")
	}
	static class UMaterialExpressionVirtualTextureFeatureSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionVirtualTextureFeatureSwitch>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionVirtualTextureFeatureSwitch;

// Class Engine.MaterialExpressionVolumetricAdvancedMaterialInput
// 0x0000 (0x00B0 - 0x00B0)
class UMaterialExpressionVolumetricAdvancedMaterialInput final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionVolumetricAdvancedMaterialInput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionVolumetricAdvancedMaterialInput")
	}
	static class UMaterialExpressionVolumetricAdvancedMaterialInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionVolumetricAdvancedMaterialInput>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionVolumetricAdvancedMaterialInput;

// Class Engine.MaterialExpressionVolumetricAdvancedMaterialOutput
// 0x0140 (0x01F0 - 0x00B0)
class UMaterialExpressionVolumetricAdvancedMaterialOutput final : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                       PhaseG;                                            // 0x00B0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       PhaseG2;                                           // 0x00D8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       PhaseBlend;                                        // 0x0100(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       MultiScatteringContribution;                       // 0x0128(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       MultiScatteringOcclusion;                          // 0x0150(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       MultiScatteringEccentricity;                       // 0x0178(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       ConservativeDensity;                               // 0x01A0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstPhaseG;                                       // 0x01C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstPhaseG2;                                      // 0x01CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstPhaseBlend;                                   // 0x01D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PerSamplePhaseEvaluation;                          // 0x01D4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D5[0x3];                                      // 0x01D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        MultiScatteringApproximationOctaveCount;           // 0x01D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstMultiScatteringContribution;                  // 0x01DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstMultiScatteringOcclusion;                     // 0x01E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstMultiScatteringEccentricity;                  // 0x01E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGroundContribution;                               // 0x01E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGrayScaleMaterial;                                // 0x01E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRayMarchVolumeShadow;                             // 0x01EA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClampMultiScatteringContribution;                 // 0x01EB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionVolumetricAdvancedMaterialOutput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionVolumetricAdvancedMaterialOutput")
	}
	static class UMaterialExpressionVolumetricAdvancedMaterialOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionVolumetricAdvancedMaterialOutput>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionVolumetricAdvancedMaterialOutput;

// Class Engine.MaterialExpressionWhileLoop
// 0x0038 (0x00E8 - 0x00B0)
class UMaterialExpressionWhileLoop final : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                  LoopBody;                                          // 0x00B0(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionExecOutput                  Completed;                                         // 0x00B8(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Condition;                                         // 0x00C0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionWhileLoop")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionWhileLoop")
	}
	static class UMaterialExpressionWhileLoop* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionWhileLoop>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionWhileLoop;

// Class Engine.MaterialExpressionWorldPosition
// 0x0008 (0x00B8 - 0x00B0)
class UMaterialExpressionWorldPosition final : public UMaterialExpression
{
public:
	EWorldPositionIncludedOffsets                 WorldPositionShaderOffset;                         // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialExpressionWorldPosition")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialExpressionWorldPosition")
	}
	static class UMaterialExpressionWorldPosition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionWorldPosition>();
	}
};
DUMPER7_ASSERTS_UMaterialExpressionWorldPosition;

// Class Engine.DataStreamChannel
// 0x2030 (0x2098 - 0x0068)
class UDataStreamChannel final : public UChannel
{
public:
	uint8                                         Pad_68[0x2030];                                    // 0x0068(0x2030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DataStreamChannel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DataStreamChannel")
	}
	static class UDataStreamChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataStreamChannel>();
	}
};
DUMPER7_ASSERTS_UDataStreamChannel;

// Class Engine.MaterialFunctionEditorOnlyData
// 0x0030 (0x0058 - 0x0028)
class UMaterialFunctionEditorOnlyData final : public UMaterialFunctionInterfaceEditorOnlyData
{
public:
	struct FMaterialExpressionCollection          ExpressionCollection;                              // 0x0028(0x0030)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialFunctionEditorOnlyData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialFunctionEditorOnlyData")
	}
	static class UMaterialFunctionEditorOnlyData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialFunctionEditorOnlyData>();
	}
};
DUMPER7_ASSERTS_UMaterialFunctionEditorOnlyData;

// Class Engine.MaterialFunctionMaterialLayerInstance
// 0x0000 (0x00E0 - 0x00E0)
class UMaterialFunctionMaterialLayerInstance final : public UMaterialFunctionInstance
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialFunctionMaterialLayerInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialFunctionMaterialLayerInstance")
	}
	static class UMaterialFunctionMaterialLayerInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialFunctionMaterialLayerInstance>();
	}
};
DUMPER7_ASSERTS_UMaterialFunctionMaterialLayerInstance;

// Class Engine.MaterialParameterCollectionInstance
// 0x00F8 (0x0120 - 0x0028)
class UMaterialParameterCollectionInstance final : public UObject
{
public:
	uint8                                         Pad_28[0x4];                                       // 0x0028(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UMaterialParameterCollection> Collection;                                   // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34[0xEC];                                      // 0x0034(0x00EC)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialParameterCollectionInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialParameterCollectionInstance")
	}
	static class UMaterialParameterCollectionInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialParameterCollectionInstance>();
	}
};
DUMPER7_ASSERTS_UMaterialParameterCollectionInstance;

// Class Engine.NetDriver
// 0x07C8 (0x07F0 - 0x0028)
class UNetDriver : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NetConnectionClassName;                            // 0x0030(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReplicationDriverClassName;                        // 0x0040(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReplicationBridgeClassName;                        // 0x0050(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNetDriverReplicationSystemConfig      ReplicationSystemConfig;                           // 0x0060(0x000C)(Config, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MaxDownloadSize;                                   // 0x006C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bClampListenServerTickRate : 1;                    // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NetServerMaxTickRate;                              // 0x0074(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x18];                                      // 0x0078(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxNetTickRate;                                    // 0x0090(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxInternetClientRate;                             // 0x0094(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxClientRate;                                     // 0x0098(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerTravelPause;                                 // 0x009C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnPrioritySeconds;                              // 0x00A0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelevantTimeout;                                   // 0x00A4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KeepAliveTime;                                     // 0x00A8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialConnectTimeout;                             // 0x00AC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConnectionTimeout;                                 // 0x00B0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeoutMultiplierForUnoptimizedBuilds;             // 0x00B4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetConnection*                         ServerConnection;                                  // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNetConnection*>                 ClientConnections;                                 // 0x00C0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x60];                                      // 0x00D0(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RecentlyDisconnectedTrackingTime;                  // 0x0130(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x3C];                                     // 0x0134(0x003C)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorld*                                 World;                                             // 0x0170(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPackage*                               WorldPackage;                                      // 0x0178(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_180[0x20];                                     // 0x0180(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    NetConnectionClass;                                // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    ReplicationDriverClass;                            // 0x01A8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    ReplicationBridgeClass;                            // 0x01B0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0x10];                                     // 0x01B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NetDriverName;                                     // 0x01C8(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FChannelDefinition>             ChannelDefinitions;                                // 0x01D0(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TMap<class FName, struct FChannelDefinition>  ChannelDefinitionMap;                              // 0x01E0(0x0050)(NativeAccessSpecifierPublic)
	TArray<class UChannel*>                       ActorChannelPool;                                  // 0x0230(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_240[0x21];                                     // 0x0240(0x0021)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         BitPad_261_0 : 6;                                  // 0x0261(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bNoTimeouts : 1;                                   // 0x0261(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeverApplyNetworkEmulationSettings : 1;           // 0x0261(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_262[0x506];                                    // 0x0262(0x0506)(Fixing Size After Last Property [ Dumper-7 ])
	class UReplicationDriver*                     ReplicationDriver;                                 // 0x0768(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_770[0x80];                                     // 0x0770(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NetDriver")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NetDriver")
	}
	static class UNetDriver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetDriver>();
	}
};
DUMPER7_ASSERTS_UNetDriver;

// Class Engine.DemoNetDriver
// 0x0CC0 (0x14B0 - 0x07F0)
class alignas(0x10) UDemoNetDriver final : public UNetDriver
{
public:
	uint8                                         Pad_7F0[0x38];                                     // 0x07F0(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FRollbackNetStartupActorInfo> RollbackNetStartupActors;               // 0x0828(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_878[0xE4];                                     // 0x0878(0x00E4)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CheckpointSaveMaxMSPerFrame;                       // 0x095C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_960[0x18];                                     // 0x0960(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMulticastRecordOptions>        MulticastRecordOptions;                            // 0x0978(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	TArray<class APlayerController*>              SpectatorControllers;                              // 0x0988(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_998[0xB18];                                    // 0x0998(0x0B18)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DemoNetDriver")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DemoNetDriver")
	}
	static class UDemoNetDriver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDemoNetDriver>();
	}
};
DUMPER7_ASSERTS_UDemoNetDriver;

// Class Engine.MeshDeformer
// 0x0000 (0x0028 - 0x0028)
class UMeshDeformer final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MeshDeformer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MeshDeformer")
	}
	static class UMeshDeformer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshDeformer>();
	}
};
DUMPER7_ASSERTS_UMeshDeformer;

// Class Engine.MeshDeformerInstance
// 0x0000 (0x0028 - 0x0028)
class UMeshDeformerInstance final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MeshDeformerInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MeshDeformerInstance")
	}
	static class UMeshDeformerInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshDeformerInstance>();
	}
};
DUMPER7_ASSERTS_UMeshDeformerInstance;

// Class Engine.DeviceProfileManager
// 0x0068 (0x0090 - 0x0028)
class UDeviceProfileManager final : public UObject
{
public:
	TArray<class UDeviceProfile*>                 Profiles;                                          // 0x0028(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UDeviceProfile*>                 BackupProfiles;                                    // 0x0038(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x48];                                      // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DeviceProfileManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DeviceProfileManager")
	}
	static class UDeviceProfileManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDeviceProfileManager>();
	}
};
DUMPER7_ASSERTS_UDeviceProfileManager;

// Class Engine.MorphTarget
// 0x0018 (0x0040 - 0x0028)
class UMorphTarget final : public UObject
{
public:
	class USkeletalMesh*                          BaseSkelMesh;                                      // 0x0028(0x0008)(ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MorphTarget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MorphTarget")
	}
	static class UMorphTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMorphTarget>();
	}
};
DUMPER7_ASSERTS_UMorphTarget;

// Class Engine.NavAreaBase
// 0x0008 (0x0030 - 0x0028)
class UNavAreaBase : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NavAreaBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NavAreaBase")
	}
	static class UNavAreaBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavAreaBase>();
	}
};
DUMPER7_ASSERTS_UNavAreaBase;

// Class Engine.DPICustomScalingRule
// 0x0000 (0x0028 - 0x0028)
class UDPICustomScalingRule final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DPICustomScalingRule")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DPICustomScalingRule")
	}
	static class UDPICustomScalingRule* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDPICustomScalingRule>();
	}
};
DUMPER7_ASSERTS_UDPICustomScalingRule;

// Class Engine.NavPathObserverInterface
// 0x0000 (0x0000 - 0x0000)
class INavPathObserverInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NavPathObserverInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NavPathObserverInterface")
	}
	static class INavPathObserverInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INavPathObserverInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INavPathObserverInterface;

// Class Engine.MaterialBillboardComponent
// 0x0010 (0x0580 - 0x0570)
class UMaterialBillboardComponent final : public UPrimitiveComponent
{
public:
	TArray<struct FMaterialSpriteElement>         Elements;                                          // 0x0570(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve);
	void SetElements(const TArray<struct FMaterialSpriteElement>& NewElements);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialBillboardComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialBillboardComponent")
	}
	static class UMaterialBillboardComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialBillboardComponent>();
	}
};
DUMPER7_ASSERTS_UMaterialBillboardComponent;

// Class Engine.NetworkPredictionInterface
// 0x0000 (0x0000 - 0x0000)
class INetworkPredictionInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NetworkPredictionInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NetworkPredictionInterface")
	}
	static class INetworkPredictionInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INetworkPredictionInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INetworkPredictionInterface;

// Class Engine.ParticleSystem
// 0x0128 (0x0170 - 0x0048)
class UParticleSystem final : public UFXSystemAsset
{
public:
	float                                         UpdateTime_FPS;                                    // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpdateTime_Delta;                                  // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WarmupTime;                                        // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WarmupTickRate;                                    // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleEmitter*>               Emitters;                                          // 0x0058(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*               PreviewComponent;                                  // 0x0068(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterpCurveEdSetup*                    CurveEdSetup;                                      // 0x0070(0x0008)(ExportObject, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LODDistanceCheckTime;                              // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MacroUVRadius;                                     // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 LODDistances;                                      // 0x0080(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FParticleSystemLOD>             LODSettings;                                       // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBox                                   FixedRelativeBoundingBox;                          // 0x00A0(0x0038)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SecondsBeforeInactive;                             // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayLow;                                          // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOrientZAxisTowardCamera : 1;                      // 0x00E4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseFixedRelativeBoundingBox : 1;                  // 0x00E4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldResetPeakCounts : 1;                        // 0x00E4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasPhysics : 1;                                   // 0x00E4(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseRealtimeThumbnail : 1;                         // 0x00E4(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ThumbnailImageOutOfDate : 1;                       // 0x00E4(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_E4_6 : 2;                                   // 0x00E4(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         bUseDelayRange : 1;                                // 0x00E5(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowManagedTicking : 1;                          // 0x00E5(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAutoDeactivate : 1;                               // 0x00E5(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRegenerateLODDuplicate : 1;                       // 0x00E5(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EParticleSystemUpdateMode                     SystemUpdateMode;                                  // 0x00E6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EParticleSystemLODMethod                      LODMethod;                                         // 0x00E7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EParticleSystemInsignificanceReaction         InsignificantReaction;                             // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EParticleSystemOcclusionBoundsMethod          OcclusionBoundsMethod;                             // 0x00E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x1];                                       // 0x00EA(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	EParticleSignificanceLevel                    MaxSignificanceLevel;                              // 0x00EB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MinTimeBetweenTicks;                               // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InsignificanceDelay;                               // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MacroUVPosition;                                   // 0x00F8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   CustomOcclusionBounds;                             // 0x0110(0x0038)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FLODSoloTrack>                  SoloTracking;                                      // 0x0148(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FNamedEmitterMaterial>          NamedMaterialSlots;                                // 0x0158(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ContainsEmitterType(class UClass* TypeData);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleSystem")
	}
	static class UParticleSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleSystem>();
	}
};
DUMPER7_ASSERTS_UParticleSystem;

// Class Engine.RectLightComponent
// 0x0020 (0x0430 - 0x0410)
class URectLightComponent final : public ULocalLightComponent
{
public:
	float                                         SourceWidth;                                       // 0x0408(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceHeight;                                      // 0x040C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarnDoorAngle;                                     // 0x0410(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarnDoorLength;                                    // 0x0414(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               SourceTexture;                                     // 0x0418(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_420[0x10];                                     // 0x0420(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBarnDoorAngle(float NewValue);
	void SetBarnDoorLength(float NewValue);
	void SetSourceHeight(float NewValue);
	void SetSourceTexture(class UTexture* NewValue);
	void SetSourceWidth(float NewValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RectLightComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RectLightComponent")
	}
	static class URectLightComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URectLightComponent>();
	}
};
DUMPER7_ASSERTS_URectLightComponent;

// Class Engine.ParticleModuleAccelerationConstant
// 0x0018 (0x0050 - 0x0038)
class UParticleModuleAccelerationConstant final : public UParticleModuleAccelerationBase
{
public:
	struct FVector                                Acceleration;                                      // 0x0038(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleAccelerationConstant")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleAccelerationConstant")
	}
	static class UParticleModuleAccelerationConstant* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleAccelerationConstant>();
	}
};
DUMPER7_ASSERTS_UParticleModuleAccelerationConstant;

// Class Engine.ParticleModuleAccelerationDragScaleOverLife
// 0x0038 (0x0070 - 0x0038)
class UParticleModuleAccelerationDragScaleOverLife final : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                     DragScale;                                         // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  DragScaleRaw;                                      // 0x0040(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleAccelerationDragScaleOverLife")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleAccelerationDragScaleOverLife")
	}
	static class UParticleModuleAccelerationDragScaleOverLife* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleAccelerationDragScaleOverLife>();
	}
};
DUMPER7_ASSERTS_UParticleModuleAccelerationDragScaleOverLife;

// Class Engine.SplineMetadata
// 0x0000 (0x0028 - 0x0028)
class USplineMetadata final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SplineMetadata")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SplineMetadata")
	}
	static class USplineMetadata* GetDefaultObj()
	{
		return GetDefaultObjImpl<USplineMetadata>();
	}
};
DUMPER7_ASSERTS_USplineMetadata;

// Class Engine.ParticleModuleAttractorParticle
// 0x0080 (0x00B0 - 0x0030)
class UParticleModuleAttractorParticle final : public UParticleModuleAttractorBase
{
public:
	class FName                                   EmitterName;                                       // 0x0030(0x0008)(Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  Range;                                             // 0x0038(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bStrengthByDistance : 1;                           // 0x0068(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionFloat                  Strength;                                          // 0x0070(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bAffectBaseVelocity : 1;                           // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EAttractorParticleSelectionMethod             SelectionMethod;                                   // 0x00A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bRenewSource : 1;                                  // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInheritSourceVel : 1;                             // 0x00A8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastSelIndex;                                      // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleAttractorParticle")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleAttractorParticle")
	}
	static class UParticleModuleAttractorParticle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleAttractorParticle>();
	}
};
DUMPER7_ASSERTS_UParticleModuleAttractorParticle;

// Class Engine.CameraShakeBase
// 0x00B8 (0x00E0 - 0x0028)
#pragma pack(push, 0x1)
class alignas(0x10) UCameraShakeBase : public UObject
{
public:
	bool                                          bSingleInstance;                                   // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShakeScale;                                        // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraShakePattern*                    RootShakePattern;                                  // 0x0030(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class APlayerCameraManager*                   CameraManager;                                     // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x98];                                      // 0x0040(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetRootShakePattern(class UCameraShakePattern* InPattern);

	class UCameraShakePattern* GetRootShakePattern() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CameraShakeBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CameraShakeBase")
	}
	static class UCameraShakeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraShakeBase>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_UCameraShakeBase;

// Class Engine.ParticleModuleBeamSource
// 0x0118 (0x0148 - 0x0030)
class UParticleModuleBeamSource final : public UParticleModuleBeamBase
{
public:
	EBeam2SourceTargetMethod                      SourceMethod;                                      // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SourceName;                                        // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bSourceAbsolute : 1;                               // 0x003C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionVector                 Source;                                            // 0x0040(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bLockSource : 1;                                   // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EBeam2SourceTargetTangentMethod               SourceTangentMethod;                               // 0x00A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionVector                 SourceTangent;                                     // 0x00A8(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bLockSourceTangent : 1;                            // 0x0108(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionFloat                  SourceStrength;                                    // 0x0110(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bLockSourceStength : 1;                            // 0x0140(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleBeamSource")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleBeamSource")
	}
	static class UParticleModuleBeamSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleBeamSource>();
	}
};
DUMPER7_ASSERTS_UParticleModuleBeamSource;

// Class Engine.ParticleModuleColorScaleOverLife
// 0x0098 (0x00C8 - 0x0030)
class UParticleModuleColorScaleOverLife final : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                 ColorScaleOverLife;                                // 0x0030(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  AlphaScaleOverLife;                                // 0x0090(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bEmitterTime : 1;                                  // 0x00C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleColorScaleOverLife")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleColorScaleOverLife")
	}
	static class UParticleModuleColorScaleOverLife* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleColorScaleOverLife>();
	}
};
DUMPER7_ASSERTS_UParticleModuleColorScaleOverLife;

// Class Engine.CurveLinearColorAtlas
// 0x0020 (0x02A0 - 0x0280)
class UCurveLinearColorAtlas final : public UTexture2D
{
public:
	uint32                                        TextureSize;                                       // 0x0278(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bSquareResolution : 1;                             // 0x027C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        TextureHeight;                                     // 0x0280(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCurveLinearColor*>              GradientCurves;                                    // 0x0288(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetCurvePosition(class UCurveLinearColor* InCurve, float* Position);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CurveLinearColorAtlas")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CurveLinearColorAtlas")
	}
	static class UCurveLinearColorAtlas* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurveLinearColorAtlas>();
	}
};
DUMPER7_ASSERTS_UCurveLinearColorAtlas;

// Class Engine.DebugCameraControllerSettings
// 0x0010 (0x0048 - 0x0038)
class UDebugCameraControllerSettings final : public UDeveloperSettings
{
public:
	TArray<struct FDebugCameraControllerSettingsViewModeIndex> CycleViewModes;                       // 0x0038(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DebugCameraControllerSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DebugCameraControllerSettings")
	}
	static class UDebugCameraControllerSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDebugCameraControllerSettings>();
	}
};
DUMPER7_ASSERTS_UDebugCameraControllerSettings;

// Class Engine.ParticleModuleKillHeight
// 0x0038 (0x0068 - 0x0030)
class UParticleModuleKillHeight final : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                  Height;                                            // 0x0030(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bAbsolute : 1;                                     // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFloor : 1;                                        // 0x0060(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bApplyPSysScale : 1;                               // 0x0060(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleKillHeight")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleKillHeight")
	}
	static class UParticleModuleKillHeight* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleKillHeight>();
	}
};
DUMPER7_ASSERTS_UParticleModuleKillHeight;

// Class Engine.ParticleModuleLightBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleLightBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLightBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLightBase")
	}
	static class UParticleModuleLightBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLightBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLightBase;

// Class Engine.ParticleModuleLight
// 0x0110 (0x0140 - 0x0030)
class UParticleModuleLight : public UParticleModuleLightBase
{
public:
	bool                                          bUseInverseSquaredFalloff;                         // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsTranslucency;                              // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bOverrideInverseExposureBlend : 1;                 // 0x0034(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bPreviewLightRadius;                               // 0x0038(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnFraction;                                     // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                 ColorScaleOverLife;                                // 0x0040(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  BrightnessOverLife;                                // 0x00A0(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  RadiusScale;                                       // 0x00D0(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  LightExponent;                                     // 0x0100(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         InverseExposureBlend;                              // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightingChannels                      LightingChannels;                                  // 0x0134(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumetricScatteringIntensity;                     // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHighQualityLights;                                // 0x013C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShadowCastingLights;                              // 0x013D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E[0x2];                                      // 0x013E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLight")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLight")
	}
	static class UParticleModuleLight* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLight>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLight;

// Class Engine.ParticleModuleLight_Seeded
// 0x0020 (0x0160 - 0x0140)
class UParticleModuleLight_Seeded final : public UParticleModuleLight
{
public:
	struct FParticleRandomSeedInfo                RandomSeedInfo;                                    // 0x0140(0x0020)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLight_Seeded")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLight_Seeded")
	}
	static class UParticleModuleLight_Seeded* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLight_Seeded>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLight_Seeded;

// Class Engine.InputDeviceTriggerVibrationProperty
// 0x0080 (0x00C0 - 0x0040)
class UInputDeviceTriggerVibrationProperty final : public UInputDeviceTriggerEffect
{
public:
	struct FDeviceTriggerTriggerVibrationData     TriggerData;                                       // 0x0040(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FDeviceTriggerTriggerVibrationData> DeviceOverrideData;                 // 0x0058(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x18];                                      // 0x00A8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InputDeviceTriggerVibrationProperty")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InputDeviceTriggerVibrationProperty")
	}
	static class UInputDeviceTriggerVibrationProperty* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputDeviceTriggerVibrationProperty>();
	}
};
DUMPER7_ASSERTS_UInputDeviceTriggerVibrationProperty;

// Class Engine.ParticleModuleLocation
// 0x0068 (0x0098 - 0x0030)
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                 StartLocation;                                     // 0x0030(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         DistributeOverNPoints;                             // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistributeThreshold;                               // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLocation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLocation")
	}
	static class UParticleModuleLocation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocation>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLocation;

// Class Engine.ParticleModuleLocationDirect
// 0x0180 (0x01B0 - 0x0030)
class UParticleModuleLocationDirect final : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                 Location;                                          // 0x0030(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                 LocationOffset;                                    // 0x0090(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                 ScaleFactor;                                       // 0x00F0(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                 Direction;                                         // 0x0150(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLocationDirect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLocationDirect")
	}
	static class UParticleModuleLocationDirect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocationDirect>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLocationDirect;

// Class Engine.SaveGame
// 0x0000 (0x0028 - 0x0028)
class USaveGame : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SaveGame")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SaveGame")
	}
	static class USaveGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<USaveGame>();
	}
};
DUMPER7_ASSERTS_USaveGame;

// Class Engine.ParticleModuleLocationEmitter
// 0x0020 (0x0050 - 0x0030)
class UParticleModuleLocationEmitter final : public UParticleModuleLocationBase
{
public:
	class FName                                   EmitterName;                                       // 0x0030(0x0008)(Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELocationEmitterSelectionMethod               SelectionMethod;                                   // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         InheritSourceVelocity : 1;                         // 0x003C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InheritSourceVelocityScale;                        // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bInheritSourceRotation : 1;                        // 0x0044(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InheritSourceRotationScale;                        // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLocationEmitter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLocationEmitter")
	}
	static class UParticleModuleLocationEmitter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocationEmitter>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLocationEmitter;

// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0008 (0x0038 - 0x0030)
class UParticleModuleLocationEmitterDirect final : public UParticleModuleLocationBase
{
public:
	class FName                                   EmitterName;                                       // 0x0030(0x0008)(Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLocationEmitterDirect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLocationEmitterDirect")
	}
	static class UParticleModuleLocationEmitterDirect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocationEmitterDirect>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLocationEmitterDirect;

// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x0098 (0x00C8 - 0x0030)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	uint8                                         Positive_X : 1;                                    // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Positive_Y : 1;                                    // 0x0030(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Positive_Z : 1;                                    // 0x0030(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Negative_X : 1;                                    // 0x0030(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Negative_Y : 1;                                    // 0x0030(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Negative_Z : 1;                                    // 0x0030(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         SurfaceOnly : 1;                                   // 0x0030(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Velocity : 1;                                      // 0x0030(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionFloat                  VelocityScale;                                     // 0x0038(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                 StartLocation;                                     // 0x0068(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLocationPrimitiveBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLocationPrimitiveBase")
	}
	static class UParticleModuleLocationPrimitiveBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocationPrimitiveBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLocationPrimitiveBase;

// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x0070 (0x0138 - 0x00C8)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	uint8                                         RadialVelocity : 1;                                // 0x00C8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionFloat                  StartRadius;                                       // 0x00D0(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  StartHeight;                                       // 0x0100(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ECylinderHeightAxis                           HeightAxis;                                        // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLocationPrimitiveCylinder")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLocationPrimitiveCylinder")
	}
	static class UParticleModuleLocationPrimitiveCylinder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocationPrimitiveCylinder>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLocationPrimitiveCylinder;

// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// 0x0020 (0x0158 - 0x0138)
class UParticleModuleLocationPrimitiveCylinder_Seeded final : public UParticleModuleLocationPrimitiveCylinder
{
public:
	struct FParticleRandomSeedInfo                RandomSeedInfo;                                    // 0x0138(0x0020)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLocationPrimitiveCylinder_Seeded")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLocationPrimitiveCylinder_Seeded")
	}
	static class UParticleModuleLocationPrimitiveCylinder_Seeded* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocationPrimitiveCylinder_Seeded>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLocationPrimitiveCylinder_Seeded;

// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x0030 (0x00F8 - 0x00C8)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                  StartRadius;                                       // 0x00C8(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLocationPrimitiveSphere")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLocationPrimitiveSphere")
	}
	static class UParticleModuleLocationPrimitiveSphere* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocationPrimitiveSphere>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLocationPrimitiveSphere;

// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// 0x0020 (0x0118 - 0x00F8)
class UParticleModuleLocationPrimitiveSphere_Seeded final : public UParticleModuleLocationPrimitiveSphere
{
public:
	struct FParticleRandomSeedInfo                RandomSeedInfo;                                    // 0x00F8(0x0020)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLocationPrimitiveSphere_Seeded")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLocationPrimitiveSphere_Seeded")
	}
	static class UParticleModuleLocationPrimitiveSphere_Seeded* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocationPrimitiveSphere_Seeded>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLocationPrimitiveSphere_Seeded;

// Class Engine.ParticleModuleLocationPrimitiveTriangle
// 0x00F0 (0x0120 - 0x0030)
class UParticleModuleLocationPrimitiveTriangle final : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                 StartOffset;                                       // 0x0030(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  Height;                                            // 0x0090(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  Angle;                                             // 0x00C0(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  Thickness;                                         // 0x00F0(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLocationPrimitiveTriangle")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLocationPrimitiveTriangle")
	}
	static class UParticleModuleLocationPrimitiveTriangle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocationPrimitiveTriangle>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLocationPrimitiveTriangle;

// Class Engine.GameSession
// 0x0018 (0x02B0 - 0x0298)
class AGameSession : public AInfo
{
public:
	int32                                         MaxSpectators;                                     // 0x0298(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x029C(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPartySize;                                      // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaxSplitscreensPerConnection;                      // 0x02A4(0x0001)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequiresPushToTalk;                               // 0x02A5(0x0001)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A6[0x2];                                      // 0x02A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SessionName;                                       // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GameSession")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GameSession")
	}
	static class AGameSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameSession>();
	}
};
DUMPER7_ASSERTS_AGameSession;

// Class Engine.ParticleModuleLocationSkelVertSurface
// 0x0080 (0x00B0 - 0x0030)
class UParticleModuleLocationSkelVertSurface final : public UParticleModuleLocationBase
{
public:
	ELocationSkelVertSurfaceSource                SourceType;                                        // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                UniversalOffset;                                   // 0x0038(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUpdatePositionEachFrame : 1;                      // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOrientMeshEmitters : 1;                           // 0x0050(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInheritBoneVelocity : 1;                          // 0x0050(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InheritVelocityScale;                              // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkelMeshActorParamName;                            // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ValidAssociatedBones;                              // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bEnforceNormalCheck : 1;                           // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NormalToCompare;                                   // 0x0078(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalCheckToleranceDegrees;                       // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalCheckTolerance;                              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ValidMaterialIndices;                              // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bInheritVertexColor : 1;                           // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInheritUV : 1;                                    // 0x00A8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        InheritUVChannel;                                  // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLocationSkelVertSurface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLocationSkelVertSurface")
	}
	static class UParticleModuleLocationSkelVertSurface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocationSkelVertSurface>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLocationSkelVertSurface;

// Class Engine.ParticleModuleLocationWorldOffset
// 0x0000 (0x0098 - 0x0098)
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLocationWorldOffset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLocationWorldOffset")
	}
	static class UParticleModuleLocationWorldOffset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocationWorldOffset>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLocationWorldOffset;

// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// 0x0020 (0x00B8 - 0x0098)
class UParticleModuleLocationWorldOffset_Seeded final : public UParticleModuleLocationWorldOffset
{
public:
	struct FParticleRandomSeedInfo                RandomSeedInfo;                                    // 0x0098(0x0020)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLocationWorldOffset_Seeded")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLocationWorldOffset_Seeded")
	}
	static class UParticleModuleLocationWorldOffset_Seeded* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocationWorldOffset_Seeded>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLocationWorldOffset_Seeded;

// Class Engine.AssetMappingTable
// 0x0010 (0x0038 - 0x0028)
class UAssetMappingTable final : public UObject
{
public:
	TArray<struct FAssetMapping>                  MappedAssets;                                      // 0x0028(0x0010)(Edit, EditFixedSize, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AssetMappingTable")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AssetMappingTable")
	}
	static class UAssetMappingTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetMappingTable>();
	}
};
DUMPER7_ASSERTS_UAssetMappingTable;

// Class Engine.ParticleModuleLocation_Seeded
// 0x0020 (0x00B8 - 0x0098)
class UParticleModuleLocation_Seeded final : public UParticleModuleLocation
{
public:
	struct FParticleRandomSeedInfo                RandomSeedInfo;                                    // 0x0098(0x0020)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleLocation_Seeded")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleLocation_Seeded")
	}
	static class UParticleModuleLocation_Seeded* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleLocation_Seeded>();
	}
};
DUMPER7_ASSERTS_UParticleModuleLocation_Seeded;

// Class Engine.ActorElementAssetDataInterface
// 0x0008 (0x0030 - 0x0028)
class UActorElementAssetDataInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActorElementAssetDataInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActorElementAssetDataInterface")
	}
	static class UActorElementAssetDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorElementAssetDataInterface>();
	}
};
DUMPER7_ASSERTS_UActorElementAssetDataInterface;

// Class Engine.ParticleModuleMaterialBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleMaterialBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleMaterialBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleMaterialBase")
	}
	static class UParticleModuleMaterialBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleMaterialBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleMaterialBase;

// Class Engine.ParticleModuleMeshMaterial
// 0x0010 (0x0040 - 0x0030)
class UParticleModuleMeshMaterial final : public UParticleModuleMaterialBase
{
public:
	TArray<class UMaterialInterface*>             MeshMaterials;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleMeshMaterial")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleMeshMaterial")
	}
	static class UParticleModuleMeshMaterial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleMeshMaterial>();
	}
};
DUMPER7_ASSERTS_UParticleModuleMeshMaterial;

// Class Engine.ParticleModuleRotationBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleRotationBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleRotationBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleRotationBase")
	}
	static class UParticleModuleRotationBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleRotationBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleRotationBase;

// Class Engine.BoneMaskFilter
// 0x0010 (0x0038 - 0x0028)
class UBoneMaskFilter final : public UObject
{
public:
	TArray<struct FInputBlendPose>                BlendPoses;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BoneMaskFilter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BoneMaskFilter")
	}
	static class UBoneMaskFilter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBoneMaskFilter>();
	}
};
DUMPER7_ASSERTS_UBoneMaskFilter;

// Class Engine.ParticleModuleMeshRotation
// 0x0068 (0x0098 - 0x0030)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                 StartRotation;                                     // 0x0030(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bInheritParent : 1;                                // 0x0090(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleMeshRotation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleMeshRotation")
	}
	static class UParticleModuleMeshRotation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleMeshRotation>();
	}
};
DUMPER7_ASSERTS_UParticleModuleMeshRotation;

// Class Engine.ActorElementSelectionInterface
// 0x0008 (0x0030 - 0x0028)
class UActorElementSelectionInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActorElementSelectionInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActorElementSelectionInterface")
	}
	static class UActorElementSelectionInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorElementSelectionInterface>();
	}
};
DUMPER7_ASSERTS_UActorElementSelectionInterface;

// Class Engine.ParticleModuleRotationRateBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleRotationRateBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleRotationRateBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleRotationRateBase")
	}
	static class UParticleModuleRotationRateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleRotationRateBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleRotationRateBase;

// Class Engine.ParticleModuleMeshRotationRate
// 0x0060 (0x0090 - 0x0030)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                 StartRotationRate;                                 // 0x0030(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleMeshRotationRate")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleMeshRotationRate")
	}
	static class UParticleModuleMeshRotationRate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleMeshRotationRate>();
	}
};
DUMPER7_ASSERTS_UParticleModuleMeshRotationRate;

// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x0060 (0x0090 - 0x0030)
class UParticleModuleMeshRotationRateMultiplyLife final : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                 LifeMultiplier;                                    // 0x0030(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleMeshRotationRateMultiplyLife")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleMeshRotationRateMultiplyLife")
	}
	static class UParticleModuleMeshRotationRateMultiplyLife* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleMeshRotationRateMultiplyLife>();
	}
};
DUMPER7_ASSERTS_UParticleModuleMeshRotationRateMultiplyLife;

// Class Engine.ParticleModuleMeshRotationRateOverLife
// 0x0068 (0x0098 - 0x0030)
class UParticleModuleMeshRotationRateOverLife final : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                 RotRate;                                           // 0x0030(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bScaleRotRate : 1;                                 // 0x0090(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleMeshRotationRateOverLife")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleMeshRotationRateOverLife")
	}
	static class UParticleModuleMeshRotationRateOverLife* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleMeshRotationRateOverLife>();
	}
};
DUMPER7_ASSERTS_UParticleModuleMeshRotationRateOverLife;

// Class Engine.ComponentElementObjectInterface
// 0x0008 (0x0030 - 0x0028)
class UComponentElementObjectInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComponentElementObjectInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComponentElementObjectInterface")
	}
	static class UComponentElementObjectInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComponentElementObjectInterface>();
	}
};
DUMPER7_ASSERTS_UComponentElementObjectInterface;

// Class Engine.ParticleModuleMeshRotationRate_Seeded
// 0x0020 (0x00B0 - 0x0090)
class UParticleModuleMeshRotationRate_Seeded final : public UParticleModuleMeshRotationRate
{
public:
	struct FParticleRandomSeedInfo                RandomSeedInfo;                                    // 0x0090(0x0020)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleMeshRotationRate_Seeded")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleMeshRotationRate_Seeded")
	}
	static class UParticleModuleMeshRotationRate_Seeded* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleMeshRotationRate_Seeded>();
	}
};
DUMPER7_ASSERTS_UParticleModuleMeshRotationRate_Seeded;

// Class Engine.ParticleModuleMeshRotation_Seeded
// 0x0020 (0x00B8 - 0x0098)
class UParticleModuleMeshRotation_Seeded final : public UParticleModuleMeshRotation
{
public:
	struct FParticleRandomSeedInfo                RandomSeedInfo;                                    // 0x0098(0x0020)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleMeshRotation_Seeded")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleMeshRotation_Seeded")
	}
	static class UParticleModuleMeshRotation_Seeded* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleMeshRotation_Seeded>();
	}
};
DUMPER7_ASSERTS_UParticleModuleMeshRotation_Seeded;

// Class Engine.ParticleModuleOrbitBase
// 0x0008 (0x0038 - 0x0030)
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	uint8                                         bUseEmitterTime : 1;                               // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleOrbitBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleOrbitBase")
	}
	static class UParticleModuleOrbitBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleOrbitBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleOrbitBase;

// Class Engine.PoseAsset
// 0x0090 (0x0110 - 0x0080)
class UPoseAsset final : public UAnimationAsset
{
public:
	struct FPoseDataContainer                     PoseContainer;                                     // 0x0080(0x0070)(NativeAccessSpecifierPrivate)
	bool                                          bAdditivePose;                                     // 0x00F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BasePoseIndex;                                     // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RetargetSource;                                    // 0x00F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     RetargetSourceAssetReferencePose;                  // 0x0100(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PoseAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PoseAsset")
	}
	static class UPoseAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseAsset>();
	}
};
DUMPER7_ASSERTS_UPoseAsset;

// Class Engine.ParticleModuleOrbit
// 0x0140 (0x0178 - 0x0038)
class UParticleModuleOrbit final : public UParticleModuleOrbitBase
{
public:
	EOrbitChainMode                               ChainMode;                                         // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionVector                 OffsetAmount;                                      // 0x0040(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FOrbitOptions                          OffsetOptions;                                     // 0x00A0(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionVector                 RotationAmount;                                    // 0x00A8(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FOrbitOptions                          RotationOptions;                                   // 0x0108(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionVector                 RotationRateAmount;                                // 0x0110(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FOrbitOptions                          RotationRateOptions;                               // 0x0170(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleOrbit")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleOrbit")
	}
	static class UParticleModuleOrbit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleOrbit>();
	}
};
DUMPER7_ASSERTS_UParticleModuleOrbit;

// Class Engine.TypedElementCommonActions
// 0x0800 (0x0828 - 0x0028)
class UTypedElementCommonActions final : public UObject
{
public:
	uint8                                         Pad_28[0x800];                                     // 0x0028(0x0800)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CopyNormalizedElements(const struct FScriptTypedElementListProxy& ElementList);
	bool CopyNormalizedElementsToString(const struct FScriptTypedElementListProxy& ElementList, class FString* OutputString);
	bool CopySelectedElements(class UTypedElementSelectionSet* SelectionSet);
	bool CopySelectedElementsToString(class UTypedElementSelectionSet* SelectionSet, class FString* OutputString);
	bool DeleteNormalizedElements(const struct FScriptTypedElementListProxy& ElementList, class UWorld* World, class UTypedElementSelectionSet* InSelectionSet, const struct FTypedElementDeletionOptions& DeletionOptions);
	bool DeleteSelectedElements(class UTypedElementSelectionSet* SelectionSet, class UWorld* World, const struct FTypedElementDeletionOptions& DeletionOptions);
	TArray<struct FScriptTypedElementHandle> DuplicateNormalizedElements(const struct FScriptTypedElementListProxy& ElementList, class UWorld* World, const struct FVector& LocationOffset);
	TArray<struct FScriptTypedElementHandle> K2_DuplicateSelectedElements(const class UTypedElementSelectionSet* SelectionSet, class UWorld* World, const struct FVector& LocationOffset);
	TArray<struct FScriptTypedElementHandle> K2_PasteElements(class UTypedElementSelectionSet* SelectionSet, class UWorld* World, const struct FTypedElementPasteOptions& PasteOption);
	TArray<struct FScriptTypedElementHandle> K2_PasteNormalizedElements(const struct FScriptTypedElementListProxy& ElementList, class UWorld* World, const struct FTypedElementPasteOptions& PasteOption);
	TArray<struct FScriptTypedElementHandle> PasteElementsFromString(class UTypedElementSelectionSet* SelectionSet, class UWorld* World, const struct FTypedElementPasteOptions& PasteOption, const class FString& InputString);
	TArray<struct FScriptTypedElementHandle> PasteNormalizedElementsFromString(const struct FScriptTypedElementListProxy& ElementList, class UWorld* World, const struct FTypedElementPasteOptions& PasteOption, const class FString& InputString);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TypedElementCommonActions")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TypedElementCommonActions")
	}
	static class UTypedElementCommonActions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTypedElementCommonActions>();
	}
};
DUMPER7_ASSERTS_UTypedElementCommonActions;

// Class Engine.ParticleModuleOrientationBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleOrientationBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleOrientationBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleOrientationBase")
	}
	static class UParticleModuleOrientationBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleOrientationBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleOrientationBase;

// Class Engine.ParticleModuleOrientationAxisLock
// 0x0008 (0x0038 - 0x0030)
class UParticleModuleOrientationAxisLock final : public UParticleModuleOrientationBase
{
public:
	EParticleAxisLock                             LockAxisFlags;                                     // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleOrientationAxisLock")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleOrientationAxisLock")
	}
	static class UParticleModuleOrientationAxisLock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleOrientationAxisLock>();
	}
};
DUMPER7_ASSERTS_UParticleModuleOrientationAxisLock;

// Class Engine.ParticleModuleParameterBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleParameterBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleParameterBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleParameterBase")
	}
	static class UParticleModuleParameterBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleParameterBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleParameterBase;

// Class Engine.ParticleModuleParameterDynamic
// 0x0018 (0x0048 - 0x0030)
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray<struct FEmitterDynamicParameter>       DynamicParams;                                     // 0x0030(0x0010)(Edit, EditFixedSize, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         UpdateFlags;                                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUsesVelocity : 1;                                 // 0x0044(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleParameterDynamic")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleParameterDynamic")
	}
	static class UParticleModuleParameterDynamic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleParameterDynamic>();
	}
};
DUMPER7_ASSERTS_UParticleModuleParameterDynamic;

// Class Engine.VolumetricCloudComponent
// 0x0070 (0x0310 - 0x02A0)
class UVolumetricCloudComponent final : public USceneComponent
{
public:
	float                                         LayerBottomAltitude;                               // 0x02A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LayerHeight;                                       // 0x02A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TracingStartMaxDistance;                           // 0x02A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVolumetricCloudTracingMaxDistanceMode        TracingMaxDistanceMode;                            // 0x02AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TracingMaxDistance;                                // 0x02B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlanetRadius;                                      // 0x02B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GroundAlbedo;                                      // 0x02B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUsePerSampleAtmosphericLightTransmittance : 1;    // 0x02C8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkyLightCloudBottomOcclusion;                      // 0x02CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewSampleCountScale;                              // 0x02D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionViewSampleCountScaleValue;               // 0x02D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionViewSampleCountScale;                    // 0x02D8(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionSampleCountScale;                        // 0x02DC(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowViewSampleCountScale;                        // 0x02E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowReflectionViewSampleCountScaleValue;         // 0x02E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowReflectionViewSampleCountScale;              // 0x02E8(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowReflectionSampleCountScale;                  // 0x02EC(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowTracingDistance;                             // 0x02F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopTracingTransmittanceThreshold;                 // 0x02F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialPespectiveRayleighScatteringStartDistance;   // 0x02F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialPespectiveRayleighScatteringFadeDistance;    // 0x02FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialPespectiveMieScatteringStartDistance;        // 0x0300(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialPespectiveMieScatteringFadeDistance;         // 0x0304(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_308[0x8];                                      // 0x0308(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue);
	void SetGroundAlbedo(const struct FColor& NewValue);
	void SetLayerBottomAltitude(float NewValue);
	void SetLayerHeight(float NewValue);
	void SetMaterial(class UMaterialInterface* NewValue);
	void SetPlanetRadius(float NewValue);
	void SetReflectionSampleCountScale(float NewValue);
	void SetReflectionViewSampleCountScale(float NewValue);
	void SetShadowReflectionSampleCountScale(float NewValue);
	void SetShadowReflectionViewSampleCountScale(float NewValue);
	void SetShadowTracingDistance(float NewValue);
	void SetShadowViewSampleCountScale(float NewValue);
	void SetSkyLightCloudBottomOcclusion(float NewValue);
	void SetStopTracingTransmittanceThreshold(float NewValue);
	void SetTracingMaxDistance(float NewValue);
	void SetTracingStartMaxDistance(float NewValue);
	void SetViewSampleCountScale(float NewValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VolumetricCloudComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VolumetricCloudComponent")
	}
	static class UVolumetricCloudComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVolumetricCloudComponent>();
	}
};
DUMPER7_ASSERTS_UVolumetricCloudComponent;

// Class Engine.ParticleModuleParameterDynamic_Seeded
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleParameterDynamic_Seeded final : public UParticleModuleParameterDynamic
{
public:
	struct FParticleRandomSeedInfo                RandomSeedInfo;                                    // 0x0048(0x0020)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleParameterDynamic_Seeded")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleParameterDynamic_Seeded")
	}
	static class UParticleModuleParameterDynamic_Seeded* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleParameterDynamic_Seeded>();
	}
};
DUMPER7_ASSERTS_UParticleModuleParameterDynamic_Seeded;

// Class Engine.ParticleModulePivotOffset
// 0x0010 (0x0040 - 0x0030)
class UParticleModulePivotOffset final : public UParticleModuleLocationBase
{
public:
	struct FVector2D                              PivotOffset;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModulePivotOffset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModulePivotOffset")
	}
	static class UParticleModulePivotOffset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModulePivotOffset>();
	}
};
DUMPER7_ASSERTS_UParticleModulePivotOffset;

// Class Engine.ParticleModuleRequired
// 0x0148 (0x0178 - 0x0030)
class UParticleModuleRequired final : public UParticleModule
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFacingCameraBlendDistance;                      // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFacingCameraBlendDistance;                      // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EmitterOrigin;                                     // 0x0040(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               EmitterRotation;                                   // 0x0058(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EParticleScreenAlignment                      ScreenAlignment;                                   // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseLocalSpace : 1;                                // 0x0071(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bKillOnDeactivate : 1;                             // 0x0071(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bKillOnCompleted : 1;                              // 0x0071(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EParticleSortMode                             SortMode;                                          // 0x0072(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseLegacyEmitterTime : 1;                         // 0x0073(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRemoveHMDRoll : 1;                                // 0x0073(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportLargeWorldCoordinates : 1;                 // 0x0073(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEmitterDurationUseRange : 1;                      // 0x0073(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideUseVelocityForMotionBlur : 1;             // 0x0073(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseVelocityForMotionBlur : 1;                     // 0x0073(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	float                                         EmitterDuration;                                   // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  SpawnRate;                                         // 0x0078(0x0030)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FParticleBurst>                 BurstList;                                         // 0x00A8(0x0010)(ExportObject, ZeroConstructor, NoClear, NativeAccessSpecifierPublic)
	float                                         EmitterDelay;                                      // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitterDelayLow;                                   // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDelayFirstLoopOnly : 1;                           // 0x00C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EParticleSubUVInterpMethod                    InterpolationMethod;                               // 0x00C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bScaleUV : 1;                                      // 0x00C2(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEmitterDelayUseRange : 1;                         // 0x00C2(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EParticleBurstMethod                          ParticleBurstMethod;                               // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverrideSystemMacroUV : 1;                        // 0x00C4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseMaxDrawCount : 1;                              // 0x00C4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EOpacitySourceMode                            OpacitySourceMode;                                 // 0x00C5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmitterNormalsMode                           EmitterNormalsMode;                                // 0x00C6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOrbitModuleAffectsVelocityAlignment : 1;          // 0x00C7(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	int32                                         SubImages_Horizontal;                              // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubImages_Vertical;                                // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomImageTime;                                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomImageChanges;                                // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MacroUVPosition;                                   // 0x00D8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MacroUVRadius;                                     // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EParticleUVFlipMode                           UVFlippingMode;                                    // 0x00F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubUVBoundingVertexCount                     BoundingMode;                                      // 0x00F5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDurationRecalcEachLoop : 1;                       // 0x00F6(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F7[0x1];                                       // 0x00F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NormalsSphereCenter;                               // 0x00F8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaThreshold;                                    // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmitterLoops;                                      // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CutoutTexture;                                     // 0x0118(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxDrawCount;                                      // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitterDurationLow;                                // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalsCylinderDirection;                          // 0x0128(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NamedMaterialOverrides;                            // 0x0140(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x28];                                     // 0x0150(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleRequired")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleRequired")
	}
	static class UParticleModuleRequired* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleRequired>();
	}
};
DUMPER7_ASSERTS_UParticleModuleRequired;

// Class Engine.ParticleModuleRotation
// 0x0030 (0x0060 - 0x0030)
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                  StartRotation;                                     // 0x0030(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleRotation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleRotation")
	}
	static class UParticleModuleRotation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleRotation>();
	}
};
DUMPER7_ASSERTS_UParticleModuleRotation;

// Class Engine.CurveTable
// 0x0078 (0x00A0 - 0x0028)
class UCurveTable : public UObject
{
public:
	uint8                                         Pad_28[0x78];                                      // 0x0028(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CurveTable")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CurveTable")
	}
	static class UCurveTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurveTable>();
	}
};
DUMPER7_ASSERTS_UCurveTable;

// Class Engine.CompositeCurveTable
// 0x0028 (0x00C8 - 0x00A0)
class UCompositeCurveTable final : public UCurveTable
{
public:
	TArray<class UCurveTable*>                    ParentTables;                                      // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UCurveTable*>                    OldParentTables;                                   // 0x00B0(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_C0[0x8];                                       // 0x00C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompositeCurveTable")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompositeCurveTable")
	}
	static class UCompositeCurveTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompositeCurveTable>();
	}
};
DUMPER7_ASSERTS_UCompositeCurveTable;

// Class Engine.ParticleModuleRotationOverLifetime
// 0x0038 (0x0068 - 0x0030)
class UParticleModuleRotationOverLifetime final : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                  RotationOverLife;                                  // 0x0030(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Scale : 1;                                         // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleRotationOverLifetime")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleRotationOverLifetime")
	}
	static class UParticleModuleRotationOverLifetime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleRotationOverLifetime>();
	}
};
DUMPER7_ASSERTS_UParticleModuleRotationOverLifetime;

// Class Engine.ParticleModuleRotationRate
// 0x0030 (0x0060 - 0x0030)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                  StartRotationRate;                                 // 0x0030(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleRotationRate")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleRotationRate")
	}
	static class UParticleModuleRotationRate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleRotationRate>();
	}
};
DUMPER7_ASSERTS_UParticleModuleRotationRate;

// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x0030 (0x0060 - 0x0030)
class UParticleModuleRotationRateMultiplyLife final : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                  LifeMultiplier;                                    // 0x0030(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleRotationRateMultiplyLife")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleRotationRateMultiplyLife")
	}
	static class UParticleModuleRotationRateMultiplyLife* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleRotationRateMultiplyLife>();
	}
};
DUMPER7_ASSERTS_UParticleModuleRotationRateMultiplyLife;

// Class Engine.ParticleModuleRotationRate_Seeded
// 0x0020 (0x0080 - 0x0060)
class UParticleModuleRotationRate_Seeded final : public UParticleModuleRotationRate
{
public:
	struct FParticleRandomSeedInfo                RandomSeedInfo;                                    // 0x0060(0x0020)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleRotationRate_Seeded")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleRotationRate_Seeded")
	}
	static class UParticleModuleRotationRate_Seeded* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleRotationRate_Seeded>();
	}
};
DUMPER7_ASSERTS_UParticleModuleRotationRate_Seeded;

// Class Engine.ClassCookedMetaData
// 0x00F0 (0x0118 - 0x0028)
class UClassCookedMetaData final : public UObject
{
public:
	struct FStructCookedMetaDataStore             ClassMetaData;                                     // 0x0028(0x00A0)(Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FStructCookedMetaDataStore> FunctionsMetaData;                          // 0x00C8(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ClassCookedMetaData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ClassCookedMetaData")
	}
	static class UClassCookedMetaData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UClassCookedMetaData>();
	}
};
DUMPER7_ASSERTS_UClassCookedMetaData;

// Class Engine.ParticleModuleRotation_Seeded
// 0x0020 (0x0080 - 0x0060)
class UParticleModuleRotation_Seeded final : public UParticleModuleRotation
{
public:
	struct FParticleRandomSeedInfo                RandomSeedInfo;                                    // 0x0060(0x0020)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleRotation_Seeded")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleRotation_Seeded")
	}
	static class UParticleModuleRotation_Seeded* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleRotation_Seeded>();
	}
};
DUMPER7_ASSERTS_UParticleModuleRotation_Seeded;

// Class Engine.ParticleModuleSizeBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleSizeBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleSizeBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleSizeBase")
	}
	static class UParticleModuleSizeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleSizeBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleSizeBase;

// Class Engine.ParticleModuleSize
// 0x0060 (0x0090 - 0x0030)
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                 StartSize;                                         // 0x0030(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleSize")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleSize")
	}
	static class UParticleModuleSize* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleSize>();
	}
};
DUMPER7_ASSERTS_UParticleModuleSize;

// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0068 (0x0098 - 0x0030)
class UParticleModuleSizeMultiplyLife final : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                 LifeMultiplier;                                    // 0x0030(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         MultiplyX : 1;                                     // 0x0090(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         MultiplyY : 1;                                     // 0x0090(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         MultiplyZ : 1;                                     // 0x0090(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleSizeMultiplyLife")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleSizeMultiplyLife")
	}
	static class UParticleModuleSizeMultiplyLife* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleSizeMultiplyLife>();
	}
};
DUMPER7_ASSERTS_UParticleModuleSizeMultiplyLife;

// Class Engine.CurveBase
// 0x0008 (0x0030 - 0x0028)
class UCurveBase : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetTimeRange(float* MinTime, float* MaxTime) const;
	void GetValueRange(float* MinValue, float* MaxValue) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CurveBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CurveBase")
	}
	static class UCurveBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurveBase>();
	}
};
DUMPER7_ASSERTS_UCurveBase;

// Class Engine.ParticleModuleSizeScale
// 0x0068 (0x0098 - 0x0030)
class UParticleModuleSizeScale final : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                 SizeScale;                                         // 0x0030(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         EnableX : 1;                                       // 0x0090(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         EnableY : 1;                                       // 0x0090(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         EnableZ : 1;                                       // 0x0090(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleSizeScale")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleSizeScale")
	}
	static class UParticleModuleSizeScale* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleSizeScale>();
	}
};
DUMPER7_ASSERTS_UParticleModuleSizeScale;

// Class Engine.ParticleModuleSizeScaleBySpeed
// 0x0020 (0x0050 - 0x0030)
class UParticleModuleSizeScaleBySpeed final : public UParticleModuleSizeBase
{
public:
	struct FVector2D                              SpeedScale;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MaxScale;                                          // 0x0040(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleSizeScaleBySpeed")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleSizeScaleBySpeed")
	}
	static class UParticleModuleSizeScaleBySpeed* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleSizeScaleBySpeed>();
	}
};
DUMPER7_ASSERTS_UParticleModuleSizeScaleBySpeed;

// Class Engine.ParticleModuleSize_Seeded
// 0x0020 (0x00B0 - 0x0090)
class UParticleModuleSize_Seeded final : public UParticleModuleSize
{
public:
	struct FParticleRandomSeedInfo                RandomSeedInfo;                                    // 0x0090(0x0020)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleSize_Seeded")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleSize_Seeded")
	}
	static class UParticleModuleSize_Seeded* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleSize_Seeded>();
	}
};
DUMPER7_ASSERTS_UParticleModuleSize_Seeded;

// Class Engine.ParticleModuleSourceMovement
// 0x0060 (0x0090 - 0x0030)
class UParticleModuleSourceMovement final : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                 SourceMovementScale;                               // 0x0030(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleSourceMovement")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleSourceMovement")
	}
	static class UParticleModuleSourceMovement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleSourceMovement>();
	}
};
DUMPER7_ASSERTS_UParticleModuleSourceMovement;

// Class Engine.PoseWatch
// 0x0000 (0x0028 - 0x0028)
class UPoseWatch final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PoseWatch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PoseWatch")
	}
	static class UPoseWatch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseWatch>();
	}
};
DUMPER7_ASSERTS_UPoseWatch;

// Class Engine.ParticleModuleSpawnBase
// 0x0008 (0x0038 - 0x0030)
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	uint8                                         bProcessSpawnRate : 1;                             // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bProcessBurstList : 1;                             // 0x0030(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleSpawnBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleSpawnBase")
	}
	static class UParticleModuleSpawnBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleSpawnBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleSpawnBase;

// Class Engine.ParticleModuleSpawn
// 0x00A8 (0x00E0 - 0x0038)
class UParticleModuleSpawn final : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                  Rate;                                              // 0x0038(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  RateScale;                                         // 0x0068(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FParticleBurst>                 BurstList;                                         // 0x0098(0x0010)(Edit, ExportObject, ZeroConstructor, NoClear, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  BurstScale;                                        // 0x00A8(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EParticleBurstMethod                          ParticleBurstMethod;                               // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bApplyGlobalSpawnRateScale : 1;                    // 0x00DC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleSpawn")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleSpawn")
	}
	static class UParticleModuleSpawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleSpawn>();
	}
};
DUMPER7_ASSERTS_UParticleModuleSpawn;

// Class Engine.ParticleModuleSpawnPerUnit
// 0x0040 (0x0078 - 0x0038)
class UParticleModuleSpawnPerUnit final : public UParticleModuleSpawnBase
{
public:
	float                                         UnitScalar;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementTolerance;                                 // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  SpawnPerUnit;                                      // 0x0040(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         MaxFrameDistance;                                  // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIgnoreSpawnRateWhenMoving : 1;                    // 0x0074(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreMovementAlongX : 1;                         // 0x0074(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreMovementAlongY : 1;                         // 0x0074(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreMovementAlongZ : 1;                         // 0x0074(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleSpawnPerUnit")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleSpawnPerUnit")
	}
	static class UParticleModuleSpawnPerUnit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleSpawnPerUnit>();
	}
};
DUMPER7_ASSERTS_UParticleModuleSpawnPerUnit;

// Class Engine.FloatingPawnMovement
// 0x0018 (0x0170 - 0x0158)
class UFloatingPawnMovement : public UPawnMovementComponent
{
public:
	float                                         MaxSpeed;                                          // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deceleration;                                      // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurningBoost;                                      // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPositionCorrected : 1;                            // 0x0168(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FloatingPawnMovement")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FloatingPawnMovement")
	}
	static class UFloatingPawnMovement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFloatingPawnMovement>();
	}
};
DUMPER7_ASSERTS_UFloatingPawnMovement;

// Class Engine.ParticleModuleSubUVMovie
// 0x0040 (0x00B0 - 0x0070)
class UParticleModuleSubUVMovie final : public UParticleModuleSubUV
{
public:
	uint8                                         bUseEmitterTime : 1;                               // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionFloat                  FrameRate;                                         // 0x0078(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         StartingFrame;                                     // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleSubUVMovie")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleSubUVMovie")
	}
	static class UParticleModuleSubUVMovie* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleSubUVMovie>();
	}
};
DUMPER7_ASSERTS_UParticleModuleSubUVMovie;

// Class Engine.ParticleModuleTrailBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleTrailBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleTrailBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleTrailBase")
	}
	static class UParticleModuleTrailBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleTrailBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleTrailBase;

// Class Engine.ParticleModuleTrailSource
// 0x0060 (0x0090 - 0x0030)
class UParticleModuleTrailSource final : public UParticleModuleTrailBase
{
public:
	ETrail2SourceMethod                           SourceMethod;                                      // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SourceName;                                        // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRawDistributionFloat                  SourceStrength;                                    // 0x0040(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bLockSourceStength : 1;                            // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SourceOffsetCount;                                 // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        SourceOffsetDefaults;                              // 0x0078(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	EParticleSourceSelectionMethod                SelectionMethod;                                   // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bInheritRotation : 1;                              // 0x008C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleTrailSource")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleTrailSource")
	}
	static class UParticleModuleTrailSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleTrailSource>();
	}
};
DUMPER7_ASSERTS_UParticleModuleTrailSource;

// Class Engine.AsyncActionHandleSaveGame
// 0x0038 (0x0068 - 0x0030)
class UAsyncActionHandleSaveGame final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(class USaveGame* SaveGame, bool bSuccess)> Completed;              // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x20];                                      // 0x0040(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveGame*                              SaveGameObject;                                    // 0x0060(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UAsyncActionHandleSaveGame* AsyncLoadGameFromSlot(class UObject* WorldContextObject, const class FString& SlotName, const int32 UserIndex);
	static class UAsyncActionHandleSaveGame* AsyncSaveGameToSlot(class UObject* WorldContextObject, class USaveGame* SaveGameObject_0, const class FString& SlotName, const int32 UserIndex);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AsyncActionHandleSaveGame")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AsyncActionHandleSaveGame")
	}
	static class UAsyncActionHandleSaveGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncActionHandleSaveGame>();
	}
};
DUMPER7_ASSERTS_UAsyncActionHandleSaveGame;

// Class Engine.ParticleModuleTypeDataAnimTrail
// 0x0018 (0x0048 - 0x0030)
class UParticleModuleTypeDataAnimTrail final : public UParticleModuleTypeDataBase
{
public:
	uint8                                         bDeadTrailsOnDeactivate : 1;                       // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnablePreviousTangentRecalculation : 1;           // 0x0030(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTangentRecalculationEveryFrame : 1;               // 0x0030(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TilingDistance;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceTessellationStepSize;                      // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TangentTessellationStepSize;                       // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WidthTessellationStepSize;                         // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleTypeDataAnimTrail")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleTypeDataAnimTrail")
	}
	static class UParticleModuleTypeDataAnimTrail* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleTypeDataAnimTrail>();
	}
};
DUMPER7_ASSERTS_UParticleModuleTypeDataAnimTrail;

// Class Engine.ParticleModuleTypeDataGpu
// 0x05A0 (0x05D0 - 0x0030)
class UParticleModuleTypeDataGpu final : public UParticleModuleTypeDataBase
{
public:
	struct FGPUSpriteEmitterInfo                  EmitterInfo;                                       // 0x0030(0x0350)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGPUSpriteResourceData                 ResourceData;                                      // 0x0380(0x0240)(NativeAccessSpecifierPublic)
	float                                         CameraMotionBlurAmount;                            // 0x05C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bClearExistingParticlesOnInit : 1;                 // 0x05C4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5C5[0xB];                                      // 0x05C5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleTypeDataGpu")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleTypeDataGpu")
	}
	static class UParticleModuleTypeDataGpu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleTypeDataGpu>();
	}
};
DUMPER7_ASSERTS_UParticleModuleTypeDataGpu;

// Class Engine.ColorInputDeviceCurveProperty
// 0x0070 (0x00A0 - 0x0030)
class UColorInputDeviceCurveProperty final : public UInputDeviceProperty
{
public:
	struct FDeviceColorCurveData                  ColorData;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FDeviceColorCurveData> DeviceOverrideData;                              // 0x0040(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_90[0x10];                                      // 0x0090(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ColorInputDeviceCurveProperty")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ColorInputDeviceCurveProperty")
	}
	static class UColorInputDeviceCurveProperty* GetDefaultObj()
	{
		return GetDefaultObjImpl<UColorInputDeviceCurveProperty>();
	}
};
DUMPER7_ASSERTS_UColorInputDeviceCurveProperty;

// Class Engine.ParticleModuleTypeDataRibbon
// 0x0030 (0x0060 - 0x0030)
class UParticleModuleTypeDataRibbon final : public UParticleModuleTypeDataBase
{
public:
	int32                                         MaxTessellationBetweenParticles;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SheetsPerTrail;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTrailCount;                                     // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxParticleInTrailCount;                           // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDeadTrailsOnDeactivate : 1;                       // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDeadTrailsOnSourceLoss : 1;                       // 0x0040(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bClipSourceSegement : 1;                           // 0x0040(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnablePreviousTangentRecalculation : 1;           // 0x0040(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTangentRecalculationEveryFrame : 1;               // 0x0040(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSpawnInitialParticle : 1;                         // 0x0040(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ETrailsRenderAxisOption                       RenderAxis;                                        // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TangentSpawningScalar;                             // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRenderGeometry : 1;                               // 0x004C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRenderSpawnPoints : 1;                            // 0x004C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRenderTangents : 1;                               // 0x004C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRenderTessellation : 1;                           // 0x004C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TilingDistance;                                    // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceTessellationStepSize;                      // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableTangentDiffInterpScale : 1;                 // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TangentTessellationScalar;                         // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleTypeDataRibbon")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleTypeDataRibbon")
	}
	static class UParticleModuleTypeDataRibbon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleTypeDataRibbon>();
	}
};
DUMPER7_ASSERTS_UParticleModuleTypeDataRibbon;

// Class Engine.ParticleModuleVectorFieldBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleVectorFieldBase : public UParticleModule
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleVectorFieldBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleVectorFieldBase")
	}
	static class UParticleModuleVectorFieldBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleVectorFieldBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleVectorFieldBase;

// Class Engine.AnimNotifyMirrorInspectionLibrary
// 0x0000 (0x0028 - 0x0028)
class UAnimNotifyMirrorInspectionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static const class UMirrorDataTable* GetMirrorDataTable(const struct FAnimNotifyEventReference& EventReference);
	static bool IsTriggeredByMirroredAnimation(const struct FAnimNotifyEventReference& EventReference);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimNotifyMirrorInspectionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimNotifyMirrorInspectionLibrary")
	}
	static class UAnimNotifyMirrorInspectionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyMirrorInspectionLibrary>();
	}
};
DUMPER7_ASSERTS_UAnimNotifyMirrorInspectionLibrary;

// Class Engine.ParticleModuleVectorFieldGlobal
// 0x0010 (0x0040 - 0x0030)
class UParticleModuleVectorFieldGlobal final : public UParticleModuleVectorFieldBase
{
public:
	uint8                                         bOverrideGlobalVectorFieldTightness : 1;           // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GlobalVectorFieldScale;                            // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalVectorFieldTightness;                        // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleVectorFieldGlobal")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleVectorFieldGlobal")
	}
	static class UParticleModuleVectorFieldGlobal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleVectorFieldGlobal>();
	}
};
DUMPER7_ASSERTS_UParticleModuleVectorFieldGlobal;

// Class Engine.ParticleModuleVectorFieldLocal
// 0x0060 (0x0090 - 0x0030)
class UParticleModuleVectorFieldLocal final : public UParticleModuleVectorFieldBase
{
public:
	class UVectorField*                           VectorField;                                       // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeTranslation;                               // 0x0038(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0050(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RelativeScale3D;                                   // 0x0068(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tightness;                                         // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIgnoreComponentTransform : 1;                     // 0x0088(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTileX : 1;                                        // 0x0088(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTileY : 1;                                        // 0x0088(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTileZ : 1;                                        // 0x0088(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseFixDT : 1;                                     // 0x0088(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleVectorFieldLocal")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleVectorFieldLocal")
	}
	static class UParticleModuleVectorFieldLocal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleVectorFieldLocal>();
	}
};
DUMPER7_ASSERTS_UParticleModuleVectorFieldLocal;

// Class Engine.ParticleModuleVectorFieldRotation
// 0x0030 (0x0060 - 0x0030)
class UParticleModuleVectorFieldRotation final : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                                MinInitialRotation;                                // 0x0030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaxInitialRotation;                                // 0x0048(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleVectorFieldRotation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleVectorFieldRotation")
	}
	static class UParticleModuleVectorFieldRotation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleVectorFieldRotation>();
	}
};
DUMPER7_ASSERTS_UParticleModuleVectorFieldRotation;

// Class Engine.ParticleModuleVectorFieldRotationRate
// 0x0018 (0x0048 - 0x0030)
class UParticleModuleVectorFieldRotationRate final : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                                RotationRate;                                      // 0x0030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleVectorFieldRotationRate")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleVectorFieldRotationRate")
	}
	static class UParticleModuleVectorFieldRotationRate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleVectorFieldRotationRate>();
	}
};
DUMPER7_ASSERTS_UParticleModuleVectorFieldRotationRate;

// Class Engine.AnimNotifyState_Trail
// 0x0028 (0x0058 - 0x0030)
class UAnimNotifyState_Trail final : public UAnimNotifyState
{
public:
	class UParticleSystem*                        PSTemplate;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FirstSocketName;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SecondSocketName;                                  // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrailWidthMode                               WidthScaleMode;                                    // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WidthScaleCurve;                                   // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRecycleSpawnedSystems : 1;                        // 0x0054(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UParticleSystem* OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimNotifyState_Trail")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimNotifyState_Trail")
	}
	static class UAnimNotifyState_Trail* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_Trail>();
	}
};
DUMPER7_ASSERTS_UAnimNotifyState_Trail;

// Class Engine.ParticleModuleVectorFieldScale
// 0x0038 (0x0068 - 0x0030)
class UParticleModuleVectorFieldScale final : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                     VectorFieldScale;                                  // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  VectorFieldScaleRaw;                               // 0x0038(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleVectorFieldScale")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleVectorFieldScale")
	}
	static class UParticleModuleVectorFieldScale* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleVectorFieldScale>();
	}
};
DUMPER7_ASSERTS_UParticleModuleVectorFieldScale;

// Class Engine.ParticleModuleVectorFieldScaleOverLife
// 0x0038 (0x0068 - 0x0030)
class UParticleModuleVectorFieldScaleOverLife final : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                     VectorFieldScaleOverLife;                          // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  VectorFieldScaleOverLifeRaw;                       // 0x0038(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleVectorFieldScaleOverLife")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleVectorFieldScaleOverLife")
	}
	static class UParticleModuleVectorFieldScaleOverLife* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleVectorFieldScaleOverLife>();
	}
};
DUMPER7_ASSERTS_UParticleModuleVectorFieldScaleOverLife;

// Class Engine.ParticleModuleVelocityBase
// 0x0008 (0x0038 - 0x0030)
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	uint8                                         bInWorldSpace : 1;                                 // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bApplyOwnerScale : 1;                              // 0x0030(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleVelocityBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleVelocityBase")
	}
	static class UParticleModuleVelocityBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleVelocityBase>();
	}
};
DUMPER7_ASSERTS_UParticleModuleVelocityBase;

// Class Engine.ParticleModuleVelocity
// 0x0090 (0x00C8 - 0x0038)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                 StartVelocity;                                     // 0x0038(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  StartVelocityRadial;                               // 0x0098(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleVelocity")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleVelocity")
	}
	static class UParticleModuleVelocity* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleVelocity>();
	}
};
DUMPER7_ASSERTS_UParticleModuleVelocity;

// Class Engine.AnimNotify_ResetClothingSimulation
// 0x0000 (0x0038 - 0x0038)
class UAnimNotify_ResetClothingSimulation final : public UAnimNotify
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimNotify_ResetClothingSimulation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimNotify_ResetClothingSimulation")
	}
	static class UAnimNotify_ResetClothingSimulation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_ResetClothingSimulation>();
	}
};
DUMPER7_ASSERTS_UAnimNotify_ResetClothingSimulation;

// Class Engine.ParticleModuleVelocityCone
// 0x0078 (0x00B0 - 0x0038)
class UParticleModuleVelocityCone final : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                  Angle;                                             // 0x0038(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  Velocity;                                          // 0x0068(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0098(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleVelocityCone")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleVelocityCone")
	}
	static class UParticleModuleVelocityCone* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleVelocityCone>();
	}
};
DUMPER7_ASSERTS_UParticleModuleVelocityCone;

// Class Engine.ParticleModuleVelocityInheritParent
// 0x0060 (0x0098 - 0x0038)
class UParticleModuleVelocityInheritParent final : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                 Scale;                                             // 0x0038(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleVelocityInheritParent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleVelocityInheritParent")
	}
	static class UParticleModuleVelocityInheritParent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleVelocityInheritParent>();
	}
};
DUMPER7_ASSERTS_UParticleModuleVelocityInheritParent;

// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0068 (0x00A0 - 0x0038)
class UParticleModuleVelocityOverLifetime final : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                 VelOverLife;                                       // 0x0038(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Absolute : 1;                                      // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, ExportObject, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleVelocityOverLifetime")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleVelocityOverLifetime")
	}
	static class UParticleModuleVelocityOverLifetime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleVelocityOverLifetime>();
	}
};
DUMPER7_ASSERTS_UParticleModuleVelocityOverLifetime;

// Class Engine.ParticleModuleVelocity_Seeded
// 0x0020 (0x00E8 - 0x00C8)
class UParticleModuleVelocity_Seeded final : public UParticleModuleVelocity
{
public:
	struct FParticleRandomSeedInfo                RandomSeedInfo;                                    // 0x00C8(0x0020)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleModuleVelocity_Seeded")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleModuleVelocity_Seeded")
	}
	static class UParticleModuleVelocity_Seeded* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleModuleVelocity_Seeded>();
	}
};
DUMPER7_ASSERTS_UParticleModuleVelocity_Seeded;

// Class Engine.AnimSet
// 0x00C8 (0x00F0 - 0x0028)
class UAnimSet final : public UObject
{
public:
	uint8                                         bAnimRotationOnly : 1;                             // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TrackBoneNames;                                    // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAnimSetMeshLinkup>             LinkupCache;                                       // 0x0040(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 BoneUseAnimTranslation;                            // 0x0050(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ForceUseMeshTranslation;                           // 0x0060(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class FName>                           UseTranslationBoneNames;                           // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ForceMeshTranslationBoneNames;                     // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   PreviewSkelMeshName;                               // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BestRatioSkelMeshName;                             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x50];                                      // 0x00A0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimSet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimSet")
	}
	static class UAnimSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimSet>();
	}
};
DUMPER7_ASSERTS_UAnimSet;

// Class Engine.RuntimeHashExternalStreamingObjectBase
// 0x00F0 (0x0118 - 0x0028)
class URuntimeHashExternalStreamingObjectBase : public UObject
{
public:
	TMap<class FName, class FName>                SubObjectsToCellRemapping;                         // 0x0028(0x0050)(NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  OwningWorld;                                       // 0x0078(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UWorld>                  OuterWorld;                                        // 0x00A0(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, class FName>                CellToLevelStreamingPackage;                       // 0x00C8(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RuntimeHashExternalStreamingObjectBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RuntimeHashExternalStreamingObjectBase")
	}
	static class URuntimeHashExternalStreamingObjectBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<URuntimeHashExternalStreamingObjectBase>();
	}
};
DUMPER7_ASSERTS_URuntimeHashExternalStreamingObjectBase;

// Class Engine.RuntimeSpatialHashExternalStreamingObject
// 0x0010 (0x0128 - 0x0118)
class URuntimeSpatialHashExternalStreamingObject final : public URuntimeHashExternalStreamingObjectBase
{
public:
	TArray<struct FSpatialHashStreamingGrid>      StreamingGrids;                                    // 0x0118(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RuntimeSpatialHashExternalStreamingObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RuntimeSpatialHashExternalStreamingObject")
	}
	static class URuntimeSpatialHashExternalStreamingObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<URuntimeSpatialHashExternalStreamingObject>();
	}
};
DUMPER7_ASSERTS_URuntimeSpatialHashExternalStreamingObject;

// Class Engine.ParticleSpriteEmitter
// 0x0000 (0x01C0 - 0x01C0)
class UParticleSpriteEmitter final : public UParticleEmitter
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleSpriteEmitter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleSpriteEmitter")
	}
	static class UParticleSpriteEmitter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleSpriteEmitter>();
	}
};
DUMPER7_ASSERTS_UParticleSpriteEmitter;

// Class Engine.FXSystemComponent
// 0x0000 (0x0570 - 0x0570)
class UFXSystemComponent : public UPrimitiveComponent
{
public:
	void ReleaseToPool();
	void SetActorParameter(class FName ParameterName, class AActor* Param);
	void SetAutoAttachmentParameters(class USceneComponent* Parent, class FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule);
	void SetBoolParameter(class FName ParameterName, bool Param);
	void SetColorParameter(class FName ParameterName, const struct FLinearColor& Param);
	void SetEmitterEnable(class FName EmitterName, bool bNewEnableState);
	void SetFloatParameter(class FName ParameterName, float Param);
	void SetIntParameter(class FName ParameterName, int32 Param);
	void SetUseAutoManageAttachment(bool bAutoManage);
	void SetVectorParameter(class FName ParameterName, const struct FVector& Param);

	class UFXSystemAsset* GetFXSystemAsset() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FXSystemComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FXSystemComponent")
	}
	static class UFXSystemComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFXSystemComponent>();
	}
};
DUMPER7_ASSERTS_UFXSystemComponent;

// Class Engine.ParticleSystemComponent
// 0x0310 (0x0880 - 0x0570)
class UParticleSystemComponent final : public UFXSystemComponent
{
public:
	class UParticleSystem*                        Template;                                          // 0x0570(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             EmitterMaterials;                                  // 0x0578(0x0010)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class USkeletalMeshComponent*>         SkelMeshComponents;                                // 0x0588(0x0010)(ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_598[0x1];                                      // 0x0598(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bResetOnDetach : 1;                                // 0x0599(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUpdateOnDedicatedServer : 1;                      // 0x0599(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_599_2 : 2;                                  // 0x0599(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bAllowRecycling : 1;                               // 0x0599(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAutoManageAttachment : 1;                         // 0x0599(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAutoAttachWeldSimulatedBodies : 1;                // 0x0599(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_599_7 : 1;                                  // 0x0599(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         BitPad_59A_0 : 2;                                  // 0x059A(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bWarmingUp : 1;                                    // 0x059A(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideLODMethod : 1;                            // 0x059A(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSkipUpdateDynamicDataDuringTick : 1;              // 0x059A(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59B[0xA];                                      // 0x059B(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	EParticleSystemLODMethod                      LODMethod;                                         // 0x05A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EParticleSignificanceLevel                    RequiredSignificance;                              // 0x05A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A7[0x1];                                      // 0x05A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FParticleSysParam>              InstanceParameters;                                // 0x05A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName EventName, float EmitterTime, const struct FVector& Location, const struct FVector& Velocity)> OnParticleSpawn; // 0x05B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName EventName, float EmitterTime, int32 ParticleCount)> OnParticleBurst; // 0x05C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName EventName, float EmitterTime, int32 ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction)> OnParticleDeath; // 0x05D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName EventName, float EmitterTime, int32 ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction, const struct FVector& Normal, class FName BoneName, class UPhysicalMaterial* PhysMat)> OnParticleCollide; // 0x05E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bOldPositionValid;                                 // 0x05F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F9[0x7];                                      // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OldPosition;                                       // 0x0600(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PartSysVelocity;                                   // 0x0618(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WarmupTime;                                        // 0x0630(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WarmupTickRate;                                    // 0x0634(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_638[0x4];                                      // 0x0638(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SecondsBeforeInactive;                             // 0x063C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_640[0x4];                                      // 0x0640(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxTimeBeforeForceUpdateTransform;                 // 0x0644(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_648[0x20];                                     // 0x0648(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystemReplay*>          ReplayClips;                                       // 0x0668(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_678[0x8];                                      // 0x0678(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomTimeDilation;                                // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_684[0x54];                                     // 0x0684(0x0054)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class USceneComponent>         AutoAttachParent;                                  // 0x06D8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AutoAttachSocketName;                              // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               AutoAttachLocationRule;                            // 0x06E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               AutoAttachRotationRule;                            // 0x06E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               AutoAttachScaleRule;                               // 0x06EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6EB[0x55];                                     // 0x06EB(0x0055)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UParticleSystemComponent* PSystem)> OnSystemFinished;        // 0x0740(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_750[0x130];                                    // 0x0750(0x0130)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginTrails(class FName InFirstSocketName, class FName InSecondSocketName, ETrailWidthMode InWidthMode, float InWidth);
	class UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(class FName InName, class UMaterialInterface* SourceMaterial);
	void EndTrails();
	void GenerateParticleEvent(const class FName InEventName, const float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity);
	void SetAutoAttachParams(class USceneComponent* Parent, class FName SocketName, EAttachLocation LocationType);
	void SetBeamEndPoint(int32 EmitterIndex, const struct FVector& NewEndPoint);
	void SetBeamSourcePoint(int32 EmitterIndex, const struct FVector& NewSourcePoint, int32 SourceIndex);
	void SetBeamSourceStrength(int32 EmitterIndex, float NewSourceStrength, int32 SourceIndex);
	void SetBeamSourceTangent(int32 EmitterIndex, const struct FVector& NewTangentPoint, int32 SourceIndex);
	void SetBeamTargetPoint(int32 EmitterIndex, const struct FVector& NewTargetPoint, int32 TargetIndex);
	void SetBeamTargetStrength(int32 EmitterIndex, float NewTargetStrength, int32 TargetIndex);
	void SetBeamTargetTangent(int32 EmitterIndex, const struct FVector& NewTangentPoint, int32 TargetIndex);
	void SetMaterialParameter(class FName ParameterName, class UMaterialInterface* Param);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void SetTrailSourceData(class FName InFirstSocketName, class FName InSecondSocketName, ETrailWidthMode InWidthMode, float InWidth);

	bool GetBeamEndPoint(int32 EmitterIndex, struct FVector* OutEndPoint) const;
	bool GetBeamSourcePoint(int32 EmitterIndex, int32 SourceIndex, struct FVector* OutSourcePoint) const;
	bool GetBeamSourceStrength(int32 EmitterIndex, int32 SourceIndex, float* OutSourceStrength) const;
	bool GetBeamSourceTangent(int32 EmitterIndex, int32 SourceIndex, struct FVector* OutTangentPoint) const;
	bool GetBeamTargetPoint(int32 EmitterIndex, int32 TargetIndex, struct FVector* OutTargetPoint) const;
	bool GetBeamTargetStrength(int32 EmitterIndex, int32 TargetIndex, float* OutTargetStrength) const;
	bool GetBeamTargetTangent(int32 EmitterIndex, int32 TargetIndex, struct FVector* OutTangentPoint) const;
	class UMaterialInterface* GetNamedMaterial(class FName InName) const;
	int32 GetNumActiveParticles() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleSystemComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleSystemComponent")
	}
	static class UParticleSystemComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleSystemComponent>();
	}
};
DUMPER7_ASSERTS_UParticleSystemComponent;

// Class Engine.ParticleSystemReplay
// 0x0018 (0x0040 - 0x0028)
class UParticleSystemReplay final : public UObject
{
public:
	int32                                         ClipIDNumber;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x14];                                      // 0x002C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleSystemReplay")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleSystemReplay")
	}
	static class UParticleSystemReplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleSystemReplay>();
	}
};
DUMPER7_ASSERTS_UParticleSystemReplay;

// Class Engine.ComponentDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UComponentDelegateBinding final : public UDynamicBlueprintBinding
{
public:
	TArray<struct FBlueprintComponentDelegateBinding> ComponentDelegateBindings;                     // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComponentDelegateBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComponentDelegateBinding")
	}
	static class UComponentDelegateBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComponentDelegateBinding>();
	}
};
DUMPER7_ASSERTS_UComponentDelegateBinding;

// Class Engine.PathFollowingAgentInterface
// 0x0000 (0x0000 - 0x0000)
class IPathFollowingAgentInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PathFollowingAgentInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PathFollowingAgentInterface")
	}
	static class IPathFollowingAgentInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IPathFollowingAgentInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IPathFollowingAgentInterface;

// Class Engine.PhysicsObjectBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UPhysicsObjectBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ApplyRadialImpulse(class UPrimitiveComponent* Component, const struct FVector& Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff, bool bApplyStrain);
	static bool ExtractClosestPhysicsObjectResults(const struct FClosestPhysicsObjectResult& Result, class FName* OutName);
	static struct FClosestPhysicsObjectResult GetClosestPhysicsObjectFromWorldLocation(class UPrimitiveComponent* Component, const struct FVector& WorldLocation);
	static struct FTransform GetPhysicsObjectWorldTransform(class UPrimitiveComponent* Component, class FName BoneName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PhysicsObjectBlueprintLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PhysicsObjectBlueprintLibrary")
	}
	static class UPhysicsObjectBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsObjectBlueprintLibrary>();
	}
};
DUMPER7_ASSERTS_UPhysicsObjectBlueprintLibrary;

// Class Engine.PhysicsSpringComponent
// 0x0030 (0x02D0 - 0x02A0)
class UPhysicsSpringComponent final : public USceneComponent
{
public:
	float                                         SpringStiffness;                                   // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringDamping;                                     // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringLengthAtRest;                                // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringRadius;                                      // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             SpringChannel;                                     // 0x02B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x02B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B2[0x2];                                      // 0x02B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpringCompression;                                 // 0x02B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B8[0x18];                                     // 0x02B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetNormalizedCompressionScalar() const;
	struct FVector GetSpringCurrentEndPoint() const;
	struct FVector GetSpringDirection() const;
	struct FVector GetSpringRestingPoint() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PhysicsSpringComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PhysicsSpringComponent")
	}
	static class UPhysicsSpringComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsSpringComponent>();
	}
};
DUMPER7_ASSERTS_UPhysicsSpringComponent;

// Class Engine.PhysicsThreadLibrary
// 0x0000 (0x0028 - 0x0028)
class UPhysicsThreadLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddForce(const struct FBodyInstanceAsyncPhysicsTickHandle& Handle, const struct FVector& Force, bool bAccelChange);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PhysicsThreadLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PhysicsThreadLibrary")
	}
	static class UPhysicsThreadLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsThreadLibrary>();
	}
};
DUMPER7_ASSERTS_UPhysicsThreadLibrary;

// Class Engine.AudioComponent
// 0x09E0 (0x0C80 - 0x02A0)
class UAudioComponent : public USceneComponent
{
public:
	uint8                                         Pad_2A0[0x1A0];                                    // 0x02A0(0x01A0)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Sound;                                             // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAudioParameter>                DefaultParameters;                                 // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAudioParameter>                InstanceParameters;                                // 0x0458(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class USoundClass*                            SoundClassOverride;                                // 0x0468(0x0008)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAutoDestroy : 1;                                  // 0x0470(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStopWhenOwnerDestroyed : 1;                       // 0x0470(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldRemainActiveIfDropped : 1;                  // 0x0470(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowSpatialization : 1;                          // 0x0470(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideAttenuation : 1;                          // 0x0470(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideSubtitlePriority : 1;                     // 0x0470(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsUISound : 1;                                    // 0x0470(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableLowPassFilter : 1;                          // 0x0470(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverridePriority : 1;                             // 0x0471(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSuppressSubtitles : 1;                            // 0x0471(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanPlayMultipleInstances : 1;                     // 0x0471(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableParameterUpdatesWhilePlaying : 1;          // 0x0471(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_471_4 : 4;                                  // 0x0471(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         BitPad_472_0 : 6;                                  // 0x0472(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bAutoManageAttachment : 1;                         // 0x0472(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_473[0x5];                                      // 0x0473(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AudioComponentUserID;                              // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchModulationMin;                                // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchModulationMax;                                // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeModulationMin;                               // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeModulationMax;                               // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnvelopeFollowerAttackTime;                        // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnvelopeFollowerReleaseTime;                       // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubtitlePriority;                                  // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundEffectSourcePresetChain*          SourceEffectChain;                                 // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowPassFilterFrequency;                            // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundAttenuationSettings              AttenuationOverrides;                              // 0x04C8(0x03D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0898(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class USoundConcurrency*>                ConcurrencySet;                                    // 0x08A0(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_8F0[0xC];                                      // 0x08F0(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	EAttachmentRule                               AutoAttachLocationRule;                            // 0x08FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               AutoAttachRotationRule;                            // 0x08FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               AutoAttachScaleRule;                               // 0x08FE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8FF[0x1];                                      // 0x08FF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoundModulationDefaultRoutingSettings ModulationRouting;                                 // 0x0900(0x0168)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EAudioComponentPlayState PlayState)> OnAudioPlayStateChanged;      // 0x0A68(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_A78[0x18];                                     // 0x0A78(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bIsVirtualized)> OnAudioVirtualizationChanged;                // 0x0A90(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA0[0x18];                                     // 0x0AA0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnAudioFinished;                                   // 0x0AB8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC8[0x18];                                     // 0x0AC8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class USoundWave* PlayingSoundWave, const float PlaybackPercent)> OnAudioPlaybackPercent; // 0x0AE0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_AF0[0x18];                                     // 0x0AF0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class USoundWave* PlayingSoundWave, const float EnvelopeValue)> OnAudioSingleEnvelopeValue; // 0x0B08(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_B18[0x18];                                     // 0x0B18(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const float AverageEnvelopeValue, const float MaxEnvelope, const int32 NumWaveInstances)> OnAudioMultiEnvelopeValue; // 0x0B30(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_B40[0x18];                                     // 0x0B40(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const TArray<struct FSubtitleCue>& Subtitles, float CueDuration)> OnQueueSubtitles; // 0x0B58(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B68[0x10];                                     // 0x0B68(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class USceneComponent>         AutoAttachParent;                                  // 0x0B78(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AutoAttachSocketName;                              // 0x0B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B88[0xF8];                                     // 0x0B88(0x00F8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AdjustAttenuation(const struct FSoundAttenuationSettings& InAttenuationSettings);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, const EAudioFaderCurve FadeCurve);
	bool BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings* OutAttenuationSettings);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, const EAudioFaderCurve FadeCurve);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, const EAudioFaderCurve FadeCurve);
	bool GetCookedEnvelopeData(float* OutEnvelopeData);
	bool GetCookedEnvelopeDataForAllPlayingSounds(TArray<struct FSoundWaveEnvelopeDataPerSound>* OutEnvelopeData);
	bool GetCookedFFTData(const TArray<float>& FrequenciesToGet, TArray<struct FSoundWaveSpectralData>* OutSoundWaveSpectralData);
	bool GetCookedFFTDataForAllPlayingSounds(TArray<struct FSoundWaveSpectralDataPerSound>* OutSoundWaveSpectralData);
	TSet<class USoundModulatorBase*> GetModulators(const EModulationDestination Destination);
	void Play(float StartTime);
	void PlayQuantized(const class UObject* WorldContextObject, class UQuartzClockHandle*& InClockHandle, struct FQuartzQuantizationBoundary& InQuantizationBoundary, const TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)>& InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, EAudioFaderCurve InFadeCurve);
	void SetAudioBusSendPostEffect(class UAudioBus* AudioBus, float AudioBusSendLevel);
	void SetAudioBusSendPreEffect(class UAudioBus* AudioBus, float AudioBusSendLevel);
	void SetBoolParameter(class FName InName, bool InBool);
	void SetFloatParameter(class FName InName, float InFloat);
	void SetIntParameter(class FName InName, int32 inInt);
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);
	void SetModulationRouting(const TSet<class USoundModulatorBase*>& Modulators, const EModulationDestination Destination, const EModulationRouting RoutingMethod);
	void SetOutputToBusOnly(bool bInOutputToBusOnly);
	void SetPaused(bool bPause);
	void SetPitchMultiplier(float NewPitchMultiplier);
	void SetSound(class USoundBase* NewSound);
	void SetSourceBusSendPostEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);
	void SetSourceBusSendPreEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);
	void SetSubmixSend(class USoundSubmixBase* Submix, float SendLevel);
	void SetUISound(bool bInUISound);
	void SetVolumeMultiplier(float NewVolumeMultiplier);
	void SetWaveParameter(class FName InName, class USoundWave* InWave);
	void Stop();
	void StopDelayed(float DelayTime);

	EAudioComponentPlayState GetPlayState() const;
	bool HasCookedAmplitudeEnvelopeData() const;
	bool HasCookedFFTData() const;
	bool IsPlaying() const;
	bool IsVirtualized() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AudioComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AudioComponent")
	}
	static class UAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioComponent>();
	}
};
DUMPER7_ASSERTS_UAudioComponent;

// Class Engine.PhysicsThrusterComponent
// 0x0010 (0x02B0 - 0x02A0)
class UPhysicsThrusterComponent final : public USceneComponent
{
public:
	float                                         ThrustStrength;                                    // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4[0xC];                                      // 0x02A4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PhysicsThrusterComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PhysicsThrusterComponent")
	}
	static class UPhysicsThrusterComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsThrusterComponent>();
	}
};
DUMPER7_ASSERTS_UPhysicsThrusterComponent;

// Class Engine.PieFixupTestObject
// 0x00A0 (0x00C8 - 0x0028)
class UPieFixupTestObject final : public UObject
{
public:
	struct FSoftObjectPath                        Path;                                              // 0x0028(0x0020)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  TypedPtr;                                          // 0x0048(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPieFixupStructWithSoftObjectPath      Struct;                                            // 0x0070(0x0048)(NativeAccessSpecifierPublic)
	TArray<struct FPieFixupStructWithSoftObjectPath> Array;                                          // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PieFixupTestObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PieFixupTestObject")
	}
	static class UPieFixupTestObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPieFixupTestObject>();
	}
};
DUMPER7_ASSERTS_UPieFixupTestObject;

// Class Engine.SceneCapture
// 0x0010 (0x02A8 - 0x0298)
class ASceneCapture : public AActor
{
public:
	class UStaticMeshComponent*                   MeshComp;                                          // 0x0298(0x0008)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                        SceneComponent;                                    // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SceneCapture")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SceneCapture")
	}
	static class ASceneCapture* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASceneCapture>();
	}
};
DUMPER7_ASSERTS_ASceneCapture;

// Class Engine.PlanarReflection
// 0x0010 (0x02B8 - 0x02A8)
class APlanarReflection final : public ASceneCapture
{
public:
	class UPlanarReflectionComponent*             PlanarReflectionComponent;                         // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShowPreviewPlane;                                 // 0x02B0(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInterpToggle(bool bEnable);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlanarReflection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlanarReflection")
	}
	static class APlanarReflection* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlanarReflection>();
	}
};
DUMPER7_ASSERTS_APlanarReflection;

// Class Engine.BoxComponent
// 0x0020 (0x05B0 - 0x0590)
class UBoxComponent : public UShapeComponent
{
public:
	struct FVector                                BoxExtent;                                         // 0x0590(0x0018)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LineThickness;                                     // 0x05A8(0x0004)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5AC[0x4];                                      // 0x05AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps);
	void SetLineThickness(float Thickness);

	struct FVector GetScaledBoxExtent() const;
	struct FVector GetUnscaledBoxExtent() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BoxComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BoxComponent")
	}
	static class UBoxComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBoxComponent>();
	}
};
DUMPER7_ASSERTS_UBoxComponent;

// Class Engine.SceneCaptureComponent
// 0x00C0 (0x0360 - 0x02A0)
#pragma pack(push, 0x1)
class alignas(0x10) USceneCaptureComponent : public USceneComponent
{
public:
	ESceneCapturePrimitiveRenderMode              PrimitiveRenderMode;                               // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESceneCaptureSource                           CaptureSource;                                     // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCaptureEveryFrame : 1;                            // 0x02A2(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCaptureOnMovement : 1;                            // 0x02A2(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bAlwaysPersistRenderingState;                      // 0x02A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class UPrimitiveComponent>> HiddenComponents;                              // 0x02A8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         HiddenActors;                                      // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>> ShowOnlyComponents;                            // 0x02C8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ShowOnlyActors;                                    // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         LODDistanceFactor;                                 // 0x02E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxViewDistanceOverride;                           // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CaptureSortPriority;                               // 0x02F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRayTracingIfEnabled;                           // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEngineShowFlagsSetting>        ShowFlagSettings;                                  // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Interp, NativeAccessSpecifierPublic)
	uint8                                         Pad_308[0x30];                                     // 0x0308(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ProfilingEventName;                                // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Interp, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_348[0x10];                                     // 0x0348(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearHiddenComponents();
	void ClearShowOnlyComponents();
	void HideActorComponents(class AActor* InActor, const bool bIncludeFromChildActors);
	void HideComponent(class UPrimitiveComponent* InComponent);
	void RemoveShowOnlyActorComponents(class AActor* InActor, const bool bIncludeFromChildActors);
	void RemoveShowOnlyComponent(class UPrimitiveComponent* InComponent);
	void SetCaptureSortPriority(int32 NewCaptureSortPriority);
	void ShowOnlyActorComponents(class AActor* InActor, const bool bIncludeFromChildActors);
	void ShowOnlyComponent(class UPrimitiveComponent* InComponent);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SceneCaptureComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SceneCaptureComponent")
	}
	static class USceneCaptureComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USceneCaptureComponent>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_USceneCaptureComponent;

// Class Engine.PlanarReflectionComponent
// 0x0160 (0x04C0 - 0x0360)
class UPlanarReflectionComponent final : public USceneCaptureComponent
{
public:
	class UBoxComponent*                          PreviewBox;                                        // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalDistortionStrength;                          // 0x0360(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrefilterRoughness;                                // 0x0364(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrefilterRoughnessDistance;                        // 0x0368(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScreenPercentage;                                  // 0x036C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraFOV;                                          // 0x0370(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromPlaneFadeStart;                        // 0x0374(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromPlaneFadeEnd;                          // 0x0378(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromPlaneFadeoutStart;                     // 0x037C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromPlaneFadeoutEnd;                       // 0x0380(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleFromPlaneFadeStart;                           // 0x0384(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleFromPlaneFadeEnd;                             // 0x0388(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPreviewPlane;                                 // 0x038C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderSceneTwoSided;                              // 0x038D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38E[0x132];                                    // 0x038E(0x0132)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlanarReflectionComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlanarReflectionComponent")
	}
	static class UPlanarReflectionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlanarReflectionComponent>();
	}
};
DUMPER7_ASSERTS_UPlanarReflectionComponent;

// Class Engine.PlaneReflectionCapture
// 0x0000 (0x02A0 - 0x02A0)
class APlaneReflectionCapture final : public AReflectionCapture
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlaneReflectionCapture")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlaneReflectionCapture")
	}
	static class APlaneReflectionCapture* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlaneReflectionCapture>();
	}
};
DUMPER7_ASSERTS_APlaneReflectionCapture;

// Class Engine.PlaneReflectionCaptureComponent
// 0x0020 (0x0330 - 0x0310)
class UPlaneReflectionCaptureComponent final : public UReflectionCaptureComponent
{
public:
	float                                         InfluenceRadiusScale;                              // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDrawSphereComponent*                   PreviewInfluenceRadius;                            // 0x0318(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          PreviewCaptureBox;                                 // 0x0320(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlaneReflectionCaptureComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlaneReflectionCaptureComponent")
	}
	static class UPlaneReflectionCaptureComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlaneReflectionCaptureComponent>();
	}
};
DUMPER7_ASSERTS_UPlaneReflectionCaptureComponent;

// Class Engine.PlatformInterfaceWebResponse
// 0x0088 (0x00B0 - 0x0028)
class UPlatformInterfaceWebResponse final : public UObject
{
public:
	class FString                                 OriginalURL;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResponseCode;                                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tag;                                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringResponse;                                    // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 BinaryResponse;                                    // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x50];                                      // 0x0060(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetHeader(int32 HeaderIndex, class FString* Header, class FString* Value);
	class FString GetHeaderValue(const class FString& HeaderName);
	int32 GetNumHeaders();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlatformInterfaceWebResponse")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlatformInterfaceWebResponse")
	}
	static class UPlatformInterfaceWebResponse* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlatformInterfaceWebResponse>();
	}
};
DUMPER7_ASSERTS_UPlatformInterfaceWebResponse;

// Class Engine.PlayerCameraManager
// 0x2128 (0x23C0 - 0x0298)
class APlayerCameraManager : public AActor
{
public:
	class APlayerController*                      PCOwner;                                           // 0x0298(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TransformComponent;                                // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A8[0x8];                                      // 0x02A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultFOV;                                        // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultOrthoWidth;                                 // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultAspectRatio;                                // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C4[0x6C];                                     // 0x02C4(0x006C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTViewTarget                           ViewTarget;                                        // 0x0330(0x07E0)(Transient, NativeAccessSpecifierPublic)
	struct FTViewTarget                           PendingViewTarget;                                 // 0x0B10(0x07E0)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_12F0[0x30];                                    // 0x12F0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraCacheEntry                      CameraCachePrivate;                                // 0x1320(0x07D0)(Transient, NativeAccessSpecifierPrivate)
	struct FCameraCacheEntry                      LastFrameCameraCachePrivate;                       // 0x1AF0(0x07D0)(Transient, NativeAccessSpecifierPrivate)
	TArray<class UCameraModifier*>                ModifierList;                                      // 0x22C0(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UCameraModifier>>    DefaultModifiers;                                  // 0x22D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         FreeCamDistance;                                   // 0x22E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E4[0x4];                                     // 0x22E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FreeCamOffset;                                     // 0x22E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ViewTargetOffset;                                  // 0x2300(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bFadeOut, float FadeTime)> OnAudioFadeChangeEvent;            // 0x2318(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2328[0x18];                                    // 0x2328(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TScriptInterface<class ICameraLensEffectInterface>> CameraLensEffects;                    // 0x2340(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UCameraModifier_CameraShake*            CachedCameraShakeMod;                              // 0x2350(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FPostProcessSettings>           PostProcessBlendCache;                             // 0x2358(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2368[0x20];                                    // 0x2368(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class ACameraActor*                           AnimCameraActor;                                   // 0x2388(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bIsOrthographic : 1;                               // 0x2390(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDefaultConstrainAspectRatio : 1;                  // 0x2390(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_2390_2 : 4;                                 // 0x2390(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bClientSimulatingViewTarget : 1;                   // 0x2390(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseClientSideCameraUpdates : 1;                   // 0x2390(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_2391_0 : 2;                                 // 0x2391(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bGameCameraCutThisFrame : 1;                       // 0x2391(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2392[0x2];                                     // 0x2392(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ViewPitchMin;                                      // 0x2394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewPitchMax;                                      // 0x2398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewYawMin;                                        // 0x239C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewYawMax;                                        // 0x23A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewRollMin;                                       // 0x23A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewRollMax;                                       // 0x23A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23AC[0x4];                                     // 0x23AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ServerUpdateCameraTimeout;                         // 0x23B0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_23B4[0xC];                                     // 0x23B4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class AEmitterCameraLensEffectBase* AddCameraLensEffect(TSubclassOf<class AEmitterCameraLensEffectBase> LensEffectEmitterClass);
	TScriptInterface<class ICameraLensEffectInterface> AddGenericCameraLensEffect(TSubclassOf<class AActor> LensEffectEmitterClass);
	class UCameraModifier* AddNewCameraModifier(TSubclassOf<class UCameraModifier> ModifierClass);
	bool BlueprintUpdateCamera(class AActor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV);
	void ClearCameraLensEffects();
	class UCameraModifier* FindCameraModifierByClass(TSubclassOf<class UCameraModifier> ModifierClass);
	void OnPhotographyMultiPartCaptureEnd();
	void OnPhotographyMultiPartCaptureStart();
	void OnPhotographySessionEnd();
	void OnPhotographySessionStart();
	void PhotographyCameraModify(const struct FVector& NewCameraLocation, const struct FVector& PreviousCameraLocation, const struct FVector& OriginalCameraLocation, struct FVector* ResultCameraLocation);
	void RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter);
	bool RemoveCameraModifier(class UCameraModifier* ModifierToRemove);
	void RemoveGenericCameraLensEffect(TScriptInterface<class ICameraLensEffectInterface> Emitter);
	void SetGameCameraCutThisFrame();
	void SetManualCameraFade(float InFadeAmount, const struct FLinearColor& Color, bool bInFadeAudio);
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, const struct FLinearColor& Color, bool bShouldFadeAudio, bool bHoldWhenFinished);
	class UCameraShakeBase* StartCameraShake(TSubclassOf<class UCameraShakeBase> ShakeClass, float Scale, ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);
	class UCameraShakeBase* StartCameraShakeFromSource(TSubclassOf<class UCameraShakeBase> ShakeClass, class UCameraShakeSourceComponent* SourceComponent, float Scale, ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void StopAllCameraShakes(bool bImmediately);
	void StopAllCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);
	void StopAllInstancesOfCameraShake(TSubclassOf<class UCameraShakeBase> Shake, bool bImmediately);
	void StopAllInstancesOfCameraShakeFromSource(TSubclassOf<class UCameraShakeBase> Shake, class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);
	void StopCameraFade();
	void StopCameraShake(class UCameraShakeBase* ShakeInstance, bool bImmediately);
	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();

	struct FVector GetCameraLocation() const;
	struct FRotator GetCameraRotation() const;
	float GetFOVAngle() const;
	class APlayerController* GetOwningPlayerController() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlayerCameraManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlayerCameraManager")
	}
	static class APlayerCameraManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerCameraManager>();
	}
};
DUMPER7_ASSERTS_APlayerCameraManager;

// Class Engine.PluginBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UPluginBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static TArray<class FString> GetAdditionalPluginSearchPaths();
	static const TArray<class FString> GetAdditionalProjectPluginSearchPaths();
	static TArray<class FString> GetEnabledPluginNames();
	static bool GetPluginBaseDir(const class FString& PluginName, class FString* OutBaseDir);
	static bool GetPluginContentDir(const class FString& PluginName, class FString* OutContentDir);
	static bool GetPluginDescription(const class FString& PluginName, class FString* OutDescription);
	static bool GetPluginDescriptorFilePath(const class FString& PluginName, class FString* OutFilePath);
	static bool GetPluginEditorCustomVirtualPath(const class FString& PluginName, class FString* OutVirtualPath);
	static bool GetPluginMountedAssetPath(const class FString& PluginName, class FString* OutAssetPath);
	static bool GetPluginNameForObjectPath(const struct FSoftObjectPath& ObjectPath, class FString* OutPluginName);
	static bool GetPluginVersion(const class FString& PluginName, int32* OutVersion);
	static bool GetPluginVersionName(const class FString& PluginName, class FString* OutVersionName);
	static bool IsPluginMounted(const class FString& PluginName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PluginBlueprintLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PluginBlueprintLibrary")
	}
	static class UPluginBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPluginBlueprintLibrary>();
	}
};
DUMPER7_ASSERTS_UPluginBlueprintLibrary;

// Class Engine.PointLight
// 0x0008 (0x02B0 - 0x02A8)
class APointLight final : public ALight
{
public:
	class UPointLightComponent*                   PointLightComponent;                               // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetLightFalloffExponent(float NewLightFalloffExponent);
	void SetRadius(float NewRadius);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PointLight")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PointLight")
	}
	static class APointLight* GetDefaultObj()
	{
		return GetDefaultObjImpl<APointLight>();
	}
};
DUMPER7_ASSERTS_APointLight;

// Class Engine.Rig
// 0x0028 (0x0050 - 0x0028)
class URig final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransformBase>                 TransformBases;                                    // 0x0030(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FNode>                          Nodes;                                             // 0x0040(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Rig")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Rig")
	}
	static class URig* GetDefaultObj()
	{
		return GetDefaultObjImpl<URig>();
	}
};
DUMPER7_ASSERTS_URig;

// Class Engine.Polys
// 0x0010 (0x0038 - 0x0028)
class UPolys final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Polys")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Polys")
	}
	static class UPolys* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPolys>();
	}
};
DUMPER7_ASSERTS_UPolys;

// Class Engine.ObjectElementObjectInterface
// 0x0008 (0x0030 - 0x0028)
class UObjectElementObjectInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ObjectElementObjectInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ObjectElementObjectInterface")
	}
	static class UObjectElementObjectInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObjectElementObjectInterface>();
	}
};
DUMPER7_ASSERTS_UObjectElementObjectInterface;

// Class Engine.PrecomputedVisibilityOverrideVolume
// 0x0030 (0x0300 - 0x02D0)
class APrecomputedVisibilityOverrideVolume final : public AVolume
{
public:
	TArray<class AActor*>                         OverrideVisibleActors;                             // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OverrideInvisibleActors;                           // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FName>                           OverrideInvisibleLevels;                           // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PrecomputedVisibilityOverrideVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PrecomputedVisibilityOverrideVolume")
	}
	static class APrecomputedVisibilityOverrideVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<APrecomputedVisibilityOverrideVolume>();
	}
};
DUMPER7_ASSERTS_APrecomputedVisibilityOverrideVolume;

// Class Engine.RadialForceActor
// 0x0008 (0x02A0 - 0x0298)
class ARadialForceActor final : public ARigidBodyBase
{
public:
	class URadialForceComponent*                  ForceComponent;                                    // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void DisableForce();
	void EnableForce();
	void FireImpulse();
	void ToggleForce();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RadialForceActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RadialForceActor")
	}
	static class ARadialForceActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARadialForceActor>();
	}
};
DUMPER7_ASSERTS_ARadialForceActor;

// Class Engine.ReplicationDriver
// 0x0000 (0x0028 - 0x0028)
class UReplicationDriver final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ReplicationDriver")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ReplicationDriver")
	}
	static class UReplicationDriver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReplicationDriver>();
	}
};
DUMPER7_ASSERTS_UReplicationDriver;

// Class Engine.SMInstanceElementIdMapTransactor
// 0x0000 (0x0028 - 0x0028)
class USMInstanceElementIdMapTransactor final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SMInstanceElementIdMapTransactor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SMInstanceElementIdMapTransactor")
	}
	static class USMInstanceElementIdMapTransactor* GetDefaultObj()
	{
		return GetDefaultObjImpl<USMInstanceElementIdMapTransactor>();
	}
};
DUMPER7_ASSERTS_USMInstanceElementIdMapTransactor;

// Class Engine.ReplicationConnectionDriver
// 0x0000 (0x0028 - 0x0028)
class UReplicationConnectionDriver final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ReplicationConnectionDriver")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ReplicationConnectionDriver")
	}
	static class UReplicationConnectionDriver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReplicationConnectionDriver>();
	}
};
DUMPER7_ASSERTS_UReplicationConnectionDriver;

// Class Engine.WorldPartitionRuntimeHash
// 0x0050 (0x0078 - 0x0028)
class UWorldPartitionRuntimeHash : public UObject
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionRuntimeHash")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionRuntimeHash")
	}
	static class UWorldPartitionRuntimeHash* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionRuntimeHash>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionRuntimeHash;

// Class Engine.WorldPartitionRuntimeHashSet
// 0x0068 (0x00E0 - 0x0078)
class UWorldPartitionRuntimeHashSet final : public UWorldPartitionRuntimeHash
{
public:
	TArray<class UWorldPartitionRuntimeCell*>     NonSpatiallyLoadedRuntimeCells;                    // 0x0078(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x58];                                      // 0x0088(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionRuntimeHashSet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionRuntimeHashSet")
	}
	static class UWorldPartitionRuntimeHashSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionRuntimeHashSet>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionRuntimeHashSet;

// Class Engine.AsyncActionLoadPrimaryAssetClassList
// 0x0010 (0x0088 - 0x0078)
class UAsyncActionLoadPrimaryAssetClassList final : public UAsyncActionLoadPrimaryAssetBase
{
public:
	TMulticastInlineDelegate<void(const TArray<TSubclassOf<class UObject>>& Loaded)> Completed;      // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UAsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(class UObject* WorldContextObject, const TArray<struct FPrimaryAssetId>& PrimaryAssetList, const TArray<class FName>& LoadBundles);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AsyncActionLoadPrimaryAssetClassList")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AsyncActionLoadPrimaryAssetClassList")
	}
	static class UAsyncActionLoadPrimaryAssetClassList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncActionLoadPrimaryAssetClassList>();
	}
};
DUMPER7_ASSERTS_UAsyncActionLoadPrimaryAssetClassList;

// Class Engine.RuntimePartition
// 0x0000 (0x0028 - 0x0028)
class URuntimePartition : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RuntimePartition")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RuntimePartition")
	}
	static class URuntimePartition* GetDefaultObj()
	{
		return GetDefaultObjImpl<URuntimePartition>();
	}
};
DUMPER7_ASSERTS_URuntimePartition;

// Class Engine.RuntimePartitionLevelStreaming
// 0x0000 (0x0028 - 0x0028)
class URuntimePartitionLevelStreaming final : public URuntimePartition
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RuntimePartitionLevelStreaming")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RuntimePartitionLevelStreaming")
	}
	static class URuntimePartitionLevelStreaming* GetDefaultObj()
	{
		return GetDefaultObjImpl<URuntimePartitionLevelStreaming>();
	}
};
DUMPER7_ASSERTS_URuntimePartitionLevelStreaming;

// Class Engine.RuntimePartitionPersistent
// 0x0000 (0x0028 - 0x0028)
class URuntimePartitionPersistent final : public URuntimePartition
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RuntimePartitionPersistent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RuntimePartitionPersistent")
	}
	static class URuntimePartitionPersistent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URuntimePartitionPersistent>();
	}
};
DUMPER7_ASSERTS_URuntimePartitionPersistent;

// Class Engine.RVOAvoidanceInterface
// 0x0000 (0x0000 - 0x0000)
class IRVOAvoidanceInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RVOAvoidanceInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RVOAvoidanceInterface")
	}
	static class IRVOAvoidanceInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IRVOAvoidanceInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IRVOAvoidanceInterface;

// Class Engine.AtmosphericFogComponent
// 0x0000 (0x03A0 - 0x03A0)
class UAtmosphericFogComponent final : public USkyAtmosphereComponent
{
public:
	void DisableGroundScattering(bool NewGroundScattering);
	void DisableSunDisk(bool NewSunDisk);
	void SetAltitudeScale(float NewAltitudeScale);
	void SetDefaultBrightness(float NewBrightness);
	void SetDefaultLightColor(const struct FLinearColor& NewLightColor);
	void SetDensityMultiplier(float NewDensityMultiplier);
	void SetDensityOffset(float NewDensityOffset);
	void SetDistanceOffset(float NewDistanceOffset);
	void SetDistanceScale(float NewDistanceScale);
	void SetFogMultiplier(float NewFogMultiplier);
	void SetPrecomputeParams(float DensityHeight, int32 MaxScatteringOrder, int32 InscatterAltitudeSampleNum);
	void SetStartDistance(float NewStartDistance);
	void SetSunMultiplier(float NewSunMultiplier);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AtmosphericFogComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AtmosphericFogComponent")
	}
	static class UAtmosphericFogComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtmosphericFogComponent>();
	}
};
DUMPER7_ASSERTS_UAtmosphericFogComponent;

// Class Engine.Scene
// 0x0000 (0x0028 - 0x0028)
class UScene final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Scene")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Scene")
	}
	static class UScene* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScene>();
	}
};
DUMPER7_ASSERTS_UScene;

// Class Engine.LODSyncInterface
// 0x0000 (0x0000 - 0x0000)
class ILODSyncInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LODSyncInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LODSyncInterface")
	}
	static class ILODSyncInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ILODSyncInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ILODSyncInterface;

// Class Engine.SceneCapture2D
// 0x0008 (0x02B0 - 0x02A8)
class ASceneCapture2D : public ASceneCapture
{
public:
	class USceneCaptureComponent2D*               CaptureComponent2D;                                // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnInterpToggle(bool bEnable);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SceneCapture2D")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SceneCapture2D")
	}
	static class ASceneCapture2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASceneCapture2D>();
	}
};
DUMPER7_ASSERTS_ASceneCapture2D;

// Class Engine.SceneCaptureComponent2D
// 0x07F0 (0x0B50 - 0x0360)
class USceneCaptureComponent2D final : public USceneCaptureComponent
{
public:
	ECameraProjectionMode                         ProjectionType;                                    // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_359[0x3];                                      // 0x0359(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FOVAngle;                                          // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrthoWidth;                                        // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 TextureTarget;                                     // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESceneCaptureCompositeMode                    CompositeMode;                                     // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_371[0xF];                                      // 0x0371(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   PostProcessSettings;                               // 0x0380(0x06E0)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	float                                         PostProcessBlendWeight;                            // 0x0A60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_CustomNearClippingPlane : 1;             // 0x0A64(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A65[0x3];                                      // 0x0A65(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomNearClippingPlane;                           // 0x0A68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomProjectionMatrix;                        // 0x0A6C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A6D[0x3];                                      // 0x0A6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                CustomProjectionMatrix;                            // 0x0A70(0x0080)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bUseFauxOrthoViewPos;                              // 0x0AF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOrthographicTiling;                         // 0x0AF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AF2[0x2];                                      // 0x0AF2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumXTiles;                                         // 0x0AF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumYTiles;                                         // 0x0AF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableClipPlane;                                  // 0x0AFC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AFD[0x3];                                      // 0x0AFD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ClipPlaneBase;                                     // 0x0B00(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClipPlaneNormal;                                   // 0x0B18(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCameraCutThisFrame : 1;                           // 0x0B30(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1; // 0x0B30(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B31[0x1F];                                     // 0x0B31(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddOrUpdateBlendable(TScriptInterface<class IBlendableInterface> InBlendableObject, float InWeight);
	void CaptureScene();
	void RemoveBlendable(TScriptInterface<class IBlendableInterface> InBlendableObject);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SceneCaptureComponent2D")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SceneCaptureComponent2D")
	}
	static class USceneCaptureComponent2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<USceneCaptureComponent2D>();
	}
};
DUMPER7_ASSERTS_USceneCaptureComponent2D;

// Class Engine.SceneCaptureComponentCube
// 0x0010 (0x0370 - 0x0360)
class USceneCaptureComponentCube final : public USceneCaptureComponent
{
public:
	class UTextureRenderTargetCube*               TextureTarget;                                     // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureRotation;                                  // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_361[0xF];                                      // 0x0361(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CaptureScene();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SceneCaptureComponentCube")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SceneCaptureComponentCube")
	}
	static class USceneCaptureComponentCube* GetDefaultObj()
	{
		return GetDefaultObjImpl<USceneCaptureComponentCube>();
	}
};
DUMPER7_ASSERTS_USceneCaptureComponentCube;

// Class Engine.SceneCaptureCube
// 0x0008 (0x02B0 - 0x02A8)
class ASceneCaptureCube final : public ASceneCapture
{
public:
	class USceneCaptureComponentCube*             CaptureComponentCube;                              // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnInterpToggle(bool bEnable);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SceneCaptureCube")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SceneCaptureCube")
	}
	static class ASceneCaptureCube* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASceneCaptureCube>();
	}
};
DUMPER7_ASSERTS_ASceneCaptureCube;

// Class Engine.ShadowMapTexture2D
// 0x0000 (0x0280 - 0x0280)
class UShadowMapTexture2D final : public UTexture2D
{
public:
	EShadowMapFlags                               ShadowmapFlags;                                    // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ShadowMapTexture2D")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ShadowMapTexture2D")
	}
	static class UShadowMapTexture2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShadowMapTexture2D>();
	}
};
DUMPER7_ASSERTS_UShadowMapTexture2D;

// Class Engine.SkeletalMeshSocket
// 0x0060 (0x0088 - 0x0028)
class USkeletalMeshSocket final : public UObject
{
public:
	class FName                                   SocketName;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RelativeScale;                                     // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceAlwaysAnimated;                              // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeSocketFromLocation(const class USkeletalMeshComponent* SkelComp, const struct FVector& WorldLocation, const struct FVector& WorldNormal);

	struct FVector GetSocketLocation(const class USkeletalMeshComponent* SkelComp) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkeletalMeshSocket")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkeletalMeshSocket")
	}
	static class USkeletalMeshSocket* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkeletalMeshSocket>();
	}
};
DUMPER7_ASSERTS_USkeletalMeshSocket;

// Class Engine.SkyLight
// 0x0010 (0x02A8 - 0x0298)
class ASkyLight : public AInfo
{
public:
	class USkyLightComponent*                     LightComponent;                                    // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bEnabled : 1;                                      // 0x02A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_bEnabled();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkyLight")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkyLight")
	}
	static class ASkyLight* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASkyLight>();
	}
};
DUMPER7_ASSERTS_ASkyLight;

// Class Engine.AnimCompress_PerTrackCompression
// 0x0078 (0x00D8 - 0x0060)
class UAnimCompress_PerTrackCompression final : public UAnimCompress_RemoveLinearKeys
{
public:
	float                                         MaxZeroingThreshold;                               // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPosDiffBitwise;                                 // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngleDiffBitwise;                               // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxScaleDiffBitwise;                               // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EAnimationCompressionFormat>           AllowedRotationFormats;                            // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EAnimationCompressionFormat>           AllowedTranslationFormats;                         // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EAnimationCompressionFormat>           AllowedScaleFormats;                               // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bResampleAnimation : 1;                            // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ResampledFramerate;                                // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinKeysForResampling;                              // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseAdaptiveError : 1;                             // 0x00AC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseOverrideForEndEffectors : 1;                   // 0x00AC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TrackHeightBias;                                   // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParentingDivisor;                                  // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParentingDivisorExponent;                          // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseAdaptiveError2 : 1;                            // 0x00BC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationErrorSourceRatio;                          // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslationErrorSourceRatio;                       // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleErrorSourceRatio;                             // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxErrorPerTrackRatio;                             // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerturbationProbeSize;                             // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimCompress_PerTrackCompression")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimCompress_PerTrackCompression")
	}
	static class UAnimCompress_PerTrackCompression* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimCompress_PerTrackCompression>();
	}
};
DUMPER7_ASSERTS_UAnimCompress_PerTrackCompression;

// Class Engine.SkyLightComponent
// 0x01F0 (0x04D0 - 0x02E0)
class USkyLightComponent final : public ULightComponentBase
{
public:
	bool                                          bRealTimeCapture;                                  // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkyLightSourceType                           SourceType;                                        // 0x02D9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DA[0x6];                                      // 0x02DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           Cubemap;                                           // 0x02E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceCubemapAngle;                                // 0x02E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CubemapResolution;                                 // 0x02EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyDistanceThreshold;                              // 0x02F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureEmissiveOnly;                              // 0x02F4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLowerHemisphereIsBlack;                           // 0x02F5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F6[0x2];                                      // 0x02F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LowerHemisphereColor;                              // 0x02F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionMaxDistance;                              // 0x0308(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Contrast;                                          // 0x030C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionExponent;                                 // 0x0310(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinOcclusion;                                      // 0x0314(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 OcclusionTint;                                     // 0x0318(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCloudAmbientOcclusion : 1;                        // 0x031C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31D[0x3];                                      // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CloudAmbientOcclusionStrength;                     // 0x0320(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAmbientOcclusionExtent;                       // 0x0324(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAmbientOcclusionMapResolutionScale;           // 0x0328(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAmbientOcclusionApertureScale;                // 0x032C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOcclusionCombineMode                         OcclusionCombineMode;                              // 0x0330(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_331[0x3];                                      // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bShowIlluminanceMeter : 1;                         // 0x0334(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_335[0xB3];                                     // 0x0335(0x00B3)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           BlendDestinationCubemap;                           // 0x03E8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F0[0xE0];                                     // 0x03F0(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RecaptureSky();
	void SetCubemap(class UTextureCube* NewCubemap);
	void SetCubemapBlend(class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap, float InBlendFraction);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetIntensity(float NewIntensity);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetLowerHemisphereColor(const struct FLinearColor& InLowerHemisphereColor);
	void SetMinOcclusion(float InMinOcclusion);
	void SetOcclusionContrast(float InOcclusionContrast);
	void SetOcclusionExponent(float InOcclusionExponent);
	void SetOcclusionTint(const struct FColor& InTint);
	void SetSourceCubemapAngle(float NewValue);
	void SetVolumetricScatteringIntensity(float NewIntensity);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkyLightComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkyLightComponent")
	}
	static class USkyLightComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkyLightComponent>();
	}
};
DUMPER7_ASSERTS_USkyLightComponent;

// Class Engine.SMInstanceManager
// 0x0000 (0x0000 - 0x0000)
class ISMInstanceManager final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SMInstanceManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SMInstanceManager")
	}
	static class ISMInstanceManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISMInstanceManager>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ISMInstanceManager;

// Class Engine.SMInstanceManagerProvider
// 0x0000 (0x0000 - 0x0000)
class ISMInstanceManagerProvider final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SMInstanceManagerProvider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SMInstanceManagerProvider")
	}
	static class ISMInstanceManagerProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISMInstanceManagerProvider>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ISMInstanceManagerProvider;

// Class Engine.SoundAttenuation
// 0x03D0 (0x03F8 - 0x0028)
class USoundAttenuation final : public UObject
{
public:
	struct FSoundAttenuationSettings              Attenuation;                                       // 0x0028(0x03D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundAttenuation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundAttenuation")
	}
	static class USoundAttenuation* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundAttenuation>();
	}
};
DUMPER7_ASSERTS_USoundAttenuation;

// Class Engine.AnimCurveCompressionCodec_CompressedRichCurve
// 0x0000 (0x0038 - 0x0038)
class UAnimCurveCompressionCodec_CompressedRichCurve final : public UAnimCurveCompressionCodec
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimCurveCompressionCodec_CompressedRichCurve")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimCurveCompressionCodec_CompressedRichCurve")
	}
	static class UAnimCurveCompressionCodec_CompressedRichCurve* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimCurveCompressionCodec_CompressedRichCurve>();
	}
};
DUMPER7_ASSERTS_UAnimCurveCompressionCodec_CompressedRichCurve;

// Class Engine.SoundEffectPresetWidgetInterface
// 0x0000 (0x0000 - 0x0000)
class ISoundEffectPresetWidgetInterface final
{
public:
	TSubclassOf<class USoundEffectPreset> GetClass();
	void OnConstructed(class USoundEffectPreset* Preset);
	void OnPropertyChanged(class USoundEffectPreset* Preset, class FName PropertyName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundEffectPresetWidgetInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundEffectPresetWidgetInterface")
	}
	static class ISoundEffectPresetWidgetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISoundEffectPresetWidgetInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ISoundEffectPresetWidgetInterface;

// Class Engine.SoundEffectSourcePreset
// 0x0000 (0x0068 - 0x0068)
class USoundEffectSourcePreset : public USoundEffectPreset
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundEffectSourcePreset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundEffectSourcePreset")
	}
	static class USoundEffectSourcePreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundEffectSourcePreset>();
	}
};
DUMPER7_ASSERTS_USoundEffectSourcePreset;

// Class Engine.WorldPartitionStreamingPolicy
// 0x0260 (0x0288 - 0x0028)
class UWorldPartitionStreamingPolicy : public UObject
{
public:
	uint8                                         Pad_28[0x260];                                     // 0x0028(0x0260)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionStreamingPolicy")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionStreamingPolicy")
	}
	static class UWorldPartitionStreamingPolicy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionStreamingPolicy>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionStreamingPolicy;

// Class Engine.SoundEffectSourcePresetChain
// 0x0018 (0x0040 - 0x0028)
class USoundEffectSourcePresetChain final : public UObject
{
public:
	TArray<struct FSourceEffectChainEntry>        Chain;                                             // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bPlayEffectChainTails : 1;                         // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundEffectSourcePresetChain")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundEffectSourcePresetChain")
	}
	static class USoundEffectSourcePresetChain* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundEffectSourcePresetChain>();
	}
};
DUMPER7_ASSERTS_USoundEffectSourcePresetChain;

// Class Engine.SoundGroups
// 0x0060 (0x0088 - 0x0028)
class USoundGroups final : public UObject
{
public:
	TArray<struct FSoundGroup>                    SoundGroupProfiles;                                // 0x0028(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x50];                                      // 0x0038(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundGroups")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundGroups")
	}
	static class USoundGroups* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundGroups>();
	}
};
DUMPER7_ASSERTS_USoundGroups;

// Class Engine.AnimDataModel
// 0x00A0 (0x00C8 - 0x0028)
class UAnimDataModel final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BracketCounter;                                    // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EAnimDataModelNotifyType NotifType, TScriptInterface<class IAnimationDataModel> Model, const struct FAnimDataModelNotifPayload& Payload)> ModifiedEventDynamic; // 0x0038(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x18];                                      // 0x0048(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneAnimationTrack>            BoneAnimationTracks;                               // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	float                                         PlayLength;                                        // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameRate                             FrameRate;                                         // 0x0074(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumberOfFrames;                                    // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumberOfKeys;                                      // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimationCurveData                    CurveData;                                         // 0x0088(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPrivate)
	TArray<struct FAnimatedBoneAttribute>         AnimatedBoneAttributes;                            // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	bool                                          bPopulated;                                        // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B9[0xF];                                       // 0x00B9(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimDataModel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimDataModel")
	}
	static class UAnimDataModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimDataModel>();
	}
};
DUMPER7_ASSERTS_UAnimDataModel;

// Class Engine.NavigationDataChunkActor
// 0x0048 (0x02E0 - 0x0298)
class ANavigationDataChunkActor final : public APartitionActor
{
public:
	TArray<class UNavigationDataChunk*>           NavDataChunks;                                     // 0x0298(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FBox                                   DataChunkActorBounds;                              // 0x02A8(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NavigationDataChunkActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NavigationDataChunkActor")
	}
	static class ANavigationDataChunkActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANavigationDataChunkActor>();
	}
};
DUMPER7_ASSERTS_ANavigationDataChunkActor;

// Class Engine.SoundNodeModulatorContinuous
// 0x0040 (0x0088 - 0x0048)
class USoundNodeModulatorContinuous final : public USoundNode
{
public:
	struct FModulatorContinuousParams             PitchModulationParams;                             // 0x0048(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FModulatorContinuousParams             VolumeModulationParams;                            // 0x0068(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeModulatorContinuous")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeModulatorContinuous")
	}
	static class USoundNodeModulatorContinuous* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeModulatorContinuous>();
	}
};
DUMPER7_ASSERTS_USoundNodeModulatorContinuous;

// Class Engine.SoundSubmixWidgetInterface
// 0x0000 (0x0000 - 0x0000)
class ISoundSubmixWidgetInterface final
{
public:
	void OnConstructed(class USoundSubmixBase* SoundSubmix);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundSubmixWidgetInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundSubmixWidgetInterface")
	}
	static class ISoundSubmixWidgetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISoundSubmixWidgetInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ISoundSubmixWidgetInterface;

// Class Engine.SparseVolumeTexture
// 0x0000 (0x0028 - 0x0028)
class USparseVolumeTexture : public UObject
{
public:
	int32 GetNumFrames() const;
	int32 GetNumMipLevels() const;
	int32 GetSizeX() const;
	int32 GetSizeY() const;
	int32 GetSizeZ() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SparseVolumeTexture")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SparseVolumeTexture")
	}
	static class USparseVolumeTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparseVolumeTexture>();
	}
};
DUMPER7_ASSERTS_USparseVolumeTexture;

// Class Engine.CameraShakePattern
// 0x0000 (0x0028 - 0x0028)
class UCameraShakePattern : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CameraShakePattern")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CameraShakePattern")
	}
	static class UCameraShakePattern* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraShakePattern>();
	}
};
DUMPER7_ASSERTS_UCameraShakePattern;

// Class Engine.SparseVolumeTextureFrame
// 0x00E8 (0x0110 - 0x0028)
class alignas(0x10) USparseVolumeTextureFrame final : public USparseVolumeTexture
{
public:
	class USparseVolumeTexture*                   Owner;                                             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         FrameIndex;                                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0xDC];                                      // 0x0034(0x00DC)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SparseVolumeTextureFrame")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SparseVolumeTextureFrame")
	}
	static class USparseVolumeTextureFrame* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparseVolumeTextureFrame>();
	}
};
DUMPER7_ASSERTS_USparseVolumeTextureFrame;

// Class Engine.StreamableSparseVolumeTexture
// 0x0058 (0x0080 - 0x0028)
class UStreamableSparseVolumeTexture : public USparseVolumeTexture
{
public:
	struct FIntVector                             VolumeResolution;                                  // 0x0028(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMipLevels;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumFrames;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPixelFormat                                  FormatA;                                           // 0x003C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPixelFormat                                  FormatB;                                           // 0x003D(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4f                              FallbackValueA;                                    // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4f                              FallbackValueB;                                    // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressX;                                          // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressY;                                          // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressZ;                                          // 0x0062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalDDCOnly;                                     // 0x0063(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USparseVolumeTextureFrame*>      Frames;                                            // 0x0068(0x0010)(ExportObject, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("StreamableSparseVolumeTexture")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"StreamableSparseVolumeTexture")
	}
	static class UStreamableSparseVolumeTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStreamableSparseVolumeTexture>();
	}
};
DUMPER7_ASSERTS_UStreamableSparseVolumeTexture;

// Class Engine.WorldPartitionHLODProvider
// 0x0000 (0x0000 - 0x0000)
class IWorldPartitionHLODProvider final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionHLODProvider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionHLODProvider")
	}
	static class IWorldPartitionHLODProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IWorldPartitionHLODProvider>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IWorldPartitionHLODProvider;

// Class Engine.StaticSparseVolumeTexture
// 0x0000 (0x0080 - 0x0080)
class UStaticSparseVolumeTexture final : public UStreamableSparseVolumeTexture
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("StaticSparseVolumeTexture")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"StaticSparseVolumeTexture")
	}
	static class UStaticSparseVolumeTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaticSparseVolumeTexture>();
	}
};
DUMPER7_ASSERTS_UStaticSparseVolumeTexture;

// Class Engine.AnimatedSparseVolumeTexture
// 0x0000 (0x0080 - 0x0080)
class UAnimatedSparseVolumeTexture final : public UStreamableSparseVolumeTexture
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimatedSparseVolumeTexture")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimatedSparseVolumeTexture")
	}
	static class UAnimatedSparseVolumeTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimatedSparseVolumeTexture>();
	}
};
DUMPER7_ASSERTS_UAnimatedSparseVolumeTexture;

// Class Engine.AnimatedSparseVolumeTextureController
// 0x0020 (0x0048 - 0x0028)
class UAnimatedSparseVolumeTextureController final : public UObject
{
public:
	class USparseVolumeTexture*                   SparseVolumeTexture;                               // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlaying;                                        // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FrameRate;                                         // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MipLevel;                                          // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockingStreamingRequests;                        // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class USparseVolumeTextureFrame* GetCurrentFrame();
	void GetCurrentFramesForInterpolation(class USparseVolumeTextureFrame** Frame0, class USparseVolumeTextureFrame** Frame1, float* LerpAlpha);
	float GetDuration();
	float GetFractionalFrameIndex();
	class USparseVolumeTextureFrame* GetFrameByIndex(int32 FrameIndex);
	void Pause();
	void Play();
	void Stop();
	void Update(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimatedSparseVolumeTextureController")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimatedSparseVolumeTextureController")
	}
	static class UAnimatedSparseVolumeTextureController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimatedSparseVolumeTextureController>();
	}
};
DUMPER7_ASSERTS_UAnimatedSparseVolumeTextureController;

// Class Engine.SphereReflectionCapture
// 0x0008 (0x02A8 - 0x02A0)
class ASphereReflectionCapture final : public AReflectionCapture
{
public:
	class UDrawSphereComponent*                   DrawCaptureRadius;                                 // 0x02A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SphereReflectionCapture")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SphereReflectionCapture")
	}
	static class ASphereReflectionCapture* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASphereReflectionCapture>();
	}
};
DUMPER7_ASSERTS_ASphereReflectionCapture;

// Class Engine.SphereReflectionCaptureComponent
// 0x0010 (0x0320 - 0x0310)
class USphereReflectionCaptureComponent final : public UReflectionCaptureComponent
{
public:
	float                                         InfluenceRadius;                                   // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CaptureDistanceScale;                              // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDrawSphereComponent*                   PreviewInfluenceRadius;                            // 0x0318(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SphereReflectionCaptureComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SphereReflectionCaptureComponent")
	}
	static class USphereReflectionCaptureComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USphereReflectionCaptureComponent>();
	}
};
DUMPER7_ASSERTS_USphereReflectionCaptureComponent;

// Class Engine.StaticMeshSocket
// 0x0060 (0x0088 - 0x0028)
class UStaticMeshSocket final : public UObject
{
public:
	class FName                                   SocketName;                                        // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RelativeScale;                                     // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tag;                                               // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("StaticMeshSocket")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"StaticMeshSocket")
	}
	static class UStaticMeshSocket* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaticMeshSocket>();
	}
};
DUMPER7_ASSERTS_UStaticMeshSocket;

// Class Engine.Controller
// 0x0098 (0x0330 - 0x0298)
class AController : public AActor
{
public:
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           PlayerState;                                       // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8[0x8];                                      // 0x02A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(float Damage, const class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser)> OnInstigatedAnyDamage; // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class APawn* OldPawn, class APawn* NewPawn)> OnPossessedPawnChanged; // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Pawn;                                              // 0x02D8(0x0008)(Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E0[0x8];                                      // 0x02E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             Character;                                         // 0x02E8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                        TransformComponent;                                // 0x02F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F8[0x18];                                     // 0x02F8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ControlRotation;                                   // 0x0310(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         bAttachToPawn : 1;                                 // 0x0328(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera);
	void OnRep_Pawn();
	void OnRep_PlayerState();
	void Possess(class APawn* InPawn);
	void ReceiveInstigatedAnyDamage(float Damage, const class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser);
	void ReceivePossess(class APawn* PossessedPawn);
	void ReceiveUnPossess(class APawn* UnpossessedPawn);
	void ResetIgnoreInputFlags();
	void ResetIgnoreLookInput();
	void ResetIgnoreMoveInput();
	void SetControlRotation(const struct FRotator& NewRotation);
	void SetIgnoreLookInput(bool bNewLookInput);
	void SetIgnoreMoveInput(bool bNewMoveInput);
	void SetInitialLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void StopMovement();
	void UnPossess();

	struct FRotator GetControlRotation() const;
	struct FRotator GetDesiredRotation() const;
	void GetPlayerViewPoint(struct FVector* Location, struct FRotator* Rotation) const;
	class AActor* GetViewTarget() const;
	bool IsLocalController() const;
	bool IsLocalPlayerController() const;
	bool IsLookInputIgnored() const;
	bool IsMoveInputIgnored() const;
	bool IsPlayerController() const;
	class APawn* K2_GetPawn() const;
	bool LineOfSightTo(const class AActor* Other, const struct FVector& ViewPoint, bool bAlternateChecks) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Controller")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Controller")
	}
	static class AController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AController>();
	}
};
DUMPER7_ASSERTS_AController;

// Class Engine.StereoLayerShape
// 0x0000 (0x0028 - 0x0028)
class UStereoLayerShape : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("StereoLayerShape")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"StereoLayerShape")
	}
	static class UStereoLayerShape* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStereoLayerShape>();
	}
};
DUMPER7_ASSERTS_UStereoLayerShape;

// Class Engine.StereoLayerShapeQuad
// 0x0000 (0x0028 - 0x0028)
class UStereoLayerShapeQuad final : public UStereoLayerShape
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("StereoLayerShapeQuad")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"StereoLayerShapeQuad")
	}
	static class UStereoLayerShapeQuad* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStereoLayerShapeQuad>();
	}
};
DUMPER7_ASSERTS_UStereoLayerShapeQuad;

// Class Engine.StereoLayerShapeCylinder
// 0x0010 (0x0038 - 0x0028)
class UStereoLayerShapeCylinder final : public UStereoLayerShape
{
public:
	float                                         Radius;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlayArc;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHeight(int32 InHeight);
	void SetOverlayArc(float InOverlayArc);
	void SetRadius(float InRadius);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("StereoLayerShapeCylinder")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"StereoLayerShapeCylinder")
	}
	static class UStereoLayerShapeCylinder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStereoLayerShapeCylinder>();
	}
};
DUMPER7_ASSERTS_UStereoLayerShapeCylinder;

// Class Engine.StereoLayerShapeCubemap
// 0x0000 (0x0028 - 0x0028)
class UStereoLayerShapeCubemap final : public UStereoLayerShape
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("StereoLayerShapeCubemap")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"StereoLayerShapeCubemap")
	}
	static class UStereoLayerShapeCubemap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStereoLayerShapeCubemap>();
	}
};
DUMPER7_ASSERTS_UStereoLayerShapeCubemap;

// Class Engine.CollisionProfile
// 0x0138 (0x0170 - 0x0038)
class UCollisionProfile final : public UDeveloperSettings
{
public:
	TArray<struct FCollisionResponseTemplate>     Profiles;                                          // 0x0038(0x0010)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	TArray<struct FCustomChannelSetup>            DefaultChannelResponses;                           // 0x0048(0x0010)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	TArray<struct FCustomProfile>                 EditProfiles;                                      // 0x0058(0x0010)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	TArray<struct FRedirector>                    ProfileRedirects;                                  // 0x0068(0x0010)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	TArray<struct FRedirector>                    CollisionChannelRedirects;                         // 0x0078(0x0010)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0xE8];                                      // 0x0088(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CollisionProfile")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CollisionProfile")
	}
	static class UCollisionProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCollisionProfile>();
	}
};
DUMPER7_ASSERTS_UCollisionProfile;

// Class Engine.StereoLayerShapeEquirect
// 0x0098 (0x00C0 - 0x0028)
class UStereoLayerShapeEquirect final : public UStereoLayerShape
{
public:
	struct FBox2D                                 LeftUVRect;                                        // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox2D                                 RightUVRect;                                       // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              LeftScale;                                         // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RightScale;                                        // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LeftBias;                                          // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RightBias;                                         // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetEquirectProps(const struct FEquirectProps& InScaleBiases);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("StereoLayerShapeEquirect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"StereoLayerShapeEquirect")
	}
	static class UStereoLayerShapeEquirect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStereoLayerShapeEquirect>();
	}
};
DUMPER7_ASSERTS_UStereoLayerShapeEquirect;

// Class Engine.StereoLayerComponent
// 0x0190 (0x0430 - 0x02A0)
class UStereoLayerComponent final : public USceneComponent
{
public:
	uint8                                         bLiveTexture : 1;                                  // 0x02A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsDepth : 1;                                // 0x02A0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNoAlphaChannel : 1;                               // 0x02A0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Texture;                                           // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                               LeftTexture;                                       // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bQuadPreserveTextureRatio : 1;                     // 0x02B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              QuadSize;                                          // 0x02C0(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBox2D                                 UVRect;                                            // 0x02D0(0x0028)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         CylinderRadius;                                    // 0x02F8(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CylinderOverlayArc;                                // 0x02FC(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CylinderHeight;                                    // 0x0300(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEquirectProps                         EquirectProps;                                     // 0x0308(0x0098)(Deprecated, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EStereoLayerType                              StereoLayerType;                                   // 0x03A0(0x0001)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EStereoLayerShape                             StereoLayerShape;                                  // 0x03A1(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A2[0x6];                                      // 0x03A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStereoLayerShape*                      Shape;                                             // 0x03A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Priority;                                          // 0x03B0(0x0004)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B4[0x7C];                                     // 0x03B4(0x007C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MarkTextureForUpdate();
	void SetEquirectProps(const struct FEquirectProps& InEquirectProps);
	void SetLeftTexture(class UTexture* InTexture);
	void SetPriority(int32 InPriority);
	void SetQuadSize(const struct FVector2D& InQuadSize);
	void SetTexture(class UTexture* InTexture);
	void SetUVRect(const struct FBox2D& InUVRect);

	class UTexture* GetLeftTexture() const;
	int32 GetPriority() const;
	struct FVector2D GetQuadSize() const;
	class UTexture* GetTexture() const;
	struct FBox2D GetUVRect() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("StereoLayerComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"StereoLayerComponent")
	}
	static class UStereoLayerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStereoLayerComponent>();
	}
};
DUMPER7_ASSERTS_UStereoLayerComponent;

// Class Engine.SubUVAnimation
// 0x0040 (0x0068 - 0x0028)
class USubUVAnimation final : public UObject
{
public:
	class UTexture2D*                             SubUVTexture;                                      // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubImages_Horizontal;                              // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubImages_Vertical;                                // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubUVBoundingVertexCount                     BoundingMode;                                      // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOpacitySourceMode                            OpacitySourceMode;                                 // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AlphaThreshold;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x28];                                      // 0x0040(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SubUVAnimation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SubUVAnimation")
	}
	static class USubUVAnimation* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubUVAnimation>();
	}
};
DUMPER7_ASSERTS_USubUVAnimation;

// Class Engine.TextPropertyTestObject
// 0x0048 (0x0070 - 0x0028)
class UTextPropertyTestObject final : public UObject
{
public:
	class FText                                   DefaultedText;                                     // 0x0028(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   UndefaultedText;                                   // 0x0040(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   TransientText;                                     // 0x0058(0x0018)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TextPropertyTestObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TextPropertyTestObject")
	}
	static class UTextPropertyTestObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextPropertyTestObject>();
	}
};
DUMPER7_ASSERTS_UTextPropertyTestObject;

// Class Engine.CurveVector
// 0x0180 (0x01B0 - 0x0030)
class UCurveVector final : public UCurveBase
{
public:
	struct FRichCurve                             FloatCurves[0x3];                                  // 0x0030(0x0080)(NativeAccessSpecifierPublic)

public:
	struct FVector GetVectorValue(float InTime) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CurveVector")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CurveVector")
	}
	static class UCurveVector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurveVector>();
	}
};
DUMPER7_ASSERTS_UCurveVector;

// Class Engine.TextRenderActor
// 0x0008 (0x02A0 - 0x0298)
class ATextRenderActor final : public AActor
{
public:
	class UTextRenderComponent*                   TextRender;                                        // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TextRenderActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TextRenderActor")
	}
	static class ATextRenderActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATextRenderActor>();
	}
};
DUMPER7_ASSERTS_ATextRenderActor;

// Class Engine.TextRenderComponent
// 0x0050 (0x05C0 - 0x0570)
class UTextRenderComponent final : public UPrimitiveComponent
{
public:
	class FText                                   Text;                                              // 0x0570(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     TextMaterial;                                      // 0x0588(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                  Font;                                              // 0x0590(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizTextAligment                            HorizontalAlignment;                               // 0x0598(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalTextAligment                         VerticalAlignment;                                 // 0x0599(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59A[0x2];                                      // 0x059A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 TextRenderColor;                                   // 0x059C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XScale;                                            // 0x05A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YScale;                                            // 0x05A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldSize;                                         // 0x05A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvDefaultSize;                                    // 0x05AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizSpacingAdjust;                                // 0x05B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VertSpacingAdjust;                                 // 0x05B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAlwaysRenderAsText : 1;                           // 0x05B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5B9[0x7];                                      // 0x05B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void K2_SetText(const class FText& Value);
	void SetFont(class UFont* Value);
	void SetHorizontalAlignment(EHorizTextAligment Value);
	void SetHorizSpacingAdjust(float Value);
	void SetText(const class FText& Value);
	void SetTextMaterial(class UMaterialInterface* Material);
	void SetTextRenderColor(const struct FColor& Value);
	void SetVerticalAlignment(EVerticalTextAligment Value);
	void SetVertSpacingAdjust(float Value);
	void SetWorldSize(float Value);
	void SetXScale(float Value);
	void SetYScale(float Value);

	struct FVector GetTextLocalSize() const;
	struct FVector GetTextWorldSize() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TextRenderComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TextRenderComponent")
	}
	static class UTextRenderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextRenderComponent>();
	}
};
DUMPER7_ASSERTS_UTextRenderComponent;

// Class Engine.WorldPartitionRuntimeCell
// 0x0060 (0x0088 - 0x0028)
class UWorldPartitionRuntimeCell : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsAlwaysLoaded;                                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           DataLayers;                                        // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         Priority;                                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bClientOnlyVisible;                                // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsHLOD;                                           // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bBlockOnSlowLoading;                               // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4F[0x1];                                       // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ContentBundleID;                                   // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  CellGuid;                                          // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  SourceCellGuid;                                    // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWorldPartitionRuntimeCellData*         RuntimeCellData;                                   // 0x0080(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionRuntimeCell")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionRuntimeCell")
	}
	static class UWorldPartitionRuntimeCell* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionRuntimeCell>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionRuntimeCell;

// Class Engine.WorldPartitionRuntimeLevelStreamingCell
// 0x0008 (0x0090 - 0x0088)
class UWorldPartitionRuntimeLevelStreamingCell final : public UWorldPartitionRuntimeCell
{
public:
	class UWorldPartitionLevelStreamingDynamic*   LevelStreaming;                                    // 0x0088(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnLevelHidden();
	void OnLevelShown();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionRuntimeLevelStreamingCell")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionRuntimeLevelStreamingCell")
	}
	static class UWorldPartitionRuntimeLevelStreamingCell* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionRuntimeLevelStreamingCell>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionRuntimeLevelStreamingCell;

// Class Engine.TextureEncodingProjectSettings
// 0x0018 (0x0050 - 0x0038)
class UTextureEncodingProjectSettings final : public UDeveloperSettings
{
public:
	uint8                                         bSharedLinearTextureEncoding : 1;                  // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFinalUsesRDO : 1;                                 // 0x0038(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int8                                          FinalRDOLambda;                                    // 0x003C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureEncodeEffort                          FinalEffortLevel;                                  // 0x003D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureUniversalTiling                       FinalUniversalTiling;                              // 0x003E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bFastUsesRDO : 1;                                  // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int8                                          FastRDOLambda;                                     // 0x0044(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureEncodeEffort                          FastEffortLevel;                                   // 0x0045(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureUniversalTiling                       FastUniversalTiling;                               // 0x0046(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureEncodeSpeed                           CookUsesSpeed;                                     // 0x0047(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureEncodeSpeed                           EditorUsesSpeed;                                   // 0x0048(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TextureEncodingProjectSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TextureEncodingProjectSettings")
	}
	static class UTextureEncodingProjectSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextureEncodingProjectSettings>();
	}
};
DUMPER7_ASSERTS_UTextureEncodingProjectSettings;

// Class Engine.TextureEncodingUserSettings
// 0x0008 (0x0040 - 0x0038)
class UTextureEncodingUserSettings final : public UDeveloperSettings
{
public:
	ETextureEncodeSpeedOverride                   ForceEncodeSpeed;                                  // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TextureEncodingUserSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TextureEncodingUserSettings")
	}
	static class UTextureEncodingUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextureEncodingUserSettings>();
	}
};
DUMPER7_ASSERTS_UTextureEncodingUserSettings;

// Class Engine.DataDrivenConsoleVariableSettings
// 0x0038 (0x0070 - 0x0038)
class UDataDrivenConsoleVariableSettings final : public UDeveloperSettings
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDataDrivenConsoleVariable>     CVarsArray;                                        // 0x0050(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DataDrivenConsoleVariableSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DataDrivenConsoleVariableSettings")
	}
	static class UDataDrivenConsoleVariableSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataDrivenConsoleVariableSettings>();
	}
};
DUMPER7_ASSERTS_UDataDrivenConsoleVariableSettings;

// Class Engine.WorldPartitionMiniMap
// 0x00D0 (0x0368 - 0x0298)
class AWorldPartitionMiniMap final : public AInfo
{
public:
	struct FBox                                   MiniMapWorldBounds;                                // 0x0298(0x0038)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FBox2D                                 UVOffset;                                          // 0x02D0(0x0028)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UTexture2D*                             MiniMapTexture;                                    // 0x02F8(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<struct FActorDataLayer>                  ExcludedDataLayers;                                // 0x0300(0x0050)(Edit, NativeAccessSpecifierPublic)
	int32                                         WorldUnitsPerPixel;                                // 0x0350(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuilderCellSize;                                   // 0x0354(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESceneCaptureSource                           CaptureSource;                                     // 0x0358(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_359[0x3];                                      // 0x0359(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CaptureWarmupFrames;                               // 0x035C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MiniMapTileSize;                                   // 0x0360(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionMiniMap")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionMiniMap")
	}
	static class AWorldPartitionMiniMap* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWorldPartitionMiniMap>();
	}
};
DUMPER7_ASSERTS_AWorldPartitionMiniMap;

// Class Engine.TimelineComponent
// 0x00A0 (0x0140 - 0x00A0)
class UTimelineComponent final : public UActorComponent
{
public:
	struct FTimeline                              TheTimeline;                                       // 0x00A0(0x0098)(Net, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         bIgnoreTimeDilation : 1;                           // 0x0138(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddEvent(float Time, TDelegate<void()> EventFunc);
	void AddInterpFloat(class UCurveFloat* FloatCurve, TDelegate<void(float Output)> InterpFunc, class FName PropertyName, class FName TrackName);
	void AddInterpLinearColor(class UCurveLinearColor* LinearColorCurve, TDelegate<void(const struct FLinearColor& Output)> InterpFunc, class FName PropertyName, class FName TrackName);
	void AddInterpVector(class UCurveVector* VectorCurve, TDelegate<void(const struct FVector& Output)> InterpFunc, class FName PropertyName, class FName TrackName);
	void OnRep_Timeline(struct FTimeline* OldTimeline);
	void Play();
	void PlayFromStart();
	void Reverse();
	void ReverseFromEnd();
	void SetFloatCurve(class UCurveFloat* NewFloatCurve, class FName FloatTrackName);
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);
	void SetLinearColorCurve(class UCurveLinearColor* NewLinearColorCurve, class FName LinearColorTrackName);
	void SetLooping(bool bNewLooping);
	void SetNewTime(float NewTime);
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);
	void SetPlayRate(float NewRate);
	void SetTimelineFinishedFunc(TDelegate<void()> NewTimelineFinishedFunc);
	void SetTimelineLength(float NewLength);
	void SetTimelineLengthMode(ETimelineLengthMode NewLengthMode);
	void SetTimelinePostUpdateFunc(TDelegate<void()> NewTimelinePostUpdateFunc);
	void SetVectorCurve(class UCurveVector* NewVectorCurve, class FName VectorTrackName);
	void Stop();

	bool GetIgnoreTimeDilation() const;
	float GetPlaybackPosition() const;
	float GetPlayRate() const;
	float GetScaledTimelineLength() const;
	float GetTimelineLength() const;
	bool IsLooping() const;
	bool IsPlaying() const;
	bool IsReversing() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TimelineComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TimelineComponent")
	}
	static class UTimelineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimelineComponent>();
	}
};
DUMPER7_ASSERTS_UTimelineComponent;

// Class Engine.TriggerBase
// 0x0008 (0x02A0 - 0x0298)
class ATriggerBase : public AActor
{
public:
	class UShapeComponent*                        CollisionComponent;                                // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TriggerBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TriggerBase")
	}
	static class ATriggerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATriggerBase>();
	}
};
DUMPER7_ASSERTS_ATriggerBase;

// Class Engine.TriggerBox
// 0x0000 (0x02A0 - 0x02A0)
class ATriggerBox : public ATriggerBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TriggerBox")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TriggerBox")
	}
	static class ATriggerBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATriggerBox>();
	}
};
DUMPER7_ASSERTS_ATriggerBox;

// Class Engine.TriggerCapsule
// 0x0000 (0x02A0 - 0x02A0)
class ATriggerCapsule final : public ATriggerBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TriggerCapsule")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TriggerCapsule")
	}
	static class ATriggerCapsule* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATriggerCapsule>();
	}
};
DUMPER7_ASSERTS_ATriggerCapsule;

// Class Engine.TriggerSphere
// 0x0000 (0x02A0 - 0x02A0)
class ATriggerSphere final : public ATriggerBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TriggerSphere")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TriggerSphere")
	}
	static class ATriggerSphere* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATriggerSphere>();
	}
};
DUMPER7_ASSERTS_ATriggerSphere;

// Class Engine.TwitterIntegrationBase
// 0x0000 (0x0038 - 0x0038)
class UTwitterIntegrationBase final : public UPlatformInterfaceBase
{
public:
	bool AuthorizeAccounts();
	bool CanShowTweetUI();
	class FString GetAccountName(int32 AccountIndex);
	int32 GetNumAccounts();
	void Init();
	bool ShowTweetUI(const class FString& InitialMessage, const class FString& URL, const class FString& Picture);
	bool TwitterRequest(const class FString& URL, const TArray<class FString>& ParamKeysAndValues, ETwitterRequestMethod RequestMethod, int32 AccountIndex);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TwitterIntegrationBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TwitterIntegrationBase")
	}
	static class UTwitterIntegrationBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTwitterIntegrationBase>();
	}
};
DUMPER7_ASSERTS_UTwitterIntegrationBase;

// Class Engine.UserDefinedStruct
// 0x0048 (0x0108 - 0x00C0)
class UUserDefinedStruct : public UScriptStruct
{
public:
	EUserDefinedStructureStatus                   Status;                                            // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  Guid;                                              // 0x00C4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x34];                                      // 0x00D4(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("UserDefinedStruct")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"UserDefinedStruct")
	}
	static class UUserDefinedStruct* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUserDefinedStruct>();
	}
};
DUMPER7_ASSERTS_UUserDefinedStruct;

// Class Engine.VariableFrameStrippingSettings
// 0x0008 (0x0030 - 0x0028)
class UVariableFrameStrippingSettings final : public UObject
{
public:
	struct FPerPlatformBool                       UseVariableFrameStripping;                         // 0x0028(0x0001)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPerPlatformInt                        FrameStrippingRate;                                // 0x002C(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VariableFrameStrippingSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VariableFrameStrippingSettings")
	}
	static class UVariableFrameStrippingSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVariableFrameStrippingSettings>();
	}
};
DUMPER7_ASSERTS_UVariableFrameStrippingSettings;

// Class Engine.ReporterGraph
// 0x0098 (0x00C8 - 0x0030)
class UReporterGraph final : public UReporterBase
{
public:
	uint8                                         Pad_30[0x98];                                      // 0x0030(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ReporterGraph")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ReporterGraph")
	}
	static class UReporterGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReporterGraph>();
	}
};
DUMPER7_ASSERTS_UReporterGraph;

// Class Engine.VectorFieldComponent
// 0x0030 (0x05A0 - 0x0570)
class UVectorFieldComponent final : public UPrimitiveComponent
{
public:
	class UVectorField*                           VectorField;                                       // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tightness;                                         // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPreviewVectorField : 1;                           // 0x0580(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_581[0x1F];                                     // 0x0581(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIntensity(float NewIntensity);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VectorFieldComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VectorFieldComponent")
	}
	static class UVectorFieldComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVectorFieldComponent>();
	}
};
DUMPER7_ASSERTS_UVectorFieldComponent;

// Class Engine.VectorFieldStatic
// 0x0050 (0x00B8 - 0x0068)
class UVectorFieldStatic final : public UVectorField
{
public:
	int32                                         SizeX;                                             // 0x0068(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x006C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeZ;                                             // 0x0070(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowCPUAccess;                                   // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x43];                                      // 0x0075(0x0043)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VectorFieldStatic")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VectorFieldStatic")
	}
	static class UVectorFieldStatic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVectorFieldStatic>();
	}
};
DUMPER7_ASSERTS_UVectorFieldStatic;

// Class Engine.DecalComponent
// 0x0060 (0x0300 - 0x02A0)
class UDecalComponent final : public USceneComponent
{
public:
	class UMaterialInterface*                     DecalMaterial;                                     // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SortOrder;                                         // 0x02A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeScreenSize;                                    // 0x02AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeStartDelay;                                    // 0x02B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeDuration;                                      // 0x02B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInDuration;                                    // 0x02B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInStartDelay;                                  // 0x02BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDestroyOwnerAfterFade : 1;                        // 0x02C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DecalSize;                                         // 0x02C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DecalColor;                                        // 0x02E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F0[0x10];                                     // 0x02F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
	void SetDecalColor(const struct FLinearColor& Color);
	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	void SetFadeIn(float StartDelay, float Duration);
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);
	void SetFadeScreenSize(float NewFadeScreenSize);
	void SetSortOrder(int32 Value);

	class UMaterialInterface* GetDecalMaterial() const;
	float GetFadeDuration() const;
	float GetFadeInDuration() const;
	float GetFadeInStartDelay() const;
	float GetFadeStartDelay() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DecalComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DecalComponent")
	}
	static class UDecalComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDecalComponent>();
	}
};
DUMPER7_ASSERTS_UDecalComponent;

// Class Engine.VisualLoggerDebugSnapshotInterface
// 0x0000 (0x0000 - 0x0000)
class IVisualLoggerDebugSnapshotInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VisualLoggerDebugSnapshotInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VisualLoggerDebugSnapshotInterface")
	}
	static class IVisualLoggerDebugSnapshotInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IVisualLoggerDebugSnapshotInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IVisualLoggerDebugSnapshotInterface;

// Class Engine.WindDirectionalSourceComponent
// 0x0020 (0x02C0 - 0x02A0)
class UWindDirectionalSourceComponent final : public USceneComponent
{
public:
	float                                         Strength;                                          // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinGustAmount;                                     // 0x02A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGustAmount;                                     // 0x02AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPointWind : 1;                                    // 0x02B4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2B5[0xB];                                      // 0x02B5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetMaximumGustAmount(float InNewMaxGust);
	void SetMinimumGustAmount(float InNewMinGust);
	void SetRadius(float InNewRadius);
	void SetSpeed(float InNewSpeed);
	void SetStrength(float InNewStrength);
	void SetWindType(EWindSourceType InNewType);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WindDirectionalSourceComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WindDirectionalSourceComponent")
	}
	static class UWindDirectionalSourceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWindDirectionalSourceComponent>();
	}
};
DUMPER7_ASSERTS_UWindDirectionalSourceComponent;

// Class Engine.WorldPartitionEditorLoaderAdapter
// 0x0008 (0x0030 - 0x0028)
class UWorldPartitionEditorLoaderAdapter final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionEditorLoaderAdapter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionEditorLoaderAdapter")
	}
	static class UWorldPartitionEditorLoaderAdapter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionEditorLoaderAdapter>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionEditorLoaderAdapter;

// Class Engine.WorldPartitionRuntimeCellData
// 0x0060 (0x0088 - 0x0028)
class UWorldPartitionRuntimeCellData : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   ContentBounds;                                     // 0x0048(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionRuntimeCellData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionRuntimeCellData")
	}
	static class UWorldPartitionRuntimeCellData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionRuntimeCellData>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionRuntimeCellData;

// Class Engine.RuntimeHashSetExternalStreamingObject
// 0x0028 (0x0140 - 0x0118)
class URuntimeHashSetExternalStreamingObject final : public URuntimeHashExternalStreamingObjectBase
{
public:
	TArray<class UWorldPartitionRuntimeCell*>     NonSpatiallyLoadedRuntimeCells;                    // 0x0118(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UWorldPartitionRuntimeCell*>     SpatiallyLoadedRuntimeCells;                       // 0x0128(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RuntimeHashSetExternalStreamingObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RuntimeHashSetExternalStreamingObject")
	}
	static class URuntimeHashSetExternalStreamingObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<URuntimeHashSetExternalStreamingObject>();
	}
};
DUMPER7_ASSERTS_URuntimeHashSetExternalStreamingObject;

// Class Engine.HierarchicalLODSetup
// 0x0038 (0x0060 - 0x0028)
class UHierarchicalLODSetup final : public UObject
{
public:
	TArray<struct FHierarchicalSimplification>    HierarchicalLODSetup;                              // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      OverrideBaseMaterial;                              // 0x0038(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HierarchicalLODSetup")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HierarchicalLODSetup")
	}
	static class UHierarchicalLODSetup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHierarchicalLODSetup>();
	}
};
DUMPER7_ASSERTS_UHierarchicalLODSetup;

// Class Engine.WorldSettings
// 0x0220 (0x04B8 - 0x0298)
class AWorldSettings final : public AInfo
{
public:
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VisibilityCellSize;                                // 0x02A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVisibilityAggressiveness                     VisibilityAggressiveness;                          // 0x02A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPrecomputeVisibility : 1;                         // 0x02A5(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPlaceCellsOnlyAlongCameraTracks : 1;              // 0x02A5(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableWorldBoundsChecks : 1;                      // 0x02A5(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableNavigationSystem : 1;                       // 0x02A5(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bEnableAISystem : 1;                               // 0x02A5(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bEnableWorldComposition : 1;                       // 0x02A5(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseClientSideLevelStreamingVolumes : 1;           // 0x02A5(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableWorldOriginRebasing : 1;                    // 0x02A5(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bWorldGravitySet : 1;                              // 0x02A6(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGlobalGravitySet : 1;                             // 0x02A6(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMinimizeBSPSections : 1;                          // 0x02A6(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceNoPrecomputedLighting : 1;                   // 0x02A6(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHighPriorityLoading : 1;                          // 0x02A6(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHighPriorityLoadingLocal : 1;                     // 0x02A6(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideDefaultBroadphaseSettings : 1;            // 0x02A6(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateSingleClusterForLevel : 1;                // 0x02A6(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReuseAddressAndPort : 1;                          // 0x02A7(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	TSoftClassPtr<class UClass>                   AISystemClass;                                     // 0x02A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LevelInstancePivotOffset;                          // 0x02D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavigationSystemConfig*                NavigationSystemConfig;                            // 0x02E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, NoDestructor, AdvancedDisplay, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNavigationSystemConfig*                NavigationSystemConfigOverride;                    // 0x02F0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWorldPartition*                        WorldPartition;                                    // 0x02F8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UDataLayerAsset*>                BaseNavmeshDataLayers;                             // 0x0300(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         WorldToMeters;                                     // 0x0310(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillZ;                                             // 0x0314(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                KillZDamageType;                                   // 0x0318(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldGravityZ;                                     // 0x0320(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalGravityZ;                                    // 0x0324(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ADefaultPhysicsVolume>      DefaultPhysicsVolumeClass;                         // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPhysicsCollisionHandler>   PhysicsCollisionHandlerClass;                      // 0x0330(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameModeBase>              DefaultGameMode;                                   // 0x0338(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameNetworkManager>        GameNetworkManagerClass;                           // 0x0340(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PackedLightAndShadowMapTextureSize;                // 0x0348(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DefaultColorScale;                                 // 0x0350(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMaxDistanceFieldOcclusionDistance;          // 0x0368(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalDistanceFieldViewDistance;                   // 0x036C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicIndirectShadowsSelfShadowingIntensity;      // 0x0370(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNaniteSettings                        NaniteSettings;                                    // 0x0374(0x0001)(Edit, Net, Config, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_375[0x3];                                      // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReverbSettings                        DefaultReverbSettings;                             // 0x0378(0x0020)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FInteriorSettings                      DefaultAmbientZoneSettings;                        // 0x0398(0x0024)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundMix*                              DefaultBaseSoundMix;                               // 0x03C0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeDilation;                                      // 0x03C8(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CinematicTimeDilation;                             // 0x03CC(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DemoPlayTimeDilation;                              // 0x03D0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinGlobalTimeDilation;                             // 0x03D4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGlobalTimeDilation;                             // 0x03D8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinUndilatedFrameTime;                             // 0x03DC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxUndilatedFrameTime;                             // 0x03E0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBroadphaseSettings                    BroadphaseSettings;                                // 0x03E8(0x0080)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FNetViewer>                     ReplicationViewers;                                // 0x0468(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAssetUserData*>                 AssetUserData;                                     // 0x0478(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class APlayerState*                           PauserPlayerState;                                 // 0x0488(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxNumberOfBookmarks;                              // 0x0490(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UBookmarkBase>              DefaultBookmarkClass;                              // 0x0498(0x0008)(ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UBookmarkBase*>                  BookmarkArray;                                     // 0x04A0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TSubclassOf<class UBookmarkBase>              LastBookmarkClass;                                 // 0x04B0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnRep_NaniteSettings();
	void OnRep_WorldGravityZ();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldSettings")
	}
	static class AWorldSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWorldSettings>();
	}
};
DUMPER7_ASSERTS_AWorldSettings;

// Class Engine.HeterogeneousVolume
// 0x0008 (0x02A0 - 0x0298)
class AHeterogeneousVolume final : public AInfo
{
public:
	class UHeterogeneousVolumeComponent*          HeterogeneousVolumeComponent;                      // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HeterogeneousVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HeterogeneousVolume")
	}
	static class AHeterogeneousVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHeterogeneousVolume>();
	}
};
DUMPER7_ASSERTS_AHeterogeneousVolume;

// Class Engine.Texture2DArray
// 0x00A0 (0x0270 - 0x01D0)
class UTexture2DArray final : public UTexture
{
public:
	uint8                                         Pad_1C8[0x98];                                     // 0x01C8(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	ETextureAddress                               AddressX;                                          // 0x0260(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressY;                                          // 0x0261(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressZ;                                          // 0x0262(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_263[0xD];                                      // 0x0263(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Texture2DArray")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Texture2DArray")
	}
	static class UTexture2DArray* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTexture2DArray>();
	}
};
DUMPER7_ASSERTS_UTexture2DArray;

// Class Engine.Level
// 0x02F0 (0x0318 - 0x0028)
class ULevel final : public UObject
{
public:
	uint8                                         Pad_28[0x70];                                      // 0x0028(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	class TArray<class AActor*>                   Actors;                                            // 0x0098(0x0010)(THIS IS THE ARRAY YOU'RE LOOKING FOR! [NOT AUTO-GENERATED PROPERTY])
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorld*                                 OwningWorld;                                       // 0x00B8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UModel*                                 Model;                                             // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UModelComponent*>                ModelComponents;                                   // 0x00C8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class ULevelActorContainer*                   ActorCluster;                                      // 0x00D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumTextureStreamingUnbuiltComponents;              // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumTextureStreamingDirtyResources;                 // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelScriptActor*                      LevelScriptActor;                                  // 0x00E8(0x0008)(ZeroConstructor, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavigationObjectBase*                  NavListStart;                                      // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavigationObjectBase*                  NavListEnd;                                        // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNavigationDataChunk*>           NavDataChunks;                                     // 0x0100(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         LightmapTotalSize;                                 // 0x0110(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowmapTotalSize;                                // 0x0114(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        StaticNavigableGeometry;                           // 0x0118(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          StreamingTextureGuids;                             // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           StreamingTextures;                                 // 0x0138(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint32                                        PackedTextureStreamingQualityLevelFeatureLevel;    // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0xC4];                                     // 0x014C(0x00C4)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  LevelBuildDataId;                                  // 0x0210(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMapBuildDataRegistry*                  MapBuildData;                                      // 0x0220(0x0008)(ZeroConstructor, NoDestructor, NonPIEDuplicateTransient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             LightBuildLevelOffset;                             // 0x0228(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsLightingScenario : 1;                           // 0x0234(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_234_1 : 2;                                  // 0x0234(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bTextureStreamingRotationChanged : 1;              // 0x0234(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStaticComponentsRegisteredInStreamingManager : 1; // 0x0234(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Transient, DuplicateTransient, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsVisible : 1;                                    // 0x0234(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_234_6 : 2;                                  // 0x0234(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_235[0x1];                                      // 0x0235(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         BitPad_236_0 : 7;                                  // 0x0236(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bIsPartitioned : 1;                                // 0x0236(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_237[0x69];                                     // 0x0237(0x0069)(Fixing Size After Last Property [ Dumper-7 ])
	class AWorldSettings*                         WorldSettings;                                     // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AWorldDataLayers*                       WorldDataLayers;                                   // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UWorldPartitionRuntimeCell> WorldPartitionRuntimeCell;                      // 0x02B0(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D8[0x8];                                      // 0x02D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAssetUserData*>                 AssetUserData;                                     // 0x02E0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F0[0x10];                                     // 0x02F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FReplicatedStaticActorDestructionInfo> DestroyedReplicatedStaticActors;            // 0x0300(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Level")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Level")
	}
	static class ULevel* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevel>();
	}
};
DUMPER7_ASSERTS_ULevel;

// Class Engine.ActorFolder
// 0x0000 (0x0028 - 0x0028)
class UActorFolder final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActorFolder")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActorFolder")
	}
	static class UActorFolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorFolder>();
	}
};
DUMPER7_ASSERTS_UActorFolder;

// Class Engine.ActorPartitionSubsystem
// 0x0000 (0x0030 - 0x0030)
class UActorPartitionSubsystem final : public UWorldSubsystem
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActorPartitionSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActorPartitionSubsystem")
	}
	static class UActorPartitionSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorPartitionSubsystem>();
	}
};
DUMPER7_ASSERTS_UActorPartitionSubsystem;

// Class Engine.LocalHeightFogComponent
// 0x0050 (0x02F0 - 0x02A0)
class ULocalHeightFogComponent final : public USceneComponent
{
public:
	ELocalFogMode                                 FogMode;                                           // 0x02A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FogDensity;                                        // 0x02A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x02A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightOffset;                                   // 0x02AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogRadialAttenuation;                              // 0x02B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogPhaseG;                                         // 0x02B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogAlbedo;                                         // 0x02B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogEmissive;                                       // 0x02C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FogSortPriority;                                   // 0x02D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DC[0x14];                                     // 0x02DC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LocalHeightFogComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LocalHeightFogComponent")
	}
	static class ULocalHeightFogComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocalHeightFogComponent>();
	}
};
DUMPER7_ASSERTS_ULocalHeightFogComponent;

// Class Engine.AISystemBase
// 0x0038 (0x0060 - 0x0028)
class UAISystemBase : public UObject
{
public:
	struct FSoftClassPath                         AISystemClassName;                                 // 0x0028(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AISystemModuleName;                                // 0x0048(0x0008)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bInstantiateAISystemOnClient;                      // 0x0058(0x0001)(ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AISystemBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AISystemBase")
	}
	static class UAISystemBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAISystemBase>();
	}
};
DUMPER7_ASSERTS_UAISystemBase;

// Class Engine.NavigationSystemBase
// 0x0000 (0x0028 - 0x0028)
class UNavigationSystemBase : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NavigationSystemBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NavigationSystemBase")
	}
	static class UNavigationSystemBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavigationSystemBase>();
	}
};
DUMPER7_ASSERTS_UNavigationSystemBase;

// Class Engine.NavigationSystemConfig
// 0x0030 (0x0058 - 0x0028)
class UNavigationSystemConfig : public UObject
{
public:
	struct FSoftClassPath                         NavigationSystemClass;                             // 0x0028(0x0020)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNavAgentSelector                      SupportedAgentsMask;                               // 0x0048(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   DefaultAgentName;                                  // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsOverriden : 1;                                  // 0x0054(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NavigationSystemConfig")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NavigationSystemConfig")
	}
	static class UNavigationSystemConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavigationSystemConfig>();
	}
};
DUMPER7_ASSERTS_UNavigationSystemConfig;

// Class Engine.NullNavSysConfig
// 0x0000 (0x0058 - 0x0058)
class UNullNavSysConfig final : public UNavigationSystemConfig
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NullNavSysConfig")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NullNavSysConfig")
	}
	static class UNullNavSysConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNullNavSysConfig>();
	}
};
DUMPER7_ASSERTS_UNullNavSysConfig;

// Class Engine.ActorSoundParameterInterface
// 0x0000 (0x0000 - 0x0000)
class IActorSoundParameterInterface final
{
public:
	void GetActorSoundParams(TArray<struct FAudioParameter>* Params_0) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActorSoundParameterInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActorSoundParameterInterface")
	}
	static class IActorSoundParameterInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IActorSoundParameterInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IActorSoundParameterInterface;

// Class Engine.AvoidanceManager
// 0x00B8 (0x00E0 - 0x0028)
class UAvoidanceManager final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultTimeToLive;                                 // 0x0030(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockTimeAfterAvoid;                                // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockTimeAfterClean;                                // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTimeToPredict;                                // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArtificialRadiusExpansion;                         // 0x0040(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TestHeightDifference;                              // 0x0044(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightCheckMargin;                                 // 0x0048(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x94];                                      // 0x004C(0x0094)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector GetAvoidanceVelocityForComponent(class UMovementComponent* MovementComp);
	int32 GetNewAvoidanceUID();
	int32 GetObjectCount();
	bool RegisterMovementComponent(class UMovementComponent* MovementComp, float AvoidanceWeight);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AvoidanceManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AvoidanceManager")
	}
	static class UAvoidanceManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAvoidanceManager>();
	}
};
DUMPER7_ASSERTS_UAvoidanceManager;

// Class Engine.NavCollisionBase
// 0x0048 (0x0070 - 0x0028)
class UNavCollisionBase : public UObject
{
public:
	uint8                                         bIsDynamicObstacle : 1;                            // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_29[0x47];                                      // 0x0029(0x0047)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NavCollisionBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NavCollisionBase")
	}
	static class UNavCollisionBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavCollisionBase>();
	}
};
DUMPER7_ASSERTS_UNavCollisionBase;

// Class Engine.NavigationDataChunk
// 0x0008 (0x0030 - 0x0028)
class UNavigationDataChunk : public UObject
{
public:
	class FName                                   NavigationDataName;                                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NavigationDataChunk")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NavigationDataChunk")
	}
	static class UNavigationDataChunk* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavigationDataChunk>();
	}
};
DUMPER7_ASSERTS_UNavigationDataChunk;

// Class Engine.AmbientSound
// 0x0008 (0x02A0 - 0x0298)
class AAmbientSound final : public AActor
{
public:
	class UAudioComponent*                        AudioComponent;                                    // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void Play(float StartTime);
	void Stop();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AmbientSound")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AmbientSound")
	}
	static class AAmbientSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAmbientSound>();
	}
};
DUMPER7_ASSERTS_AAmbientSound;

// Class Engine.BlockingVolume
// 0x0000 (0x02D0 - 0x02D0)
class ABlockingVolume final : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BlockingVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BlockingVolume")
	}
	static class ABlockingVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABlockingVolume>();
	}
};
DUMPER7_ASSERTS_ABlockingVolume;

// Class Engine.AimOffsetBlendSpace
// 0x0000 (0x01C0 - 0x01C0)
class UAimOffsetBlendSpace final : public UBlendSpace
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AimOffsetBlendSpace")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AimOffsetBlendSpace")
	}
	static class UAimOffsetBlendSpace* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAimOffsetBlendSpace>();
	}
};
DUMPER7_ASSERTS_UAimOffsetBlendSpace;

// Class Engine.BlendSpace1D
// 0x0008 (0x01C8 - 0x01C0)
class UBlendSpace1D : public UBlendSpace
{
public:
	bool                                          bScaleAnimation;                                   // 0x01C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BlendSpace1D")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BlendSpace1D")
	}
	static class UBlendSpace1D* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlendSpace1D>();
	}
};
DUMPER7_ASSERTS_UBlendSpace1D;

// Class Engine.AimOffsetBlendSpace1D
// 0x0000 (0x01C8 - 0x01C8)
class UAimOffsetBlendSpace1D final : public UBlendSpace1D
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AimOffsetBlendSpace1D")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AimOffsetBlendSpace1D")
	}
	static class UAimOffsetBlendSpace1D* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAimOffsetBlendSpace1D>();
	}
};
DUMPER7_ASSERTS_UAimOffsetBlendSpace1D;

// Class Engine.AnimationSettings
// 0x0110 (0x0148 - 0x0038)
class UAnimationSettings final : public UDeveloperSettings
{
public:
	int32                                         CompressCommandletVersion;                         // 0x0038(0x0004)(Edit, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         KeyEndEffectorsMatchNameArray;                     // 0x0040(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          ForceRecompression;                                // 0x0050(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceBelowThreshold;                              // 0x0051(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstRecompressUsingCurrentOrDefault;             // 0x0052(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRaiseMaxErrorToExisting;                          // 0x0053(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePerformanceLog;                             // 0x0054(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStripAnimationDataOnDedicatedServer;              // 0x0055(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTickAnimationOnSkeletalMeshInit;                  // 0x0056(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimecodeCustomAttributeNameSettings   BoneTimecodeCustomAttributeNameSettings;           // 0x0058(0x0038)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomAttributeSetting>        BoneCustomAttributesNames;                         // 0x0090(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                         BoneNamesWithCustomAttributes;                     // 0x00A0(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TMap<class FName, ECustomAttributeBlendType>  AttributeBlendModes;                               // 0x00B0(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	ECustomAttributeBlendType                     DefaultAttributeBlendMode;                         // 0x0100(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         TransformAttributeNames;                           // 0x0108(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UUserDefinedStruct>> UserDefinedStructAttributes;                    // 0x0118(0x0010)(Edit, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FMirrorFindReplaceExpression>   MirrorFindReplaceExpressions;                      // 0x0128(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FFrameRate                             DefaultFrameRate;                                  // 0x0138(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnforceSupportedFrameRates;                       // 0x0140(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<class FString> GetBoneCustomAttributeNamesToImport() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimationSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimationSettings")
	}
	static class UAnimationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimationSettings>();
	}
};
DUMPER7_ASSERTS_UAnimationSettings;

// Class Engine.BrushBuilder
// 0x0058 (0x0080 - 0x0028)
class UBrushBuilder final : public UObject
{
public:
	class FString                                 BitmapFilename;                                    // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ToolTip;                                           // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NotifyBadParams : 1;                               // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Vertices;                                          // 0x0050(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FBuilderPoly>                   Polys;                                             // 0x0060(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   Layer;                                             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         MergeCoplanars : 1;                                // 0x0078(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BrushBuilder")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BrushBuilder")
	}
	static class UBrushBuilder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBrushBuilder>();
	}
};
DUMPER7_ASSERTS_UBrushBuilder;

// Class Engine.AnimBlueprintGeneratedStruct
// 0x0000 (0x00C0 - 0x00C0)
class UAnimBlueprintGeneratedStruct final : public UScriptStruct
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimBlueprintGeneratedStruct")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimBlueprintGeneratedStruct")
	}
	static class UAnimBlueprintGeneratedStruct* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimBlueprintGeneratedStruct>();
	}
};
DUMPER7_ASSERTS_UAnimBlueprintGeneratedStruct;

// Class Engine.AnimBlueprintGeneratedClass
// 0x0268 (0x05D0 - 0x0368)
class UAnimBlueprintGeneratedClass final : public UBlueprintGeneratedClass
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBakedAnimationStateMachine>    BakedStateMachines;                                // 0x0370(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class USkeleton*                              TargetSkeleton;                                    // 0x0380(0x0008)(ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>               AnimNotifies;                                      // 0x0388(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FName, struct FCachedPoseIndices>  OrderedSavedPoseIndicesMap;                        // 0x0398(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_3E8[0x80];                                     // 0x03E8(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SyncGroupNames;                                    // 0x0468(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGraphAssetPlayerInformation> GraphAssetPlayerInformation;              // 0x0478(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FAnimGraphBlendOptions> GraphBlendOptions;                              // 0x04C8(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FAnimNodeData>                  AnimNodeData;                                      // 0x0518(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<class UScriptStruct*, struct FAnimNodeStructData> NodeTypeMap;                              // 0x0528(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_578[0x58];                                     // 0x0578(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimBlueprintGeneratedClass")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimBlueprintGeneratedClass")
	}
	static class UAnimBlueprintGeneratedClass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimBlueprintGeneratedClass>();
	}
};
DUMPER7_ASSERTS_UAnimBlueprintGeneratedClass;

// Class Engine.AnimBoneCompressionSettings
// 0x0010 (0x0038 - 0x0028)
class UAnimBoneCompressionSettings final : public UObject
{
public:
	TArray<class UAnimBoneCompressionCodec*>      Codecs;                                            // 0x0028(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimBoneCompressionSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimBoneCompressionSettings")
	}
	static class UAnimBoneCompressionSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimBoneCompressionSettings>();
	}
};
DUMPER7_ASSERTS_UAnimBoneCompressionSettings;

// Class Engine.CameraLensEffectInterfaceClassSupportLibrary
// 0x0000 (0x0028 - 0x0028)
class UCameraLensEffectInterfaceClassSupportLibrary final : public UBlueprintFunctionLibrary
{
public:
	static TSubclassOf<class AActor> GetInterfaceClass(const struct FCameraLensInterfaceClassSupport& CameraLens);
	static void IsInterfaceClassValid(const struct FCameraLensInterfaceClassSupport& CameraLens, EInterfaceValidResult* Result);
	static void IsInterfaceValid(const TScriptInterface<class ICameraLensEffectInterface>& CameraLens, EInterfaceValidResult* Result);
	static void SetInterfaceClass(TSubclassOf<class AActor> Class_0, struct FCameraLensInterfaceClassSupport& Var, EInterfaceValidResult* Result);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CameraLensEffectInterfaceClassSupportLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CameraLensEffectInterfaceClassSupportLibrary")
	}
	static class UCameraLensEffectInterfaceClassSupportLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraLensEffectInterfaceClassSupportLibrary>();
	}
};
DUMPER7_ASSERTS_UCameraLensEffectInterfaceClassSupportLibrary;

// Class Engine.AnimClassData
// 0x0230 (0x0258 - 0x0028)
class UAnimClassData final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBakedAnimationStateMachine>    BakedStateMachines;                                // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class USkeleton*                              TargetSkeleton;                                    // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>               AnimNotifies;                                      // 0x0048(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FName, struct FCachedPoseIndices>  OrderedSavedPoseIndicesMap;                        // 0x0058(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FAnimBlueprintFunction>         AnimBlueprintFunctions;                            // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAnimBlueprintFunctionData>     AnimBlueprintFunctionData;                         // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TFieldPath<class FStructProperty>>     AnimNodeProperties;                                // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x10];                                      // 0x00D8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TFieldPath<class FStructProperty>>     LinkedAnimGraphNodeProperties;                     // 0x00E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TFieldPath<class FStructProperty>>     LinkedAnimLayerNodeProperties;                     // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x10];                                     // 0x0118(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TFieldPath<class FStructProperty>>     PreUpdateNodeProperties;                           // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x10];                                     // 0x0138(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TFieldPath<class FStructProperty>>     DynamicResetNodeProperties;                        // 0x0148(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x10];                                     // 0x0158(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TFieldPath<class FStructProperty>>     StateMachineNodeProperties;                        // 0x0168(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x10];                                     // 0x0178(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TFieldPath<class FStructProperty>>     InitializationNodeProperties;                      // 0x0188(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_198[0x10];                                     // 0x0198(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FGraphAssetPlayerInformation> GraphNameAssetPlayers;                    // 0x01A8(0x0050)(NativeAccessSpecifierPublic)
	TArray<class FName>                           SyncGroupNames;                                    // 0x01F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FAnimGraphBlendOptions> GraphBlendOptions;                              // 0x0208(0x0050)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimClassData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimClassData")
	}
	static class UAnimClassData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimClassData>();
	}
};
DUMPER7_ASSERTS_UAnimClassData;

// Class Engine.AnimClassInterface
// 0x0000 (0x0000 - 0x0000)
class IAnimClassInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimClassInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimClassInterface")
	}
	static class IAnimClassInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAnimClassInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IAnimClassInterface;

// Class Engine.AnimCompress_LeastDestructive
// 0x0000 (0x0040 - 0x0040)
class UAnimCompress_LeastDestructive final : public UAnimCompress_BitwiseCompressOnly
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimCompress_LeastDestructive")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimCompress_LeastDestructive")
	}
	static class UAnimCompress_LeastDestructive* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimCompress_LeastDestructive>();
	}
};
DUMPER7_ASSERTS_UAnimCompress_LeastDestructive;

// Class Engine.AnimCompress_RemoveTrivialKeys
// 0x0010 (0x0050 - 0x0040)
class UAnimCompress_RemoveTrivialKeys final : public UAnimCompress
{
public:
	float                                         MaxPosDiff;                                        // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngleDiff;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxScaleDiff;                                      // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimCompress_RemoveTrivialKeys")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimCompress_RemoveTrivialKeys")
	}
	static class UAnimCompress_RemoveTrivialKeys* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimCompress_RemoveTrivialKeys>();
	}
};
DUMPER7_ASSERTS_UAnimCompress_RemoveTrivialKeys;

// Class Engine.AnimCurveCompressionCodec_UniformlySampled
// 0x0000 (0x0038 - 0x0038)
class UAnimCurveCompressionCodec_UniformlySampled final : public UAnimCurveCompressionCodec
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimCurveCompressionCodec_UniformlySampled")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimCurveCompressionCodec_UniformlySampled")
	}
	static class UAnimCurveCompressionCodec_UniformlySampled* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimCurveCompressionCodec_UniformlySampled>();
	}
};
DUMPER7_ASSERTS_UAnimCurveCompressionCodec_UniformlySampled;

// Class Engine.AnimMontage
// 0x0128 (0x01E0 - 0x00B8)
class UAnimMontage final : public UAnimCompositeBase
{
public:
	EMontageBlendMode                             BlendModeIn;                                       // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMontageBlendMode                             BlendModeOut;                                      // 0x00B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAlphaBlend                            BlendIn;                                           // 0x00C0(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FAlphaBlend                            BlendOut;                                          // 0x00F0(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BlendOutTriggerTime;                               // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SyncGroup;                                         // 0x0124(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SyncSlotIndex;                                     // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarkerSyncData                        MarkerData;                                        // 0x0130(0x0020)(NativeAccessSpecifierPublic)
	TArray<struct FCompositeSection>              CompositeSections;                                 // 0x0150(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FSlotAnimationTrack>            SlotAnimTracks;                                    // 0x0160(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bEnableRootMotionTranslation;                      // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRootMotionRotation;                         // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAutoBlendOut;                               // 0x0172(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_173[0x5];                                      // 0x0173(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendProfile*                          BlendProfileIn;                                    // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendProfile*                          BlendProfileOut;                                   // 0x0180(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionRootLock                           RootMotionRootLock;                                // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBranchingPointMarker>          BranchingPointMarkers;                             // 0x0190(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 BranchingPointStateNotifyIndices;                  // 0x01A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTimeStretchCurve                      TimeStretchCurve;                                  // 0x01B0(0x0028)(Edit, NativeAccessSpecifierPublic)
	class FName                                   TimeStretchCurveName;                              // 0x01D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UAnimMontage* CreateSlotAnimationAsDynamicMontage_WithBlendSettings(class UAnimSequenceBase* Asset, class FName SlotNodeName, const struct FMontageBlendSettings& BlendInSettings, const struct FMontageBlendSettings& BlendOutSettings, float InPlayRate, int32 LoopCount, float InBlendOutTriggerTime);

	struct FAlphaBlendArgs GetBlendInArgs() const;
	struct FAlphaBlendArgs GetBlendOutArgs() const;
	float GetDefaultBlendInTime() const;
	float GetDefaultBlendOutTime() const;
	class FName GetGroupName() const;
	int32 GetNumSections() const;
	int32 GetSectionIndex(class FName InSectionName) const;
	class FName GetSectionName(int32 SectionIndex) const;
	bool IsValidAdditiveSlot(const class FName& SlotNodeName) const;
	bool IsValidSectionName(class FName InSectionName) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimMontage")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimMontage")
	}
	static class UAnimMontage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimMontage>();
	}
};
DUMPER7_ASSERTS_UAnimMontage;

// Class Engine.AnimNotifyState_DisableRootMotion
// 0x0000 (0x0030 - 0x0030)
class UAnimNotifyState_DisableRootMotion final : public UAnimNotifyState
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimNotifyState_DisableRootMotion")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimNotifyState_DisableRootMotion")
	}
	static class UAnimNotifyState_DisableRootMotion* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_DisableRootMotion>();
	}
};
DUMPER7_ASSERTS_UAnimNotifyState_DisableRootMotion;

// Class Engine.AnimNotify_PlayParticleEffect
// 0x0088 (0x00C0 - 0x0038)
class alignas(0x10) UAnimNotify_PlayParticleEffect final : public UAnimNotify
{
public:
	class UParticleSystem*                        PSTemplate;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0070(0x0018)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x28];                                      // 0x0088(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         Attached : 1;                                      // 0x00B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x00B4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimNotify_PlayParticleEffect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimNotify_PlayParticleEffect")
	}
	static class UAnimNotify_PlayParticleEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PlayParticleEffect>();
	}
};
DUMPER7_ASSERTS_UAnimNotify_PlayParticleEffect;

// Class Engine.AnimNotify_ResumeClothingSimulation
// 0x0000 (0x0038 - 0x0038)
class UAnimNotify_ResumeClothingSimulation final : public UAnimNotify
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimNotify_ResumeClothingSimulation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimNotify_ResumeClothingSimulation")
	}
	static class UAnimNotify_ResumeClothingSimulation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_ResumeClothingSimulation>();
	}
};
DUMPER7_ASSERTS_UAnimNotify_ResumeClothingSimulation;

// Class Engine.AnimStateMachineTypes
// 0x0000 (0x0028 - 0x0028)
class UAnimStateMachineTypes final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimStateMachineTypes")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimStateMachineTypes")
	}
	static class UAnimStateMachineTypes* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimStateMachineTypes>();
	}
};
DUMPER7_ASSERTS_UAnimStateMachineTypes;

// Class Engine.Skeleton
// 0x03D8 (0x0400 - 0x0028)
class USkeleton final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneNode>                      BoneTree;                                          // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_48[0x118];                                     // 0x0048(0x0118)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  VirtualBoneGuid;                                   // 0x0160(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FVirtualBone>                   VirtualBones;                                      // 0x0170(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class USkeleton>>       CompatibleSkeletons;                               // 0x0180(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class USkeletalMeshSocket*>            Sockets;                                           // 0x0190(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A0[0x50];                                     // 0x01A0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSmartNameContainer                    SmartNames;                                        // 0x01F0(0x0050)(Deprecated, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_240[0x10];                                     // 0x0240(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBlendProfile*>                  BlendProfiles;                                     // 0x0250(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FAnimSlotGroup>                 SlotGroups;                                        // 0x0260(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_270[0x180];                                    // 0x0270(0x0180)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAssetUserData*>                 AssetUserData;                                     // 0x03F0(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void AddCompatibleSkeleton(const class USkeleton* SourceSkeleton);
	void AddCompatibleSkeletonSoft(const TSoftObjectPtr<class USkeleton>& SourceSkeleton);
	class UBlendProfile* GetBlendProfile(const class FName& InProfileName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Skeleton")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Skeleton")
	}
	static class USkeleton* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkeleton>();
	}
};
DUMPER7_ASSERTS_USkeleton;

// Class Engine.BlendProfile
// 0x0028 (0x0050 - 0x0028)
class UBlendProfile final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeleton*                              OwningSkeleton;                                    // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBlendProfileBoneEntry>         ProfileEntries;                                    // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	EBlendProfileMode                             Mode;                                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BlendProfile")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BlendProfile")
	}
	static class UBlendProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlendProfile>();
	}
};
DUMPER7_ASSERTS_UBlendProfile;

// Class Engine.CachedAnimDataLibrary
// 0x0000 (0x0028 - 0x0028)
class UCachedAnimDataLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float StateMachine_GetGlobalWeight(class UAnimInstance* InAnimInstance, const struct FCachedAnimStateData& CachedAnimStateData);
	static float StateMachine_GetLocalWeight(class UAnimInstance* InAnimInstance, const struct FCachedAnimStateData& CachedAnimStateData);
	static bool StateMachine_IsStateRelevant(class UAnimInstance* InAnimInstance, const struct FCachedAnimStateData& CachedAnimStateData);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CachedAnimDataLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CachedAnimDataLibrary")
	}
	static class UCachedAnimDataLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCachedAnimDataLibrary>();
	}
};
DUMPER7_ASSERTS_UCachedAnimDataLibrary;

// Class Engine.AnimationCurveIdentifierExtensions
// 0x0000 (0x0028 - 0x0028)
class UAnimationCurveIdentifierExtensions final : public UBlueprintFunctionLibrary
{
public:
	static class FName GetName(struct FAnimationCurveIdentifier& Identifier);
	static ERawCurveTrackTypes GetType(struct FAnimationCurveIdentifier& Identifier);
	static bool IsValid(struct FAnimationCurveIdentifier& Identifier);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimationCurveIdentifierExtensions")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimationCurveIdentifierExtensions")
	}
	static class UAnimationCurveIdentifierExtensions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimationCurveIdentifierExtensions>();
	}
};
DUMPER7_ASSERTS_UAnimationCurveIdentifierExtensions;

// Class Engine.NodeMappingContainer
// 0x0140 (0x0168 - 0x0028)
class UNodeMappingContainer final : public UObject
{
public:
	TMap<class FName, struct FNodeItem>           SourceItems;                                       // 0x0028(0x0050)(Edit, EditConst, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FNodeItem>           TargetItems;                                       // 0x0078(0x0050)(Edit, EditConst, NativeAccessSpecifierPrivate)
	TMap<class FName, class FName>                SourceToTarget;                                    // 0x00C8(0x0050)(Edit, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UObject>                 SourceAsset;                                       // 0x0118(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UObject>                 TargetAsset;                                       // 0x0140(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NodeMappingContainer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NodeMappingContainer")
	}
	static class UNodeMappingContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNodeMappingContainer>();
	}
};
DUMPER7_ASSERTS_UNodeMappingContainer;

// Class Engine.NodeMappingProviderInterface
// 0x0000 (0x0000 - 0x0000)
class INodeMappingProviderInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NodeMappingProviderInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NodeMappingProviderInterface")
	}
	static class INodeMappingProviderInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INodeMappingProviderInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INodeMappingProviderInterface;

// Class Engine.PreviewCollectionInterface
// 0x0000 (0x0000 - 0x0000)
class IPreviewCollectionInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PreviewCollectionInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PreviewCollectionInterface")
	}
	static class IPreviewCollectionInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IPreviewCollectionInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IPreviewCollectionInterface;

// Class Engine.AnimBlueprint
// 0x0028 (0x00D0 - 0x00A8)
class UAnimBlueprint final : public UBlueprint
{
public:
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeleton*                              TargetSkeleton;                                    // 0x00B0(0x0008)(Edit, ZeroConstructor, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimGroupInfo>                 Groups;                                            // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsTemplate;                                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMultiThreadedAnimationUpdate;                  // 0x00C9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarnAboutBlueprintUsage;                          // 0x00CA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableLinkedAnimLayerInstanceSharing : 1;         // 0x00CB(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AnimBlueprint")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AnimBlueprint")
	}
	static class UAnimBlueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimBlueprint>();
	}
};
DUMPER7_ASSERTS_UAnimBlueprint;

// Class Engine.AsyncActionLoadPrimaryAssetClass
// 0x0010 (0x0088 - 0x0078)
class UAsyncActionLoadPrimaryAssetClass final : public UAsyncActionLoadPrimaryAssetBase
{
public:
	TMulticastInlineDelegate<void(TSubclassOf<class UObject> Loaded)> Completed;                     // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UAsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(class UObject* WorldContextObject, const struct FPrimaryAssetId& PrimaryAsset, const TArray<class FName>& LoadBundles);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AsyncActionLoadPrimaryAssetClass")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AsyncActionLoadPrimaryAssetClass")
	}
	static class UAsyncActionLoadPrimaryAssetClass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncActionLoadPrimaryAssetClass>();
	}
};
DUMPER7_ASSERTS_UAsyncActionLoadPrimaryAssetClass;

// Class Engine.AtmosphericFog
// 0x0008 (0x02A0 - 0x0298)
class AAtmosphericFog final : public AInfo
{
public:
	class UAtmosphericFogComponent*               AtmosphericFogComponent;                           // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AtmosphericFog")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AtmosphericFog")
	}
	static class AAtmosphericFog* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAtmosphericFog>();
	}
};
DUMPER7_ASSERTS_AAtmosphericFog;

// Class Engine.AudioSettings
// 0x01B0 (0x01E8 - 0x0038)
class UAudioSettings final : public UDeveloperSettings
{
public:
	struct FSoftObjectPath                        DefaultSoundClassName;                             // 0x0038(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DefaultMediaSoundClassName;                        // 0x0058(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DefaultSoundConcurrencyName;                       // 0x0078(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DefaultBaseSoundMix;                               // 0x0098(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        VoiPSoundClass;                                    // 0x00B8(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        MasterSubmix;                                      // 0x00D8(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        BaseDefaultSubmix;                                 // 0x00F8(0x0020)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReverbSubmix;                                      // 0x0118(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        EQSubmix;                                          // 0x0138(0x0020)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoiceSampleRate                              VoiPSampleRate;                                    // 0x0158(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDefaultAudioCompressionType                  DefaultAudioCompressionType;                       // 0x015C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultCompressionQuality;                         // 0x0160(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultReverbSendLevel;                            // 0x0164(0x0004)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumConcurrentStreams;                          // 0x0168(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalMinPitchScale;                               // 0x016C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalMaxPitchScale;                               // 0x0170(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAudioQualitySettings>          QualityLevels;                                     // 0x0178(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                         bAllowPlayWhenSilent : 1;                          // 0x0188(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableMasterEQ : 1;                              // 0x0188(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowCenterChannel3DPanning : 1;                  // 0x0188(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        NumStoppingSources;                                // 0x018C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPanningMethod                                PanningMethod;                                     // 0x0190(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonoChannelUpmixMethod                       MonoChannelUpmixMethod;                            // 0x0191(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DialogueFilenameFormat;                            // 0x0198(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoundDebugEntry>               DebugSounds;                                       // 0x01A8(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FDefaultAudioBusSettings>       DefaultAudioBuses;                                 // 0x01B8(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	class USoundClass*                            DefaultSoundClass;                                 // 0x01C8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundClass*                            DefaultMediaSoundClass;                            // 0x01D0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundConcurrency*                      DefaultSoundConcurrency;                           // 0x01D8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E0[0x8];                                      // 0x01E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AudioSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AudioSettings")
	}
	static class UAudioSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioSettings>();
	}
};
DUMPER7_ASSERTS_UAudioSettings;

// Class Engine.AudioWidgetSubsystem
// 0x0000 (0x0030 - 0x0030)
class UAudioWidgetSubsystem final : public UEngineSubsystem
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AudioWidgetSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AudioWidgetSubsystem")
	}
	static class UAudioWidgetSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioWidgetSubsystem>();
	}
};
DUMPER7_ASSERTS_UAudioWidgetSubsystem;

// Class Engine.SoundParameterControllerInterface
// 0x0000 (0x0000 - 0x0000)
class ISoundParameterControllerInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundParameterControllerInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundParameterControllerInterface")
	}
	static class ISoundParameterControllerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISoundParameterControllerInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ISoundParameterControllerInterface;

// Class Engine.BlueprintSetLibrary
// 0x0000 (0x0028 - 0x0028)
class UBlueprintSetLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void Set_Add(const TSet<int32>& TargetSet, const int32& NewItem);
	static void Set_AddItems(const TSet<int32>& TargetSet, const TArray<int32>& NewItems);
	static void Set_Clear(const TSet<int32>& TargetSet);
	static bool Set_Contains(const TSet<int32>& TargetSet, const int32& ItemToFind);
	static void Set_Difference(const TSet<int32>& A, const TSet<int32>& B, TSet<int32>* Result);
	static void Set_Intersection(const TSet<int32>& A, const TSet<int32>& B, TSet<int32>* Result);
	static bool Set_IsEmpty(const TSet<int32>& TargetSet);
	static bool Set_IsNotEmpty(const TSet<int32>& TargetSet);
	static int32 Set_Length(const TSet<int32>& TargetSet);
	static bool Set_Remove(const TSet<int32>& TargetSet, const int32& Item);
	static void Set_RemoveItems(const TSet<int32>& TargetSet, const TArray<int32>& Items);
	static void Set_ToArray(const TSet<int32>& A, TArray<int32>* Result);
	static void Set_Union(const TSet<int32>& A, const TSet<int32>& B, TSet<int32>* Result);
	static void SetSetPropertyByName(class UObject* Object, class FName PropertyName, const TSet<int32>& Value);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BlueprintSetLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BlueprintSetLibrary")
	}
	static class UBlueprintSetLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintSetLibrary>();
	}
};
DUMPER7_ASSERTS_UBlueprintSetLibrary;

// Class Engine.BookMark
// 0x0040 (0x0068 - 0x0028)
class UBookMark final : public UBookmarkBase
{
public:
	struct FVector                                Location;                                          // 0x0028(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0040(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         HiddenLevels;                                      // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BookMark")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BookMark")
	}
	static class UBookMark* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBookMark>();
	}
};
DUMPER7_ASSERTS_UBookMark;

// Class Engine.BrushShape
// 0x0000 (0x02D0 - 0x02D0)
class ABrushShape final : public ABrush
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BrushShape")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BrushShape")
	}
	static class ABrushShape* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABrushShape>();
	}
};
DUMPER7_ASSERTS_ABrushShape;

// Class Engine.CameraBlockingVolume
// 0x0000 (0x02D0 - 0x02D0)
class ACameraBlockingVolume final : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CameraBlockingVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CameraBlockingVolume")
	}
	static class ACameraBlockingVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACameraBlockingVolume>();
	}
};
DUMPER7_ASSERTS_ACameraBlockingVolume;

// Class Engine.CameraModifier_CameraShake
// 0x0068 (0x00B0 - 0x0048)
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	TArray<struct FActiveCameraShakeInfo>         ActiveShakes;                                      // 0x0048(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<TSubclassOf<class UCameraShakeBase>, struct FPooledCameraShakes> ExpiredPooledShakesMap;    // 0x0058(0x0050)(Protected, NativeAccessSpecifierProtected)
	float                                         SplitScreenShakeScale;                             // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CameraModifier_CameraShake")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CameraModifier_CameraShake")
	}
	static class UCameraModifier_CameraShake* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraModifier_CameraShake>();
	}
};
DUMPER7_ASSERTS_UCameraModifier_CameraShake;

// Class Engine.CameraShakeSourceActor
// 0x0008 (0x02A0 - 0x0298)
class ACameraShakeSourceActor final : public AActor
{
public:
	class UCameraShakeSourceComponent*            CameraShakeSourceComponent;                        // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CameraShakeSourceActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CameraShakeSourceActor")
	}
	static class ACameraShakeSourceActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACameraShakeSourceActor>();
	}
};
DUMPER7_ASSERTS_ACameraShakeSourceActor;

// Class Engine.CameraShakeSourceComponent
// 0x0020 (0x02C0 - 0x02A0)
class UCameraShakeSourceComponent final : public USceneComponent
{
public:
	ECameraShakeAttenuation                       Attenuation;                                       // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InnerAttenuationRadius;                            // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterAttenuationRadius;                            // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraShakeBase>           CameraShake;                                       // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoStart;                                        // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Start();
	void StartCameraShake(TSubclassOf<class UCameraShakeBase> InCameraShake, float Scale, ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void StopAllCameraShakes(bool bImmediately);
	void StopAllCameraShakesOfType(TSubclassOf<class UCameraShakeBase> InCameraShake, bool bImmediately);

	float GetAttenuationFactor(const struct FVector& Location) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CameraShakeSourceComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CameraShakeSourceComponent")
	}
	static class UCameraShakeSourceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraShakeSourceComponent>();
	}
};
DUMPER7_ASSERTS_UCameraShakeSourceComponent;

// Class Engine.PlayerController
// 0x0528 (0x0858 - 0x0330)
class APlayerController : public AController
{
public:
	uint8                                         Pad_330[0x8];                                      // 0x0330(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayer*                                Player;                                            // 0x0338(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  AcknowledgedPawn;                                  // 0x0340(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHUD*                                   MyHUD;                                             // 0x0348(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerCameraManager*                   PlayerCameraManager;                               // 0x0350(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APlayerCameraManager>       PlayerCameraManagerClass;                          // 0x0358(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoManageActiveCameraTarget;                     // 0x0360(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               TargetViewRotation;                                // 0x0368(0x0018)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_380[0x18];                                     // 0x0380(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SmoothTargetViewRotationSpeed;                     // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         HiddenActors;                                      // 0x03A0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>> HiddenPrimitiveComponents;                     // 0x03B0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C0[0x4];                                      // 0x03C0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastSpectatorStateSynchTime;                       // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastSpectatorSyncLocation;                         // 0x03C8(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LastSpectatorSyncRotation;                         // 0x03E0(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ClientCap;                                         // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCheatManager*                          CheatManager;                                      // 0x0400(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCheatManager>              CheatClass;                                        // 0x0408(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerInput*                           PlayerInput;                                       // 0x0410(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActiveForceFeedbackEffect>     ActiveForceFeedbackEffects;                        // 0x0418(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TSubclassOf<class UAsyncPhysicsData>          AsyncPhysicsDataClass;                             // 0x0428(0x0008)(ZeroConstructor, Deprecated, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAsyncPhysicsInputComponent*            AsyncPhysicsDataComponent_DEPRECARED;              // 0x0430(0x0008)(ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_438[0x80];                                     // 0x0438(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         BitPad_4B8_0 : 4;                                  // 0x04B8(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bPlayerIsWaiting : 1;                              // 0x04B8(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4B9[0x3];                                      // 0x04B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         NetPlayerIndex;                                    // 0x04BC(0x0001)(ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4BD[0x5B];                                     // 0x04BD(0x005B)(Fixing Size After Last Property [ Dumper-7 ])
	class UNetConnection*                         PendingSwapConnection;                             // 0x0518(0x0008)(ZeroConstructor, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetConnection*                         NetConnection;                                     // 0x0520(0x0008)(ZeroConstructor, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_528[0x18];                                     // 0x0528(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputYawScale;                                     // 0x0540(0x0004)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputPitchScale;                                   // 0x0544(0x0004)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputRollScale;                                    // 0x0548(0x0004)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bShowMouseCursor : 1;                              // 0x054C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableClickEvents : 1;                            // 0x054C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableTouchEvents : 1;                            // 0x054C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableMouseOverEvents : 1;                        // 0x054C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableTouchOverEvents : 1;                        // 0x054C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceFeedbackEnabled : 1;                         // 0x054C(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableMotionControls : 1;                         // 0x054C(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableStreamingSource : 1;                        // 0x054C(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStreamingSourceShouldActivate : 1;                // 0x054D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStreamingSourceShouldBlockOnSlowStreaming : 1;    // 0x054D(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_54E[0x2];                                      // 0x054E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	EStreamingSourcePriority                      StreamingSourcePriority;                           // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_551[0x3];                                      // 0x0551(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 StreamingSourceDebugColor;                         // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStreamingSourceShape>          StreamingSourceShapes;                             // 0x0558(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ForceFeedbackScale;                                // 0x0568(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56C[0x4];                                      // 0x056C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           ClickEventKeys;                                    // 0x0570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EMouseCursor                                  DefaultMouseCursor;                                // 0x0580(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMouseCursor                                  CurrentMouseCursor;                                // 0x0581(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             DefaultClickTraceChannel;                          // 0x0582(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CurrentClickTraceChannel;                          // 0x0583(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitResultTraceDistance;                            // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SeamlessTravelCount;                               // 0x0588(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        LastCompletedSeamlessTravelCount;                  // 0x058A(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58C[0x84];                                     // 0x058C(0x0084)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputComponent*                        InactiveStateInputComponent;                       // 0x0610(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         BitPad_618_0 : 2;                                  // 0x0618(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bShouldPerformFullTickWhenPaused : 1;              // 0x0618(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_619[0x17];                                     // 0x0619(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	class UTouchInterface*                        CurrentTouchInterface;                             // 0x0630(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UPlayerInput>               OverridePlayerInputClass;                          // 0x0638(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_640[0x78];                                     // 0x0640(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	class ASpectatorPawn*                         SpectatorPawn;                                     // 0x06B8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6C0[0x4];                                      // 0x06C0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsLocalPlayerController;                          // 0x06C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6C5[0x3];                                      // 0x06C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SpawnLocation;                                     // 0x06C8(0x0018)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6E0[0x178];                                    // 0x06E0(0x0178)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateTouchInterface(class UTouchInterface* NewTouchInterface);
	void AddPitchInput(float Val);
	void AddRollInput(float Val);
	void AddYawInput(float Val);
	void Camera(class FName NewMode);
	bool CanRestartPlayer();
	void ClearAudioListenerAttenuationOverride();
	void ClearAudioListenerOverride();
	void ClientAckTimeDilation(float TimeDilation, int32 ServerStep);
	void ClientAckUpdateLevelVisibility(class FName PackageName, const struct FNetLevelVisibilityTransactionId& TransactionId, bool bClientAckCanMakeVisible);
	void ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation);
	void ClientCancelPendingMapChange();
	void ClientCapBandwidth(int32 Cap);
	void ClientClearCameraLensEffects();
	void ClientCommitMapChange();
	void ClientCorrectionAsyncPhysicsTimestamp(const struct FAsyncPhysicsTimestamp& Timestamp);
	void ClientEnableNetworkVoice(bool bEnable);
	void ClientEndOnlineSession();
	void ClientFlushLevelStreaming();
	void ClientForceGarbageCollection();
	void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);
	void ClientGotoState(class FName NewState);
	void ClientIgnoreLookInput(bool bIgnore);
	void ClientIgnoreMoveInput(bool bIgnore);
	void ClientMessage(const class FString& S, class FName Type, float MsgLifeTime);
	void ClientMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ClientPlayForceFeedback_Internal(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FForceFeedbackParameters& Params_0);
	void ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier);
	void ClientPrepareMapChange(class FName LevelName, bool bFirst, bool bLast);
	void ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32 CinematicTextureGroups);
	void ClientReceiveLocalizedMessage(TSubclassOf<class ULocalMessage> Message, int32 SWITCH, class APlayerState* RelatedPlayerState_1, class APlayerState* RelatedPlayerState_2, class UObject* OptionalObject);
	void ClientRecvServerAckFrame(int32 LastProcessedInputFrame, int32 RecvServerFrameNumber, int8 TimeDilation);
	void ClientRecvServerAckFrameDebug(uint8 NumBuffered, float TargetNumBufferedCmds);
	void ClientRepObjRef(class UObject* Object);
	void ClientReset();
	void ClientRestart(class APawn* NewPawn);
	void ClientRetryClientRestart(class APawn* NewPawn);
	void ClientReturnToMainMenuWithTextReason(const class FText& ReturnReason);
	void ClientSetBlockOnAsyncLoading();
	void ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);
	void ClientSetCameraMode(class FName NewCamMode);
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
	void ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int32 CinematicTextureGroups);
	void ClientSetHUD(TSubclassOf<class AHUD> NewHUDClass);
	void ClientSetSpectatorWaiting(bool bWaiting);
	void ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams);
	void ClientSpawnCameraLensEffect(TSubclassOf<class AEmitterCameraLensEffectBase> LensEffectEmitterClass);
	void ClientSpawnGenericCameraLensEffect(TSubclassOf<class AActor> LensEffectEmitterClass);
	void ClientStartCameraShake(TSubclassOf<class UCameraShakeBase> Shake, float Scale, ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void ClientStartCameraShakeFromSource(TSubclassOf<class UCameraShakeBase> Shake, class UCameraShakeSourceComponent* SourceComponent);
	void ClientStartOnlineSession();
	void ClientStopCameraShake(TSubclassOf<class UCameraShakeBase> Shake, bool bImmediately);
	void ClientStopCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);
	void ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, class FName Tag);
	void ClientTeamMessage(class APlayerState* SenderPlayerState, const class FString& S, class FName Type, float MsgLifeTime);
	void ClientTravel(const class FString& URL, ETravelType TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientTravelInternal(const class FString& URL, ETravelType TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ClientUnmutePlayers(const TArray<struct FUniqueNetIdRepl>& PlayerIds);
	void ClientUpdateLevelStreamingStatus(class FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32 LODIndex, const struct FNetLevelVisibilityTransactionId& TransactionId, bool bNewShouldBlockOnUnload);
	void ClientUpdateMultipleLevelsStreamingStatus(const TArray<struct FUpdateLevelStreamingLevelStatus>& LevelStatuses);
	void ClientVoiceHandshakeComplete();
	void ClientWasKicked(const class FText& KickReason);
	void ConsoleKey(const struct FKey& Key);
	void EnableCheats();
	void FOV(float NewFOV);
	void K2_ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, class FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);
	void LocalTravel(const class FString& URL);
	void OnRep_AsyncPhysicsDataComponent();
	void OnServerStartedVisualLogger(bool bIsLogging);
	void Pause();
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, EDynamicForceFeedbackAction Action, const struct FLatentActionInfo& LatentInfo);
	void PlayHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, EControllerHand Hand, float Scale, bool bLoop);
	void ResetControllerLightColor();
	void RestartLevel();
	void SendToConsole(const class FString& Command);
	void ServerAcknowledgePossession(class APawn* P);
	void ServerBlockPlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ServerCamera(class FName NewMode);
	void ServerChangeName(const class FString& S);
	void ServerCheckClientPossession();
	void ServerCheckClientPossessionReliable();
	void ServerExec(const class FString& Msg);
	void ServerExecRPC(const class FString& Msg);
	void ServerMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ServerNotifyLoadedWorld(class FName WorldPackageName);
	void ServerPause();
	void ServerRecvClientInputFrame(int32 RecvClientInputFrame, const TArray<uint8>& Data);
	void ServerRestartPlayer();
	void ServerSendLatestAsyncPhysicsTimestamp(const struct FAsyncPhysicsTimestamp& Timestamp);
	void ServerSetSpectatorLocation(const struct FVector& NewLoc, const struct FRotator& NewRot);
	void ServerSetSpectatorWaiting(bool bWaiting);
	void ServerShortTimeout();
	void ServerToggleAILogging();
	void ServerUnblockPlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ServerUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int32 CamPitchAndYaw);
	void ServerUpdateLevelVisibility(const struct FUpdateLevelVisibilityLevelInfo& LevelVisibility);
	void ServerUpdateMultipleLevelsVisibility(const TArray<struct FUpdateLevelVisibilityLevelInfo>& LevelVisibilities);
	void ServerVerifyViewTarget();
	void ServerViewNextPlayer();
	void ServerViewPrevPlayer();
	void ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams);
	void SetAudioListenerAttenuationOverride(class USceneComponent* AttachToComponent, const struct FVector& AttenuationLocationOVerride);
	void SetAudioListenerOverride(class USceneComponent* AttachToComponent, const struct FVector& Location, const struct FRotator& Rotation);
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	void SetControllerLightColor(const struct FColor& Color);
	void SetDeprecatedInputPitchScale(float NewValue);
	void SetDeprecatedInputRollScale(float NewValue);
	void SetDeprecatedInputYawScale(float NewValue);
	void SetDisableHaptics(bool bNewDisabled);
	void SetHapticsByValue(const float Frequency, const float Amplitude, EControllerHand Hand);
	void SetMotionControlsEnabled(bool bEnabled);
	void SetMouseCursorWidget(EMouseCursor Cursor, class UUserWidget* CursorWidget);
	void SetMouseLocation(const int32 X, const int32 Y);
	void SetName(const class FString& S);
	void SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing);
	void SetVirtualJoystickVisibility(bool bVisible);
	void StartFire(uint8 FireModeNum);
	void StopHapticEffect(EControllerHand Hand);
	void SwitchLevel(const class FString& URL);
	void TestServerLevelVisibilityChange(const class FName PackageName, const class FName Filename);
	void ToggleSpeaking(bool bInSpeaking);

	bool DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection) const;
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection) const;
	const class UAsyncPhysicsData* GetAsyncPhysicsDataToConsume() const;
	class UAsyncPhysicsData* GetAsyncPhysicsDataToWrite() const;
	float GetDeprecatedInputPitchScale() const;
	float GetDeprecatedInputRollScale() const;
	float GetDeprecatedInputYawScale() const;
	struct FVector GetFocalLocation() const;
	bool GetHitResultUnderCursor(ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult* HitResult) const;
	bool GetHitResultUnderCursorByChannel(ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult* HitResult) const;
	bool GetHitResultUnderCursorForObjects(const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult) const;
	bool GetHitResultUnderFinger(ETouchIndex FingerIndex, ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult* HitResult) const;
	bool GetHitResultUnderFingerByChannel(ETouchIndex FingerIndex, ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult* HitResult) const;
	bool GetHitResultUnderFingerForObjects(ETouchIndex FingerIndex, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult) const;
	class AHUD* GetHUD() const;
	float GetInputAnalogKeyState(const struct FKey& Key) const;
	void GetInputAnalogStickState(EControllerAnalogStick WhichStick, float* StickX, float* StickY) const;
	float GetInputKeyTimeDown(const struct FKey& Key) const;
	void GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration) const;
	void GetInputMouseDelta(float* DeltaX, float* DeltaY) const;
	void GetInputTouchState(ETouchIndex FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed) const;
	struct FVector GetInputVectorKeyState(const struct FKey& Key) const;
	bool GetMousePosition(float* LocationX, float* LocationY) const;
	TSubclassOf<class UPlayerInput> GetOverridePlayerInputClass() const;
	struct FPlatformUserId GetPlatformUserId() const;
	class ASpectatorPawn* GetSpectatorPawn() const;
	void GetStreamingSourceLocationAndRotation(struct FVector* OutLocation, struct FRotator* OutRotation) const;
	EStreamingSourcePriority GetStreamingSourcePriority() const;
	void GetStreamingSourceShapes(TArray<struct FStreamingSourceShape>* OutShapes) const;
	void GetViewportSize(int32* SizeX, int32* SizeY) const;
	bool IsInputKeyDown(const struct FKey& Key) const;
	bool IsStreamingSourceEnabled() const;
	bool ProjectWorldLocationToScreen(const struct FVector& WorldLocation, struct FVector2D* ScreenLocation, bool bPlayerViewportRelative) const;
	bool StreamingSourceShouldActivate() const;
	bool StreamingSourceShouldBlockOnSlowStreaming() const;
	bool WasInputKeyJustPressed(const struct FKey& Key) const;
	bool WasInputKeyJustReleased(const struct FKey& Key) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlayerController")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlayerController")
	}
	static class APlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerController>();
	}
};
DUMPER7_ASSERTS_APlayerController;

// Class Engine.CheatManager
// 0x0060 (0x0088 - 0x0028)
class UCheatManager final : public UObject
{
public:
	class ADebugCameraController*                 DebugCameraControllerRef;                          // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ADebugCameraController>     DebugCameraControllerClass;                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x40];                                      // 0x0038(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCheatManagerExtension*>         CheatManagerExtensions;                            // 0x0078(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void BugIt(const class FString& ScreenShotDescription);
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);
	void BugItStringCreator(const struct FVector& ViewLocation, const struct FRotator& ViewRotation, class FString* GoString, class FString* LocString);
	void ChangeSize(float F);
	void CheatScript(const class FString& ScriptName);
	void DamageTarget(float DamageAmount);
	void DebugCapsuleSweep();
	void DebugCapsuleSweepCapture();
	void DebugCapsuleSweepChannel(ECollisionChannel Channel);
	void DebugCapsuleSweepClear();
	void DebugCapsuleSweepComplex(bool bTraceComplex);
	void DebugCapsuleSweepPawn();
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);
	void DestroyAll(TSubclassOf<class AActor> aClass);
	void DestroyAllPawnsExceptTarget();
	void DestroyPawns(TSubclassOf<class APawn> aClass);
	void DestroyServerStatReplicator();
	void DestroyTarget();
	void DisableDebugCamera();
	void DumpChatState();
	void DumpOnlineSessionState();
	void DumpPartyState();
	void DumpVoiceMutingState();
	void EnableDebugCamera();
	void FlushLog();
	void Fly();
	void FreezeFrame(float Delay);
	void Ghost();
	void God();
	void InvertMouse();
	void LogLoc();
	void OnlyLoadLevel(class FName PackageName);
	void OnPlayerEndPlayed(class AActor* Player, EEndPlayReason EndPlayReason);
	void PlayersOnly();
	void ReceiveEndPlay();
	void ReceiveInitCheatManager();
	void ServerToggleAILogging();
	void SetMouseSensitivityToDefault();
	void SetWorldOrigin();
	void Slomo(float NewTimeDilation);
	void SpawnServerStatReplicator();
	void StreamLevelIn(class FName PackageName);
	void StreamLevelOut(class FName PackageName);
	void Summon(const class FString& ClassName);
	void Teleport();
	void TestCollisionDistance();
	void ToggleAILogging();
	void ToggleDebugCamera();
	void ToggleServerStatReplicatorClientOverwrite();
	void ToggleServerStatReplicatorUpdateStatNet();
	void UpdateSafeArea();
	void ViewActor(class FName ActorName);
	void ViewClass(TSubclassOf<class AActor> DesiredClass);
	void ViewPlayer(const class FString& S);
	void ViewSelf();
	void Walk();

	class APlayerController* GetPlayerController() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CheatManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CheatManager")
	}
	static class UCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatManager>();
	}
};
DUMPER7_ASSERTS_UCheatManager;

// Class Engine.PluginCommandlet
// 0x0020 (0x00A0 - 0x0080)
class UPluginCommandlet final : public UCommandlet
{
public:
	uint8                                         Pad_80[0x20];                                      // 0x0080(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PluginCommandlet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PluginCommandlet")
	}
	static class UPluginCommandlet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPluginCommandlet>();
	}
};
DUMPER7_ASSERTS_UPluginCommandlet;

// Class Engine.ArrowComponent
// 0x0020 (0x0590 - 0x0570)
#pragma pack(push, 0x1)
class alignas(0x10) UArrowComponent : public UPrimitiveComponent
{
public:
	struct FColor                                 ArrowColor;                                        // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArrowSize;                                         // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArrowLength;                                       // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenSize;                                        // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsScreenSizeScaled : 1;                           // 0x0580(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTreatAsASprite : 1;                               // 0x0580(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_581[0x7];                                      // 0x0581(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetArrowColor(const struct FLinearColor& NewColor);
	void SetArrowFColor(const struct FColor& NewColor);
	void SetArrowLength(float NewLength);
	void SetArrowSize(float NewSize);
	void SetIsScreenSizeScaled(bool bNewValue);
	void SetScreenSize(float NewScreenSize);
	void SetTreatAsASprite(bool bNewValue);
	void SetUseInEditorScaling(bool bNewValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ArrowComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ArrowComponent")
	}
	static class UArrowComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArrowComponent>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_UArrowComponent;

// Class Engine.BoundsCopyComponent
// 0x00A0 (0x0140 - 0x00A0)
class UBoundsCopyComponent final : public UActorComponent
{
public:
	TSoftObjectPtr<class AActor>                  BoundsSourceActor;                                 // 0x00A0(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCollidingComponentsForSourceBounds;            // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepOwnBoundsScale;                               // 0x00C9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCollidingComponentsForOwnBounds;               // 0x00CA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB[0x5];                                       // 0x00CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PostTransform;                                     // 0x00D0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyXBounds;                                      // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyYBounds;                                      // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyZBounds;                                      // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_133[0xD];                                      // 0x0133(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BoundsCopyComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BoundsCopyComponent")
	}
	static class UBoundsCopyComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBoundsCopyComponent>();
	}
};
DUMPER7_ASSERTS_UBoundsCopyComponent;

// Class Engine.CapsuleComponent
// 0x0010 (0x05A0 - 0x0590)
class UCapsuleComponent final : public UShapeComponent
{
public:
	float                                         CapsuleHalfHeight;                                 // 0x0590(0x0004)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CapsuleRadius;                                     // 0x0594(0x0004)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_598[0x8];                                      // 0x0598(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);

	float GetScaledCapsuleHalfHeight() const;
	float GetScaledCapsuleHalfHeight_WithoutHemisphere() const;
	float GetScaledCapsuleRadius() const;
	void GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight) const;
	void GetScaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere) const;
	float GetShapeScale() const;
	float GetUnscaledCapsuleHalfHeight() const;
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere() const;
	float GetUnscaledCapsuleRadius() const;
	void GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight) const;
	void GetUnscaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CapsuleComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CapsuleComponent")
	}
	static class UCapsuleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCapsuleComponent>();
	}
};
DUMPER7_ASSERTS_UCapsuleComponent;

// Class Engine.CharacterMovementComponent
// 0x0DF8 (0x0F50 - 0x0158)
#pragma pack(push, 0x1)
class alignas(0x10) UCharacterMovementComponent : public UPawnMovementComponent
{
public:
	uint8                                         Pad_158[0x10];                                     // 0x0158(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CharacterOwner;                                    // 0x0168(0x0008)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GravityScale;                                      // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStepHeight;                                     // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpZVelocity;                                     // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpOffJumpZFactor;                                // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_180[0x1C];                                     // 0x0180(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WalkableFloorAngle;                                // 0x019C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         WalkableFloorZ;                                    // 0x01A0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GravityDirection;                                  // 0x01A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FQuat                                  WorldToGravityTransform;                           // 0x01C0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FQuat                                  GravityToWorldTransform;                           // 0x01E0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_200[0x1];                                      // 0x0200(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	EMovementMode                                 MovementMode;                                      // 0x0201(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CustomMovementMode;                                // 0x0202(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENetworkSmoothingMode                         NetworkSmoothingMode;                              // 0x0203(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundFriction;                                    // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_208[0x40];                                     // 0x0208(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxWalkSpeed;                                      // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWalkSpeedCrouched;                              // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSwimSpeed;                                      // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFlySpeed;                                       // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCustomMovementSpeed;                            // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAnalogWalkSpeed;                                // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingFrictionFactor;                             // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingFriction;                                   // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingSubStepTime;                                // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDecelerationWalking;                        // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDecelerationFalling;                        // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDecelerationSwimming;                       // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDecelerationFlying;                         // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirControl;                                        // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirControlBoostMultiplier;                         // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirControlBoostVelocityThreshold;                  // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallingLateralFriction;                            // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrouchedHalfHeight;                                // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Buoyancy;                                          // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerchRadiusThreshold;                              // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerchAdditionalHeight;                             // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationRate;                                      // 0x02A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bUseSeparateBrakingFriction : 1;                   // 0x02B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bApplyGravityWhileJumping : 1;                     // 0x02B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseControllerDesiredRotation : 1;                 // 0x02B8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOrientRotationToMovement : 1;                     // 0x02B8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSweepWhileNavWalking : 1;                         // 0x02B8(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_2B8_5 : 1;                                  // 0x02B8(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bMovementInProgress : 1;                           // 0x02B8(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bEnableScopedMovementUpdates : 1;                  // 0x02B8(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableServerDualMoveScopedMovementUpdates : 1;    // 0x02B9(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceMaxAccel : 1;                                // 0x02B9(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRunPhysicsWithNoController : 1;                   // 0x02B9(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceNextFloorCheck : 1;                          // 0x02B9(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShrinkProxyCapsule : 1;                           // 0x02B9(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanWalkOffLedges : 1;                             // 0x02B9(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanWalkOffLedgesWhenCrouching : 1;                // 0x02B9(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_2B9_7 : 1;                                  // 0x02B9(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         BitPad_2BA_0 : 1;                                  // 0x02BA(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bNetworkSkipProxyPredictionOnNetUpdate : 1;        // 0x02BA(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNetworkAlwaysReplicateTransformUpdateTimestamp : 1; // 0x02BA(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDeferUpdateMoveComponent : 1;                     // 0x02BA(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnablePhysicsInteraction : 1;                     // 0x02BA(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTouchForceScaledToMass : 1;                       // 0x02BA(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPushForceScaledToMass : 1;                        // 0x02BA(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPushForceUsingZOffset : 1;                        // 0x02BA(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bScalePushForceToVelocity : 1;                     // 0x02BB(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        DeferredUpdatedMoveComponent;                      // 0x02C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxOutOfWaterStepHeight;                           // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutofWaterZ;                                       // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandingDownwardForceScale;                        // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialPushForceFactor;                            // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushForceFactor;                                   // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushForcePointZOffsetFactor;                       // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TouchForceFactor;                                  // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTouchForce;                                     // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTouchForce;                                     // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepulsionForce;                                    // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Acceleration;                                      // 0x02F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FQuat                                  LastUpdateRotation;                                // 0x0310(0x0020)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LastUpdateLocation;                                // 0x0330(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LastUpdateVelocity;                                // 0x0348(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ServerLastTransformUpdateTimeStamp;                // 0x0360(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ServerLastClientGoodMoveAckTime;                   // 0x0364(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ServerLastClientAdjustmentTime;                    // 0x0368(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PendingImpulseToApply;                             // 0x0370(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PendingForceToApply;                               // 0x0388(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AnalogInputModifier;                               // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A4[0xC];                                      // 0x03A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSimulationTimeStep;                             // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSimulationIterations;                           // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxJumpApexAttemptsPerSimulation;                  // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDepenetrationWithGeometry;                      // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDepenetrationWithGeometryAsProxy;               // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDepenetrationWithPawn;                          // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDepenetrationWithPawnAsProxy;                   // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetworkSimulatedSmoothLocationTime;                // 0x03CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetworkSimulatedSmoothRotationTime;                // 0x03D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ListenServerNetworkSimulatedSmoothLocationTime;    // 0x03D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ListenServerNetworkSimulatedSmoothRotationTime;    // 0x03D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetProxyShrinkRadius;                              // 0x03DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetProxyShrinkHalfHeight;                          // 0x03E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetworkMaxSmoothUpdateDistance;                    // 0x03E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetworkNoSmoothUpdateDistance;                     // 0x03E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetworkMinTimeBetweenClientAckGoodMoves;           // 0x03EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetworkMinTimeBetweenClientAdjustments;            // 0x03F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetworkMinTimeBetweenClientAdjustmentsLargeCorrection; // 0x03F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetworkLargeClientCorrectionDistance;              // 0x03F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LedgeCheckThreshold;                               // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpOutOfWaterPitch;                               // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_404[0x4];                                      // 0x0404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFindFloorResult                       CurrentFloor;                                      // 0x0408(0x00F8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EMovementMode                                 DefaultLandMovementMode;                           // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 DefaultWaterMovementMode;                          // 0x0501(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 GroundMovementMode;                                // 0x0502(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_503[0x9];                                      // 0x0503(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bMaintainHorizontalGroundVelocity : 1;             // 0x050C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bImpartBaseVelocityX : 1;                          // 0x050C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bImpartBaseVelocityY : 1;                          // 0x050C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bImpartBaseVelocityZ : 1;                          // 0x050C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bImpartBaseAngularVelocity : 1;                    // 0x050C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bJustTeleported : 1;                               // 0x050C(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNetworkUpdateReceived : 1;                        // 0x050C(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNetworkMovementModeChanged : 1;                   // 0x050C(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNetworkGravityDirectionChanged : 1;               // 0x050D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreClientMovementErrorChecksAndCorrection : 1; // 0x050D(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bServerAcceptClientAuthoritativePosition : 1;      // 0x050D(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNotifyApex : 1;                                   // 0x050D(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCheatFlying : 1;                                  // 0x050D(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bWantsToCrouch : 1;                                // 0x050D(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCrouchMaintainsBaseLocation : 1;                  // 0x050D(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreBaseRotation : 1;                           // 0x050D(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFastAttachedMove : 1;                             // 0x050E(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAlwaysCheckFloor : 1;                             // 0x050E(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseFlatBaseForFloorChecks : 1;                    // 0x050E(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPerformingJumpOff : 1;                            // 0x050E(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bWantsToLeaveNavWalking : 1;                       // 0x050E(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseRVOAvoidance : 1;                              // 0x050E(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRequestedMoveUseAcceleration : 1;                 // 0x050E(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_50E_7 : 1;                                  // 0x050E(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         bWasSimulatingRootMotion : 1;                      // 0x050F(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowPhysicsRotationDuringAnimRootMotion : 1;     // 0x050F(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	float                                         FormerBaseVelocityDecayHalfLife;                   // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bHasRequestedVelocity : 1;                         // 0x0514(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bRequestedMoveWithMaxSpeed : 1;                    // 0x0514(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bWasAvoidanceUpdated : 1;                          // 0x0514(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         BitPad_514_3 : 2;                                  // 0x0514(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bProjectNavMeshWalking : 1;                        // 0x0514(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bProjectNavMeshOnBothWorldChannels : 1;            // 0x0514(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_515[0x1F];                                     // 0x0515(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AvoidanceConsiderationRadius;                      // 0x0534(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RequestedVelocity;                                 // 0x0538(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastUpdateRequestedVelocity;                       // 0x0550(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvoidanceUID;                                      // 0x0568(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNavAvoidanceMask                      AvoidanceGroup;                                    // 0x056C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FNavAvoidanceMask                      GroupsToAvoid;                                     // 0x0570(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FNavAvoidanceMask                      GroupsToIgnore;                                    // 0x0574(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         AvoidanceWeight;                                   // 0x0578(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57C[0x4];                                      // 0x057C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PendingLaunchVelocity;                             // 0x0580(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_598[0x138];                                    // 0x0598(0x0138)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NavMeshProjectionInterval;                         // 0x06D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavMeshProjectionTimer;                            // 0x06D4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavMeshProjectionInterpSpeed;                      // 0x06D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavMeshProjectionHeightScaleUp;                    // 0x06DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavMeshProjectionHeightScaleDown;                  // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavWalkingFloorDistTolerance;                      // 0x06E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E8[0x30];                                     // 0x06E8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;               // 0x0718(0x0030)(NativeAccessSpecifierPublic)
	uint8                                         Pad_748[0x18];                                     // 0x0748(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinTimeBetweenTimeStampResets;                     // 0x0760(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_764[0x54C];                                    // 0x0764(0x054C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRootMotionSourceGroup                 CurrentRootMotion;                                 // 0x0CB0(0x0048)(Transient, NativeAccessSpecifierPublic)
	struct FRootMotionSourceGroup                 ServerCorrectionRootMotion;                        // 0x0CF8(0x0048)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_D40[0x160];                                    // 0x0D40(0x0160)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRootMotionMovementParams              RootMotionParams;                                  // 0x0EA0(0x0070)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AnimRootMotionVelocity;                            // 0x0F10(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F28[0x20];                                     // 0x0F28(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddForce(const struct FVector& Force);
	void AddImpulse(const struct FVector& Impulse, bool bVelocityChange);
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);
	void CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ClearAccumulatedForces();
	void DisableMovement();
	void SetAvoidanceEnabled(bool bEnable);
	void SetAvoidanceGroup(int32 GroupFlags);
	void SetAvoidanceGroupMask(const struct FNavAvoidanceMask& GroupMask);
	void SetCrouchedHalfHeight(const float NewValue);
	void SetGroupsToAvoid(int32 GroupFlags);
	void SetGroupsToAvoidMask(const struct FNavAvoidanceMask& GroupMask);
	void SetGroupsToIgnore(int32 GroupFlags);
	void SetGroupsToIgnoreMask(const struct FNavAvoidanceMask& GroupMask);
	void SetMovementMode(EMovementMode NewMovementMode, uint8 NewCustomMode);
	void SetWalkableFloorAngle(float InWalkableFloorAngle);
	void SetWalkableFloorZ(float InWalkableFloorZ);

	float GetAnalogInputModifier() const;
	class ACharacter* GetCharacterOwner() const;
	float GetCrouchedHalfHeight() const;
	struct FVector GetCurrentAcceleration() const;
	struct FVector GetImpartedMovementBaseVelocity() const;
	struct FVector GetLastUpdateLocation() const;
	struct FVector GetLastUpdateRequestedVelocity() const;
	struct FRotator GetLastUpdateRotation() const;
	struct FVector GetLastUpdateVelocity() const;
	float GetMaxAcceleration() const;
	float GetMaxBrakingDeceleration() const;
	float GetMaxJumpHeight() const;
	float GetMaxJumpHeightWithJumpTime() const;
	float GetMinAnalogSpeed() const;
	class UPrimitiveComponent* GetMovementBase() const;
	float GetPerchRadiusThreshold() const;
	float GetValidPerchRadius() const;
	bool IsWalkable(const struct FHitResult& Hit) const;
	bool IsWalking() const;
	void K2_ComputeFloorDist(const struct FVector& CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult* FloorResult) const;
	void K2_FindFloor(const struct FVector& CapsuleLocation, struct FFindFloorResult* FloorResult) const;
	float K2_GetWalkableFloorAngle() const;
	float K2_GetWalkableFloorZ() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CharacterMovementComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CharacterMovementComponent")
	}
	static class UCharacterMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterMovementComponent>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_UCharacterMovementComponent;

// Class Engine.DirectionalLightComponent
// 0x00D0 (0x04C0 - 0x03F0)
class UDirectionalLightComponent final : public ULightComponent
{
public:
	float                                         ShadowCascadeBiasDistribution;                     // 0x03E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableLightShaftOcclusion : 1;                    // 0x03EC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3ED[0x3];                                      // 0x03ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionMaskDarkness;                             // 0x03F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionDepthRange;                               // 0x03F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightShaftOverrideDirection;                       // 0x03F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WholeSceneDynamicShadowRadius;                     // 0x0410(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicShadowDistanceMovableLight;                 // 0x0414(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicShadowDistanceStationaryLight;              // 0x0418(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DynamicShadowCascades;                             // 0x041C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CascadeDistributionExponent;                       // 0x0420(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CascadeTransitionFraction;                         // 0x0424(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowDistanceFadeoutFraction;                     // 0x0428(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseInsetShadowsForMovableObjects : 1;             // 0x042C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_42D[0x3];                                      // 0x042D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FarShadowCascadeCount;                             // 0x0430(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarShadowDistance;                                 // 0x0434(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFieldShadowDistance;                       // 0x0438(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForwardShadingPriority;                            // 0x043C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightSourceAngle;                                  // 0x0440(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightSourceSoftAngle;                              // 0x0444(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSourceAngleFactor;                           // 0x0448(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDistance;                                     // 0x044C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUsedAsAtmosphereSunLight : 1;                     // 0x0450(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAtmosphereSunLight : 1;                           // 0x0450(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_451[0x3];                                      // 0x0451(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AtmosphereSunLightIndex;                           // 0x0454(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AtmosphereSunDiskColorScale;                       // 0x0458(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPerPixelAtmosphereTransmittance : 1;              // 0x0468(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastShadowsOnClouds : 1;                          // 0x0468(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastShadowsOnAtmosphere : 1;                      // 0x0468(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastCloudShadows : 1;                             // 0x0468(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_469[0x3];                                      // 0x0469(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CloudShadowStrength;                               // 0x046C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowOnAtmosphereStrength;                   // 0x0470(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowOnSurfaceStrength;                      // 0x0474(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowDepthBias;                              // 0x0478(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowExtent;                                 // 0x047C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowMapResolutionScale;                     // 0x0480(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowRaySampleCountScale;                    // 0x0484(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudScatteredLuminanceScale;                      // 0x0488(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightmassDirectionalLightSettings     LightmassSettings;                                 // 0x0498(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bCastModulatedShadows : 1;                         // 0x04A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4A9[0x3];                                      // 0x04A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 ModulatedShadowColor;                              // 0x04AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowAmount;                                      // 0x04B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B4[0xC];                                      // 0x04B4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAtmosphereSunLight(bool bNewValue);
	void SetAtmosphereSunLightIndex(int32 NewValue);
	void SetCascadeDistributionExponent(float NewValue);
	void SetCascadeTransitionFraction(float NewValue);
	void SetDynamicShadowCascades(int32 NewValue);
	void SetDynamicShadowDistanceMovableLight(float NewValue);
	void SetDynamicShadowDistanceStationaryLight(float NewValue);
	void SetEnableLightShaftOcclusion(bool bNewValue);
	void SetForwardShadingPriority(int32 NewValue);
	void SetLightShaftOverrideDirection(const struct FVector& NewValue);
	void SetLightSourceAngle(float NewValue);
	void SetLightSourceSoftAngle(float NewValue);
	void SetOcclusionDepthRange(float NewValue);
	void SetOcclusionMaskDarkness(float NewValue);
	void SetShadowAmount(float NewValue);
	void SetShadowCascadeBiasDistribution(float NewValue);
	void SetShadowDistanceFadeoutFraction(float NewValue);
	void SetShadowSourceAngleFactor(float NewValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DirectionalLightComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DirectionalLightComponent")
	}
	static class UDirectionalLightComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDirectionalLightComponent>();
	}
};
DUMPER7_ASSERTS_UDirectionalLightComponent;

// Class Engine.InterpToMovementComponent
// 0x00B0 (0x01B8 - 0x0108)
class UInterpToMovementComponent final : public UMovementComponent
{
public:
	float                                         Duration;                                          // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPauseOnImpact : 1;                                // 0x010C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bSweep;                                            // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeleportType                                 TeleportType;                                      // 0x0111(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInterpToBehaviourType                        BehaviourType;                                     // 0x0112(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckIfStillInWorld;                              // 0x0113(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bForceSubStepping : 1;                             // 0x0114(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FHitResult& ImpactResult, float Time)> OnInterpToReverse; // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FHitResult& ImpactResult, float Time)> OnInterpToStop; // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FHitResult& ImpactResult, float Time)> OnWaitBeginDelegate; // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FHitResult& ImpactResult, float Time)> OnWaitEndDelegate; // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FHitResult& ImpactResult, float Time)> OnResetDelegate; // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         MaxSimulationTimeStep;                             // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSimulationIterations;                           // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInterpControlPoint>            ControlPoints;                                     // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_180[0x38];                                     // 0x0180(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddControlPointPosition(const struct FVector& Pos, bool bPositionIsRelative);
	void FinaliseControlPoints();
	void ResetControlPoints();
	void RestartMovement(float InitialDirection);
	void StopSimulating(const struct FHitResult& HitResult);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterpToMovementComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterpToMovementComponent")
	}
	static class UInterpToMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpToMovementComponent>();
	}
};
DUMPER7_ASSERTS_UInterpToMovementComponent;

// Class Engine.LODSyncComponent
// 0x0098 (0x0138 - 0x00A0)
class ULODSyncComponent final : public UActorComponent
{
public:
	int32                                         NumLODs;                                           // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcedLOD;                                         // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinLOD;                                            // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FComponentSync>                 ComponentsToSync;                                  // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLODMappingData>     CustomLODMapping;                                  // 0x00C0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         CurrentLOD;                                        // 0x0110(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CurrentNumLODs;                                    // 0x0114(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UPrimitiveComponent*>            DriveComponents;                                   // 0x0118(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UPrimitiveComponent*>            SubComponents;                                     // 0x0128(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	class FString GetLODSyncDebugText() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LODSyncComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LODSyncComponent")
	}
	static class ULODSyncComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULODSyncComponent>();
	}
};
DUMPER7_ASSERTS_ULODSyncComponent;

// Class Engine.ModelComponent
// 0x0040 (0x05B0 - 0x0570)
class UModelComponent final : public UPrimitiveComponent
{
public:
	uint8                                         Pad_570[0x18];                                     // 0x0570(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UBodySetup*                             ModelBodySetup;                                    // 0x0588(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_590[0x20];                                     // 0x0590(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModelComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModelComponent")
	}
	static class UModelComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModelComponent>();
	}
};
DUMPER7_ASSERTS_UModelComponent;

// Class Engine.PawnNoiseEmitterComponent
// 0x0038 (0x00D8 - 0x00A0)
class UPawnNoiseEmitterComponent final : public UActorComponent
{
public:
	uint8                                         bAIPerceptionSystemCompatibilityMode : 1;          // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastRemoteNoisePosition;                           // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseLifetime;                                     // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastRemoteNoiseVolume;                             // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LastRemoteNoiseTime;                               // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LastLocalNoiseVolume;                              // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LastLocalNoiseTime;                                // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MakeNoise(class AActor* NoiseMaker, float Loudness, const struct FVector& NoiseLocation);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PawnNoiseEmitterComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PawnNoiseEmitterComponent")
	}
	static class UPawnNoiseEmitterComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPawnNoiseEmitterComponent>();
	}
};
DUMPER7_ASSERTS_UPawnNoiseEmitterComponent;

// Class Engine.PlatformEventsComponent
// 0x0020 (0x00C0 - 0x00A0)
class UPlatformEventsComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void()>              PlatformChangedToLaptopModeDelegate;               // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              PlatformChangedToTabletModeDelegate;               // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	bool IsInLaptopMode();
	bool IsInTabletMode();
	bool SupportsConvertibleLaptops();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlatformEventsComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlatformEventsComponent")
	}
	static class UPlatformEventsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlatformEventsComponent>();
	}
};
DUMPER7_ASSERTS_UPlatformEventsComponent;

// Class Engine.PoseableMeshComponent
// 0x0160 (0x0A50 - 0x08F0)
class UPoseableMeshComponent final : public USkinnedMeshComponent
{
public:
	uint8                                         Pad_8F0[0x160];                                    // 0x08F0(0x0160)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CopyPoseFromSkeletalComponent(class USkeletalMeshComponent* InComponentToCopy);
	struct FVector GetBoneLocationByName(class FName BoneName, EBoneSpaces BoneSpace);
	struct FRotator GetBoneRotationByName(class FName BoneName, EBoneSpaces BoneSpace);
	struct FVector GetBoneScaleByName(class FName BoneName, EBoneSpaces BoneSpace);
	struct FTransform GetBoneTransformByName(class FName BoneName, EBoneSpaces BoneSpace);
	void ResetBoneTransformByName(class FName BoneName);
	void SetBoneLocationByName(class FName BoneName, const struct FVector& InLocation, EBoneSpaces BoneSpace);
	void SetBoneRotationByName(class FName BoneName, const struct FRotator& InRotation, EBoneSpaces BoneSpace);
	void SetBoneScaleByName(class FName BoneName, const struct FVector& InScale3D, EBoneSpaces BoneSpace);
	void SetBoneTransformByName(class FName BoneName, const struct FTransform& InTransform, EBoneSpaces BoneSpace);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PoseableMeshComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PoseableMeshComponent")
	}
	static class UPoseableMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseableMeshComponent>();
	}
};
DUMPER7_ASSERTS_UPoseableMeshComponent;

// Class Engine.PostProcessComponent
// 0x0700 (0x09A0 - 0x02A0)
class UPostProcessComponent : public USceneComponent
{
public:
	uint8                                         Pad_2A0[0x10];                                     // 0x02A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   Settings;                                          // 0x02B0(0x06E0)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x0990(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendRadius;                                       // 0x0994(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x0998(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnabled : 1;                                      // 0x099C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUnbound : 1;                                      // 0x099C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_99D[0x3];                                      // 0x099D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddOrUpdateBlendable(TScriptInterface<class IBlendableInterface> InBlendableObject, float InWeight);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PostProcessComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PostProcessComponent")
	}
	static class UPostProcessComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPostProcessComponent>();
	}
};
DUMPER7_ASSERTS_UPostProcessComponent;

// Class Engine.SkyAtmosphere
// 0x0008 (0x02A0 - 0x0298)
class ASkyAtmosphere final : public AInfo
{
public:
	class USkyAtmosphereComponent*                SkyAtmosphereComponent;                            // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkyAtmosphere")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkyAtmosphere")
	}
	static class ASkyAtmosphere* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASkyAtmosphere>();
	}
};
DUMPER7_ASSERTS_ASkyAtmosphere;

// Class Engine.SplineComponent
// 0x0100 (0x0670 - 0x0570)
class USplineComponent : public UPrimitiveComponent
{
public:
	struct FSplineCurves                          SplineCurves;                                      // 0x0570(0x0070)(Edit, Net, NativeAccessSpecifierPublic)
	struct FInterpCurveVector                     SplineInfo;                                        // 0x05E0(0x0018)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveQuat                       SplineRotInfo;                                     // 0x05F8(0x0018)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveVector                     SplineScaleInfo;                                   // 0x0610(0x0018)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      SplineReparamTable;                                // 0x0628(0x0018)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSplineEditingPerInstance;                    // 0x0640(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_641[0x3];                                      // 0x0641(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReparamStepsPerSegment;                            // 0x0644(0x0004)(Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStationaryEndpoints;                              // 0x064C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSplineHasBeenEdited;                              // 0x064D(0x0001)(Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifiedByConstructionScript;                     // 0x064E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInputSplinePointsToConstructionScript;            // 0x064F(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebug;                                        // 0x0650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClosedLoop;                                       // 0x0651(0x0001)(Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bLoopPositionOverride;                             // 0x0652(0x0001)(Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_653[0x1];                                      // 0x0653(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoopPosition;                                      // 0x0654(0x0004)(Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                DefaultUpVector;                                   // 0x0658(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AddPoint(const struct FSplinePoint& Point, bool bUpdateSpline);
	void AddPoints(const TArray<struct FSplinePoint>& Points, bool bUpdateSpline);
	void AddSplineLocalPoint(const struct FVector& Position);
	void AddSplinePoint(const struct FVector& Position, ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void AddSplinePointAtIndex(const struct FVector& Position, int32 Index_0, ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void AddSplineWorldPoint(const struct FVector& Position);
	void ClearSplinePoints(bool bUpdateSpline);
	void RemoveSplinePoint(int32 Index_0, bool bUpdateSpline);
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);
	void SetDefaultUpVector(const struct FVector& UpVector, ESplineCoordinateSpace CoordinateSpace);
	void SetDrawDebug(bool bShow);
	void SetLocationAtSplinePoint(int32 PointIndex, const struct FVector& InLocation, ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void SetRotationAtSplinePoint(int32 PointIndex, const struct FRotator& InRotation, ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void SetScaleAtSplinePoint(int32 PointIndex, const struct FVector& InScaleVector, bool bUpdateSpline);
	void SetSelectedSplineSegmentColor(const struct FLinearColor& SegmentColor);
	void SetSplineLocalPoints(const TArray<struct FVector>& Points);
	void SetSplinePoints(const TArray<struct FVector>& Points, ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void SetSplinePointType(int32 PointIndex, ESplinePointType Type, bool bUpdateSpline);
	void SetSplineWorldPoints(const TArray<struct FVector>& Points);
	void SetTangentAtSplinePoint(int32 PointIndex, const struct FVector& InTangent, ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void SetTangentColor(const struct FLinearColor& TangentColor);
	void SetTangentsAtSplinePoint(int32 PointIndex, const struct FVector& InArriveTangent, const struct FVector& InLeaveTangent, ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void SetUnselectedSplineSegmentColor(const struct FLinearColor& SegmentColor);
	void SetUpVectorAtSplinePoint(int32 PointIndex, const struct FVector& InUpVector, ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void SetWorldLocationAtSplinePoint(int32 PointIndex, const struct FVector& InLocation);
	void UpdateSpline();

	bool ConvertSplineSegmentToPolyLine(int32 SplinePointStartIndex, ESplineCoordinateSpace CoordinateSpace, const float MaxSquareDistanceFromSpline, TArray<struct FVector>* OutPoints) const;
	bool ConvertSplineToPolyLine(ESplineCoordinateSpace CoordinateSpace, const float MaxSquareDistanceFromSpline, TArray<struct FVector>* OutPoints) const;
	bool DivideSplineIntoPolylineRecursive(float StartDistanceAlongSpline, float EndDistanceAlongSpline, ESplineCoordinateSpace CoordinateSpace, const float MaxSquareDistanceFromSpline, TArray<struct FVector>* OutPoints) const;
	bool DivideSplineIntoPolylineRecursiveWithDistances(float StartDistanceAlongSpline, float EndDistanceAlongSpline, ESplineCoordinateSpace CoordinateSpace, const float MaxSquareDistanceFromSpline, TArray<struct FVector>* OutPoints, TArray<double>* OutDistancesAlongSpline) const;
	struct FVector FindDirectionClosestToWorldLocation(const struct FVector& WorldLocation, ESplineCoordinateSpace CoordinateSpace) const;
	float FindInputKeyClosestToWorldLocation(const struct FVector& WorldLocation) const;
	struct FVector FindLocationClosestToWorldLocation(const struct FVector& WorldLocation, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector FindRightVectorClosestToWorldLocation(const struct FVector& WorldLocation, ESplineCoordinateSpace CoordinateSpace) const;
	float FindRollClosestToWorldLocation(const struct FVector& WorldLocation, ESplineCoordinateSpace CoordinateSpace) const;
	struct FRotator FindRotationClosestToWorldLocation(const struct FVector& WorldLocation, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector FindScaleClosestToWorldLocation(const struct FVector& WorldLocation) const;
	struct FVector FindTangentClosestToWorldLocation(const struct FVector& WorldLocation, ESplineCoordinateSpace CoordinateSpace) const;
	struct FTransform FindTransformClosestToWorldLocation(const struct FVector& WorldLocation, ESplineCoordinateSpace CoordinateSpace, bool bUseScale) const;
	struct FVector FindUpVectorClosestToWorldLocation(const struct FVector& WorldLocation, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetArriveTangentAtSplinePoint(int32 PointIndex, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetDefaultUpVector(ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetDirectionAtDistanceAlongSpline(float Distance, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetDirectionAtSplineInputKey(float InKey, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetDirectionAtSplinePoint(int32 PointIndex, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetDirectionAtTime(float Time, ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity) const;
	float GetDistanceAlongSplineAtLocation(const struct FVector& InLocation, ESplineCoordinateSpace CoordinateSpace) const;
	float GetDistanceAlongSplineAtSplineInputKey(float InKey) const;
	float GetDistanceAlongSplineAtSplinePoint(int32 PointIndex) const;
	float GetFloatPropertyAtSplineInputKey(float InKey, class FName PropertyName) const;
	float GetFloatPropertyAtSplinePoint(int32 Index_0, class FName PropertyName) const;
	float GetInputKeyAtDistanceAlongSpline(float Distance) const;
	float GetInputKeyValueAtDistanceAlongSpline(float Distance) const;
	float GetInputKeyValueAtSplinePoint(int32 PointIndex) const;
	struct FVector GetLeaveTangentAtSplinePoint(int32 PointIndex, ESplineCoordinateSpace CoordinateSpace) const;
	void GetLocalLocationAndTangentAtSplinePoint(int32 PointIndex, struct FVector* LocalLocation, struct FVector* LocalTangent) const;
	void GetLocationAndTangentAtSplinePoint(int32 PointIndex, struct FVector* Location, struct FVector* Tangent, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetLocationAtDistanceAlongSpline(float Distance, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetLocationAtSplineInputKey(float InKey, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetLocationAtSplinePoint(int32 PointIndex, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetLocationAtTime(float Time, ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity) const;
	int32 GetNumberOfSplinePoints() const;
	int32 GetNumberOfSplineSegments() const;
	struct FVector GetRightVectorAtDistanceAlongSpline(float Distance, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetRightVectorAtSplineInputKey(float InKey, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetRightVectorAtSplinePoint(int32 PointIndex, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetRightVectorAtTime(float Time, ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity) const;
	float GetRollAtDistanceAlongSpline(float Distance, ESplineCoordinateSpace CoordinateSpace) const;
	float GetRollAtSplineInputKey(float InKey, ESplineCoordinateSpace CoordinateSpace) const;
	float GetRollAtSplinePoint(int32 PointIndex, ESplineCoordinateSpace CoordinateSpace) const;
	float GetRollAtTime(float Time, ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity) const;
	struct FRotator GetRotationAtDistanceAlongSpline(float Distance, ESplineCoordinateSpace CoordinateSpace) const;
	struct FRotator GetRotationAtSplineInputKey(float InKey, ESplineCoordinateSpace CoordinateSpace) const;
	struct FRotator GetRotationAtSplinePoint(int32 PointIndex, ESplineCoordinateSpace CoordinateSpace) const;
	struct FRotator GetRotationAtTime(float Time, ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity) const;
	struct FVector GetScaleAtDistanceAlongSpline(float Distance) const;
	struct FVector GetScaleAtSplineInputKey(float InKey) const;
	struct FVector GetScaleAtSplinePoint(int32 PointIndex) const;
	struct FVector GetScaleAtTime(float Time, bool bUseConstantVelocity) const;
	float GetSplineLength() const;
	struct FSplinePoint GetSplinePointAt(int32 PointIndex, ESplineCoordinateSpace CoordinateSpace) const;
	ESplinePointType GetSplinePointType(int32 PointIndex) const;
	struct FVector GetTangentAtDistanceAlongSpline(float Distance, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetTangentAtSplineInputKey(float InKey, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetTangentAtSplinePoint(int32 PointIndex, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetTangentAtTime(float Time, ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity) const;
	float GetTimeAtDistanceAlongSpline(float Distance) const;
	struct FTransform GetTransformAtDistanceAlongSpline(float Distance, ESplineCoordinateSpace CoordinateSpace, bool bUseScale) const;
	struct FTransform GetTransformAtSplineInputKey(float InKey, ESplineCoordinateSpace CoordinateSpace, bool bUseScale) const;
	struct FTransform GetTransformAtSplinePoint(int32 PointIndex, ESplineCoordinateSpace CoordinateSpace, bool bUseScale) const;
	struct FTransform GetTransformAtTime(float Time, ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, bool bUseScale) const;
	struct FVector GetUpVectorAtDistanceAlongSpline(float Distance, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetUpVectorAtSplineInputKey(float InKey, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetUpVectorAtSplinePoint(int32 PointIndex, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetUpVectorAtTime(float Time, ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity) const;
	struct FVector GetVectorPropertyAtSplineInputKey(float InKey, class FName PropertyName) const;
	struct FVector GetVectorPropertyAtSplinePoint(int32 Index_0, class FName PropertyName) const;
	struct FVector GetWorldDirectionAtDistanceAlongSpline(float Distance) const;
	struct FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity) const;
	struct FVector GetWorldLocationAtDistanceAlongSpline(float Distance) const;
	struct FVector GetWorldLocationAtSplinePoint(int32 PointIndex) const;
	struct FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity) const;
	struct FRotator GetWorldRotationAtDistanceAlongSpline(float Distance) const;
	struct FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity) const;
	struct FVector GetWorldTangentAtDistanceAlongSpline(float Distance) const;
	bool IsClosedLoop() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SplineComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SplineComponent")
	}
	static class USplineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USplineComponent>();
	}
};
DUMPER7_ASSERTS_USplineComponent;

// Class Engine.SpotLightComponent
// 0x0010 (0x0430 - 0x0420)
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                         InnerConeAngle;                                    // 0x0420(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterConeAngle;                                    // 0x0424(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_428[0x8];                                      // 0x0428(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetInnerConeAngle(float NewInnerConeAngle);
	void SetOuterConeAngle(float NewOuterConeAngle);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SpotLightComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SpotLightComponent")
	}
	static class USpotLightComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpotLightComponent>();
	}
};
DUMPER7_ASSERTS_USpotLightComponent;

// Class Engine.VolumetricCloud
// 0x0008 (0x02A0 - 0x0298)
class AVolumetricCloud final : public AInfo
{
public:
	class UVolumetricCloudComponent*              VolumetricCloudComponent;                          // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VolumetricCloud")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VolumetricCloud")
	}
	static class AVolumetricCloud* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVolumetricCloud>();
	}
};
DUMPER7_ASSERTS_AVolumetricCloud;

// Class Engine.WorldPartitionStreamingSourceComponent
// 0x0060 (0x0100 - 0x00A0)
class UWorldPartitionStreamingSourceComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EStreamingSourceTargetBehavior                TargetBehavior;                                    // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TargetGrids;                                       // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   TargetGrid;                                        // 0x00C0(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 DebugColor;                                        // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHLODLayer*>                     TargetHLODLayers;                                  // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UHLODLayer*                             TargetHLODLayer;                                   // 0x00E0(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStreamingSourceShape>          Shapes;                                            // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EStreamingSourcePriority                      Priority;                                          // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStreamingSourceEnabled;                           // 0x00F9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EStreamingSourceTargetState                   TargetState;                                       // 0x00FA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisableStreamingSource();
	void EnableStreamingSource();

	bool IsStreamingCompleted() const;
	bool IsStreamingSourceEnabled() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionStreamingSourceComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionStreamingSourceComponent")
	}
	static class UWorldPartitionStreamingSourceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionStreamingSourceComponent>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionStreamingSourceComponent;

// Class Engine.CompositeDataTable
// 0x0028 (0x00D8 - 0x00B0)
class UCompositeDataTable final : public UDataTable
{
public:
	TArray<class UDataTable*>                     ParentTables;                                      // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UDataTable*>                     OldParentTables;                                   // 0x00C0(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompositeDataTable")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompositeDataTable")
	}
	static class UCompositeDataTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompositeDataTable>();
	}
};
DUMPER7_ASSERTS_UCompositeDataTable;

// Class Engine.EnumCookedMetaData
// 0x0050 (0x0078 - 0x0028)
class UEnumCookedMetaData final : public UObject
{
public:
	struct FObjectCookedMetaDataStore             EnumMetaData;                                      // 0x0028(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EnumCookedMetaData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EnumCookedMetaData")
	}
	static class UEnumCookedMetaData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnumCookedMetaData>();
	}
};
DUMPER7_ASSERTS_UEnumCookedMetaData;

// Class Engine.StructCookedMetaData
// 0x00A0 (0x00C8 - 0x0028)
class UStructCookedMetaData final : public UObject
{
public:
	struct FStructCookedMetaDataStore             StructMetaData;                                    // 0x0028(0x00A0)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("StructCookedMetaData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"StructCookedMetaData")
	}
	static class UStructCookedMetaData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStructCookedMetaData>();
	}
};
DUMPER7_ASSERTS_UStructCookedMetaData;

// Class Engine.StreamingSettings
// 0x0038 (0x0070 - 0x0038)
class UStreamingSettings final : public UDeveloperSettings
{
public:
	uint8                                         AsyncLoadingThreadEnabled : 1;                     // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         WarnIfTimeLimitExceeded : 1;                       // 0x0038(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeLimitExceededMultiplier;                       // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimeLimitExceededMinTime;                          // 0x0040(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MinBulkDataSizeForAsyncLoading;                    // 0x0044(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         UseBackgroundLevelStreaming : 1;                   // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         AsyncLoadingUseFullTimeLimit : 1;                  // 0x0048(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AsyncLoadingTimeLimit;                             // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PriorityAsyncLoadingExtraTime;                     // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LevelStreamingActorsUpdateTimeLimit;               // 0x0054(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PriorityLevelStreamingActorsUpdateExtraTime;       // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LevelStreamingComponentsRegistrationGranularity;   // 0x005C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LevelStreamingAddPrimitiveGranularity;             // 0x0060(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LevelStreamingUnregisterComponentsTimeLimit;       // 0x0064(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LevelStreamingComponentsUnregistrationGranularity; // 0x0068(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         FlushStreamingOnExit : 1;                          // 0x006C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         EventDrivenLoaderEnabled : 1;                      // 0x006C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("StreamingSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"StreamingSettings")
	}
	static class UStreamingSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStreamingSettings>();
	}
};
DUMPER7_ASSERTS_UStreamingSettings;

// Class Engine.GarbageCollectionSettings
// 0x0020 (0x0058 - 0x0038)
class UGarbageCollectionSettings final : public UDeveloperSettings
{
public:
	float                                         TimeBetweenPurgingPendingKillObjects;              // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         FlushStreamingOnGC : 1;                            // 0x003C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         AllowParallelGC : 1;                               // 0x003C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         IncrementalBeginDestroyEnabled : 1;                // 0x003C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         MultithreadedDestructionEnabled : 1;               // 0x003C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         CreateGCClusters : 1;                              // 0x003C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         AssetClusteringEnabled : 1;                        // 0x003C(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         ActorClusteringEnabled : 1;                        // 0x003C(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         UseDisregardForGCOnDedicatedServers : 1;           // 0x003C(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         VerifyUObjectsAreNotFGCObjects : 1;                // 0x003D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         PendingKillEnabled : 1;                            // 0x003D(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         DumpObjectCountsToLogWhenMaxObjectLimitExceeded : 1; // 0x003D(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinGCClusterSize;                                  // 0x0040(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumRetriesBeforeForcingGC;                         // 0x0044(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxObjectsNotConsideredByGC;                       // 0x0048(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SizeOfPermanentObjectPool;                         // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxObjectsInGame;                                  // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxObjectsInEditor;                                // 0x0054(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GarbageCollectionSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GarbageCollectionSettings")
	}
	static class UGarbageCollectionSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGarbageCollectionSettings>();
	}
};
DUMPER7_ASSERTS_UGarbageCollectionSettings;

// Class Engine.CullDistanceVolume
// 0x0018 (0x02E8 - 0x02D0)
class ACullDistanceVolume final : public AVolume
{
public:
	TArray<struct FCullDistanceSizePair>          CullDistances;                                     // 0x02D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bEnabled : 1;                                      // 0x02E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CullDistanceVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CullDistanceVolume")
	}
	static class ACullDistanceVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACullDistanceVolume>();
	}
};
DUMPER7_ASSERTS_ACullDistanceVolume;

// Class Engine.CurveEdPresetCurve
// 0x0000 (0x0028 - 0x0028)
class UCurveEdPresetCurve final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CurveEdPresetCurve")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CurveEdPresetCurve")
	}
	static class UCurveEdPresetCurve* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurveEdPresetCurve>();
	}
};
DUMPER7_ASSERTS_UCurveEdPresetCurve;

// Class Engine.CurveFloat
// 0x0088 (0x00B8 - 0x0030)
class UCurveFloat final : public UCurveBase
{
public:
	struct FRichCurve                             FloatCurve;                                        // 0x0030(0x0080)(NativeAccessSpecifierPublic)
	bool                                          bIsEventCurve;                                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetFloatValue(float InTime) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CurveFloat")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CurveFloat")
	}
	static class UCurveFloat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurveFloat>();
	}
};
DUMPER7_ASSERTS_UCurveFloat;

// Class Engine.CurveLinearColor
// 0x0220 (0x0250 - 0x0030)
class UCurveLinearColor final : public UCurveBase
{
public:
	struct FRichCurve                             FloatCurves[0x4];                                  // 0x0030(0x0080)(NativeAccessSpecifierPublic)
	float                                         AdjustHue;                                         // 0x0230(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustSaturation;                                  // 0x0234(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustBrightness;                                  // 0x0238(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustBrightnessCurve;                             // 0x023C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustVibrance;                                    // 0x0240(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustMinAlpha;                                    // 0x0244(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustMaxAlpha;                                    // 0x0248(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FLinearColor GetClampedLinearColorValue(float InTime) const;
	struct FLinearColor GetLinearColorValue(float InTime) const;
	struct FLinearColor GetUnadjustedLinearColorValue(float InTime) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CurveLinearColor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CurveLinearColor")
	}
	static class UCurveLinearColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurveLinearColor>();
	}
};
DUMPER7_ASSERTS_UCurveLinearColor;

// Class Engine.DamageType
// 0x0018 (0x0040 - 0x0028)
class UDamageType : public UObject
{
public:
	uint8                                         bCausedByWorld : 1;                                // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bScaleMomentumByMass : 1;                          // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRadialDamageVelChange : 1;                        // 0x0028(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageImpulse;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestructibleImpulse;                               // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestructibleDamageSpreadScale;                     // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageFalloff;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DamageType")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DamageType")
	}
	static class UDamageType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDamageType>();
	}
};
DUMPER7_ASSERTS_UDamageType;

// Class Engine.DebugCameraController
// 0x0180 (0x09D8 - 0x0858)
class ADebugCameraController final : public APlayerController
{
public:
	uint8                                         bShowSelectedInfo : 1;                             // 0x0858(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsFrozenRendering : 1;                            // 0x0858(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsOrbitingSelectedActor : 1;                      // 0x0858(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOrbitPivotUseCenter : 1;                          // 0x0858(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableBufferVisualization : 1;                    // 0x0858(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableBufferVisualizationFullMode : 1;            // 0x0858(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBufferVisualizationInputSetup : 1;              // 0x0858(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLastDisplayEnabled : 1;                           // 0x0858(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_859[0x7];                                      // 0x0859(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDrawFrustumComponent*                  DrawFrustum;                                       // 0x0860(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  SelectedActor;                                     // 0x0868(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPrimitiveComponent>     SelectedComponent;                                 // 0x0870(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SelectedHitPoint;                                  // 0x0878(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class APlayerController*                      OriginalControllerRef;                             // 0x0960(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayer*                                OriginalPlayer;                                    // 0x0968(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0970(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialMaxSpeed;                                   // 0x0974(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialAccel;                                      // 0x0978(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialDecel;                                      // 0x097C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_980[0x58];                                     // 0x0980(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ReceiveOnActivate(class APlayerController* OriginalPC);
	void ReceiveOnActorSelected(class AActor* NewSelectedActor, const struct FVector& SelectHitLocation, const struct FVector& SelectHitNormal, const struct FHitResult& Hit);
	void ReceiveOnDeactivate(class APlayerController* RestoredPC);
	void SetPawnMovementSpeedScale(float NewSpeedScale);
	void ShowDebugSelectedInfo();
	void ToggleDisplay();

	class AActor* GetSelectedActor() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DebugCameraController")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DebugCameraController")
	}
	static class ADebugCameraController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADebugCameraController>();
	}
};
DUMPER7_ASSERTS_ADebugCameraController;

// Class Engine.DebugDrawService
// 0x0000 (0x0028 - 0x0028)
class UDebugDrawService final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DebugDrawService")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DebugDrawService")
	}
	static class UDebugDrawService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDebugDrawService>();
	}
};
DUMPER7_ASSERTS_UDebugDrawService;

// Class Engine.DefaultPhysicsVolume
// 0x0000 (0x02E0 - 0x02E0)
class ADefaultPhysicsVolume final : public APhysicsVolume
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DefaultPhysicsVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DefaultPhysicsVolume")
	}
	static class ADefaultPhysicsVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADefaultPhysicsVolume>();
	}
};
DUMPER7_ASSERTS_ADefaultPhysicsVolume;

// Class Engine.DestructibleInterface
// 0x0000 (0x0000 - 0x0000)
class IDestructibleInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DestructibleInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DestructibleInterface")
	}
	static class IDestructibleInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDestructibleInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IDestructibleInterface;

// Class Engine.TextureLODSettings
// 0x0010 (0x0038 - 0x0028)
class UTextureLODSettings : public UObject
{
public:
	TArray<struct FTextureLODGroup>               TextureLODGroups;                                  // 0x0028(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TextureLODSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TextureLODSettings")
	}
	static class UTextureLODSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextureLODSettings>();
	}
};
DUMPER7_ASSERTS_UTextureLODSettings;

// Class Engine.DeviceProfile
// 0x0098 (0x00D0 - 0x0038)
class UDeviceProfile final : public UTextureLODSettings
{
public:
	class FString                                 DeviceType;                                        // 0x0038(0x0010)(Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BaseProfileName;                                   // 0x0048(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsVisibleForAssets : 1;                           // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDeviceProfile*                         Parent;                                            // 0x0060(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x28];                                      // 0x0068(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CVars;                                             // 0x0090(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FDPMatchingRulestruct>          MatchingRules;                                     // 0x00A0(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x20];                                      // 0x00B0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DeviceProfile")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DeviceProfile")
	}
	static class UDeviceProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDeviceProfile>();
	}
};
DUMPER7_ASSERTS_UDeviceProfile;

// Class Engine.DialogueVoice
// 0x0018 (0x0040 - 0x0028)
class UDialogueVoice final : public UObject
{
public:
	EGrammaticalGender                            Gender;                                            // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGrammaticalNumber                            Plurality;                                         // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  LocalizationGUID;                                  // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DialogueVoice")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DialogueVoice")
	}
	static class UDialogueVoice* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogueVoice>();
	}
};
DUMPER7_ASSERTS_UDialogueVoice;

// Class Engine.DialogueWave
// 0x0048 (0x0070 - 0x0028)
class UDialogueWave final : public UObject
{
public:
	uint8                                         bMature : 1;                                       // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SubtitleOverride : 1;                    // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SpokenText;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubtitleOverride;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDialogueContextMapping>        ContextMappings;                                   // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                  LocalizationGUID;                                  // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DialogueWave")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DialogueWave")
	}
	static class UDialogueWave* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogueWave>();
	}
};
DUMPER7_ASSERTS_UDialogueWave;

// Class Engine.DocumentationActor
// 0x0008 (0x02A0 - 0x0298)
class ADocumentationActor final : public AActor
{
public:
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DocumentationActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DocumentationActor")
	}
	static class ADocumentationActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADocumentationActor>();
	}
};
DUMPER7_ASSERTS_ADocumentationActor;

// Class Engine.EdGraphNode_Documentation
// 0x0020 (0x00B8 - 0x0098)
class UEdGraphNode_Documentation final : public UEdGraphNode
{
public:
	class FString                                 Link;                                              // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Excerpt;                                           // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EdGraphNode_Documentation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EdGraphNode_Documentation")
	}
	static class UEdGraphNode_Documentation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEdGraphNode_Documentation>();
	}
};
DUMPER7_ASSERTS_UEdGraphNode_Documentation;

// Class Engine.ThumbnailInfo
// 0x0000 (0x0028 - 0x0028)
class UThumbnailInfo final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ThumbnailInfo")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ThumbnailInfo")
	}
	static class UThumbnailInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UThumbnailInfo>();
	}
};
DUMPER7_ASSERTS_UThumbnailInfo;

// Class Engine.ActorElementCounterInterface
// 0x0008 (0x0030 - 0x0028)
class UActorElementCounterInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActorElementCounterInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActorElementCounterInterface")
	}
	static class UActorElementCounterInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorElementCounterInterface>();
	}
};
DUMPER7_ASSERTS_UActorElementCounterInterface;

// Class Engine.ActorElementHierarchyInterface
// 0x0008 (0x0030 - 0x0028)
class UActorElementHierarchyInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActorElementHierarchyInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActorElementHierarchyInterface")
	}
	static class UActorElementHierarchyInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorElementHierarchyInterface>();
	}
};
DUMPER7_ASSERTS_UActorElementHierarchyInterface;

// Class Engine.ActorElementObjectInterface
// 0x0008 (0x0030 - 0x0028)
class UActorElementObjectInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActorElementObjectInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActorElementObjectInterface")
	}
	static class UActorElementObjectInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorElementObjectInterface>();
	}
};
DUMPER7_ASSERTS_UActorElementObjectInterface;

// Class Engine.ActorElementWorldInterface
// 0x0008 (0x0030 - 0x0028)
class UActorElementWorldInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActorElementWorldInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActorElementWorldInterface")
	}
	static class UActorElementWorldInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorElementWorldInterface>();
	}
};
DUMPER7_ASSERTS_UActorElementWorldInterface;

// Class Engine.ComponentElementCounterInterface
// 0x0008 (0x0030 - 0x0028)
class UComponentElementCounterInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComponentElementCounterInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComponentElementCounterInterface")
	}
	static class UComponentElementCounterInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComponentElementCounterInterface>();
	}
};
DUMPER7_ASSERTS_UComponentElementCounterInterface;

// Class Engine.ComponentElementHierarchyInterface
// 0x0008 (0x0030 - 0x0028)
class UComponentElementHierarchyInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComponentElementHierarchyInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComponentElementHierarchyInterface")
	}
	static class UComponentElementHierarchyInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComponentElementHierarchyInterface>();
	}
};
DUMPER7_ASSERTS_UComponentElementHierarchyInterface;

// Class Engine.ComponentElementSelectionInterface
// 0x0008 (0x0030 - 0x0028)
class UComponentElementSelectionInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComponentElementSelectionInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComponentElementSelectionInterface")
	}
	static class UComponentElementSelectionInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComponentElementSelectionInterface>();
	}
};
DUMPER7_ASSERTS_UComponentElementSelectionInterface;

// Class Engine.ComponentElementWorldInterface
// 0x0008 (0x0030 - 0x0028)
class UComponentElementWorldInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComponentElementWorldInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComponentElementWorldInterface")
	}
	static class UComponentElementWorldInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComponentElementWorldInterface>();
	}
};
DUMPER7_ASSERTS_UComponentElementWorldInterface;

// Class Engine.EngineElementsLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngineElementsLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EngineElementsLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EngineElementsLibrary")
	}
	static class UEngineElementsLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEngineElementsLibrary>();
	}
};
DUMPER7_ASSERTS_UEngineElementsLibrary;

// Class Engine.TypedElementWorldInterface
// 0x0000 (0x0000 - 0x0000)
class ITypedElementWorldInterface final
{
public:
	bool CanDeleteElement(const struct FScriptTypedElementHandle& InElementHandle);
	bool CanDuplicateElement(const struct FScriptTypedElementHandle& InElementHandle);
	bool CanEditElement(const struct FScriptTypedElementHandle& InElementHandle);
	bool CanMoveElement(const struct FScriptTypedElementHandle& InElementHandle, const ETypedElementWorldType InWorldType);
	bool CanPromoteElement(const struct FScriptTypedElementHandle& InElementHandle);
	bool DeleteElement(const struct FScriptTypedElementHandle& InElementHandle, class UWorld* InWorld, class UTypedElementSelectionSet* InSelectionSet, const struct FTypedElementDeletionOptions& InDeletionOptions);
	struct FScriptTypedElementHandle DuplicateElement(const struct FScriptTypedElementHandle& InElementHandle, class UWorld* InWorld, const struct FVector& InLocationOffset);
	bool GetBounds(const struct FScriptTypedElementHandle& InElementHandle, struct FBoxSphereBounds* OutBounds);
	class ULevel* GetOwnerLevel(const struct FScriptTypedElementHandle& InElementHandle);
	class UWorld* GetOwnerWorld(const struct FScriptTypedElementHandle& InElementHandle);
	bool GetPivotOffset(const struct FScriptTypedElementHandle& InElementHandle, struct FVector* OutPivotOffset);
	bool GetRelativeTransform(const struct FScriptTypedElementHandle& InElementHandle, struct FTransform* OutTransform);
	bool GetWorldTransform(const struct FScriptTypedElementHandle& InElementHandle, struct FTransform* OutTransform);
	bool IsTemplateElement(const struct FScriptTypedElementHandle& InElementHandle);
	void NotifyMovementEnded(const struct FScriptTypedElementHandle& InElementHandle);
	void NotifyMovementOngoing(const struct FScriptTypedElementHandle& InElementHandle);
	void NotifyMovementStarted(const struct FScriptTypedElementHandle& InElementHandle);
	struct FScriptTypedElementHandle PromoteElement(const struct FScriptTypedElementHandle& InElementHandle, class UWorld* OverrideWorld);
	bool SetPivotOffset(const struct FScriptTypedElementHandle& InElementHandle, const struct FVector& InPivotOffset);
	bool SetRelativeTransform(const struct FScriptTypedElementHandle& InElementHandle, const struct FTransform& InTransform);
	bool SetWorldTransform(const struct FScriptTypedElementHandle& InElementHandle, const struct FTransform& InTransform);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TypedElementWorldInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TypedElementWorldInterface")
	}
	static class ITypedElementWorldInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ITypedElementWorldInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ITypedElementWorldInterface;

// Class Engine.ObjectElementAssetDataInterface
// 0x0008 (0x0030 - 0x0028)
class UObjectElementAssetDataInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ObjectElementAssetDataInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ObjectElementAssetDataInterface")
	}
	static class UObjectElementAssetDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObjectElementAssetDataInterface>();
	}
};
DUMPER7_ASSERTS_UObjectElementAssetDataInterface;

// Class Engine.ObjectElementCounterInterface
// 0x0008 (0x0030 - 0x0028)
class UObjectElementCounterInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ObjectElementCounterInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ObjectElementCounterInterface")
	}
	static class UObjectElementCounterInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObjectElementCounterInterface>();
	}
};
DUMPER7_ASSERTS_UObjectElementCounterInterface;

// Class Engine.SMInstanceElementAssetDataInterface
// 0x0008 (0x0030 - 0x0028)
class USMInstanceElementAssetDataInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SMInstanceElementAssetDataInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SMInstanceElementAssetDataInterface")
	}
	static class USMInstanceElementAssetDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<USMInstanceElementAssetDataInterface>();
	}
};
DUMPER7_ASSERTS_USMInstanceElementAssetDataInterface;

// Class Engine.SMInstanceElementSelectionInterface
// 0x0008 (0x0030 - 0x0028)
class USMInstanceElementSelectionInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SMInstanceElementSelectionInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SMInstanceElementSelectionInterface")
	}
	static class USMInstanceElementSelectionInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<USMInstanceElementSelectionInterface>();
	}
};
DUMPER7_ASSERTS_USMInstanceElementSelectionInterface;

// Class Engine.AutoDestroySubsystem
// 0x0010 (0x0050 - 0x0040)
class UAutoDestroySubsystem final : public UTickableWorldSubsystem
{
public:
	TArray<class AActor*>                         ActorsToPoll;                                      // 0x0040(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	void OnActorEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AutoDestroySubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AutoDestroySubsystem")
	}
	static class UAutoDestroySubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAutoDestroySubsystem>();
	}
};
DUMPER7_ASSERTS_UAutoDestroySubsystem;

// Class Engine.CancellableAsyncAction
// 0x0000 (0x0030 - 0x0030)
class UCancellableAsyncAction : public UBlueprintAsyncActionBase
{
public:
	void Cancel();

	bool IsActive() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CancellableAsyncAction")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CancellableAsyncAction")
	}
	static class UCancellableAsyncAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCancellableAsyncAction>();
	}
};
DUMPER7_ASSERTS_UCancellableAsyncAction;

// Class Engine.SystemTimeTimecodeProvider
// 0x0010 (0x0040 - 0x0030)
class USystemTimeTimecodeProvider final : public UTimecodeProvider
{
public:
	struct FFrameRate                             FrameRate;                                         // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateFullFrame;                                // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseHighPerformanceClock;                          // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SystemTimeTimecodeProvider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SystemTimeTimecodeProvider")
	}
	static class USystemTimeTimecodeProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<USystemTimeTimecodeProvider>();
	}
};
DUMPER7_ASSERTS_USystemTimeTimecodeProvider;

// Class Engine.ViewportStatsSubsystem
// 0x0020 (0x0050 - 0x0030)
class UViewportStatsSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 AddDisplayDelegate(const TDelegate<void(class FText* OutText, struct FLinearColor* OutColor)>& Delegate);
	void AddTimedDisplay(const class FText& Text, const struct FLinearColor& Color, float Duration, const struct FVector2D& DisplayOffset);
	void RemoveDisplayDelegate(const int32 IndexToRemove);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ViewportStatsSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ViewportStatsSubsystem")
	}
	static class UViewportStatsSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UViewportStatsSubsystem>();
	}
};
DUMPER7_ASSERTS_UViewportStatsSubsystem;

// Class Engine.Font
// 0x01A8 (0x01D0 - 0x0028)
class UFont final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EFontCacheType                                FontCacheType;                                     // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFontCharacter>                 Characters;                                        // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UTexture2D*>                     Textures;                                          // 0x0048(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         IsRemapped;                                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmScale;                                           // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ascent;                                            // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Descent;                                           // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Leading;                                           // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kerning;                                           // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFontImportOptionsData                 ImportOptions;                                     // 0x0070(0x00B0)(Edit, NativeAccessSpecifierPublic)
	int32                                         NumCharacters;                                     // 0x0120(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 MaxCharHeight;                                     // 0x0128(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	float                                         ScalingFactor;                                     // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegacyFontSize;                                    // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LegacyFontName;                                    // 0x0140(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCompositeFont                         CompositeFont;                                     // 0x0148(0x0038)(NativeAccessSpecifierPublic)
	uint8                                         Pad_180[0x50];                                     // 0x0180(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Font")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Font")
	}
	static class UFont* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFont>();
	}
};
DUMPER7_ASSERTS_UFont;

// Class Engine.FontFace
// 0x0040 (0x0068 - 0x0028)
class UFontFace final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SourceFilename;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFontHinting                                  Hinting;                                           // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFontLoadingPolicy                            LoadingPolicy;                                     // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFontLayoutMethod                             LayoutMethod;                                      // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AscendOverriddenValue;                             // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAscendOverridden;                               // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DescendOverriddenValue;                            // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDescendOverridden;                              // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x17];                                      // 0x0051(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FontFace")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FontFace")
	}
	static class UFontFace* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFontFace>();
	}
};
DUMPER7_ASSERTS_UFontFace;

// Class Engine.ColorInputDeviceProperty
// 0x0068 (0x0098 - 0x0030)
class UColorInputDeviceProperty final : public UInputDeviceProperty
{
public:
	struct FDeviceColorData                       ColorData;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FDeviceColorData>    DeviceOverrideData;                                // 0x0038(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x10];                                      // 0x0088(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ColorInputDeviceProperty")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ColorInputDeviceProperty")
	}
	static class UColorInputDeviceProperty* GetDefaultObj()
	{
		return GetDefaultObjImpl<UColorInputDeviceProperty>();
	}
};
DUMPER7_ASSERTS_UColorInputDeviceProperty;

// Class Engine.InputDeviceTriggerFeedbackProperty
// 0x0078 (0x00B8 - 0x0040)
class UInputDeviceTriggerFeedbackProperty final : public UInputDeviceTriggerEffect
{
public:
	struct FDeviceTriggerFeedbackData             TriggerData;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FDeviceTriggerFeedbackData> DeviceOverrideData;                         // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x18];                                      // 0x00A0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InputDeviceTriggerFeedbackProperty")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InputDeviceTriggerFeedbackProperty")
	}
	static class UInputDeviceTriggerFeedbackProperty* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputDeviceTriggerFeedbackProperty>();
	}
};
DUMPER7_ASSERTS_UInputDeviceTriggerFeedbackProperty;

// Class Engine.InputDeviceAudioBasedVibrationProperty
// 0x0058 (0x0088 - 0x0030)
class UInputDeviceAudioBasedVibrationProperty final : public UInputDeviceProperty
{
public:
	struct FAudioBasedVibrationData               Data;                                              // 0x0030(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FAudioBasedVibrationData> DeviceOverrideData;                           // 0x0038(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InputDeviceAudioBasedVibrationProperty")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InputDeviceAudioBasedVibrationProperty")
	}
	static class UInputDeviceAudioBasedVibrationProperty* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputDeviceAudioBasedVibrationProperty>();
	}
};
DUMPER7_ASSERTS_UInputDeviceAudioBasedVibrationProperty;

// Class Engine.InputDeviceSubsystem
// 0x0168 (0x0198 - 0x0030)
class UInputDeviceSubsystem final : public UEngineSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FPlatformUserId& UserId, const struct FInputDeviceId& DeviceID)> OnInputHardwareDeviceChanged; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSet<struct FActiveDeviceProperty>            ActiveProperties;                                  // 0x0048(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TSet<struct FInputDevicePropertyHandle>       PropertiesPendingRemoval;                          // 0x0098(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_E8[0xB0];                                      // 0x00E8(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FInputDevicePropertyHandle ActivateDevicePropertyOfClass(TSubclassOf<class UInputDeviceProperty> PropertyClass, const struct FActivateDevicePropertyParams& Params_0);
	void RemoveAllDeviceProperties();
	void RemoveDevicePropertyByHandle(const struct FInputDevicePropertyHandle& HandleToRemove);
	void RemoveDevicePropertyHandles(const TSet<struct FInputDevicePropertyHandle>& HandlesToRemove);

	class UInputDeviceProperty* GetActiveDeviceProperty(const struct FInputDevicePropertyHandle& Handle) const;
	struct FHardwareDeviceIdentifier GetInputDeviceHardwareIdentifier(const struct FInputDeviceId& InputDevice) const;
	struct FHardwareDeviceIdentifier GetMostRecentlyUsedHardwareDevice(const struct FPlatformUserId& InUserId) const;
	bool IsPropertyActive(const struct FInputDevicePropertyHandle& Handle) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InputDeviceSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InputDeviceSubsystem")
	}
	static class UInputDeviceSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputDeviceSubsystem>();
	}
};
DUMPER7_ASSERTS_UInputDeviceSubsystem;

// Class Engine.PlayerStateCountLimiterConfig
// 0x0000 (0x0040 - 0x0040)
class UPlayerStateCountLimiterConfig final : public UNetObjectCountLimiterConfig
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlayerStateCountLimiterConfig")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlayerStateCountLimiterConfig")
	}
	static class UPlayerStateCountLimiterConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerStateCountLimiterConfig>();
	}
};
DUMPER7_ASSERTS_UPlayerStateCountLimiterConfig;

// Class Engine.LocalPlayerSaveGame
// 0x0030 (0x0058 - 0x0028)
class ULocalPlayerSaveGame final : public USaveGame
{
public:
	class ULocalPlayer*                           OwningPlayer;                                      // 0x0028(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 SaveSlotName;                                      // 0x0030(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SavedDataVersion;                                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LoadedDataVersion;                                 // 0x0044(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentSaveRequest;                                // 0x0048(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastSuccessfulSaveRequest;                         // 0x004C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastErrorSaveRequest;                              // 0x0050(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool AsyncLoadOrCreateSaveGameForLocalPlayer(TSubclassOf<class ULocalPlayerSaveGame> SaveGameClass, class APlayerController* LocalPlayerController, const class FString& SlotName, TDelegate<void(class ULocalPlayerSaveGame* SaveGame)> Delegate);
	static class ULocalPlayerSaveGame* LoadOrCreateSaveGameForLocalPlayer(TSubclassOf<class ULocalPlayerSaveGame> SaveGameClass, class APlayerController* LocalPlayerController, const class FString& SlotName);

	bool AsyncSaveGameToSlotForLocalPlayer();
	void OnPostLoad();
	void OnPostSave(bool bSuccess);
	void OnPreSave();
	void OnResetToDefault();
	void ResetToDefault();
	bool SaveGameToSlotForLocalPlayer();

	int32 GetInvalidDataVersion() const;
	int32 GetLatestDataVersion() const;
	class APlayerController* GetLocalPlayerController() const;
	struct FPlatformUserId GetPlatformUserId() const;
	int32 GetPlatformUserIndex() const;
	int32 GetSavedDataVersion() const;
	class FString GetSaveSlotName() const;
	bool IsSaveInProgress() const;
	bool WasLastSaveSuccessful() const;
	bool WasLoaded() const;
	bool WasSaveRequested() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LocalPlayerSaveGame")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LocalPlayerSaveGame")
	}
	static class ULocalPlayerSaveGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocalPlayerSaveGame>();
	}
};
DUMPER7_ASSERTS_ULocalPlayerSaveGame;

// Class Engine.SpringArmComponent
// 0x0100 (0x03A0 - 0x02A0)
class USpringArmComponent : public USceneComponent
{
public:
	float                                         TargetArmLength;                                   // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SocketOffset;                                      // 0x02A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetOffset;                                      // 0x02C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbeSize;                                         // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             ProbeChannel;                                      // 0x02DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bDoCollisionTest : 1;                              // 0x02E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsePawnControlRotation : 1;                       // 0x02E0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInheritPitch : 1;                                 // 0x02E0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInheritYaw : 1;                                   // 0x02E0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInheritRoll : 1;                                  // 0x02E0(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableCameraLag : 1;                              // 0x02E0(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableCameraRotationLag : 1;                      // 0x02E0(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseCameraLagSubstepping : 1;                      // 0x02E0(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawDebugLagMarkers : 1;                          // 0x02E1(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2E2[0x2];                                      // 0x02E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraLagSpeed;                                    // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraRotationLagSpeed;                            // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraLagMaxTimeStep;                              // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraLagMaxDistance;                              // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bClampToMaxPhysicsDeltaTime : 1;                   // 0x02F4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2F5[0xAB];                                     // 0x02F5(0x00AB)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FRotator GetTargetRotation() const;
	struct FVector GetUnfixedCameraPosition() const;
	bool IsCollisionFixApplied() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SpringArmComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SpringArmComponent")
	}
	static class USpringArmComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpringArmComponent>();
	}
};
DUMPER7_ASSERTS_USpringArmComponent;

// Class Engine.TouchInterface
// 0x0030 (0x0058 - 0x0028)
class UTouchInterface final : public UObject
{
public:
	TArray<struct FTouchInputControl>             Controls;                                          // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ActiveOpacity;                                     // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InactiveOpacity;                                   // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeUntilDeactive;                                 // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeUntilReset;                                    // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActivationDelay;                                   // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreventRecenter;                                  // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartupDelay;                                      // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TouchInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TouchInterface")
	}
	static class UTouchInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTouchInterface>();
	}
};
DUMPER7_ASSERTS_UTouchInterface;

// Class Engine.GameModeBase
// 0x00A0 (0x0338 - 0x0298)
class AGameModeBase : public AInfo
{
public:
	class FString                                 OptionsString;                                     // 0x0298(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameSession>               GameSessionClass;                                  // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameStateBase>             GameStateClass;                                    // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APlayerController>          PlayerControllerClass;                             // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APlayerState>               PlayerStateClass;                                  // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AHUD>                       HUDClass;                                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APawn>                      DefaultPawnClass;                                  // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASpectatorPawn>             SpectatorClass;                                    // 0x02D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APlayerController>          ReplaySpectatorPlayerControllerClass;              // 0x02E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AServerStatReplicator>      ServerStatReplicatorClass;                         // 0x02E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameSession*                           GameSession;                                       // 0x02F0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameStateBase*                         GameState;                                         // 0x02F8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AServerStatReplicator*                  ServerStatReplicator;                              // 0x0300(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DefaultPlayerName;                                 // 0x0308(0x0018)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bUseSeamlessTravel : 1;                            // 0x0320(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStartPlayersAsSpectators : 1;                     // 0x0320(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bPauseable : 1;                                    // 0x0320(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_321[0x17];                                     // 0x0321(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanSpectate(class APlayerController* Viewer, class APlayerState* ViewTarget);
	void ChangeName(class AController* Controller, const class FString& NewName, bool bNameChange);
	class AActor* ChoosePlayerStart(class AController* Player);
	class AActor* FindPlayerStart(class AController* Player, const class FString& IncomingName);
	class UClass* GetDefaultPawnClassForController(class AController* InController);
	int32 GetNumPlayers();
	int32 GetNumSpectators();
	void HandleStartingNewPlayer(class APlayerController* NewPlayer);
	void InitializeHUDForPlayer(class APlayerController* NewPlayer);
	void InitStartSpot(class AActor* StartSpot, class AController* NewPlayer);
	class AActor* K2_FindPlayerStart(class AController* Player, const class FString& IncomingName);
	void K2_OnChangeName(class AController* Other, const class FString& NewName, bool bNameChange);
	void K2_OnLogout(class AController* ExitingController);
	void K2_OnRestartPlayer(class AController* NewPlayer);
	void K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC);
	void K2_PostLogin(class APlayerController* NewPlayer);
	bool PlayerCanRestart(class APlayerController* Player);
	void ResetLevel();
	void RestartPlayer(class AController* NewPlayer);
	void RestartPlayerAtPlayerStart(class AController* NewPlayer, class AActor* StartSpot);
	void RestartPlayerAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform);
	void ReturnToMainMenuHost();
	bool ShouldReset(class AActor* ActorToReset);
	class APawn* SpawnDefaultPawnAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform);
	class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot);
	void StartPlay();

	bool HasMatchEnded() const;
	bool HasMatchStarted() const;
	bool MustSpectate(class APlayerController* NewPlayerController) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GameModeBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GameModeBase")
	}
	static class AGameModeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameModeBase>();
	}
};
DUMPER7_ASSERTS_AGameModeBase;

// Class Engine.GameMode
// 0x0048 (0x0380 - 0x0338)
class AGameMode : public AGameModeBase
{
public:
	class FName                                   MatchState;                                        // 0x0338(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bDelayedStart : 1;                                 // 0x0340(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_341[0x3];                                      // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumSpectators;                                     // 0x0344(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPlayers;                                        // 0x0348(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBots;                                           // 0x034C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRespawnDelay;                                   // 0x0350(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumTravellingPlayers;                              // 0x0354(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULocalMessage>              EngineMessageClass;                                // 0x0358(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerState*>                   InactivePlayerArray;                               // 0x0360(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         InactivePlayerStateLifeSpan;                       // 0x0370(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxInactivePlayers;                                // 0x0374(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHandleDedicatedServerReplays;                     // 0x0378(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AbortMatch();
	void EndMatch();
	void K2_OnSetMatchState(class FName NewState);
	bool ReadyToEndMatch();
	bool ReadyToStartMatch();
	void RestartGame();
	void Say(const class FString& Msg);
	void StartMatch();

	class FName GetMatchState() const;
	bool IsMatchInProgress() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GameMode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GameMode")
	}
	static class AGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameMode>();
	}
};
DUMPER7_ASSERTS_AGameMode;

// Class Engine.GameplayStatics
// 0x0000 (0x0028 - 0x0028)
class UGameplayStatics final : public UBlueprintFunctionLibrary
{
public:
	static void ActivateReverbEffect(const class UObject* WorldContextObject, class UReverbEffect* ReverbEffect, class FName TagName, float Priority, float Volume, float FadeTime);
	static void AnnounceAccessibleString(const class FString& AnnouncementString);
	static float ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, TSubclassOf<class UDamageType> DamageTypeClass);
	static float ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, const struct FVector& HitFromDirection, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, TSubclassOf<class UDamageType> DamageTypeClass);
	static bool ApplyRadialDamage(const class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, TSubclassOf<class UDamageType> DamageTypeClass, const TArray<class AActor*>& IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, ECollisionChannel DamagePreventionChannel);
	static bool ApplyRadialDamageWithFalloff(const class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, const struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, TSubclassOf<class UDamageType> DamageTypeClass, const TArray<class AActor*>& IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, ECollisionChannel DamagePreventionChannel);
	static bool AreAnyListenersWithinRange(const class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange);
	static bool AreSubtitlesEnabled();
	static class AActor* BeginDeferredActorSpawnFromClass(const class UObject* WorldContextObject, TSubclassOf<class AActor> ActorClass, const struct FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner, ESpawnActorScaleMethod TransformScaleMethod);
	static class AActor* BeginSpawningActorFromBlueprint(const class UObject* WorldContextObject, const class UBlueprint* Blueprint, const struct FTransform& SpawnTransform, bool bNoCollisionFail);
	static bool Blueprint_PredictProjectilePath_Advanced(const class UObject* WorldContextObject, const struct FPredictProjectilePathParams& PredictParams, struct FPredictProjectilePathResult* PredictResult);
	static bool Blueprint_PredictProjectilePath_ByObjectType(const class UObject* WorldContextObject, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);
	static bool Blueprint_PredictProjectilePath_ByTraceChannel(const class UObject* WorldContextObject, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, ECollisionChannel TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);
	static bool BlueprintSuggestProjectileVelocity(const class UObject* WorldContextObject, struct FVector* TossVelocity, const struct FVector& StartLocation, const struct FVector& EndLocation, float LaunchSpeed, float OverrideGravityZ, ESuggestProjVelocityTraceOption TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug);
	static void BreakHitResult(const struct FHitResult& Hit, bool* bBlockingHit, bool* bInitialOverlap, float* Time, float* Distance, struct FVector* Location, struct FVector* ImpactPoint, struct FVector* Normal, struct FVector* ImpactNormal, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, class FName* HitBoneName, class FName* BoneName, int32* HitItem, int32* ElementIndex, int32* FaceIndex, struct FVector* TraceStart, struct FVector* TraceEnd);
	static void CancelAsyncLoading();
	static void ClearSoundMixClassOverride(const class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float FadeOutTime);
	static void ClearSoundMixModifiers(const class UObject* WorldContextObject);
	static class APlayerController* CreatePlayer(const class UObject* WorldContextObject, int32 ControllerId, bool bSpawnPlayerController);
	static class APlayerController* CreatePlayerFromPlatformUser(const class UObject* WorldContextObject, const struct FPlatformUserId& UserId, bool bSpawnPlayerController);
	static class USaveGame* CreateSaveGameObject(TSubclassOf<class USaveGame> SaveGameClass);
	static class UAudioComponent* CreateSound2D(const class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);
	static void DeactivateReverbEffect(const class UObject* WorldContextObject, class FName TagName);
	static bool DeleteGameInSlot(const class FString& SlotName, const int32 UserIndex);
	static bool DeprojectSceneCaptureToWorld(class ASceneCapture2D* SceneCapture2D, const struct FVector2D& TargetUV, struct FVector* WorldPosition, struct FVector* WorldDirection);
	static bool DeprojectScreenToWorld(class APlayerController* Player, const struct FVector2D& ScreenPosition, struct FVector* WorldPosition, struct FVector* WorldDirection);
	static bool DoesSaveGameExist(const class FString& SlotName, const int32 UserIndex);
	static void EnableLiveStreaming(bool Enable);
	static bool FindCollisionUV(const struct FHitResult& Hit, int32 UVChannel, struct FVector2D* UV);
	static class AActor* FindNearestActor(const struct FVector& Origin, const TArray<class AActor*>& ActorsToCheck, float* Distance);
	static class AActor* FinishSpawningActor(class AActor* Actor, const struct FTransform& SpawnTransform, ESpawnActorScaleMethod TransformScaleMethod);
	static void FlushLevelStreaming(const class UObject* WorldContextObject);
	static void GetAccurateRealTime(int32* Seconds, double* PartialSeconds);
	static class FName GetActiveSpatialPluginName(const class UObject* WorldContextObject);
	static struct FVector GetActorArrayAverageLocation(const TArray<class AActor*>& Actors);
	static void GetActorArrayBounds(const TArray<class AActor*>& Actors, bool bOnlyCollidingComponents, struct FVector* Center, struct FVector* BoxExtent);
	static class AActor* GetActorOfClass(const class UObject* WorldContextObject, TSubclassOf<class AActor> ActorClass);
	static void GetAllActorsOfClass(const class UObject* WorldContextObject, TSubclassOf<class AActor> ActorClass, TArray<class AActor*>* OutActors);
	static void GetAllActorsOfClassWithTag(const class UObject* WorldContextObject, TSubclassOf<class AActor> ActorClass, class FName Tag, TArray<class AActor*>* OutActors);
	static void GetAllActorsWithInterface(const class UObject* WorldContextObject, TSubclassOf<class IInterface> Interface, TArray<class AActor*>* OutActors);
	static void GetAllActorsWithTag(const class UObject* WorldContextObject, class FName Tag, TArray<class AActor*>* OutActors);
	static double GetAudioTimeSeconds(const class UObject* WorldContextObject);
	static TArray<class FName> GetAvailableSpatialPluginNames(const class UObject* WorldContextObject);
	static bool GetClosestListenerLocation(const class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange, const bool bAllowAttenuationOverride, struct FVector* ListenerPosition);
	static class FString GetCurrentLevelName(const class UObject* WorldContextObject, bool bRemovePrefixString);
	static class UReverbEffect* GetCurrentReverbEffect(const class UObject* WorldContextObject);
	static bool GetEnableWorldRendering(const class UObject* WorldContextObject);
	static class UGameInstance* GetGameInstance(const class UObject* WorldContextObject);
	static class AGameModeBase* GetGameMode(const class UObject* WorldContextObject);
	static class AGameStateBase* GetGameState(const class UObject* WorldContextObject);
	static float GetGlobalTimeDilation(const class UObject* WorldContextObject);
	static int32 GetIntOption(const class FString& Options, const class FString& Key, int32 DefaultValue);
	static void GetKeyValue(const class FString& Pair, class FString* Key, class FString* Value);
	static int32 GetMaxAudioChannelCount(const class UObject* WorldContextObject);
	static int32 GetNumLocalPlayerControllers(const class UObject* WorldContextObject);
	static int32 GetNumPlayerControllers(const class UObject* WorldContextObject);
	static int32 GetNumPlayerStates(const class UObject* WorldContextObject);
	static class UClass* GetObjectClass(const class UObject* Object);
	static class FString GetPlatformName();
	static class APlayerCameraManager* GetPlayerCameraManager(const class UObject* WorldContextObject, int32 PlayerIndex);
	static class ACharacter* GetPlayerCharacter(const class UObject* WorldContextObject, int32 PlayerIndex);
	static class APlayerController* GetPlayerController(const class UObject* WorldContextObject, int32 PlayerIndex);
	static class APlayerController* GetPlayerControllerFromID(const class UObject* WorldContextObject, int32 ControllerId);
	static class APlayerController* GetPlayerControllerFromPlatformUser(const class UObject* WorldContextObject, const struct FPlatformUserId& UserId);
	static int32 GetPlayerControllerID(class APlayerController* Player);
	static class APawn* GetPlayerPawn(const class UObject* WorldContextObject, int32 PlayerIndex);
	static class APlayerState* GetPlayerState(const class UObject* WorldContextObject, int32 PlayerStateIndex);
	static class APlayerState* GetPlayerStateFromUniqueNetId(const class UObject* WorldContextObject, const struct FUniqueNetIdRepl& UniqueID);
	static double GetRealTimeSeconds(const class UObject* WorldContextObject);
	static class ULevelStreaming* GetStreamingLevel(const class UObject* WorldContextObject, class FName PackageName);
	static EPhysicalSurface GetSurfaceType(const struct FHitResult& Hit);
	static double GetTimeSeconds(const class UObject* WorldContextObject);
	static double GetUnpausedTimeSeconds(const class UObject* WorldContextObject);
	static EMouseCaptureMode GetViewportMouseCaptureMode(const class UObject* WorldContextObject);
	static void GetViewProjectionMatrix(const struct FMinimalViewInfo& DesiredView, struct FMatrix* ViewMatrix, struct FMatrix* ProjectionMatrix, struct FMatrix* ViewProjectionMatrix);
	static double GetWorldDeltaSeconds(const class UObject* WorldContextObject);
	static struct FIntVector GetWorldOriginLocation(const class UObject* WorldContextObject);
	static int32 GrassOverlappingSphereCount(const class UObject* WorldContextObject, const class UStaticMesh* StaticMesh, const struct FVector& CenterPosition, float Radius);
	static bool HasLaunchOption(const class FString& OptionToCheck);
	static bool HasOption(const class FString& Options, const class FString& InKey);
	static bool IsAnyLocalPlayerCameraWithinRange(const class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange);
	static bool IsGamePaused(const class UObject* WorldContextObject);
	static bool IsSplitscreenForceDisabled(const class UObject* WorldContextObject);
	static class USaveGame* LoadGameFromSlot(const class FString& SlotName, const int32 UserIndex);
	static void LoadStreamLevel(const class UObject* WorldContextObject, class FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo);
	static void LoadStreamLevelBySoftObjectPtr(const class UObject* WorldContextObject, const TSoftObjectPtr<class UWorld> Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo);
	static struct FHitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, const struct FVector& Location, const struct FVector& ImpactPoint, const struct FVector& Normal, const struct FVector& ImpactNormal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, class FName HitBoneName, class FName BoneName, int32 HitItem, int32 ElementIndex, int32 FaceIndex, const struct FVector& TraceStart, const struct FVector& TraceEnd);
	static bool ObjectIsA(const class UObject* Object, TSubclassOf<class UObject> ObjectClass);
	static void OpenLevel(const class UObject* WorldContextObject, class FName LevelName, bool bAbsolute, const class FString& Options);
	static void OpenLevelBySoftObjectPtr(const class UObject* WorldContextObject, const TSoftObjectPtr<class UWorld> Level, bool bAbsolute, const class FString& Options);
	static class FString ParseOption(const class FString& Options, const class FString& Key);
	static void PlayDialogue2D(const class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	static void PlayDialogueAtLocation(const class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	static void PlaySound2D(const class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, const class AActor* OwningActor, bool bIsUISound);
	static void PlaySoundAtLocation(const class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, const class AActor* OwningActor, const class UInitialActiveSoundParams* InitialParams);
	static void PlayWorldCameraShake(const class UObject* WorldContextObject, TSubclassOf<class UCameraShakeBase> Shake, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);
	static void PopSoundMixModifier(const class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);
	static void PrimeAllSoundsInSoundClass(class USoundClass* InSoundClass);
	static void PrimeSound(class USoundBase* InSound);
	static bool ProjectWorldToScreen(class APlayerController* Player, const struct FVector& WorldPosition, struct FVector2D* ScreenPosition, bool bPlayerViewportRelative);
	static void PushSoundMixModifier(const class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);
	static struct FVector RebaseLocalOriginOntoZero(class UObject* WorldContextObject, const struct FVector& WorldLocation);
	static struct FVector RebaseZeroOriginOntoLocal(class UObject* WorldContextObject, const struct FVector& WorldLocation);
	static void RemovePlayer(class APlayerController* Player, bool bDestroyPawn);
	static bool SaveGameToSlot(class USaveGame* SaveGameObject, const class FString& SlotName, const int32 UserIndex);
	static bool SetActiveSpatialPluginByName(const class UObject* WorldContextObject, class FName InPluginName);
	static void SetBaseSoundMix(const class UObject* WorldContextObject, class USoundMix* InSoundMix);
	static void SetEnableWorldRendering(const class UObject* WorldContextObject, bool bEnable);
	static void SetForceDisableSplitscreen(const class UObject* WorldContextObject, bool bDisable);
	static bool SetGamePaused(const class UObject* WorldContextObject, bool bPaused);
	static void SetGlobalListenerFocusParameters(const class UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale);
	static void SetGlobalPitchModulation(const class UObject* WorldContextObject, float PitchModulation, float TimeSec);
	static void SetGlobalTimeDilation(const class UObject* WorldContextObject, float TimeDilation);
	static void SetMaxAudioChannelsScaled(const class UObject* WorldContextObject, float MaxChannelCountScale);
	static void SetPlayerControllerID(class APlayerController* Player, int32 ControllerId);
	static void SetPlayerPlatformUserId(class APlayerController* PlayerController, const struct FPlatformUserId& UserId);
	static void SetSoundClassDistanceScale(const class UObject* WorldContextObject, class USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec);
	static void SetSoundMixClassOverride(const class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren);
	static void SetSubtitlesEnabled(bool bEnabled);
	static void SetViewportMouseCaptureMode(const class UObject* WorldContextObject, const EMouseCaptureMode MouseCaptureMode);
	static void SetWorldOriginLocation(const class UObject* WorldContextObject, const struct FIntVector& NewLocation);
	static class UDecalComponent* SpawnDecalAtLocation(const class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan);
	static class UDecalComponent* SpawnDecalAttached(class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, float LifeSpan);
	static class UAudioComponent* SpawnDialogue2D(const class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy);
	static class UAudioComponent* SpawnDialogueAtLocation(const class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy);
	static class UAudioComponent* SpawnDialogueAttached(class UDialogueWave* Dialogue, const struct FDialogueContext& Context, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy);
	static class UParticleSystemComponent* SpawnEmitterAtLocation(const class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem);
	static class UParticleSystemComponent* SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, EAttachLocation LocationType, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivate);
	static class UForceFeedbackComponent* SpawnForceFeedbackAtLocation(const class UObject* WorldContextObject, class UForceFeedbackEffect* ForceFeedbackEffect, const struct FVector& Location, const struct FRotator& Rotation, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);
	static class UForceFeedbackComponent* SpawnForceFeedbackAttached(class UForceFeedbackEffect* ForceFeedbackEffect, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);
	static class UObject* SpawnObject(TSubclassOf<class UObject> ObjectClass, class UObject* Outer_0);
	static class UAudioComponent* SpawnSound2D(const class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);
	static class UAudioComponent* SpawnSoundAtLocation(const class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
	static class UAudioComponent* SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
	static bool SuggestProjectileVelocity_CustomArc(const class UObject* WorldContextObject, struct FVector* OutLaunchVelocity, const struct FVector& StartPos, const struct FVector& EndPos, float OverrideGravityZ, float ArcParam);
	static bool SuggestProjectileVelocity_MovingTarget(const class UObject* WorldContextObject, struct FVector* OutLaunchVelocity, const struct FVector& ProjectileStartLocation, class AActor* TargetActor, const struct FVector& TargetLocationOffset, double GravityZOverride, double TimeToTarget, EDrawDebugTrace DrawDebugType, float DrawDebugTime, const struct FLinearColor& DrawDebugColor);
	static void UnloadStreamLevel(const class UObject* WorldContextObject, class FName LevelName, const struct FLatentActionInfo& LatentInfo, bool bShouldBlockOnUnload);
	static void UnloadStreamLevelBySoftObjectPtr(const class UObject* WorldContextObject, const TSoftObjectPtr<class UWorld> Level, const struct FLatentActionInfo& LatentInfo, bool bShouldBlockOnUnload);
	static void UnRetainAllSoundsInSoundClass(class USoundClass* InSoundClass);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GameplayStatics")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GameplayStatics")
	}
	static class UGameplayStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayStatics>();
	}
};
DUMPER7_ASSERTS_UGameplayStatics;

// Class Engine.GameState
// 0x0020 (0x0310 - 0x02F0)
class AGameState : public AGameStateBase
{
public:
	class FName                                   MatchState;                                        // 0x02F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PreviousMatchState;                                // 0x02F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ElapsedTime;                                       // 0x0300(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_304[0xC];                                      // 0x0304(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_ElapsedTime();
	void OnRep_MatchState();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GameState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GameState")
	}
	static class AGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameState>();
	}
};
DUMPER7_ASSERTS_AGameState;

// Class Engine.GameUserSettings
// 0x0120 (0x0148 - 0x0028)
class UGameUserSettings : public UObject
{
public:
	bool                                          bUseVSync;                                         // 0x0028(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDynamicResolution;                             // 0x0029(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x5E];                                      // 0x002A(0x005E)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ResolutionSizeX;                                   // 0x0088(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                        ResolutionSizeY;                                   // 0x008C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                        LastUserConfirmedResolutionSizeX;                  // 0x0090(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                        LastUserConfirmedResolutionSizeY;                  // 0x0094(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         WindowPosX;                                        // 0x0098(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         WindowPosY;                                        // 0x009C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FullscreenMode;                                    // 0x00A0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastConfirmedFullscreenMode;                       // 0x00A4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PreferredFullscreenMode;                           // 0x00A8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                        Version;                                           // 0x00AC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AudioQualityLevel;                                 // 0x00B0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastConfirmedAudioQualityLevel;                    // 0x00B4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FrameRateLimit;                                    // 0x00B8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DesiredScreenWidth;                                // 0x00C0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseDesiredScreenHeight;                           // 0x00C4(0x0001)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DesiredScreenHeight;                               // 0x00C8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastUserConfirmedDesiredScreenWidth;               // 0x00CC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastUserConfirmedDesiredScreenHeight;              // 0x00D0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastRecommendedScreenWidth;                        // 0x00D4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastRecommendedScreenHeight;                       // 0x00D8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastCPUBenchmarkResult;                            // 0x00DC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastGPUBenchmarkResult;                            // 0x00E0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 LastCPUBenchmarkSteps;                             // 0x00E8(0x0010)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                 LastGPUBenchmarkSteps;                             // 0x00F8(0x0010)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	float                                         LastGPUBenchmarkMultiplier;                        // 0x0108(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseHDRDisplayOutput;                              // 0x010C(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HDRDisplayOutputNits;                              // 0x0110(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_114[0x24];                                     // 0x0114(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnGameUserSettingsUINeedsUpdate;                   // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)

public:
	static struct FIntPoint GetDefaultResolution();
	static EWindowMode GetDefaultWindowMode();
	static struct FIntPoint GetDefaultWindowPosition();
	static int32 GetFramePace();
	static class UGameUserSettings* GetGameUserSettings();
	static int32 GetSyncInterval();

	void ApplyHardwareBenchmarkResults();
	void ApplyNonResolutionSettings();
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);
	void ApplySettings(bool bCheckForCommandLineOverrides);
	void ConfirmVideoMode();
	void EnableHDRDisplayOutput(bool bEnable, int32 DisplayNits);
	float GetDefaultResolutionScale();
	float GetRecommendedResolutionScale();
	void LoadSettings(bool bForceReload);
	void ResetToCurrentSettings();
	void RevertVideoMode();
	void RunHardwareBenchmark(int32 WorkScale, float CPUMultiplier, float GPUMultiplier);
	void SaveSettings();
	void SetAntiAliasingQuality(int32 Value);
	void SetAudioQualityLevel(int32 QualityLevel);
	void SetBenchmarkFallbackValues();
	void SetDynamicResolutionEnabled(bool bEnable);
	void SetFoliageQuality(int32 Value);
	void SetFrameRateLimit(float NewLimit);
	void SetFullscreenMode(EWindowMode InFullscreenMode);
	void SetGlobalIlluminationQuality(int32 Value);
	void SetOverallScalabilityLevel(int32 Value);
	void SetPostProcessingQuality(int32 Value);
	void SetReflectionQuality(int32 Value);
	void SetResolutionScaleNormalized(float NewScaleNormalized);
	void SetResolutionScaleValueEx(float NewScaleValue);
	void SetScreenResolution(const struct FIntPoint& Resolution);
	void SetShadingQuality(int32 Value);
	void SetShadowQuality(int32 Value);
	void SetTextureQuality(int32 Value);
	void SetToDefaults();
	void SetViewDistanceQuality(int32 Value);
	void SetVisualEffectQuality(int32 Value);
	void SetVSyncEnabled(bool bEnable);
	void ValidateSettings();

	int32 GetAntiAliasingQuality() const;
	int32 GetAudioQualityLevel() const;
	int32 GetCurrentHDRDisplayNits() const;
	struct FIntPoint GetDesktopResolution() const;
	int32 GetFoliageQuality() const;
	float GetFrameRateLimit() const;
	EWindowMode GetFullscreenMode() const;
	int32 GetGlobalIlluminationQuality() const;
	EWindowMode GetLastConfirmedFullscreenMode() const;
	struct FIntPoint GetLastConfirmedScreenResolution() const;
	int32 GetOverallScalabilityLevel() const;
	int32 GetPostProcessingQuality() const;
	EWindowMode GetPreferredFullscreenMode() const;
	int32 GetReflectionQuality() const;
	void GetResolutionScaleInformationEx(float* CurrentScaleNormalized, float* CurrentScaleValue, float* MinScaleValue, float* MaxScaleValue) const;
	float GetResolutionScaleNormalized() const;
	struct FIntPoint GetScreenResolution() const;
	int32 GetShadingQuality() const;
	int32 GetShadowQuality() const;
	int32 GetTextureQuality() const;
	int32 GetViewDistanceQuality() const;
	int32 GetVisualEffectQuality() const;
	bool IsDirty() const;
	bool IsDynamicResolutionDirty() const;
	bool IsDynamicResolutionEnabled() const;
	bool IsFullscreenModeDirty() const;
	bool IsHDREnabled() const;
	bool IsScreenResolutionDirty() const;
	bool IsVSyncDirty() const;
	bool IsVSyncEnabled() const;
	bool SupportsHDRDisplayOutput() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GameUserSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GameUserSettings")
	}
	static class UGameUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameUserSettings>();
	}
};
DUMPER7_ASSERTS_UGameUserSettings;

// Class Engine.HLODProxy
// 0x0060 (0x0088 - 0x0028)
class UHLODProxy final : public UObject
{
public:
	TArray<struct FHLODProxyMesh>                 ProxyMeshes;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	TMap<class UHLODProxyDesc*, struct FHLODProxyMesh> HLODActors;                                   // 0x0038(0x0050)(Edit, EditConst, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HLODProxy")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HLODProxy")
	}
	static class UHLODProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHLODProxy>();
	}
};
DUMPER7_ASSERTS_UHLODProxy;

// Class Engine.HLODEngineSubsystem
// 0x0000 (0x0030 - 0x0030)
class UHLODEngineSubsystem final : public UEngineSubsystem
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HLODEngineSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HLODEngineSubsystem")
	}
	static class UHLODEngineSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHLODEngineSubsystem>();
	}
};
DUMPER7_ASSERTS_UHLODEngineSubsystem;

// Class Engine.HLODProxyDesc
// 0x0000 (0x0028 - 0x0028)
class UHLODProxyDesc final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HLODProxyDesc")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HLODProxyDesc")
	}
	static class UHLODProxyDesc* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHLODProxyDesc>();
	}
};
DUMPER7_ASSERTS_UHLODProxyDesc;

// Class Engine.InputActionDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputActionDelegateBinding final : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings;                 // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InputActionDelegateBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InputActionDelegateBinding")
	}
	static class UInputActionDelegateBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputActionDelegateBinding>();
	}
};
DUMPER7_ASSERTS_UInputActionDelegateBinding;

// Class Engine.InputAxisKeyDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings;               // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InputAxisKeyDelegateBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InputAxisKeyDelegateBinding")
	}
	static class UInputAxisKeyDelegateBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputAxisKeyDelegateBinding>();
	}
};
DUMPER7_ASSERTS_UInputAxisKeyDelegateBinding;

// Class Engine.InputDeviceLibrary
// 0x0000 (0x0028 - 0x0028)
class UInputDeviceLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool EqualEqual_InputDeviceId(const struct FInputDeviceId& A, const struct FInputDeviceId& B);
	static bool EqualEqual_PlatformUserId(const struct FPlatformUserId& A, const struct FPlatformUserId& B);
	static int32 GetAllActiveUsers(TArray<struct FPlatformUserId>* OutUsers);
	static int32 GetAllConnectedInputDevices(TArray<struct FInputDeviceId>* OutInputDevices);
	static int32 GetAllInputDevices(TArray<struct FInputDeviceId>* OutInputDevices);
	static int32 GetAllInputDevicesForUser(const struct FPlatformUserId& UserId, TArray<struct FInputDeviceId>* OutInputDevices);
	static struct FInputDeviceId GetDefaultInputDevice();
	static EInputDeviceConnectionState GetInputDeviceConnectionState(const struct FInputDeviceId& DeviceID);
	static class APlayerController* GetPlayerControllerFromInputDevice(const struct FInputDeviceId& DeviceID);
	static class APlayerController* GetPlayerControllerFromPlatformUser(const struct FPlatformUserId& UserId);
	static struct FInputDeviceId GetPrimaryInputDeviceForUser(const struct FPlatformUserId& UserId);
	static struct FPlatformUserId GetPrimaryPlatformUser();
	static struct FPlatformUserId GetUserForInputDevice(const struct FInputDeviceId& DeviceID);
	static struct FPlatformUserId GetUserForUnpairedInputDevices();
	static struct FInputDeviceId InputDeviceId_None();
	static bool IsDevicePropertyHandleValid(const struct FInputDevicePropertyHandle& InHandle);
	static bool IsInputDeviceMappedToUnpairedUser(const struct FInputDeviceId& InputDevice);
	static bool IsUnpairedUserId(const struct FPlatformUserId& PlatformId);
	static bool IsValidInputDevice(const struct FInputDeviceId& DeviceID);
	static bool IsValidPlatformId(const struct FPlatformUserId& UserId);
	static bool NotEqual_InputDeviceId(const struct FInputDeviceId& A, const struct FInputDeviceId& B);
	static bool NotEqual_PlatformUserId(const struct FPlatformUserId& A, const struct FPlatformUserId& B);
	static struct FPlatformUserId PlatformUserId_None();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InputDeviceLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InputDeviceLibrary")
	}
	static class UInputDeviceLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputDeviceLibrary>();
	}
};
DUMPER7_ASSERTS_UInputDeviceLibrary;

// Class Engine.InputKeyDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputKeyDelegateBinding final : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputKeyDelegateBinding> InputKeyDelegateBindings;                       // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InputKeyDelegateBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InputKeyDelegateBinding")
	}
	static class UInputKeyDelegateBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputKeyDelegateBinding>();
	}
};
DUMPER7_ASSERTS_UInputKeyDelegateBinding;

// Class Engine.InputVectorAxisDelegateBinding
// 0x0000 (0x0038 - 0x0038)
class UInputVectorAxisDelegateBinding final : public UInputAxisKeyDelegateBinding
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InputVectorAxisDelegateBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InputVectorAxisDelegateBinding")
	}
	static class UInputVectorAxisDelegateBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputVectorAxisDelegateBinding>();
	}
};
DUMPER7_ASSERTS_UInputVectorAxisDelegateBinding;

// Class Engine.InstancedPlacemenClientSettings
// 0x0000 (0x0028 - 0x0028)
class UInstancedPlacemenClientSettings final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InstancedPlacemenClientSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InstancedPlacemenClientSettings")
	}
	static class UInstancedPlacemenClientSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInstancedPlacemenClientSettings>();
	}
};
DUMPER7_ASSERTS_UInstancedPlacemenClientSettings;

// Class Engine.InstancedPlacementPartitionActor
// 0x0000 (0x02A8 - 0x02A8)
class AInstancedPlacementPartitionActor final : public AISMPartitionActor
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InstancedPlacementPartitionActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InstancedPlacementPartitionActor")
	}
	static class AInstancedPlacementPartitionActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AInstancedPlacementPartitionActor>();
	}
};
DUMPER7_ASSERTS_AInstancedPlacementPartitionActor;

// Class Engine.InterpCurveEdSetup
// 0x0018 (0x0040 - 0x0028)
class UInterpCurveEdSetup final : public UObject
{
public:
	TArray<struct FCurveEdTab>                    Tabs;                                              // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ActiveTab;                                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterpCurveEdSetup")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterpCurveEdSetup")
	}
	static class UInterpCurveEdSetup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpCurveEdSetup>();
	}
};
DUMPER7_ASSERTS_UInterpCurveEdSetup;

// Class Engine.IntSerialization
// 0x0028 (0x0050 - 0x0028)
class UIntSerialization final : public UObject
{
public:
	uint16                                        UnsignedInt16Variable;                             // 0x0028(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        UnsignedInt32Variable;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        UnsignedInt64Variable;                             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SignedInt8Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x1];                                       // 0x0039(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         SignedInt16Variable;                               // 0x003A(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         SignedInt64Variable;                               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UnsignedInt8Variable;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SignedInt32Variable;                               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("IntSerialization")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"IntSerialization")
	}
	static class UIntSerialization* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntSerialization>();
	}
};
DUMPER7_ASSERTS_UIntSerialization;

// Class Engine.KillZVolume
// 0x0000 (0x02E0 - 0x02E0)
class AKillZVolume final : public APhysicsVolume
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("KillZVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"KillZVolume")
	}
	static class AKillZVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKillZVolume>();
	}
};
DUMPER7_ASSERTS_AKillZVolume;

// Class Engine.KismetGuidLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetGuidLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FString Conv_GuidToString(const struct FGuid& InGuid);
	static bool EqualEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B);
	static void Invalidate_Guid(struct FGuid& InGuid);
	static bool IsValid_Guid(const struct FGuid& InGuid);
	static struct FGuid NewGuid();
	static bool NotEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B);
	static void Parse_StringToGuid(const class FString& GuidString, struct FGuid* OutGuid, bool* Success);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("KismetGuidLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"KismetGuidLibrary")
	}
	static class UKismetGuidLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKismetGuidLibrary>();
	}
};
DUMPER7_ASSERTS_UKismetGuidLibrary;

// Class Engine.KismetInternationalizationLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetInternationalizationLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ClearCurrentAssetGroupCulture(const class FName AssetGroup, const bool SaveToConfig);
	static class FString GetCultureDisplayName(const class FString& Culture, const bool Localized);
	static class FString GetCurrentAssetGroupCulture(const class FName AssetGroup);
	static class FString GetCurrentCulture();
	static class FString GetCurrentLanguage();
	static class FString GetCurrentLocale();
	static TArray<class FString> GetLocalizedCultures(const bool IncludeGame, const bool IncludeEngine, const bool IncludeEditor, const bool IncludeAdditional);
	static class FString GetNativeCulture(const ELocalizedTextSourceCategory TextCategory);
	static class FString GetSuitableCulture(const TArray<class FString>& AvailableCultures, const class FString& CultureToMatch, const class FString& FallbackCulture);
	static bool SetCurrentAssetGroupCulture(const class FName AssetGroup, const class FString& Culture, const bool SaveToConfig);
	static bool SetCurrentCulture(const class FString& Culture, const bool SaveToConfig);
	static bool SetCurrentLanguage(const class FString& Culture, const bool SaveToConfig);
	static bool SetCurrentLanguageAndLocale(const class FString& Culture, const bool SaveToConfig);
	static bool SetCurrentLocale(const class FString& Culture, const bool SaveToConfig);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("KismetInternationalizationLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"KismetInternationalizationLibrary")
	}
	static class UKismetInternationalizationLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKismetInternationalizationLibrary>();
	}
};
DUMPER7_ASSERTS_UKismetInternationalizationLibrary;

// Class Engine.KismetMathLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetMathLibrary final : public UBlueprintFunctionLibrary
{
public:
	static double Abs(double A);
	static int32 Abs_Int(int32 A);
	static int64 Abs_Int64(int64 A);
	static double Acos(double A);
	static uint8 Add_ByteByte(uint8 A, uint8 B);
	static struct FDateTime Add_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	static struct FDateTime Add_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
	static double Add_DoubleDouble(double A, double B);
	static int64 Add_Int64Int64(int64 A, int64 B);
	static int32 Add_IntInt(int32 A, int32 B);
	static struct FIntPoint Add_IntPointInt(const struct FIntPoint& A, int32 B);
	static struct FIntPoint Add_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);
	static struct FLinearColor Add_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	static struct FMatrix Add_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B);
	static struct FQuat Add_QuatQuat(const struct FQuat& A, const struct FQuat& B);
	static struct FTimespan Add_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	static struct FVector2D Add_Vector2DFloat(const struct FVector2D& A, double B);
	static struct FVector2D Add_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	static struct FVector4 Add_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	static struct FVector Add_VectorFloat(const struct FVector& A, double B);
	static struct FVector Add_VectorInt(const struct FVector& A, int32 B);
	static struct FVector Add_VectorVector(const struct FVector& A, const struct FVector& B);
	static int64 And_Int64Int64(int64 A, int64 B);
	static int32 And_IntInt(int32 A, int32 B);
	static double Asin(double A);
	static double Atan(double A);
	static double Atan2(double Y, double X);
	static void AverageOfIntArray(const TArray<int32>& IntArray, float* AverageValue);
	static uint8 BMax(uint8 A, uint8 B);
	static uint8 BMin(uint8 A, uint8 B);
	static bool BooleanAND(bool A, bool B);
	static bool BooleanNAND(bool A, bool B);
	static bool BooleanNOR(bool A, bool B);
	static bool BooleanOR(bool A, bool B);
	static bool BooleanXOR(bool A, bool B);
	static void BreakBoxSphereBounds(const struct FBoxSphereBounds& InBoxSphereBounds, struct FVector* Origin, struct FVector* BoxExtent, float* SphereRadius);
	static void BreakColor(const struct FLinearColor& InColor, float* R, float* G, float* B, float* A);
	static void BreakDateTime(const struct FDateTime& InDateTime, int32* Year, int32* Month, int32* Day, int32* Hour, int32* Minute, int32* Second, int32* Millisecond);
	static void BreakFrameRate(const struct FFrameRate& InFrameRate, int32* Numerator, int32* Denominator);
	static void BreakQualifiedFrameTime(const struct FQualifiedFrameTime& InFrameTime, struct FFrameNumber* Frame, struct FFrameRate* FrameRate, float* SubFrame);
	static void BreakQuat(const struct FQuat& InQuat, float* X, float* Y, float* Z, float* W);
	static void BreakRandomStream(const struct FRandomStream& InRandomStream, int32* InitialSeed);
	static void BreakRotator(const struct FRotator& InRot, float* Roll, float* Pitch, float* Yaw);
	static void BreakRotIntoAxes(const struct FRotator& InRot, struct FVector* X, struct FVector* Y, struct FVector* Z);
	static void BreakTimespan(const struct FTimespan& InTimespan, int32* Days, int32* Hours, int32* Minutes, int32* Seconds, int32* Milliseconds);
	static void BreakTimespan2(const struct FTimespan& InTimespan, int32* Days, int32* Hours, int32* Minutes, int32* Seconds, int32* FractionNano);
	static void BreakTransform(const struct FTransform& InTransform, struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale);
	static void BreakVector(const struct FVector& InVec, double* X, double* Y, double* Z);
	static void BreakVector2D(const struct FVector2D& InVec, double* X, double* Y);
	static void BreakVector4(const struct FVector4& InVec, double* X, double* Y, double* Z, double* W);
	static void BreakVector_NetQuantize(const struct FVector_NetQuantize& InVec, double* X, double* Y, double* Z);
	static void BreakVector_NetQuantize10(const struct FVector_NetQuantize10& InVec, double* X, double* Y, double* Z);
	static void BreakVector_NetQuantize100(const struct FVector_NetQuantize100& InVec, double* X, double* Y, double* Z);
	static void BreakVector_NetQuantizeNormal(const struct FVector_NetQuantizeNormal& InVec, double* X, double* Y, double* Z);
	static struct FLinearColor CInterpTo(const struct FLinearColor& Current, const struct FLinearColor& Target, float DeltaTime, float InterpSpeed);
	static int32 Clamp(int32 Value, int32 Min_0, int32 Max_0);
	static double ClampAngle(double AngleDegrees, double MinAngleDegrees, double MaxAngleDegrees);
	static struct FVector2D ClampAxes2D(const struct FVector2D& A, double MinAxisVal, double MaxAxisVal);
	static float ClampAxis(float Angle);
	static int64 ClampInt64(int64 Value, int64 Min_0, int64 Max_0);
	static struct FVector ClampVectorSize(const struct FVector& A, double Min_0, double Max_0);
	static bool ClassIsChildOf(TSubclassOf<class UObject> TestClass, TSubclassOf<class UObject> ParentClass);
	static struct FRotator ComposeRotators(const struct FRotator& A, const struct FRotator& B);
	static struct FTransform ComposeTransforms(const struct FTransform& A, const struct FTransform& B);
	static uint8 Conv_BoolToByte(bool InBool);
	static double Conv_BoolToDouble(bool InBool);
	static int32 Conv_BoolToInt(bool InBool);
	static double Conv_ByteToDouble(uint8 InByte);
	static int32 Conv_ByteToInt(uint8 InByte);
	static int64 Conv_ByteToInt64(uint8 InByte);
	static struct FLinearColor Conv_ColorToLinearColor(const struct FColor& InColor);
	static float Conv_DoubleToFloat(double InDouble);
	static int64 Conv_DoubleToInt64(double InDouble);
	static struct FLinearColor Conv_DoubleToLinearColor(double InDouble);
	static struct FVector Conv_DoubleToVector(double InDouble);
	static struct FVector2D Conv_DoubleToVector2D(double InDouble);
	static double Conv_FloatToDouble(float InFloat);
	static uint8 Conv_Int64ToByte(int64 inInt);
	static double Conv_Int64ToDouble(int64 inInt);
	static int32 Conv_Int64ToInt(int64 inInt);
	static struct FVector2D Conv_IntPointToVector2D(const struct FIntPoint& InIntPoint);
	static bool Conv_IntToBool(int32 inInt);
	static uint8 Conv_IntToByte(int32 inInt);
	static double Conv_IntToDouble(int32 inInt);
	static int64 Conv_IntToInt64(int32 inInt);
	static struct FIntVector Conv_IntToIntVector(int32 inInt);
	static struct FVector Conv_IntToVector(int32 inInt);
	static struct FVector Conv_IntVectorToVector(const struct FIntVector& InIntVector);
	static struct FColor Conv_LinearColorToColor(const struct FLinearColor& InLinearColor, bool InUseSRGB);
	static struct FVector Conv_LinearColorToVector(const struct FLinearColor& InLinearColor);
	static struct FRotator Conv_MatrixToRotator(const struct FMatrix& InMatrix);
	static struct FTransform Conv_MatrixToTransform(const struct FMatrix& InMatrix);
	static struct FQuat Conv_RotatorToQuaternion(const struct FRotator& InRot);
	static struct FTransform Conv_RotatorToTransform(const struct FRotator& InRotator);
	static struct FVector Conv_RotatorToVector(const struct FRotator& InRot);
	static struct FMatrix Conv_TransformToMatrix(const struct FTransform& Transform);
	static struct FIntPoint Conv_Vector2DToIntPoint(const struct FVector2D& InVector2D);
	static struct FVector Conv_Vector2DToVector(const struct FVector2D& InVector2D, float Z);
	static struct FQuat Conv_Vector4ToQuaternion(const struct FVector4& InVec);
	static struct FRotator Conv_Vector4ToRotator(const struct FVector4& InVec);
	static struct FVector Conv_Vector4ToVector(const struct FVector4& InVector4);
	static struct FLinearColor Conv_VectorToLinearColor(const struct FVector& InVec);
	static struct FQuat Conv_VectorToQuaternion(const struct FVector& InVec);
	static struct FRotator Conv_VectorToRotator(const struct FVector& InVec);
	static struct FTransform Conv_VectorToTransform(const struct FVector& InLocation);
	static struct FVector2D Conv_VectorToVector2D(const struct FVector& InVector);
	static double Cos(double A);
	static struct FVector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);
	static struct FVector Cross_VectorVector(const struct FVector& A, const struct FVector& B);
	static double CrossProduct2D(const struct FVector2D& A, const struct FVector2D& B);
	static bool DateTimeFromIsoString(const class FString& IsoString, struct FDateTime* Result);
	static bool DateTimeFromString(const class FString& DateTimeString, struct FDateTime* Result);
	static struct FDateTime DateTimeMaxValue();
	static struct FDateTime DateTimeMinValue();
	static int32 DaysInMonth(int32 Year, int32 Month);
	static int32 DaysInYear(int32 Year);
	static double DegAcos(double A);
	static double DegAsin(double A);
	static double DegAtan(double A);
	static double DegAtan2(double Y, double X);
	static double DegCos(double A);
	static double DegreesToRadians(double A);
	static double DegSin(double A);
	static double DegTan(double A);
	static double Distance2D(const struct FVector2D& v1, const struct FVector2D& v2);
	static double DistanceSquared2D(const struct FVector2D& v1, const struct FVector2D& v2);
	static uint8 Divide_ByteByte(uint8 A, uint8 B);
	static double Divide_DoubleDouble(double A, double B);
	static int64 Divide_Int64Int64(int64 A, int64 B);
	static int32 Divide_IntInt(int32 A, int32 B);
	static struct FIntPoint Divide_IntPointInt(const struct FIntPoint& A, int32 B);
	static struct FIntPoint Divide_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);
	static struct FLinearColor Divide_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	static struct FTimespan Divide_TimespanFloat(const struct FTimespan& A, float Scalar);
	static struct FVector2D Divide_Vector2DFloat(const struct FVector2D& A, double B);
	static struct FVector2D Divide_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	static struct FVector4 Divide_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	static struct FVector Divide_VectorFloat(const struct FVector& A, double B);
	static struct FVector Divide_VectorInt(const struct FVector& A, int32 B);
	static struct FVector Divide_VectorVector(const struct FVector& A, const struct FVector& B);
	static double Dot_VectorVector(const struct FVector& A, const struct FVector& B);
	static double DotProduct2D(const struct FVector2D& A, const struct FVector2D& B);
	static float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);
	static struct FRotator DynamicWeightedMovingAverage_FRotator(const struct FRotator& CurrentSample, const struct FRotator& PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);
	static struct FVector DynamicWeightedMovingAverage_FVector(const struct FVector& CurrentSample, const struct FVector& PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);
	static double Ease(double A, double B, double Alpha, EEasingFunc EasingFunc, double BlendExp, int32 Steps);
	static bool Equal_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);
	static bool EqualEqual_BoolBool(bool A, bool B);
	static bool EqualEqual_ByteByte(uint8 A, uint8 B);
	static bool EqualEqual_ClassClass(class UClass* A, class UClass* B);
	static bool EqualEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	static bool EqualEqual_DoubleDouble(double A, double B);
	static bool EqualEqual_Int64Int64(int64 A, int64 B);
	static bool EqualEqual_IntInt(int32 A, int32 B);
	static bool EqualEqual_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	static bool EqualEqual_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, float Tolerance);
	static bool EqualEqual_NameName(class FName A, class FName B);
	static bool EqualEqual_ObjectObject(class UObject* A, class UObject* B);
	static bool EqualEqual_QuatQuat(const struct FQuat& A, const struct FQuat& B, float Tolerance);
	static bool EqualEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance);
	static bool EqualEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	static bool EqualEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B);
	static bool EqualEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance);
	static bool EqualEqual_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, float ErrorTolerance);
	static bool EqualEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance);
	static bool EqualExactly_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	static bool EqualExactly_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	static bool EqualExactly_VectorVector(const struct FVector& A, const struct FVector& B);
	static double Exp(double A);
	static int32 FCeil(double A);
	static int64 FCeil64(double A);
	static double FClamp(double Value, double Min_0, double Max_0);
	static int32 FFloor(double A);
	static int64 FFloor64(double A);
	static struct FVector FindClosestPointOnLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection);
	static struct FVector FindClosestPointOnSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd);
	static struct FRotator FindLookAtRotation(const struct FVector& Start, const struct FVector& Target);
	static void FindNearestPointsOnLineSegments(const struct FVector& Segment1Start, const struct FVector& Segment1End, const struct FVector& Segment2Start, const struct FVector& Segment2End, struct FVector* Segment1Point, struct FVector* Segment2Point);
	static struct FRotator FindRelativeLookAtRotation(const struct FTransform& StartTransform, const struct FVector& TargetLocation);
	static double FInterpEaseInOut(double A, double B, double Alpha, double Exponent);
	static double FInterpTo(double Current, double Target, double DeltaTime, double InterpSpeed);
	static double FInterpTo_Constant(double Current, double Target, double DeltaTime, double InterpSpeed);
	static float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);
	static float FloatSpringInterp(float Current, float Target, struct FFloatSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, float MinValue, float MaxValue, bool bInitializeFromTarget);
	static double FMax(double A, double B);
	static double FMin(double A, double B);
	static int32 FMod(double Dividend, double Divisor, double* Remainder);
	static int64 FMod64(double Dividend, double Divisor, double* Remainder);
	static double Fraction(double A);
	static struct FTimespan FromDays(float Days);
	static struct FTimespan FromHours(float Hours);
	static struct FTimespan FromMilliseconds(float Milliseconds);
	static struct FTimespan FromMinutes(float Minutes);
	static struct FTimespan FromSeconds(float Seconds);
	static struct FDateTime FromUnixTimestamp(const int64 UnixTime);
	static int32 FTrunc(double A);
	static int64 FTrunc64(double A);
	static struct FIntVector FTruncVector(const struct FVector& InVector);
	static double FWrap(double Value, double Min_0, double Max_0);
	static struct FVector2D GetAbs2D(const struct FVector2D& A);
	static double GetAbsMax2D(const struct FVector2D& A);
	static void GetAxes(const struct FRotator& A, struct FVector* X, struct FVector* Y, struct FVector* Z);
	static void GetAzimuthAndElevation(const struct FVector& InDirection, const struct FTransform& ReferenceFrame, float* Azimuth, float* Elevation);
	static struct FDateTime GetDate(const struct FDateTime& A);
	static int32 GetDay(const struct FDateTime& A);
	static int32 GetDayOfYear(const struct FDateTime& A);
	static int32 GetDays(const struct FTimespan& A);
	static struct FVector GetDirectionUnitVector(const struct FVector& From, const struct FVector& To);
	static struct FTimespan GetDuration(const struct FTimespan& A);
	static struct FVector GetForwardVector(const struct FRotator& InRot);
	static int32 GetHour(const struct FDateTime& A);
	static int32 GetHour12(const struct FDateTime& A);
	static int32 GetHours(const struct FTimespan& A);
	static double GetMax2D(const struct FVector2D& A);
	static double GetMaxElement(const struct FVector& A);
	static int32 GetMillisecond(const struct FDateTime& A);
	static int32 GetMilliseconds(const struct FTimespan& A);
	static double GetMin2D(const struct FVector2D& A);
	static double GetMinElement(const struct FVector& A);
	static int32 GetMinute(const struct FDateTime& A);
	static int32 GetMinutes(const struct FTimespan& A);
	static int32 GetMonth(const struct FDateTime& A);
	static double GetPI();
	static float GetPointDistanceToLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection);
	static float GetPointDistanceToSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd);
	static struct FVector GetReflectionVector(const struct FVector& Direction, const struct FVector& SurfaceNormal);
	static struct FVector GetRightVector(const struct FRotator& InRot);
	static struct FVector2D GetRotated2D(const struct FVector2D& A, float AngleDeg);
	static int32 GetSecond(const struct FDateTime& A);
	static int32 GetSeconds(const struct FTimespan& A);
	static void GetSlopeDegreeAngles(const struct FVector& MyRightYAxis, const struct FVector& FloorNormal, const struct FVector& UpVector, float* OutSlopePitchDegreeAngle, float* OutSlopeRollDegreeAngle);
	static double GetTAU();
	static struct FTimespan GetTimeOfDay(const struct FDateTime& A);
	static float GetTotalDays(const struct FTimespan& A);
	static float GetTotalHours(const struct FTimespan& A);
	static float GetTotalMilliseconds(const struct FTimespan& A);
	static float GetTotalMinutes(const struct FTimespan& A);
	static float GetTotalSeconds(const struct FTimespan& A);
	static struct FVector GetUpVector(const struct FRotator& InRot);
	static struct FVector GetVectorArrayAverage(const TArray<struct FVector>& Vectors);
	static void GetYawPitchFromVector(const struct FVector& InVec, float* Yaw, float* Pitch);
	static int32 GetYear(const struct FDateTime& A);
	static bool Greater_ByteByte(uint8 A, uint8 B);
	static bool Greater_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	static bool Greater_DoubleDouble(double A, double B);
	static bool Greater_Int64Int64(int64 A, int64 B);
	static bool Greater_IntInt(int32 A, int32 B);
	static bool Greater_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	static bool GreaterEqual_ByteByte(uint8 A, uint8 B);
	static bool GreaterEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	static bool GreaterEqual_DoubleDouble(double A, double B);
	static bool GreaterEqual_Int64Int64(int64 A, int64 B);
	static bool GreaterEqual_IntInt(int32 A, int32 B);
	static bool GreaterEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	static struct FVector GreaterGreater_VectorRotator(const struct FVector& A, const struct FRotator& B);
	static double GridSnap_Float(double Location, double GridSize);
	static struct FLinearColor HSVToRGB(float H, float S, float V, float A);
	static void HSVToRGB_Vector(const struct FLinearColor& HSV, struct FLinearColor* RGB);
	static struct FLinearColor HSVToRGBLinear(const struct FLinearColor& HSV);
	static double Hypotenuse(double Width, double Height);
	static bool InRange_FloatFloat(double Value, double Min_0, double Max_0, bool InclusiveMin, bool InclusiveMax);
	static bool InRange_Int64Int64(int64 Value, int64 Min_0, int64 Max_0, bool InclusiveMin, bool InclusiveMax);
	static bool InRange_IntInt(int32 Value, int32 Min_0, int32 Max_0, bool InclusiveMin, bool InclusiveMax);
	static struct FIntPoint IntPoint_Down();
	static struct FIntPoint IntPoint_Left();
	static struct FIntPoint IntPoint_One();
	static struct FIntPoint IntPoint_Right();
	static struct FIntPoint IntPoint_Up();
	static struct FIntPoint IntPoint_Zero();
	static struct FVector InverseTransformDirection(const struct FTransform& T, const struct FVector& Direction);
	static struct FVector InverseTransformLocation(const struct FTransform& T, const struct FVector& Location);
	static struct FRotator InverseTransformRotation(const struct FTransform& T, const struct FRotator& Rotation);
	static struct FTransform InvertTransform(const struct FTransform& T);
	static bool IsAfternoon(const struct FDateTime& A);
	static bool IsLeapYear(int32 Year);
	static bool IsMorning(const struct FDateTime& A);
	static bool IsNearlyZero2D(const struct FVector2D& A, float Tolerance);
	static bool IsPointInBox(const struct FVector& Point, const struct FVector& BoxOrigin, const struct FVector& BoxExtent);
	static bool IsPointInBox_Box(const struct FVector& Point, const struct FBox& Box);
	static bool IsPointInBoxWithTransform(const struct FVector& Point, const struct FTransform& BoxWorldTransform, const struct FVector& BoxExtent);
	static bool IsPointInBoxWithTransform_Box(const struct FVector& Point, const struct FTransform& BoxWorldTransform, const struct FBox& BoxExtent);
	static bool IsZero2D(const struct FVector2D& A);
	static double Lerp(double A, double B, double Alpha);
	static bool Less_ByteByte(uint8 A, uint8 B);
	static bool Less_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	static bool Less_DoubleDouble(double A, double B);
	static bool Less_Int64Int64(int64 A, int64 B);
	static bool Less_IntInt(int32 A, int32 B);
	static bool Less_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	static bool LessEqual_ByteByte(uint8 A, uint8 B);
	static bool LessEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	static bool LessEqual_DoubleDouble(double A, double B);
	static bool LessEqual_Int64Int64(int64 A, int64 B);
	static bool LessEqual_IntInt(int32 A, int32 B);
	static bool LessEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	static struct FVector LessLess_VectorRotator(const struct FVector& A, const struct FRotator& B);
	static struct FLinearColor LinearColor_Black();
	static struct FLinearColor LinearColor_Blue();
	static struct FLinearColor LinearColor_Desaturated(const struct FLinearColor& InColor, float InDesaturation);
	static float LinearColor_Distance(const struct FLinearColor& C1, const struct FLinearColor& C2);
	static float LinearColor_GetLuminance(const struct FLinearColor& InColor);
	static float LinearColor_GetMax(const struct FLinearColor& InColor);
	static float LinearColor_GetMin(const struct FLinearColor& InColor);
	static struct FLinearColor LinearColor_Gray();
	static struct FLinearColor LinearColor_Green();
	static bool LinearColor_IsNearEqual(const struct FLinearColor& A, const struct FLinearColor& B, float Tolerance);
	static struct FColor LinearColor_Quantize(const struct FLinearColor& InColor);
	static struct FColor LinearColor_QuantizeRound(const struct FLinearColor& InColor);
	static struct FLinearColor LinearColor_Red();
	static void LinearColor_Set(struct FLinearColor& InOutColor, const struct FLinearColor& InColor);
	static void LinearColor_SetFromHSV(struct FLinearColor& InOutColor, float H, float S, float V, float A);
	static void LinearColor_SetFromPow22(struct FLinearColor& InOutColor, const struct FColor& InColor);
	static void LinearColor_SetFromSRGB(struct FLinearColor& InOutColor, const struct FColor& InSRGB);
	static void LinearColor_SetRandomHue(struct FLinearColor& InOutColor);
	static void LinearColor_SetRGBA(struct FLinearColor& InOutColor, float R, float G, float B, float A);
	static void LinearColor_SetTemperature(struct FLinearColor& InOutColor, float InTemperature);
	static struct FLinearColor LinearColor_ToNewOpacity(const struct FLinearColor& InColor, float InOpacity);
	static struct FColor LinearColor_ToRGBE(const struct FLinearColor& InLinearColor);
	static struct FLinearColor LinearColor_Transparent();
	static struct FLinearColor LinearColor_White();
	static struct FLinearColor LinearColor_Yellow();
	static struct FLinearColor LinearColorLerp(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha);
	static struct FLinearColor LinearColorLerpUsingHSV(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha);
	static bool LinePlaneIntersection(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FPlane& APlane, float* T, struct FVector* Intersection);
	static bool LinePlaneIntersection_OriginNormal(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FVector& PlaneOrigin, const struct FVector& PlaneNormal, float* T, struct FVector* Intersection);
	static double Log(double A, double base);
	static double Loge(double A);
	static struct FBox MakeBox(const struct FVector& Min_0, const struct FVector& Max_0);
	static struct FBox2D MakeBox2D(const struct FVector2D& Min_0, const struct FVector2D& Max_0);
	static struct FBoxSphereBounds MakeBoxSphereBounds(const struct FVector& Origin, const struct FVector& BoxExtent, float SphereRadius);
	static struct FLinearColor MakeColor(float R, float G, float B, float A);
	static struct FDateTime MakeDateTime(int32 Year, int32 Month, int32 Day, int32 Hour, int32 Minute, int32 Second, int32 Millisecond);
	static struct FFrameRate MakeFrameRate(int32 Numerator, int32 Denominator);
	static struct FPlane MakePlaneFromPointAndNormal(const struct FVector& Point, const struct FVector& Normal_0);
	static float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);
	static struct FQualifiedFrameTime MakeQualifiedFrameTime(const struct FFrameNumber& Frame, const struct FFrameRate& FrameRate, float SubFrame);
	static struct FQuat MakeQuat(float X, float Y, float Z, float W);
	static struct FRandomStream MakeRandomStream(int32 InitialSeed);
	static struct FTransform MakeRelativeTransform(const struct FTransform& A, const struct FTransform& RelativeTo);
	static struct FRotator MakeRotationFromAxes(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up);
	static struct FRotator MakeRotator(float Roll, float Pitch, float Yaw);
	static struct FRotator MakeRotFromX(const struct FVector& X);
	static struct FRotator MakeRotFromXY(const struct FVector& X, const struct FVector& Y);
	static struct FRotator MakeRotFromXZ(const struct FVector& X, const struct FVector& Z);
	static struct FRotator MakeRotFromY(const struct FVector& Y);
	static struct FRotator MakeRotFromYX(const struct FVector& Y, const struct FVector& X);
	static struct FRotator MakeRotFromYZ(const struct FVector& Y, const struct FVector& Z);
	static struct FRotator MakeRotFromZ(const struct FVector& Z);
	static struct FRotator MakeRotFromZX(const struct FVector& Z, const struct FVector& X);
	static struct FRotator MakeRotFromZY(const struct FVector& Z, const struct FVector& Y);
	static struct FTimespan MakeTimespan(int32 Days, int32 Hours, int32 Minutes, int32 Seconds, int32 Milliseconds);
	static struct FTimespan MakeTimespan2(int32 Days, int32 Hours, int32 Minutes, int32 Seconds, int32 FractionNano);
	static struct FTransform MakeTransform(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale);
	static struct FVector MakeVector(double X, double Y, double Z);
	static struct FVector2D MakeVector2D(double X, double Y);
	static struct FVector4 MakeVector4(double X, double Y, double Z, double W);
	static struct FVector_NetQuantize MakeVector_NetQuantize(double X, double Y, double Z);
	static struct FVector_NetQuantize10 MakeVector_NetQuantize10(double X, double Y, double Z);
	static struct FVector_NetQuantize100 MakeVector_NetQuantize100(double X, double Y, double Z);
	static struct FVector_NetQuantizeNormal MakeVector_NetQuantizeNormal(double X, double Y, double Z);
	static double MapRangeClamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB);
	static double MapRangeUnclamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB);
	static struct FMatrix Matrix_ApplyScale(const struct FMatrix& M, float Scale);
	static struct FMatrix Matrix_ConcatenateTranslation(const struct FMatrix& M, const struct FVector& Translation);
	static bool Matrix_ContainsNaN(const struct FMatrix& M);
	static struct FVector Matrix_GetColumn(const struct FMatrix& M, EMatrixColumns Column);
	static float Matrix_GetDeterminant(const struct FMatrix& M);
	static bool Matrix_GetFrustumBottomPlane(const struct FMatrix& M, struct FPlane* OutPlane);
	static bool Matrix_GetFrustumFarPlane(const struct FMatrix& M, struct FPlane* OutPlane);
	static bool Matrix_GetFrustumLeftPlane(const struct FMatrix& M, struct FPlane* OutPlane);
	static bool Matrix_GetFrustumNearPlane(const struct FMatrix& M, struct FPlane* OutPlane);
	static bool Matrix_GetFrustumRightPlane(const struct FMatrix& M, struct FPlane* OutPlane);
	static bool Matrix_GetFrustumTopPlane(const struct FMatrix& M, struct FPlane* OutPlane);
	static struct FMatrix Matrix_GetInverse(const struct FMatrix& M);
	static struct FMatrix Matrix_GetMatrixWithoutScale(const struct FMatrix& M, float Tolerance);
	static float Matrix_GetMaximumAxisScale(const struct FMatrix& M);
	static struct FVector Matrix_GetOrigin(const struct FMatrix& InMatrix);
	static struct FRotator Matrix_GetRotator(const struct FMatrix& M);
	static float Matrix_GetRotDeterminant(const struct FMatrix& M);
	static void Matrix_GetScaledAxes(const struct FMatrix& M, struct FVector* X, struct FVector* Y, struct FVector* Z);
	static struct FVector Matrix_GetScaledAxis(const struct FMatrix& M, EAxis Axis);
	static struct FVector Matrix_GetScaleVector(const struct FMatrix& M, float Tolerance);
	static struct FMatrix Matrix_GetTransposeAdjoint(const struct FMatrix& M);
	static struct FMatrix Matrix_GetTransposed(const struct FMatrix& M);
	static void Matrix_GetUnitAxes(const struct FMatrix& M, struct FVector* X, struct FVector* Y, struct FVector* Z);
	static struct FVector Matrix_GetUnitAxis(const struct FMatrix& M, EAxis Axis);
	static struct FMatrix Matrix_Identity();
	static struct FVector Matrix_InverseTransformPosition(const struct FMatrix& M, const struct FVector& V);
	static struct FVector Matrix_InverseTransformVector(const struct FMatrix& M, const struct FVector& V);
	static struct FMatrix Matrix_Mirror(const struct FMatrix& M, EAxis MirrorAxis, EAxis FlipAxis);
	static void Matrix_RemoveScaling(struct FMatrix& M, float Tolerance);
	static struct FMatrix Matrix_RemoveTranslation(const struct FMatrix& M);
	static struct FMatrix Matrix_ScaleTranslation(const struct FMatrix& M, const struct FVector& Scale3D);
	static void Matrix_SetAxis(struct FMatrix& M, EAxis Axis, const struct FVector& AxisVector);
	static void Matrix_SetColumn(struct FMatrix& M, EMatrixColumns Column, const struct FVector& Value);
	static void Matrix_SetOrigin(struct FMatrix& M, const struct FVector& NewOrigin);
	static struct FQuat Matrix_ToQuat(const struct FMatrix& M);
	static struct FVector4 Matrix_TransformPosition(const struct FMatrix& M, const struct FVector& V);
	static struct FVector4 Matrix_TransformVector(const struct FMatrix& M, const struct FVector& V);
	static struct FVector4 Matrix_TransformVector4(const struct FMatrix& M, const struct FVector4& V);
	static int32 Max(int32 A, int32 B);
	static int64 MaxInt64(int64 A, int64 B);
	static void MaxOfByteArray(const TArray<uint8>& ByteArray, int32* IndexOfMaxValue, uint8* MaxValue);
	static void MaxOfFloatArray(const TArray<float>& FloatArray, int32* IndexOfMaxValue, float* MaxValue);
	static void MaxOfIntArray(const TArray<int32>& IntArray, int32* IndexOfMaxValue, int32* MaxValue);
	static void MedianOfIntArray(const TArray<int32>& IntArray, float* MedianValue);
	static int32 Min(int32 A, int32 B);
	static void MinAreaRectangle(class UObject* WorldContextObject, const TArray<struct FVector>& InPoints, const struct FVector& SampleSurfaceNormal, struct FVector* OutRectCenter, struct FRotator* OutRectRotation, float* OutRectLengthX, float* OutRectLengthY, bool bDebugDraw);
	static void MinimumAreaRectangle(class UObject* WorldContextObject, const TArray<struct FVector>& InVerts, const struct FVector& SampleSurfaceNormal, struct FVector* OutRectCenter, struct FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY, bool bDebugDraw);
	static int64 MinInt64(int64 A, int64 B);
	static void MinOfByteArray(const TArray<uint8>& ByteArray, int32* IndexOfMinValue, uint8* MinValue);
	static void MinOfFloatArray(const TArray<float>& FloatArray, int32* IndexOfMinValue, float* MinValue);
	static void MinOfIntArray(const TArray<int32>& IntArray, int32* IndexOfMinValue, int32* MinValue);
	static struct FVector MirrorVectorByNormal(const struct FVector& InVect, const struct FVector& InNormal);
	static uint8 Multiply_ByteByte(uint8 A, uint8 B);
	static double Multiply_DoubleDouble(double A, double B);
	static int64 Multiply_Int64Int64(int64 A, int64 B);
	static double Multiply_IntFloat(int32 A, double B);
	static int32 Multiply_IntInt(int32 A, int32 B);
	static struct FIntPoint Multiply_IntPointInt(const struct FIntPoint& A, int32 B);
	static struct FIntPoint Multiply_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);
	static struct FLinearColor Multiply_LinearColorFloat(const struct FLinearColor& A, float B);
	static struct FLinearColor Multiply_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	static struct FMatrix Multiply_MatrixFloat(const struct FMatrix& A, double B);
	static struct FMatrix Multiply_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B);
	static struct FQuat Multiply_QuatQuat(const struct FQuat& A, const struct FQuat& B);
	static struct FRotator Multiply_RotatorFloat(const struct FRotator& A, float B);
	static struct FRotator Multiply_RotatorInt(const struct FRotator& A, int32 B);
	static struct FTimespan Multiply_TimespanFloat(const struct FTimespan& A, float Scalar);
	static struct FVector2D Multiply_Vector2DFloat(const struct FVector2D& A, double B);
	static struct FVector2D Multiply_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	static struct FVector4 Multiply_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	static struct FVector Multiply_VectorFloat(const struct FVector& A, double B);
	static struct FVector Multiply_VectorInt(const struct FVector& A, int32 B);
	static struct FVector Multiply_VectorVector(const struct FVector& A, const struct FVector& B);
	static double MultiplyByPi(double Value);
	static double MultiplyMultiply_FloatFloat(double base, double Exp);
	static bool NearlyEqual_FloatFloat(double A, double B, double ErrorTolerance);
	static bool NearlyEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);
	static struct FVector2D Negated2D(const struct FVector2D& A);
	static struct FRotator NegateRotator(const struct FRotator& A);
	static struct FVector NegateVector(const struct FVector& A);
	static struct FVector Normal(const struct FVector& A, float Tolerance);
	static struct FVector2D Normal2D(const struct FVector2D& A);
	static void Normalize2D(struct FVector2D& A, float Tolerance);
	static float NormalizeAxis(float Angle);
	static struct FRotator NormalizedDeltaRotator(const struct FRotator& A, const struct FRotator& B);
	static double NormalizeToRange(double Value, double RangeMin, double RangeMax);
	static struct FVector2D NormalSafe2D(const struct FVector2D& A, float Tolerance);
	static int32 Not_Int(int32 A);
	static int64 Not_Int64(int64 A);
	static bool Not_PreBool(bool A);
	static bool NotEqual_BoolBool(bool A, bool B);
	static bool NotEqual_ByteByte(uint8 A, uint8 B);
	static bool NotEqual_ClassClass(class UClass* A, class UClass* B);
	static bool NotEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	static bool NotEqual_DoubleDouble(double A, double B);
	static bool NotEqual_Int64Int64(int64 A, int64 B);
	static bool NotEqual_IntInt(int32 A, int32 B);
	static bool NotEqual_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);
	static bool NotEqual_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	static bool NotEqual_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, float Tolerance);
	static bool NotEqual_NameName(class FName A, class FName B);
	static bool NotEqual_ObjectObject(class UObject* A, class UObject* B);
	static bool NotEqual_QuatQuat(const struct FQuat& A, const struct FQuat& B, float ErrorTolerance);
	static bool NotEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance);
	static bool NotEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	static bool NotEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance);
	static bool NotEqual_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, float ErrorTolerance);
	static bool NotEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance);
	static bool NotEqualExactly_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	static bool NotEqualExactly_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	static bool NotEqualExactly_VectorVector(const struct FVector& A, const struct FVector& B);
	static struct FDateTime Now();
	static int64 Or_Int64Int64(int64 A, int64 B);
	static int32 Or_IntInt(int32 A, int32 B);
	static uint8 Percent_ByteByte(uint8 A, uint8 B);
	static double Percent_FloatFloat(double A, double B);
	static int64 Percent_Int64Int64(int64 A, int64 B);
	static int32 Percent_IntInt(int32 A, int32 B);
	static float PerlinNoise1D(const float Value);
	static bool PointsAreCoplanar(const TArray<struct FVector>& Points, float Tolerance);
	static struct FVector ProjectPointOnToPlane(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNormal);
	static struct FVector ProjectVectorOnToPlane(const struct FVector& V, const struct FVector& PlaneNormal);
	static struct FVector ProjectVectorOnToVector(const struct FVector& V, const struct FVector& Target);
	static float Quat_AngularDistance(const struct FQuat& A, const struct FQuat& B);
	static void Quat_EnforceShortestArcWith(struct FQuat& A, const struct FQuat& B);
	static struct FVector Quat_Euler(const struct FQuat& Q);
	static struct FQuat Quat_Exp(const struct FQuat& Q);
	static struct FQuat Quat_FindBetweenNormals(const struct FVector& StartNormal, const struct FVector& EndNormal);
	static struct FQuat Quat_FindBetweenVectors(const struct FVector& Start, const struct FVector& End);
	static float Quat_GetAngle(const struct FQuat& Q);
	static struct FVector Quat_GetAxisX(const struct FQuat& Q);
	static struct FVector Quat_GetAxisY(const struct FQuat& Q);
	static struct FVector Quat_GetAxisZ(const struct FQuat& Q);
	static struct FVector Quat_GetRotationAxis(const struct FQuat& Q);
	static struct FQuat Quat_Identity();
	static struct FQuat Quat_Inversed(const struct FQuat& Q);
	static bool Quat_IsFinite(const struct FQuat& Q);
	static bool Quat_IsIdentity(const struct FQuat& Q, float Tolerance);
	static bool Quat_IsNonFinite(const struct FQuat& Q);
	static bool Quat_IsNormalized(const struct FQuat& Q);
	static struct FQuat Quat_Log(const struct FQuat& Q);
	static struct FQuat Quat_MakeFromEuler(const struct FVector& Euler);
	static void Quat_Normalize(struct FQuat& Q, float Tolerance);
	static struct FQuat Quat_Normalized(const struct FQuat& Q, float Tolerance);
	static struct FVector Quat_RotateVector(const struct FQuat& Q, const struct FVector& V);
	static struct FRotator Quat_Rotator(const struct FQuat& Q);
	static void Quat_SetComponents(struct FQuat& Q, float X, float Y, float Z, float W);
	static void Quat_SetFromEuler(struct FQuat& Q, const struct FVector& Euler);
	static float Quat_Size(const struct FQuat& Q);
	static float Quat_SizeSquared(const struct FQuat& Q);
	static struct FQuat Quat_Slerp(const struct FQuat& A, const struct FQuat& B, double Alpha);
	static struct FVector Quat_UnrotateVector(const struct FQuat& Q, const struct FVector& V);
	static struct FVector Quat_VectorForward(const struct FQuat& Q);
	static struct FVector Quat_VectorRight(const struct FQuat& Q);
	static struct FVector Quat_VectorUp(const struct FQuat& Q);
	static struct FQuat QuaternionSpringInterp(const struct FQuat& Current, const struct FQuat& Target, struct FQuaternionSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bInitializeFromTarget);
	static double RadiansToDegrees(double A);
	static bool RandomBool();
	static bool RandomBoolFromStream(const struct FRandomStream& Stream);
	static bool RandomBoolWithWeight(float Weight);
	static bool RandomBoolWithWeightFromStream(const struct FRandomStream& RandomStream, float Weight);
	static double RandomFloat();
	static float RandomFloatFromStream(const struct FRandomStream& Stream);
	static double RandomFloatInRange(double Min, double Max);
	static float RandomFloatInRangeFromStream(const struct FRandomStream& Stream, float Min, float Max);
	static int32 RandomInteger(int32 Max);
	static int64 RandomInteger64(int64 Max);
	static int64 RandomInteger64InRange(int64 Min, int64 Max);
	static int32 RandomIntegerFromStream(const struct FRandomStream& Stream, int32 Max);
	static int32 RandomIntegerInRange(int32 Min, int32 Max);
	static int32 RandomIntegerInRangeFromStream(const struct FRandomStream& Stream, int32 Min, int32 Max);
	static struct FVector RandomPointInBoundingBox(const struct FVector& Center, const struct FVector& HalfSize);
	static struct FVector RandomPointInBoundingBox_Box(const struct FBox& Box);
	static struct FVector RandomPointInBoundingBoxFromStream(const struct FRandomStream& Stream, const struct FVector& Center, const struct FVector& HalfSize);
	static struct FVector RandomPointInBoundingBoxFromStream_Box(const struct FRandomStream& Stream, const struct FBox& Box);
	static struct FRotator RandomRotator(bool bRoll);
	static struct FRotator RandomRotatorFromStream(const struct FRandomStream& Stream, bool bRoll);
	static struct FVector RandomUnitVector();
	static struct FVector RandomUnitVectorFromStream(const struct FRandomStream& Stream);
	static struct FVector RandomUnitVectorInConeInDegrees(const struct FVector& ConeDir, float ConeHalfAngleInDegrees);
	static struct FVector RandomUnitVectorInConeInDegreesFromStream(const struct FRandomStream& Stream, const struct FVector& ConeDir, float ConeHalfAngleInDegrees);
	static struct FVector RandomUnitVectorInConeInRadians(const struct FVector& ConeDir, float ConeHalfAngleInRadians);
	static struct FVector RandomUnitVectorInConeInRadiansFromStream(const struct FRandomStream& Stream, const struct FVector& ConeDir, float ConeHalfAngleInRadians);
	static struct FVector RandomUnitVectorInEllipticalConeInDegrees(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);
	static struct FVector RandomUnitVectorInEllipticalConeInDegreesFromStream(const struct FRandomStream& Stream, const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);
	static struct FVector RandomUnitVectorInEllipticalConeInRadians(const struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians);
	static struct FVector RandomUnitVectorInEllipticalConeInRadiansFromStream(const struct FRandomStream& Stream, const struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians);
	static struct FRotator REase(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, EEasingFunc EasingFunc, float BlendExp, int32 Steps);
	static void ResetFloatSpringState(struct FFloatSpringState& SpringState);
	static void ResetQuaternionSpringState(struct FQuaternionSpringState& SpringState);
	static void ResetRandomStream(const struct FRandomStream& Stream);
	static void ResetVectorSpringState(struct FVectorSpringState& SpringState);
	static struct FLinearColor RGBLinearToHSV(const struct FLinearColor& RGB);
	static void RGBToHSV(const struct FLinearColor& InColor, float* H, float* S, float* V, float* A);
	static void RGBToHSV_Vector(const struct FLinearColor& RGB, struct FLinearColor* HSV);
	static struct FRotator RInterpTo(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
	static struct FRotator RInterpTo_Constant(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
	static struct FRotator RLerp(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath);
	static struct FVector RotateAngleAxis(const struct FVector& InVect, float AngleDeg, const struct FVector& Axis);
	static struct FRotator RotatorFromAxisAndAngle(const struct FVector& Axis, float Angle);
	static int32 Round(double A);
	static int64 Round64(double A);
	static double SafeDivide(double A, double B);
	static void SeedRandomStream(struct FRandomStream& Stream);
	static class UClass* SelectClass(class UClass* A, class UClass* B, bool bSelectA);
	static struct FLinearColor SelectColor(const struct FLinearColor& A, const struct FLinearColor& B, bool bPickA);
	static double SelectFloat(double A, double B, bool bPickA);
	static int32 SelectInt(int32 A, int32 B, bool bPickA);
	static class UObject* SelectObject(class UObject* A, class UObject* B, bool bSelectA);
	static struct FRotator SelectRotator(const struct FRotator& A, const struct FRotator& B, bool bPickA);
	static class FString SelectString(const class FString& A, const class FString& B, bool bPickA);
	static struct FTransform SelectTransform(const struct FTransform& A, const struct FTransform& B, bool bPickA);
	static struct FVector SelectVector(const struct FVector& A, const struct FVector& B, bool bPickA);
	static void Set2D(struct FVector2D& A, double X, double Y);
	static void SetFloatSpringStateVelocity(struct FFloatSpringState& SpringState, float Velocity);
	static void SetQuaternionSpringStateAngularVelocity(struct FQuaternionSpringState& SpringState, const struct FVector& AngularVelocity);
	static void SetRandomStreamSeed(struct FRandomStream& Stream, int32 NewSeed);
	static void SetVectorSpringStateVelocity(struct FVectorSpringState& SpringState, const struct FVector& Velocity);
	static double SignOfFloat(double A);
	static int32 SignOfInteger(int32 A);
	static int64 SignOfInteger64(int64 A);
	static double Sin(double A);
	static struct FVector Spherical2DToUnitCartesian(const struct FVector2D& A);
	static double Sqrt(double A);
	static double Square(double A);
	static uint8 Subtract_ByteByte(uint8 A, uint8 B);
	static struct FTimespan Subtract_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	static struct FDateTime Subtract_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
	static double Subtract_DoubleDouble(double A, double B);
	static int64 Subtract_Int64Int64(int64 A, int64 B);
	static int32 Subtract_IntInt(int32 A, int32 B);
	static struct FIntPoint Subtract_IntPointInt(const struct FIntPoint& A, int32 B);
	static struct FIntPoint Subtract_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);
	static struct FLinearColor Subtract_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	static struct FQuat Subtract_QuatQuat(const struct FQuat& A, const struct FQuat& B);
	static struct FTimespan Subtract_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	static struct FVector2D Subtract_Vector2DFloat(const struct FVector2D& A, double B);
	static struct FVector2D Subtract_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	static struct FVector4 Subtract_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	static struct FVector Subtract_VectorFloat(const struct FVector& A, double B);
	static struct FVector Subtract_VectorInt(const struct FVector& A, int32 B);
	static struct FVector Subtract_VectorVector(const struct FVector& A, const struct FVector& B);
	static double Tan(double A);
	static struct FTransform TEase(const struct FTransform& A, const struct FTransform& B, float Alpha, EEasingFunc EasingFunc, float BlendExp, int32 Steps);
	static bool TimespanFromString(const class FString& TimespanString, struct FTimespan* Result);
	static struct FTimespan TimespanMaxValue();
	static struct FTimespan TimespanMinValue();
	static float TimespanRatio(const struct FTimespan& A, const struct FTimespan& B);
	static struct FTimespan TimespanZeroValue();
	static struct FTransform TInterpTo(const struct FTransform& Current, const struct FTransform& Target, float DeltaTime, float InterpSpeed);
	static struct FTransform TLerp(const struct FTransform& A, const struct FTransform& B, float Alpha, ELerpInterpolationMode InterpMode);
	static struct FDateTime Today();
	static void ToDirectionAndLength2D(const struct FVector2D& A, struct FVector2D* OutDir, double* OutLength);
	static class FString ToHex_LinearColor(const struct FLinearColor& InColor);
	static struct FVector2D ToRounded2D(const struct FVector2D& A);
	static struct FVector2D ToSign2D(const struct FVector2D& A);
	static int64 ToUnixTimestamp(const struct FDateTime& Time);
	static double ToUnixTimestampDouble(const struct FDateTime& Time);
	static float Transform_Determinant(const struct FTransform& Transform);
	static struct FVector TransformDirection(const struct FTransform& T, const struct FVector& Direction);
	static struct FVector TransformLocation(const struct FTransform& T, const struct FVector& Location);
	static struct FRotator TransformRotation(const struct FTransform& T, const struct FRotator& Rotation);
	static struct FVector4 TransformVector4(const struct FMatrix& Matrix, const struct FVector4& Vec4);
	static struct FDateTime UtcNow();
	static struct FVector VEase(const struct FVector& A, const struct FVector& B, float Alpha, EEasingFunc EasingFunc, float BlendExp, int32 Steps);
	static struct FVector2D Vector2D_One();
	static struct FVector2D Vector2D_Unit45Deg();
	static struct FVector2D Vector2D_Zero();
	static struct FVector2D Vector2DInterpTo(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed);
	static struct FVector2D Vector2DInterpTo_Constant(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed);
	static void Vector4_Assign(struct FVector4& A, const struct FVector4& InVector);
	static struct FVector4 Vector4_CrossProduct3(const struct FVector4& A, const struct FVector4& B);
	static double Vector4_DotProduct(const struct FVector4& A, const struct FVector4& B);
	static double Vector4_DotProduct3(const struct FVector4& A, const struct FVector4& B);
	static bool Vector4_IsNAN(const struct FVector4& A);
	static bool Vector4_IsNearlyZero3(const struct FVector4& A, float Tolerance);
	static bool Vector4_IsNormal3(const struct FVector4& A);
	static bool Vector4_IsUnit3(const struct FVector4& A, float SquaredLenthTolerance);
	static bool Vector4_IsZero(const struct FVector4& A);
	static struct FVector4 Vector4_MirrorByVector3(const struct FVector4& Direction, const struct FVector4& SurfaceNormal);
	static struct FVector4 Vector4_Negated(const struct FVector4& A);
	static struct FVector4 Vector4_Normal3(const struct FVector4& A, float Tolerance);
	static void Vector4_Normalize3(struct FVector4& A, float Tolerance);
	static struct FVector4 Vector4_NormalUnsafe3(const struct FVector4& A);
	static void Vector4_Set(struct FVector4& A, double X, double Y, double Z, double W);
	static double Vector4_Size(const struct FVector4& A);
	static double Vector4_Size3(const struct FVector4& A);
	static double Vector4_SizeSquared(const struct FVector4& A);
	static double Vector4_SizeSquared3(const struct FVector4& A);
	static struct FVector4 Vector4_Zero();
	static void Vector_AddBounded(struct FVector& A, const struct FVector& InAddVect, float InRadius);
	static void Vector_Assign(struct FVector& A, const struct FVector& InVector);
	static struct FVector Vector_Backward();
	static struct FVector Vector_BoundedToBox(const struct FVector& InVect, const struct FVector& InBoxMin, const struct FVector& InBoxMax);
	static struct FVector Vector_BoundedToCube(const struct FVector& InVect, float InRadius);
	static struct FVector Vector_ClampSize2D(const struct FVector& A, double Min, double Max);
	static struct FVector Vector_ClampSizeMax(const struct FVector& A, double Max);
	static struct FVector Vector_ClampSizeMax2D(const struct FVector& A, double Max);
	static struct FVector Vector_ComponentMax(const struct FVector& A, const struct FVector& B);
	static struct FVector Vector_ComponentMin(const struct FVector& A, const struct FVector& B);
	static double Vector_CosineAngle2D(const struct FVector& A, const struct FVector& B);
	static double Vector_Distance(const struct FVector& v1, const struct FVector& v2);
	static double Vector_Distance2D(const struct FVector& v1, const struct FVector& v2);
	static double Vector_Distance2DSquared(const struct FVector& v1, const struct FVector& v2);
	static double Vector_DistanceSquared(const struct FVector& v1, const struct FVector& v2);
	static struct FVector Vector_Down();
	static struct FVector Vector_Forward();
	static struct FVector Vector_GetAbs(const struct FVector& A);
	static double Vector_GetAbsMax(const struct FVector& A);
	static double Vector_GetAbsMin(const struct FVector& A);
	static struct FVector Vector_GetProjection(const struct FVector& A);
	static struct FVector Vector_GetSignVector(const struct FVector& A);
	static double Vector_HeadingAngle(const struct FVector& A);
	static bool Vector_IsNAN(const struct FVector& A);
	static bool Vector_IsNearlyZero(const struct FVector& A, float Tolerance);
	static bool Vector_IsNormal(const struct FVector& A);
	static bool Vector_IsUniform(const struct FVector& A, float Tolerance);
	static bool Vector_IsUnit(const struct FVector& A, float SquaredLenthTolerance);
	static bool Vector_IsZero(const struct FVector& A);
	static struct FVector Vector_Left();
	static struct FVector Vector_MirrorByPlane(const struct FVector& A, const struct FPlane& InPlane);
	static struct FVector Vector_Normal2D(const struct FVector& A, float Tolerance);
	static void Vector_Normalize(struct FVector& A, float Tolerance);
	static struct FVector Vector_NormalUnsafe(const struct FVector& A);
	static struct FVector Vector_One();
	static struct FVector Vector_ProjectOnToNormal(const struct FVector& V, const struct FVector& InNormal);
	static struct FVector Vector_Reciprocal(const struct FVector& A);
	static struct FVector Vector_Right();
	static void Vector_Set(struct FVector& A, double X, double Y, double Z);
	static struct FVector Vector_SlerpNormals(const struct FVector& NormalA, const struct FVector& NormalB, double Alpha);
	static struct FVector Vector_SlerpVectorToDirection(const struct FVector& Vector, const struct FVector& Direction, double Alpha);
	static struct FVector Vector_SnappedToGrid(const struct FVector& InVect, float InGridSize);
	static struct FVector Vector_ToDegrees(const struct FVector& A);
	static struct FVector Vector_ToRadians(const struct FVector& A);
	static struct FVector2D Vector_UnitCartesianToSpherical(const struct FVector& A);
	static void Vector_UnwindEuler(struct FVector& A);
	static struct FVector Vector_Up();
	static struct FVector Vector_Zero();
	static struct FVector VectorSpringInterp(const struct FVector& Current, const struct FVector& Target, struct FVectorSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, const struct FVector& MinValue, const struct FVector& MaxValue, bool bInitializeFromTarget);
	static struct FVector VInterpTo(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed);
	static struct FVector VInterpTo_Constant(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed);
	static struct FVector VLerp(const struct FVector& A, const struct FVector& B, float Alpha);
	static double VSize(const struct FVector& A);
	static double VSize2D(const struct FVector2D& A);
	static double VSize2DSquared(const struct FVector2D& A);
	static double VSizeSquared(const struct FVector& A);
	static double VSizeXY(const struct FVector& A);
	static double VSizeXYSquared(const struct FVector& A);
	static float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight);
	static struct FRotator WeightedMovingAverage_FRotator(const struct FRotator& CurrentSample, const struct FRotator& PreviousSample, float Weight);
	static struct FVector WeightedMovingAverage_FVector(const struct FVector& CurrentSample, const struct FVector& PreviousSample, float Weight);
	static int32 Wrap(int32 Value, int32 Min, int32 Max);
	static int64 Xor_Int64Int64(int64 A, int64 B);
	static int32 Xor_IntInt(int32 A, int32 B);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("KismetMathLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"KismetMathLibrary")
	}
	static class UKismetMathLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKismetMathLibrary>();
	}
};
DUMPER7_ASSERTS_UKismetMathLibrary;

// Class Engine.KismetNodeHelperLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetNodeHelperLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool BitIsMarked(int32 Data, int32 Index_0);
	static void ClearAllBits(int32* Data);
	static void ClearBit(int32* Data, int32 Index_0);
	static class FName GetEnumeratorName(const class UEnum* Enum, uint8 EnumeratorValue);
	static class FString GetEnumeratorUserFriendlyName(const class UEnum* Enum, uint8 EnumeratorValue);
	static uint8 GetEnumeratorValueFromIndex(const class UEnum* Enum, uint8 EnumeratorIndex);
	static int32 GetFirstUnmarkedBit(int32 Data, int32 StartIdx, int32 NumBits);
	static int32 GetRandomUnmarkedBit(int32 Data, int32 StartIdx, int32 NumBits);
	static int32 GetUnmarkedBit(int32 Data, int32 StartIdx, int32 NumBits, bool bRandom);
	static uint8 GetValidValue(const class UEnum* Enum, uint8 EnumeratorValue);
	static bool HasMarkedBit(int32 Data, int32 NumBits);
	static bool HasUnmarkedBit(int32 Data, int32 NumBits);
	static void MarkBit(int32* Data, int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("KismetNodeHelperLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"KismetNodeHelperLibrary")
	}
	static class UKismetNodeHelperLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKismetNodeHelperLibrary>();
	}
};
DUMPER7_ASSERTS_UKismetNodeHelperLibrary;

// Class Engine.KismetRenderingLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetRenderingLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void BeginDrawCanvasToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UCanvas** Canvas, struct FVector2D* Size, struct FDrawToRenderTargetContext* Context);
	static void BreakSkinWeightInfo(const struct FSkelMeshSkinWeightInfo& InWeight, int32* Bone0, uint8* Weight0, int32* Bone1, uint8* Weight1, int32* Bone2, uint8* Weight2, int32* Bone3, uint8* Weight3);
	static struct FMatrix CalculateProjectionMatrix(const struct FMinimalViewInfo& MinimalViewInfo);
	static void ClearRenderTarget2D(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FLinearColor& ClearColor);
	static void ConvertRenderTargetToTexture2DEditorOnly(class UObject* WorldContextObject, class UTextureRenderTarget2D* RenderTarget, class UTexture2D* Texture);
	static class UTextureRenderTarget2D* CreateRenderTarget2D(class UObject* WorldContextObject, int32 Width, int32 Height, ETextureRenderTargetFormat Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps, bool bSupportUAVs);
	static class UTextureRenderTarget2DArray* CreateRenderTarget2DArray(class UObject* WorldContextObject, int32 Width, int32 Height, int32 Slices, ETextureRenderTargetFormat Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps, bool bSupportUAVs);
	static class UTextureRenderTargetVolume* CreateRenderTargetVolume(class UObject* WorldContextObject, int32 Width, int32 Height, int32 Depth, ETextureRenderTargetFormat Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps, bool bSupportUAVs);
	static void DrawMaterialToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material);
	static void EnablePathTracing(bool bEnablePathTracer);
	static void EndDrawCanvasToRenderTarget(class UObject* WorldContextObject, const struct FDrawToRenderTargetContext& Context);
	static void ExportRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const class FString& FilePath, const class FString& Filename);
	static void ExportTexture2D(class UObject* WorldContextObject, class UTexture2D* Texture, const class FString& FilePath, const class FString& Filename);
	static class UTexture2D* ImportBufferAsTexture2D(class UObject* WorldContextObject, const TArray<uint8>& Buffer);
	static class UTexture2D* ImportFileAsTexture2D(class UObject* WorldContextObject, const class FString& Filename);
	static struct FSkelMeshSkinWeightInfo MakeSkinWeightInfo(int32 Bone0, uint8 Weight0, int32 Bone1, uint8 Weight1, int32 Bone2, uint8 Weight2, int32 Bone3, uint8 Weight3);
	static bool ReadRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, TArray<struct FColor>* OutSamples, bool bNormalize);
	static struct FColor ReadRenderTargetPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int32 X, int32 Y);
	static bool ReadRenderTargetRaw(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, TArray<struct FLinearColor>* OutLinearSamples, bool bNormalize);
	static struct FLinearColor ReadRenderTargetRawPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int32 X, int32 Y, bool bNormalize);
	static TArray<struct FLinearColor> ReadRenderTargetRawPixelArea(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int32 MinX, int32 MinY, int32 MaxX, int32 MaxY, bool bNormalize);
	static struct FLinearColor ReadRenderTargetRawUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V, bool bNormalize);
	static TArray<struct FLinearColor> ReadRenderTargetRawUVArea(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FBox2D& Area, bool bNormalize);
	static struct FColor ReadRenderTargetUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V);
	static void RefreshPathTracingOutput();
	static void ReleaseRenderTarget2D(class UTextureRenderTarget2D* TextureRenderTarget);
	static class UTexture2D* RenderTargetCreateStaticTexture2DEditorOnly(class UTextureRenderTarget2D* RenderTarget, const class FString& Name_0, ETextureCompressionSettings CompressionSettings, ETextureMipGenSettings MipSettings);
	static void ResizeRenderTarget2D(class UTextureRenderTarget2D* TextureRenderTarget, int32 Width, int32 Height);
	static void SetCastInsetShadowForAllAttachments(class UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("KismetRenderingLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"KismetRenderingLibrary")
	}
	static class UKismetRenderingLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKismetRenderingLibrary>();
	}
};
DUMPER7_ASSERTS_UKismetRenderingLibrary;

// Class Engine.BlueprintPathsLibrary
// 0x0000 (0x0028 - 0x0028)
class UBlueprintPathsLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FString AutomationDir();
	static class FString AutomationLogDir();
	static class FString AutomationTransientDir();
	static class FString BugItDir();
	static class FString ChangeExtension(const class FString& InPath, const class FString& InNewExtension);
	static class FString CloudDir();
	static bool CollapseRelativeDirectories(const class FString& InPath, class FString* OutPath);
	static class FString Combine(const TArray<class FString>& InPaths);
	static class FString ConvertFromSandboxPath(const class FString& InPath, const class FString& InSandboxName);
	static class FString ConvertRelativePathToFull(const class FString& InPath, const class FString& InBasePath);
	static class FString ConvertToSandboxPath(const class FString& InPath, const class FString& InSandboxName);
	static class FString CreateTempFilename(const class FString& Path, const class FString& Prefix, const class FString& Extension);
	static class FString DiffDir();
	static bool DirectoryExists(const class FString& InPath);
	static class FString EngineConfigDir();
	static class FString EngineContentDir();
	static class FString EngineDir();
	static class FString EngineIntermediateDir();
	static class FString EnginePluginsDir();
	static class FString EngineSavedDir();
	static class FString EngineSourceDir();
	static class FString EngineUserDir();
	static class FString EngineVersionAgnosticUserDir();
	static class FString EnterpriseDir();
	static class FString EnterpriseFeaturePackDir();
	static class FString EnterprisePluginsDir();
	static class FString FeaturePackDir();
	static bool FileExists(const class FString& InPath);
	static class FString GameAgnosticSavedDir();
	static class FString GameDevelopersDir();
	static class FString GameSourceDir();
	static class FString GameUserDeveloperDir();
	static class FString GeneratedConfigDir();
	static class FString GetBaseFilename(const class FString& InPath, bool bRemovePath);
	static class FString GetCleanFilename(const class FString& InPath);
	static const TArray<class FString> GetEditorLocalizationPaths();
	static const TArray<class FString> GetEngineLocalizationPaths();
	static class FString GetExtension(const class FString& InPath, bool bIncludeDot);
	static const TArray<class FString> GetGameLocalizationPaths();
	static class FString GetInvalidFileSystemChars();
	static class FString GetPath(const class FString& InPath);
	static class FString GetProjectFilePath();
	static const TArray<class FString> GetPropertyNameLocalizationPaths();
	static class FString GetRelativePathToRoot();
	static const TArray<class FString> GetRestrictedFolderNames();
	static const TArray<class FString> GetToolTipLocalizationPaths();
	static bool HasProjectPersistentDownloadDir();
	static bool IsDrive(const class FString& InPath);
	static bool IsProjectFilePathSet();
	static bool IsRelative(const class FString& InPath);
	static bool IsRestrictedPath(const class FString& InPath);
	static bool IsSamePath(const class FString& PathA, const class FString& PathB);
	static class FString LaunchDir();
	static bool MakePathRelativeTo(const class FString& InPath, const class FString& InRelativeTo, class FString* OutPath);
	static void MakePlatformFilename(const class FString& InPath, class FString* OutPath);
	static void MakeStandardFilename(const class FString& InPath, class FString* OutPath);
	static class FString MakeValidFileName(const class FString& InString, const class FString& InReplacementChar);
	static void NormalizeDirectoryName(const class FString& InPath, class FString* OutPath);
	static void NormalizeFilename(const class FString& InPath, class FString* OutPath);
	static class FString ProfilingDir();
	static class FString ProjectConfigDir();
	static class FString ProjectContentDir();
	static class FString ProjectDir();
	static class FString ProjectIntermediateDir();
	static class FString ProjectLogDir();
	static class FString ProjectModsDir();
	static class FString ProjectPersistentDownloadDir();
	static class FString ProjectPluginsDir();
	static class FString ProjectSavedDir();
	static class FString ProjectUserDir();
	static void RemoveDuplicateSlashes(const class FString& InPath, class FString* OutPath);
	static class FString RootDir();
	static class FString SandboxesDir();
	static class FString ScreenShotDir();
	static class FString SetExtension(const class FString& InPath, const class FString& InNewExtension);
	static void SetProjectFilePath(const class FString& NewGameProjectFilePath);
	static class FString ShaderWorkingDir();
	static bool ShouldSaveToUserDir();
	static class FString SourceConfigDir();
	static void Split(const class FString& InPath, class FString* PathPart, class FString* FilenamePart, class FString* ExtensionPart);
	static void ValidatePath(const class FString& InPath, bool* bDidSucceed, class FText* OutReason);
	static class FString VideoCaptureDir();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BlueprintPathsLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BlueprintPathsLibrary")
	}
	static class UBlueprintPathsLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintPathsLibrary>();
	}
};
DUMPER7_ASSERTS_UBlueprintPathsLibrary;

// Class Engine.BlueprintPlatformLibrary
// 0x0000 (0x0028 - 0x0028)
class UBlueprintPlatformLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void CancelLocalNotification(const class FString& ActivationEvent);
	static void CancelLocalNotificationById(int32 NotificationId);
	static void ClearAllLocalNotifications();
	static EScreenOrientation GetAllowedDeviceOrientation();
	static EScreenOrientation GetDeviceOrientation();
	static void GetLaunchNotification(bool* NotificationLaunchedApp, class FString* ActivationEvent, int32* FireDate);
	static int32 ScheduleLocalNotificationAtTime(const struct FDateTime& FireDateTime, bool LocalTime, const class FText& Title, const class FText& Body, const class FText& Action, const class FString& ActivationEvent);
	static int32 ScheduleLocalNotificationBadgeAtTime(const struct FDateTime& FireDateTime, bool LocalTime, const class FString& ActivationEvent);
	static void ScheduleLocalNotificationBadgeFromNow(int32 inSecondsFromNow, const class FString& ActivationEvent);
	static int32 ScheduleLocalNotificationFromNow(int32 inSecondsFromNow, const class FText& Title, const class FText& Body, const class FText& Action, const class FString& ActivationEvent);
	static void SetAllowedDeviceOrientation(EScreenOrientation NewAllowedDeviceOrientation);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BlueprintPlatformLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BlueprintPlatformLibrary")
	}
	static class UBlueprintPlatformLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintPlatformLibrary>();
	}
};
DUMPER7_ASSERTS_UBlueprintPlatformLibrary;

// Class Engine.BlueprintTypeConversions
// 0x0000 (0x0028 - 0x0028)
class UBlueprintTypeConversions final : public UObject
{
public:
	static TArray<int32> ConvertArrayType(const TArray<int32>& inArray);
	static int32 ConvertFBox2dToFBox2f(int32 InFromData);
	static int32 ConvertFBox2fToFBox2d(int32 InFromData);
	static int32 ConvertFMatrix44dToFMatrix44f(int32 InFromData);
	static int32 ConvertFMatrix44fToFMatrix44d(int32 InFromData);
	static int32 ConvertFPlane4dToFPlane4f(int32 InFromData);
	static int32 ConvertFPlane4fToFPlane4d(int32 InFromData);
	static int32 ConvertFQuat4dToFQuat4f(int32 InFromData);
	static int32 ConvertFQuat4fToFQuat4d(int32 InFromData);
	static int32 ConvertFRotator3dToFRotator3f(int32 InFromData);
	static int32 ConvertFRotator3fToFRotator3d(int32 InFromData);
	static int32 ConvertFTransform3dToFTransform3f(int32 InFromData);
	static int32 ConvertFTransform3fToFTransform3d(int32 InFromData);
	static int32 ConvertFVector2dToFVector2f(int32 InFromData);
	static int32 ConvertFVector2fToFVector2d(int32 InFromData);
	static int32 ConvertFVector3dToFVector3f(int32 InFromData);
	static int32 ConvertFVector3fToFVector3d(int32 InFromData);
	static int32 ConvertFVector4dToFVector4f(int32 InFromData);
	static int32 ConvertFVector4fToFVector4d(int32 InFromData);
	static TMap<int32, int32> ConvertMapType(const TMap<int32, int32>& InMap);
	static TSet<int32> ConvertSetType(const TSet<int32>& Inset);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BlueprintTypeConversions")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BlueprintTypeConversions")
	}
	static class UBlueprintTypeConversions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintTypeConversions>();
	}
};
DUMPER7_ASSERTS_UBlueprintTypeConversions;

// Class Engine.ImportanceSamplingLibrary
// 0x0000 (0x0028 - 0x0028)
class UImportanceSamplingLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void BreakImportanceTexture(const struct FImportanceTexture& ImportanceTexture, class UTexture2D** Texture, EImportanceWeight* WeightingFunc);
	static void ImportanceSample(const struct FImportanceTexture& Texture, const struct FVector2D& Rand, int32 Samples, float Intensity, struct FVector2D* SamplePosition, struct FLinearColor* SampleColor, float* SampleIntensity, float* SampleSize);
	static struct FImportanceTexture MakeImportanceTexture(class UTexture2D* Texture, EImportanceWeight WeightingFunc);
	static struct FVector2D NextSobolCell2D(int32 Index_0, int32 NumCells, const struct FVector2D& PreviousValue);
	static struct FVector NextSobolCell3D(int32 Index_0, int32 NumCells, const struct FVector& PreviousValue);
	static float NextSobolFloat(int32 Index_0, int32 Dimension, float PreviousValue);
	static struct FVector2D RandomSobolCell2D(int32 Index_0, int32 NumCells, const struct FVector2D& Cell, const struct FVector2D& Seed);
	static struct FVector RandomSobolCell3D(int32 Index_0, int32 NumCells, const struct FVector& Cell, const struct FVector& Seed);
	static float RandomSobolFloat(int32 Index_0, int32 Dimension, float Seed);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ImportanceSamplingLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ImportanceSamplingLibrary")
	}
	static class UImportanceSamplingLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UImportanceSamplingLibrary>();
	}
};
DUMPER7_ASSERTS_UImportanceSamplingLibrary;

// Class Engine.ActorContainer
// 0x0050 (0x0078 - 0x0028)
class UActorContainer final : public UObject
{
public:
	TMap<class FName, class AActor*>              Actors;                                            // 0x0028(0x0050)(UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActorContainer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActorContainer")
	}
	static class UActorContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorContainer>();
	}
};
DUMPER7_ASSERTS_UActorContainer;

// Class Engine.LevelActorContainer
// 0x0010 (0x0038 - 0x0028)
class ULevelActorContainer final : public UObject
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0028(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelActorContainer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelActorContainer")
	}
	static class ULevelActorContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelActorContainer>();
	}
};
DUMPER7_ASSERTS_ULevelActorContainer;

// Class Engine.LevelBounds
// 0x0010 (0x02A8 - 0x0298)
class ALevelBounds final : public AActor
{
public:
	class UBoxComponent*                          BoxComponent;                                      // 0x0298(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoUpdateBounds;                                 // 0x02A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelBounds")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelBounds")
	}
	static class ALevelBounds* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALevelBounds>();
	}
};
DUMPER7_ASSERTS_ALevelBounds;

// Class Engine.LevelInstanceComponent
// 0x0000 (0x02A0 - 0x02A0)
class ULevelInstanceComponent final : public USceneComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelInstanceComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelInstanceComponent")
	}
	static class ULevelInstanceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelInstanceComponent>();
	}
};
DUMPER7_ASSERTS_ULevelInstanceComponent;

// Class Engine.LevelInstanceEditorInstanceActor
// 0x0000 (0x0298 - 0x0298)
class ALevelInstanceEditorInstanceActor final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelInstanceEditorInstanceActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelInstanceEditorInstanceActor")
	}
	static class ALevelInstanceEditorInstanceActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALevelInstanceEditorInstanceActor>();
	}
};
DUMPER7_ASSERTS_ALevelInstanceEditorInstanceActor;

// Class Engine.LevelStreamingLevelInstanceEditor
// 0x0000 (0x01A0 - 0x01A0)
class ULevelStreamingLevelInstanceEditor final : public ULevelStreamingAlwaysLoaded
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelStreamingLevelInstanceEditor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelStreamingLevelInstanceEditor")
	}
	static class ULevelStreamingLevelInstanceEditor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelStreamingLevelInstanceEditor>();
	}
};
DUMPER7_ASSERTS_ULevelStreamingLevelInstanceEditor;

// Class Engine.LevelInstanceInterface
// 0x0000 (0x0000 - 0x0000)
class ILevelInstanceInterface final
{
public:
	void LoadLevelInstance();
	void UnloadLevelInstance();

	const TSoftObjectPtr<class UWorld> GetWorldAsset() const;
	bool IsLoaded() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelInstanceInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelInstanceInterface")
	}
	static class ILevelInstanceInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ILevelInstanceInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ILevelInstanceInterface;

// Class Engine.LevelStreamingLevelInstance
// 0x0030 (0x01D0 - 0x01A0)
class ULevelStreamingLevelInstance final : public ULevelStreamingDynamic
{
public:
	uint8                                         Pad_1A0[0x30];                                     // 0x01A0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelStreamingLevelInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelStreamingLevelInstance")
	}
	static class ULevelStreamingLevelInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelStreamingLevelInstance>();
	}
};
DUMPER7_ASSERTS_ULevelStreamingLevelInstance;

// Class Engine.LevelScriptActor
// 0x0008 (0x02A0 - 0x0298)
class ALevelScriptActor : public AActor
{
public:
	uint8                                         bInputEnabled : 1;                                 // 0x0298(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void LevelReset();
	bool RemoteEvent(class FName EventName);
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	void WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelScriptActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelScriptActor")
	}
	static class ALevelScriptActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALevelScriptActor>();
	}
};
DUMPER7_ASSERTS_ALevelScriptActor;

// Class Engine.LevelScriptBlueprint
// 0x0000 (0x00A8 - 0x00A8)
class ULevelScriptBlueprint final : public UBlueprint
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelScriptBlueprint")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelScriptBlueprint")
	}
	static class ULevelScriptBlueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelScriptBlueprint>();
	}
};
DUMPER7_ASSERTS_ULevelScriptBlueprint;

// Class Engine.LightmappedSurfaceCollection
// 0x0018 (0x0040 - 0x0028)
class ULightmappedSurfaceCollection final : public UObject
{
public:
	class UModel*                                 SourceModel;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Surfaces;                                          // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LightmappedSurfaceCollection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LightmappedSurfaceCollection")
	}
	static class ULightmappedSurfaceCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULightmappedSurfaceCollection>();
	}
};
DUMPER7_ASSERTS_ULightmappedSurfaceCollection;

// Class Engine.LightmassPrimitiveSettingsObject
// 0x0018 (0x0040 - 0x0028)
class ULightmassPrimitiveSettingsObject final : public UObject
{
public:
	struct FLightmassPrimitiveSettings            LightmassSettings;                                 // 0x0028(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LightmassPrimitiveSettingsObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LightmassPrimitiveSettingsObject")
	}
	static class ULightmassPrimitiveSettingsObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULightmassPrimitiveSettingsObject>();
	}
};
DUMPER7_ASSERTS_ULightmassPrimitiveSettingsObject;

// Class Engine.LightWeightInstanceBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class ULightWeightInstanceBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FActorInstanceHandle ConvertActorToLightWeightInstance(class AActor* Actor);
	static struct FActorInstanceHandle CreateNewLightWeightInstance(class UClass* ActorClass, const struct FTransform& Transform, class UDataLayerInstance* Layer, class UWorld* World);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LightWeightInstanceBlueprintFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LightWeightInstanceBlueprintFunctionLibrary")
	}
	static class ULightWeightInstanceBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULightWeightInstanceBlueprintFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_ULightWeightInstanceBlueprintFunctionLibrary;

// Class Engine.LightWeightInstanceManager
// 0x00B0 (0x0348 - 0x0298)
class ALightWeightInstanceManager : public AActor
{
public:
	uint8                                         Pad_298[0x10];                                     // 0x0298(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     RepresentedClass;                                  // 0x02A8(0x0008)(Edit, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AActor>                     AcceptedClass;                                     // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FTransform>                     InstanceTransforms;                                // 0x02B8(0x0010)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, RepNotify, Protected, NativeAccessSpecifierProtected)
	TMap<int32, class AActor*>                    Actors;                                            // 0x02C8(0x0050)(Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_318[0x10];                                     // 0x0318(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 FreeIndices;                                       // 0x0328(0x0010)(Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  ValidIndices;                                      // 0x0338(0x0010)(Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void OnRep_Transforms();
	void OnSpawnedActorDestroyed(class AActor* DestroyedActor);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LightWeightInstanceManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LightWeightInstanceManager")
	}
	static class ALightWeightInstanceManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALightWeightInstanceManager>();
	}
};
DUMPER7_ASSERTS_ALightWeightInstanceManager;

// Class Engine.LightWeightInstanceStaticMeshManager
// 0x0068 (0x03B0 - 0x0348)
class ALightWeightInstanceStaticMeshManager final : public ALightWeightInstanceManager
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             StaticMesh;                                        // 0x0350(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnTemplate, RepNotify, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHierarchicalInstancedStaticMeshComponent* InstancedStaticMeshComponent;                   // 0x0378(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, AdvancedDisplay, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                 RenderingIndicesToDataIndices;                     // 0x0380(0x0010)(Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 DataIndicesToRenderingIndices;                     // 0x0390(0x0010)(Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A0[0x10];                                     // 0x03A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_StaticMesh();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LightWeightInstanceStaticMeshManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LightWeightInstanceStaticMeshManager")
	}
	static class ALightWeightInstanceStaticMeshManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALightWeightInstanceStaticMeshManager>();
	}
};
DUMPER7_ASSERTS_ALightWeightInstanceStaticMeshManager;

// Class Engine.LocalPlayer
// 0x0268 (0x02B0 - 0x0048)
class ULocalPlayer final : public UPlayer
{
public:
	uint8                                         Pad_48[0x30];                                      // 0x0048(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameViewportClient*                    ViewportClient;                                    // 0x0078(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x38];                                      // 0x0080(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	EAspectRatioAxisConstraint                    AspectRatioAxisConstraint;                         // 0x00B8(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class APlayerController>          PendingLevelPlayerControllerClass;                 // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bSentSplitJoin : 1;                                // 0x00C8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C9[0x17];                                      // 0x00C9(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ControllerId;                                      // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E4[0x1CC];                                     // 0x00E4(0x01CC)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LocalPlayer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LocalPlayer")
	}
	static class ULocalPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocalPlayer>();
	}
};
DUMPER7_ASSERTS_ULocalPlayer;

// Class Engine.LODActor
// 0x0088 (0x0320 - 0x0298)
class ALODActor final : public AActor
{
public:
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0298(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<struct FHLODInstancingKey, class UInstancedStaticMeshComponent*> InstancedStaticMeshComponents; // 0x02A0(0x0050)(ExportObject, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UHLODProxy*                             Proxy;                                             // 0x02F0(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Key;                                               // 0x02F8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LODDrawDistance;                                   // 0x0300(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LODLevel;                                          // 0x0304(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         SubActors;                                         // 0x0308(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         CachedNumHLODLevels;                               // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSubActorEndPlay(class AActor* Actor, EEndPlayReason Reason);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LODActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LODActor")
	}
	static class ALODActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALODActor>();
	}
};
DUMPER7_ASSERTS_ALODActor;

// Class Engine.MaterialInstanceActor
// 0x0010 (0x02A8 - 0x0298)
class AMaterialInstanceActor final : public AActor
{
public:
	TArray<class AActor*>                         TargetActors;                                      // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialInstanceActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialInstanceActor")
	}
	static class AMaterialInstanceActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMaterialInstanceActor>();
	}
};
DUMPER7_ASSERTS_AMaterialInstanceActor;

// Class Engine.MaterialEditorOnlyData
// 0x0638 (0x0678 - 0x0040)
class UMaterialEditorOnlyData final : public UMaterialInterfaceEditorOnlyData
{
public:
	struct FColorMaterialInput                    BaseColor;                                         // 0x0040(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                   Metallic;                                          // 0x0070(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                   Specular;                                          // 0x00A0(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                   Roughness;                                         // 0x00D0(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                   Anisotropy;                                        // 0x0100(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVectorMaterialInput                   Normal;                                            // 0x0130(0x0038)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVectorMaterialInput                   Tangent;                                           // 0x0168(0x0038)(NoDestructor, NativeAccessSpecifierPublic)
	struct FColorMaterialInput                    EmissiveColor;                                     // 0x01A0(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                   Opacity;                                           // 0x01D0(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                   OpacityMask;                                       // 0x0200(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVectorMaterialInput                   WorldPositionOffset;                               // 0x0230(0x0038)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                   displacement;                                      // 0x0268(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FColorMaterialInput                    SubsurfaceColor;                                   // 0x0298(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                   ClearCoat;                                         // 0x02C8(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                   ClearCoatRoughness;                                // 0x02F8(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                   AmbientOcclusion;                                  // 0x0328(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                   Refraction;                                        // 0x0358(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2MaterialInput                  CustomizedUVs[0x8];                                // 0x0388(0x0038)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMaterialAttributesInput               MaterialAttributes;                                // 0x0548(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                   PixelDepthOffset;                                  // 0x0578(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FShadingModelMaterialInput             ShadingModelFromMaterialExpression;                // 0x05A8(0x0028)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D0[0x8];                                      // 0x05D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalarMaterialInput                   SurfaceThickness;                                  // 0x05D8(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FStrataMaterialInput                   FrontMaterial;                                     // 0x0608(0x0028)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_630[0x8];                                      // 0x0630(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMaterialExpressionCollection          ExpressionCollection;                              // 0x0638(0x0030)(NativeAccessSpecifierPublic)
	TArray<struct FParameterGroupData>            ParameterGroupData;                                // 0x0668(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialEditorOnlyData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialEditorOnlyData")
	}
	static class UMaterialEditorOnlyData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialEditorOnlyData>();
	}
};
DUMPER7_ASSERTS_UMaterialEditorOnlyData;

// Class Engine.MaterialInstanceEditorOnlyData
// 0x00A0 (0x00E0 - 0x0040)
class UMaterialInstanceEditorOnlyData final : public UMaterialInterfaceEditorOnlyData
{
public:
	struct FStaticParameterSetEditorOnlyData      StaticParameters;                                  // 0x0040(0x00A0)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialInstanceEditorOnlyData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialInstanceEditorOnlyData")
	}
	static class UMaterialInstanceEditorOnlyData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialInstanceEditorOnlyData>();
	}
};
DUMPER7_ASSERTS_UMaterialInstanceEditorOnlyData;

// Class Engine.MaterialInstanceDynamic
// 0x0050 (0x0298 - 0x0248)
class UMaterialInstanceDynamic final : public UMaterialInstance
{
public:
	uint8                                         Pad_248[0x50];                                     // 0x0248(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CopyInterpParameters(class UMaterialInstance* Source);
	void CopyParameterOverrides(class UMaterialInstance* MaterialInstance);
	bool InitializeScalarParameterAndGetIndex(const class FName& ParameterName, float Value, int32* OutParameterIndex);
	void K2_CopyMaterialInstanceParameters(class UMaterialInterface* Source, bool bQuickParametersOnly);
	float K2_GetScalarParameterValue(class FName ParameterName);
	float K2_GetScalarParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo);
	class UTexture* K2_GetTextureParameterValue(class FName ParameterName);
	class UTexture* K2_GetTextureParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo);
	struct FLinearColor K2_GetVectorParameterValue(class FName ParameterName);
	struct FLinearColor K2_GetVectorParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo);
	void K2_InterpolateMaterialInstanceParams(class UMaterialInstance* SourceA, class UMaterialInstance* SourceB, float Alpha);
	void SetDoubleVectorParameterValue(class FName ParameterName, const struct FVector4& Value);
	void SetRuntimeVirtualTextureParameterValue(class FName ParameterName, class URuntimeVirtualTexture* Value);
	void SetRuntimeVirtualTextureParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, class URuntimeVirtualTexture* Value);
	bool SetScalarParameterByIndex(int32 ParameterIndex, float Value);
	void SetScalarParameterValue(class FName ParameterName, float Value);
	void SetScalarParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, float Value);
	void SetSparseVolumeTextureParameterValue(class FName ParameterName, class USparseVolumeTexture* Value);
	void SetTextureParameterValue(class FName ParameterName, class UTexture* Value);
	void SetTextureParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, class UTexture* Value);
	void SetVectorParameterValue(class FName ParameterName, const struct FLinearColor& Value);
	void SetVectorParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, const struct FLinearColor& Value);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialInstanceDynamic")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialInstanceDynamic")
	}
	static class UMaterialInstanceDynamic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialInstanceDynamic>();
	}
};
DUMPER7_ASSERTS_UMaterialInstanceDynamic;

// Class Engine.MaterialParameterCollection
// 0x0048 (0x0070 - 0x0028)
class UMaterialParameterCollection final : public UObject
{
public:
	struct FGuid                                  StateId;                                           // 0x0028(0x0010)(ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCollectionScalarParameter>     ScalarParameters;                                  // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCollectionVectorParameter>     VectorParameters;                                  // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x18];                                      // 0x0058(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetScalarParameterDefaultValue(class FName ParameterName, bool* bParameterFound) const;
	TArray<class FName> GetScalarParameterNames() const;
	struct FLinearColor GetVectorParameterDefaultValue(class FName ParameterName, bool* bParameterFound) const;
	TArray<class FName> GetVectorParameterNames() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialParameterCollection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialParameterCollection")
	}
	static class UMaterialParameterCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialParameterCollection>();
	}
};
DUMPER7_ASSERTS_UMaterialParameterCollection;

// Class Engine.MeshSimplificationSettings
// 0x0010 (0x0048 - 0x0038)
class UMeshSimplificationSettings final : public UDeveloperSettings
{
public:
	class FName                                   MeshReductionModuleName;                           // 0x0038(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMeshReductionBackwardCompatible;                  // 0x0040(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MeshSimplificationSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MeshSimplificationSettings")
	}
	static class UMeshSimplificationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshSimplificationSettings>();
	}
};
DUMPER7_ASSERTS_UMeshSimplificationSettings;

// Class Engine.MeshVertexPainterKismetLibrary
// 0x0000 (0x0028 - 0x0028)
class UMeshVertexPainterKismetLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void PaintVerticesLerpAlongAxis(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& StartColor, const struct FLinearColor& EndColor, EVertexPaintAxis Axis, bool bConvertToSRGB);
	static void PaintVerticesSingleColor(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& FillColor, bool bConvertToSRGB);
	static void RemovePaintedVertices(class UStaticMeshComponent* StaticMeshComponent);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MeshVertexPainterKismetLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MeshVertexPainterKismetLibrary")
	}
	static class UMeshVertexPainterKismetLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshVertexPainterKismetLibrary>();
	}
};
DUMPER7_ASSERTS_UMeshVertexPainterKismetLibrary;

// Class Engine.Model
// 0x0248 (0x0270 - 0x0028)
class UModel final : public UObject
{
public:
	uint8                                         Pad_28[0x248];                                     // 0x0028(0x0248)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Model")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Model")
	}
	static class UModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModel>();
	}
};
DUMPER7_ASSERTS_UModel;

// Class Engine.SimulatedClientNetConnection
// 0x0000 (0x1DF8 - 0x1DF8)
class USimulatedClientNetConnection final : public UNetConnection
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SimulatedClientNetConnection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SimulatedClientNetConnection")
	}
	static class USimulatedClientNetConnection* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimulatedClientNetConnection>();
	}
};
DUMPER7_ASSERTS_USimulatedClientNetConnection;

// Class Engine.NetworkSettings
// 0x0018 (0x0050 - 0x0038)
class UNetworkSettings final : public UDeveloperSettings
{
public:
	uint8                                         bVerifyPeer : 1;                                   // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableMultiplayerWorldOriginRebasing : 1;         // 0x0038(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNetworkEmulationProfileDescription> NetworkEmulationProfiles;                     // 0x0040(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NetworkSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NetworkSettings")
	}
	static class UNetworkSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetworkSettings>();
	}
};
DUMPER7_ASSERTS_UNetworkSettings;

// Class Engine.BandwidthTestActor
// 0x0020 (0x02B8 - 0x0298)
class ABandwidthTestActor final : public AActor
{
public:
	struct FBandwidthTestGenerator                BandwidthGenerator;                                // 0x0298(0x0020)(Net, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BandwidthTestActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BandwidthTestActor")
	}
	static class ABandwidthTestActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABandwidthTestActor>();
	}
};
DUMPER7_ASSERTS_ABandwidthTestActor;

// Class Engine.ActorReplicationBridge
// 0x0020 (0x04D0 - 0x04B0)
class UActorReplicationBridge final : public UObjectReplicationBridge
{
public:
	uint8                                         Pad_4B0[0x20];                                     // 0x04B0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActorReplicationBridge")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActorReplicationBridge")
	}
	static class UActorReplicationBridge* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorReplicationBridge>();
	}
};
DUMPER7_ASSERTS_UActorReplicationBridge;

// Class Engine.NetFaultConfig
// 0x0000 (0x0088 - 0x0088)
class UNetFaultConfig final : public UEscalationManagerConfig
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NetFaultConfig")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NetFaultConfig")
	}
	static class UNetFaultConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetFaultConfig>();
	}
};
DUMPER7_ASSERTS_UNetFaultConfig;

// Class Engine.NetworkSubsystem
// 0x0050 (0x0080 - 0x0030)
class UNetworkSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x50];                                      // 0x0030(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NetworkSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NetworkSubsystem")
	}
	static class UNetworkSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetworkSubsystem>();
	}
};
DUMPER7_ASSERTS_UNetworkSubsystem;

// Class Engine.Note
// 0x0000 (0x0298 - 0x0298)
class ANote final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Note")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Note")
	}
	static class ANote* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANote>();
	}
};
DUMPER7_ASSERTS_ANote;

// Class Engine.ObjectTraceWorldSubsystem
// 0x0010 (0x0040 - 0x0030)
class UObjectTraceWorldSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ObjectTraceWorldSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ObjectTraceWorldSubsystem")
	}
	static class UObjectTraceWorldSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObjectTraceWorldSubsystem>();
	}
};
DUMPER7_ASSERTS_UObjectTraceWorldSubsystem;

// Class Engine.OnlineBlueprintCallProxyBase
// 0x0000 (0x0030 - 0x0030)
class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("OnlineBlueprintCallProxyBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"OnlineBlueprintCallProxyBase")
	}
	static class UOnlineBlueprintCallProxyBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlineBlueprintCallProxyBase>();
	}
};
DUMPER7_ASSERTS_UOnlineBlueprintCallProxyBase;

// Class Engine.PackageMapClient
// 0x0328 (0x0408 - 0x00E0)
class UPackageMapClient final : public UPackageMap
{
public:
	uint8                                         Pad_E0[0x328];                                     // 0x00E0(0x0328)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PackageMapClient")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PackageMapClient")
	}
	static class UPackageMapClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPackageMapClient>();
	}
};
DUMPER7_ASSERTS_UPackageMapClient;

// Class Engine.PackedLevelActor
// 0x0000 (0x0338 - 0x0338)
class APackedLevelActor final : public ALevelInstance
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PackedLevelActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PackedLevelActor")
	}
	static class APackedLevelActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APackedLevelActor>();
	}
};
DUMPER7_ASSERTS_APackedLevelActor;

// Class Engine.ParticleEventManager
// 0x0000 (0x0298 - 0x0298)
class AParticleEventManager final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ParticleEventManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ParticleEventManager")
	}
	static class AParticleEventManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AParticleEventManager>();
	}
};
DUMPER7_ASSERTS_AParticleEventManager;

// Class Engine.AsyncPhysicsInputComponent
// 0x0028 (0x00C8 - 0x00A0)
class UAsyncPhysicsInputComponent final : public UActorComponent
{
public:
	TSubclassOf<class UAsyncPhysicsData>          DataClass;                                         // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UAsyncPhysicsData*>              BufferedData;                                      // 0x00A8(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UAsyncPhysicsData*                      DataToConsume;                                     // 0x00B8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAsyncPhysicsData*                      DataToWrite;                                       // 0x00C0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ServerRPCBufferInput(class UAsyncPhysicsData* AsyncPhysicsData);

	const class UAsyncPhysicsData* GetDataToConsume() const;
	class UAsyncPhysicsData* GetDataToWrite() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AsyncPhysicsInputComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AsyncPhysicsInputComponent")
	}
	static class UAsyncPhysicsInputComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncPhysicsInputComponent>();
	}
};
DUMPER7_ASSERTS_UAsyncPhysicsInputComponent;

// Class Engine.BodySetup
// 0x02C8 (0x0300 - 0x0038)
class UBodySetup : public UBodySetupCore
{
public:
	struct FKAggregateGeom                        AggGeom;                                           // 0x0038(0x0078)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bAlwaysFullAnimWeight : 1;                         // 0x00B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConsiderForBounds : 1;                            // 0x00B0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMeshCollideAll : 1;                               // 0x00B0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDoubleSidedGeometry : 1;                          // 0x00B0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateNonMirroredCollision : 1;                 // 0x00B0(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSharedCookedData : 1;                             // 0x00B0(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateMirroredCollision : 1;                    // 0x00B0(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportUVsAndFaceRemap : 1;                       // 0x00B0(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_B1_0 : 3;                                   // 0x00B1(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bNeverNeedsCookedCollisionData : 1;                // 0x00B1(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      PhysMaterial;                                      // 0x00B8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWalkableSlopeOverride                 WalkableSlopeOverride;                             // 0x00C0(0x0010)(Edit, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x70];                                      // 0x00D0(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBodyInstance                          DefaultInstance;                                   // 0x0140(0x0190)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D0[0x8];                                      // 0x02D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BuildScale3D;                                      // 0x02D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F0[0x10];                                     // 0x02F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BodySetup")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BodySetup")
	}
	static class UBodySetup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBodySetup>();
	}
};
DUMPER7_ASSERTS_UBodySetup;

// Class Engine.ClusterUnionComponent
// 0x0240 (0x07B0 - 0x0570)
class UClusterUnionComponent final : public UPrimitiveComponent
{
public:
	TMulticastInlineDelegate<void(class UPrimitiveComponent* Component, const TSet<int32>& BoneIds, bool bIsNew)> OnComponentAddedEvent; // 0x0570(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UPrimitiveComponent* Component)> OnComponentRemovedEvent;    // 0x0580(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UClusterUnionComponent* Component, const struct FBoxSphereBounds& Bounds)> OnComponentBoundsChangedEvent; // 0x0590(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FComponentReference>            ClusteredComponentsReferences;                     // 0x05A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5B0[0x140];                                    // 0x05B0(0x0140)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FClusterUnionParticleCandidateData> UniqueIdxToComponent;                     // 0x06F0(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FClusterUnionReplicatedData            ReplicatedRigidState;                              // 0x0740(0x0002)(Net, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_742[0x6E];                                     // 0x0742(0x006E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddComponentToCluster(class UPrimitiveComponent* InComponent, const TArray<int32>& BoneIds);
	void ForceSetChildToParent(class UPrimitiveComponent* InComponent, const TArray<int32>& BoneIds, const TArray<struct FTransform>& ChildToParent);
	TArray<class AActor*> GetActors();
	TArray<class UPrimitiveComponent*> GetPrimitiveComponents();
	void HandleComponentPhysicsStateChange(class UPrimitiveComponent* ChangedComponent, EComponentPhysicsStateChange StateChange);
	void HandleComponentPhysicsStateChangePostAddIntoClusterUnion(class UPrimitiveComponent* ChangedComponent, EComponentPhysicsStateChange StateChange);
	bool IsComponentAdded(class UPrimitiveComponent* Component);
	void OnRep_RigidState();
	void RemoveComponentFromCluster(class UPrimitiveComponent* InComponent);
	void SetIsAnchored(bool bIsAnchored);

	bool IsAuthority() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ClusterUnionComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ClusterUnionComponent")
	}
	static class UClusterUnionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UClusterUnionComponent>();
	}
};
DUMPER7_ASSERTS_UClusterUnionComponent;

// Class Engine.ClusterUnionReplicatedProxyComponent
// 0x0058 (0x00F8 - 0x00A0)
class UClusterUnionReplicatedProxyComponent final : public UActorComponent
{
public:
	TWeakObjectPtr<class UClusterUnionComponent>  ParentClusterUnion;                                // 0x00A0(0x0008)(ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bNetUpdateParentClusterUnion;                      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UPrimitiveComponent>     ChildClusteredComponent;                           // 0x00AC(0x0008)(ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bNetUpdateChildClusteredComponent;                 // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ParticleBoneIds;                                   // 0x00B8(0x0010)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	bool                                          bNetUpdateParticleBoneIds;                         // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     ParticleChildToParents;                            // 0x00D0(0x0010)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	bool                                          bNetUpdateParticleChildToParents;                  // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsPendingDeletion;                                // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E2[0x16];                                      // 0x00E2(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsPendingDeletion();
	void MarkPendingDeletion();
	void OnRep_ChildClusteredComponent();
	void OnRep_ParentClusterUnion();
	void OnRep_ParticleBoneIds();
	void OnRep_ParticleChildToParents();
	void SetChildClusteredComponent(class UPrimitiveComponent* InComponent);
	void SetParentClusterUnion(class UClusterUnionComponent* InComponent);
	void SetParticleBoneIds(const TArray<int32>& InIds);
	void SetParticleChildToParent(int32 BoneID, const struct FTransform& ChildToParent);

	class UClusterUnionComponent* GetParentClusterUnionComponent() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ClusterUnionReplicatedProxyComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ClusterUnionReplicatedProxyComponent")
	}
	static class UClusterUnionReplicatedProxyComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UClusterUnionReplicatedProxyComponent>();
	}
};
DUMPER7_ASSERTS_UClusterUnionReplicatedProxyComponent;

// Class Engine.ConstraintInstanceBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UConstraintInstanceBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void CopyParams(struct FConstraintInstanceAccessor& Accessor, struct FConstraintInstanceAccessor& SourceAccessor, bool bKeepPosition, bool bKeepRotation);
	static void GetAngularBreakable(struct FConstraintInstanceAccessor& Accessor, bool* bAngularBreakable, float* AngularBreakThreshold);
	static void GetAngularDriveMode(struct FConstraintInstanceAccessor& Accessor, EAngularDriveMode* OutDriveMode);
	static void GetAngularDriveParams(struct FConstraintInstanceAccessor& Accessor, float* OutPositionStrength, float* OutVelocityStrength, float* OutForceLimit);
	static void GetAngularLimits(struct FConstraintInstanceAccessor& Accessor, EAngularConstraintMotion* Swing1MotionType, float* Swing1LimitAngle, EAngularConstraintMotion* Swing2MotionType, float* Swing2LimitAngle, EAngularConstraintMotion* TwistMotionType, float* TwistLimitAngle);
	static void GetAngularOrientationTarget(struct FConstraintInstanceAccessor& Accessor, struct FRotator* OutPosTarget);
	static void GetAngularPlasticity(struct FConstraintInstanceAccessor& Accessor, bool* bAngularPlasticity, float* AngularPlasticityThreshold);
	static void GetAngularSoftSwingLimitParams(struct FConstraintInstanceAccessor& Accessor, bool* bSoftSwingLimit, float* SwingLimitStiffness, float* SwingLimitDamping, float* SwingLimitRestitution, float* SwingLimitContactDistance);
	static void GetAngularSoftTwistLimitParams(struct FConstraintInstanceAccessor& Accessor, bool* bSoftTwistLimit, float* TwistLimitStiffness, float* TwistLimitDamping, float* TwistLimitRestitution, float* TwistLimitContactDistance);
	static void GetAngularVelocityDriveSLERP(struct FConstraintInstanceAccessor& Accessor, bool* bOutEnableSLERP);
	static void GetAngularVelocityDriveTwistAndSwing(struct FConstraintInstanceAccessor& Accessor, bool* bOutEnableTwistDrive, bool* bOutEnableSwingDrive);
	static void GetAngularVelocityTarget(struct FConstraintInstanceAccessor& Accessor, struct FVector* OutVelTarget);
	static void GetAttachedBodyNames(struct FConstraintInstanceAccessor& Accessor, class FName* ParentBody, class FName* ChildBody);
	static void GetContactTransferScale(struct FConstraintInstanceAccessor& Accessor, float* ContactTransferScale);
	static bool GetDisableCollsion(struct FConstraintInstanceAccessor& Accessor);
	static void GetLinearBreakable(struct FConstraintInstanceAccessor& Accessor, bool* bLinearBreakable, float* LinearBreakThreshold);
	static void GetLinearDriveParams(struct FConstraintInstanceAccessor& Accessor, float* OutPositionStrength, float* OutVelocityStrength, float* OutForceLimit);
	static void GetLinearLimits(struct FConstraintInstanceAccessor& Accessor, ELinearConstraintMotion* XMotion, ELinearConstraintMotion* YMotion, ELinearConstraintMotion* ZMotion, float* Limit);
	static void GetLinearPlasticity(struct FConstraintInstanceAccessor& Accessor, bool* bLinearPlasticity, float* LinearPlasticityThreshold, EConstraintPlasticityType* PlasticityType);
	static void GetLinearPositionDrive(struct FConstraintInstanceAccessor& Accessor, bool* bOutEnableDriveX, bool* bOutEnableDriveY, bool* bOutEnableDriveZ);
	static void GetLinearPositionTarget(struct FConstraintInstanceAccessor& Accessor, struct FVector* OutPosTarget);
	static void GetLinearSoftLimitParams(struct FConstraintInstanceAccessor& Accessor, bool* bSoftLinearLimit, float* LinearLimitStiffness, float* LinearLimitDamping, float* LinearLimitRestitution, float* LinearLimitContactDistance);
	static void GetLinearVelocityDrive(struct FConstraintInstanceAccessor& Accessor, bool* bOutEnableDriveX, bool* bOutEnableDriveY, bool* bOutEnableDriveZ);
	static void GetLinearVelocityTarget(struct FConstraintInstanceAccessor& Accessor, struct FVector* OutVelTarget);
	static bool GetMassConditioningEnabled(struct FConstraintInstanceAccessor& Accessor);
	static void GetOrientationDriveSLERP(struct FConstraintInstanceAccessor& Accessor, bool* bOutEnableSLERP);
	static void GetOrientationDriveTwistAndSwing(struct FConstraintInstanceAccessor& Accessor, bool* bOutEnableTwistDrive, bool* bOutEnableSwingDrive);
	static bool GetParentDominates(struct FConstraintInstanceAccessor& Accessor);
	static void GetProjectionParams(struct FConstraintInstanceAccessor& Accessor, bool* bEnableProjection, float* ProjectionLinearAlpha, float* ProjectionAngularAlpha);
	static void SetAngularBreakable(struct FConstraintInstanceAccessor& Accessor, bool bAngularBreakable, float AngularBreakThreshold);
	static void SetAngularDriveMode(struct FConstraintInstanceAccessor& Accessor, EAngularDriveMode DriveMode);
	static void SetAngularDriveParams(struct FConstraintInstanceAccessor& Accessor, float PositionStrength, float VelocityStrength, float InForceLimit);
	static void SetAngularLimits(struct FConstraintInstanceAccessor& Accessor, EAngularConstraintMotion Swing1MotionType, float Swing1LimitAngle, EAngularConstraintMotion Swing2MotionType, float Swing2LimitAngle, EAngularConstraintMotion TwistMotionType, float TwistLimitAngle);
	static void SetAngularOrientationTarget(struct FConstraintInstanceAccessor& Accessor, const struct FRotator& InPosTarget);
	static void SetAngularPlasticity(struct FConstraintInstanceAccessor& Accessor, bool bAngularPlasticity, float AngularPlasticityThreshold);
	static void SetAngularSoftSwingLimitParams(struct FConstraintInstanceAccessor& Accessor, bool bSoftSwingLimit, float SwingLimitStiffness, float SwingLimitDamping, float SwingLimitRestitution, float SwingLimitContactDistance);
	static void SetAngularSoftTwistLimitParams(struct FConstraintInstanceAccessor& Accessor, bool bSoftTwistLimit, float TwistLimitStiffness, float TwistLimitDamping, float TwistLimitRestitution, float TwistLimitContactDistance);
	static void SetAngularVelocityDriveSLERP(struct FConstraintInstanceAccessor& Accessor, bool bEnableSLERP);
	static void SetAngularVelocityDriveTwistAndSwing(struct FConstraintInstanceAccessor& Accessor, bool bEnableTwistDrive, bool bEnableSwingDrive);
	static void SetAngularVelocityTarget(struct FConstraintInstanceAccessor& Accessor, const struct FVector& InVelTarget);
	static void SetContactTransferScale(struct FConstraintInstanceAccessor& Accessor, float ContactTransferScale);
	static void SetDisableCollision(struct FConstraintInstanceAccessor& Accessor, bool bDisableCollision);
	static void SetLinearBreakable(struct FConstraintInstanceAccessor& Accessor, bool bLinearBreakable, float LinearBreakThreshold);
	static void SetLinearDriveParams(struct FConstraintInstanceAccessor& Accessor, float PositionStrength, float VelocityStrength, float InForceLimit);
	static void SetLinearLimits(struct FConstraintInstanceAccessor& Accessor, ELinearConstraintMotion XMotion, ELinearConstraintMotion YMotion, ELinearConstraintMotion ZMotion, float Limit);
	static void SetLinearPlasticity(struct FConstraintInstanceAccessor& Accessor, bool bLinearPlasticity, float LinearPlasticityThreshold, EConstraintPlasticityType PlasticityType);
	static void SetLinearPositionDrive(struct FConstraintInstanceAccessor& Accessor, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	static void SetLinearPositionTarget(struct FConstraintInstanceAccessor& Accessor, const struct FVector& InPosTarget);
	static void SetLinearSoftLimitParams(struct FConstraintInstanceAccessor& Accessor, bool bSoftLinearLimit, float LinearLimitStiffness, float LinearLimitDamping, float LinearLimitRestitution, float LinearLimitContactDistance);
	static void SetLinearVelocityDrive(struct FConstraintInstanceAccessor& Accessor, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	static void SetLinearVelocityTarget(struct FConstraintInstanceAccessor& Accessor, const struct FVector& InVelTarget);
	static void SetMassConditioningEnabled(struct FConstraintInstanceAccessor& Accessor, bool bEnableMassConditioning);
	static void SetOrientationDriveSLERP(struct FConstraintInstanceAccessor& Accessor, bool bEnableSLERP);
	static void SetOrientationDriveTwistAndSwing(struct FConstraintInstanceAccessor& Accessor, bool bEnableTwistDrive, bool bEnableSwingDrive);
	static void SetParentDominates(struct FConstraintInstanceAccessor& Accessor, bool bParentDominates);
	static void SetProjectionParams(struct FConstraintInstanceAccessor& Accessor, bool bEnableProjection, float ProjectionLinearAlpha, float ProjectionAngularAlpha);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ConstraintInstanceBlueprintLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ConstraintInstanceBlueprintLibrary")
	}
	static class UConstraintInstanceBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConstraintInstanceBlueprintLibrary>();
	}
};
DUMPER7_ASSERTS_UConstraintInstanceBlueprintLibrary;

// Class Engine.NetworkPhysicsComponent
// 0x00B0 (0x0150 - 0x00A0)
class UNetworkPhysicsComponent final : public UActorComponent
{
public:
	TArray<uint8>                                 ReplicatedInputs;                                  // 0x00A0(0x0010)(Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<uint8>                                 ReplicatedStates;                                  // 0x00B0(0x0010)(Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_C0[0x90];                                      // 0x00C0(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_SetReplicatedInputs();
	void OnRep_SetReplicatedStates();
	void ServerReceiveInputsDatas(const TArray<uint8>& ClientInputs);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NetworkPhysicsComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NetworkPhysicsComponent")
	}
	static class UNetworkPhysicsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetworkPhysicsComponent>();
	}
};
DUMPER7_ASSERTS_UNetworkPhysicsComponent;

// Class Engine.PhysicalAnimationComponent
// 0x0040 (0x00E0 - 0x00A0)
class UPhysicalAnimationComponent final : public UActorComponent
{
public:
	float                                         StrengthMultiplyer;                                // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x00A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B0[0x30];                                      // 0x00B0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyPhysicalAnimationProfileBelow(class FName BodyName, class FName ProfileName, bool bIncludeSelf, bool bClearNotFound);
	void ApplyPhysicalAnimationSettings(class FName BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData);
	void ApplyPhysicalAnimationSettingsBelow(class FName BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf);
	void SetSkeletalMeshComponent(class USkeletalMeshComponent* InSkeletalMeshComponent);
	void SetStrengthMultiplyer(float InStrengthMultiplyer);

	struct FTransform GetBodyTargetTransform(class FName BodyName) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PhysicalAnimationComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PhysicalAnimationComponent")
	}
	static class UPhysicalAnimationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicalAnimationComponent>();
	}
};
DUMPER7_ASSERTS_UPhysicalAnimationComponent;

// Class Engine.PhysicalMaterialMask
// 0x0010 (0x0038 - 0x0028)
class UPhysicalMaterialMask final : public UObject
{
public:
	int32                                         UVChannelIndex;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressX;                                          // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressY;                                          // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0xA];                                       // 0x002E(0x000A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PhysicalMaterialMask")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PhysicalMaterialMask")
	}
	static class UPhysicalMaterialMask* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicalMaterialMask>();
	}
};
DUMPER7_ASSERTS_UPhysicalMaterialMask;

// Class Engine.SkeletalBodySetup
// 0x0018 (0x0318 - 0x0300)
class USkeletalBodySetup final : public UBodySetup
{
public:
	bool                                          bSkipScaleFromAnimation;                           // 0x0300(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPhysicalAnimationProfile>      PhysicalAnimationData;                             // 0x0308(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkeletalBodySetup")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkeletalBodySetup")
	}
	static class USkeletalBodySetup* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkeletalBodySetup>();
	}
};
DUMPER7_ASSERTS_USkeletalBodySetup;

// Class Engine.PhysicsCollisionHandler
// 0x0018 (0x0040 - 0x0028)
class UPhysicsCollisionHandler final : public UObject
{
public:
	float                                         ImpactThreshold;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpactReFireDelay;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             DefaultImpactSound;                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastImpactSoundTime;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PhysicsCollisionHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PhysicsCollisionHandler")
	}
	static class UPhysicsCollisionHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsCollisionHandler>();
	}
};
DUMPER7_ASSERTS_UPhysicsCollisionHandler;

// Class Engine.PhysicsConstraintActor
// 0x0020 (0x02B8 - 0x0298)
class APhysicsConstraintActor final : public ARigidBodyBase
{
public:
	class UPhysicsConstraintComponent*            ConstraintComp;                                    // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 ConstraintActor1;                                  // 0x02A0(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ConstraintActor2;                                  // 0x02A8(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDisableCollision : 1;                             // 0x02B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PhysicsConstraintActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PhysicsConstraintActor")
	}
	static class APhysicsConstraintActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APhysicsConstraintActor>();
	}
};
DUMPER7_ASSERTS_APhysicsConstraintActor;

// Class Engine.PhysicsConstraintTemplate
// 0x03E8 (0x0410 - 0x0028)
class UPhysicsConstraintTemplate final : public UObject
{
public:
	struct FConstraintInstance                    DefaultInstance;                                   // 0x0028(0x0278)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FPhysicsConstraintProfileHandle> ProfileHandles;                                   // 0x02A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FConstraintProfileProperties           DefaultProfile;                                    // 0x02B0(0x0160)(Transient, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PhysicsConstraintTemplate")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PhysicsConstraintTemplate")
	}
	static class UPhysicsConstraintTemplate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsConstraintTemplate>();
	}
};
DUMPER7_ASSERTS_UPhysicsConstraintTemplate;

// Class Engine.PhysicsHandleComponent
// 0x0440 (0x04E0 - 0x00A0)
class alignas(0x10) UPhysicsHandleComponent final : public UActorComponent
{
public:
	class UPrimitiveComponent*                    GrabbedComponent;                                  // 0x00A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         BitPad_B0_0 : 1;                                   // 0x00B0(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bSoftAngularConstraint : 1;                        // 0x00B0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSoftLinearConstraint : 1;                         // 0x00B0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInterpolateTarget : 1;                            // 0x00B0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LinearDamping;                                     // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearStiffness;                                   // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDamping;                                    // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularStiffness;                                  // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0xCC];                                      // 0x00C4(0x00CC)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpolationSpeed;                                // 0x0190(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194[0x34C];                                    // 0x0194(0x034C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GrabComponent(class UPrimitiveComponent* Component, class FName InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation);
	void GrabComponentAtLocation(class UPrimitiveComponent* Component, class FName InBoneName, const struct FVector& GrabLocation);
	void GrabComponentAtLocationWithRotation(class UPrimitiveComponent* Component, class FName InBoneName, const struct FVector& Location, const struct FRotator& Rotation);
	void ReleaseComponent();
	void SetAngularDamping(float NewAngularDamping);
	void SetAngularStiffness(float NewAngularStiffness);
	void SetInterpolationSpeed(float NewInterpolationSpeed);
	void SetLinearDamping(float NewLinearDamping);
	void SetLinearStiffness(float NewLinearStiffness);
	void SetTargetLocation(const struct FVector& NewLocation);
	void SetTargetLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetTargetRotation(const struct FRotator& NewRotation);

	class UPrimitiveComponent* GetGrabbedComponent() const;
	void GetTargetLocationAndRotation(struct FVector* TargetLocation, struct FRotator* TargetRotation) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PhysicsHandleComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PhysicsHandleComponent")
	}
	static class UPhysicsHandleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsHandleComponent>();
	}
};
DUMPER7_ASSERTS_UPhysicsHandleComponent;

// Class Engine.PhysicsSettings
// 0x0110 (0x01F0 - 0x00E0)
class UPhysicsSettings final : public UPhysicsSettingsCore
{
public:
	struct FPhysicsPredictionSettings             PhysicsPrediction;                                 // 0x00E0(0x000C)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigidBodyErrorCorrection              PhysicErrorCorrection;                             // 0x00EC(0x0034)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	ESettingsLockedAxis                           LockedAxis;                                        // 0x0120(0x0001)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESettingsDOF                                  DefaultDegreesOfFreedom;                           // 0x0121(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuppressFaceRemapTable;                           // 0x0122(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportUVFromHitResults;                          // 0x0123(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableActiveActors;                              // 0x0124(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableKinematicStaticPairs;                      // 0x0125(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableKinematicKinematicPairs;                   // 0x0126(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableCCD;                                       // 0x0127(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimPhysicsMinDeltaTime;                           // 0x0128(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimulateAnimPhysicsAfterReset;                    // 0x012C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinPhysicsDeltaTime;                               // 0x0130(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPhysicsDeltaTime;                               // 0x0134(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubstepping;                                      // 0x0138(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubsteppingAsync;                                 // 0x0139(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTickPhysicsAsync;                                 // 0x013A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13B[0x1];                                      // 0x013B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AsyncFixedTimeStepSize;                            // 0x013C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSubstepDeltaTime;                               // 0x0140(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSubsteps;                                       // 0x0144(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SyncSceneSmoothingFactor;                          // 0x0148(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialAverageFrameRate;                           // 0x014C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhysXTreeRebuildRate;                              // 0x0150(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPhysicalSurfaceName>           PhysicalSurfaces;                                  // 0x0158(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FBroadphaseSettings                    DefaultBroadphaseSettings;                         // 0x0168(0x0080)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinDeltaVelocityForHitEvents;                      // 0x01E8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChaosPhysicsSettings                  ChaosSettings;                                     // 0x01EC(0x0003)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF[0x1];                                      // 0x01EF(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetPhysicsHistoryCount() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PhysicsSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PhysicsSettings")
	}
	static class UPhysicsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsSettings>();
	}
};
DUMPER7_ASSERTS_UPhysicsSettings;

// Class Engine.RadialForceComponent
// 0x0030 (0x02D0 - 0x02A0)
class URadialForceComponent final : public USceneComponent
{
public:
	float                                         Radius;                                            // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERadialImpulseFalloff                         Falloff;                                           // 0x02A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ImpulseStrength;                                   // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bImpulseVelChange : 1;                             // 0x02AC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreOwningActor : 1;                            // 0x02AC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForceStrength;                                     // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestructibleDamage;                                // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypesToAffect;                               // 0x02B8(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C8[0x8];                                      // 0x02C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddObjectTypeToAffect(EObjectTypeQuery ObjectType);
	void FireImpulse();
	void RemoveObjectTypeToAffect(EObjectTypeQuery ObjectType);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RadialForceComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RadialForceComponent")
	}
	static class URadialForceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URadialForceComponent>();
	}
};
DUMPER7_ASSERTS_URadialForceComponent;

// Class Engine.PhysicsFieldComponent
// 0x00E0 (0x0380 - 0x02A0)
class UPhysicsFieldComponent final : public USceneComponent
{
public:
	uint8                                         Pad_2A0[0xE0];                                     // 0x02A0(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PhysicsFieldComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PhysicsFieldComponent")
	}
	static class UPhysicsFieldComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsFieldComponent>();
	}
};
DUMPER7_ASSERTS_UPhysicsFieldComponent;

// Class Engine.PhysicsFieldStatics
// 0x0000 (0x0028 - 0x0028)
class UPhysicsFieldStatics final : public UBlueprintFunctionLibrary
{
public:
	static int32 EvalPhysicsIntegerField(const class UObject* WorldContextObject, const struct FVector& WorldPosition, const EFieldIntegerType IntegerType);
	static float EvalPhysicsScalarField(const class UObject* WorldContextObject, const struct FVector& WorldPosition, const EFieldScalarType ScalarType);
	static struct FVector EvalPhysicsVectorField(const class UObject* WorldContextObject, const struct FVector& WorldPosition, const EFieldVectorType VectorType);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PhysicsFieldStatics")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PhysicsFieldStatics")
	}
	static class UPhysicsFieldStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsFieldStatics>();
	}
};
DUMPER7_ASSERTS_UPhysicsFieldStatics;

// Class Engine.PlayerStartPIE
// 0x0000 (0x02C8 - 0x02C8)
class APlayerStartPIE final : public APlayerStart
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlayerStartPIE")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlayerStartPIE")
	}
	static class APlayerStartPIE* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerStartPIE>();
	}
};
DUMPER7_ASSERTS_APlayerStartPIE;

// Class Engine.PlayerState
// 0x00B8 (0x0350 - 0x0298)
class APlayerState : public AInfo
{
public:
	float                                         Score;                                             // 0x0298(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x029C(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CompressedPing;                                    // 0x02A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A1[0x1];                                      // 0x02A1(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bShouldUpdateReplicatedPing : 1;                   // 0x02A2(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bIsSpectator : 1;                                  // 0x02A2(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOnlySpectator : 1;                                // 0x02A2(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsABot : 1;                                       // 0x02A2(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_2A2_4 : 1;                                  // 0x02A2(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bIsInactive : 1;                                   // 0x02A2(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFromPreviousLevel : 1;                            // 0x02A2(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2A3[0x1];                                      // 0x02A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartTime;                                         // 0x02A4(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULocalMessage>              EngineMessageClass;                                // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B0[0x8];                                      // 0x02B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SavedNetworkAddress;                               // 0x02B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       UniqueID;                                          // 0x02C8(0x0030)(Net, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F8[0x8];                                      // 0x02F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn)> OnPawnSet; // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class APawn*                                  PawnPrivate;                                       // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_318[0x18];                                     // 0x0318(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerNamePrivate;                                 // 0x0330(0x0010)(Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_340[0x10];                                     // 0x0340(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPawnPrivateDestroyed(class AActor* InActor);
	void OnRep_bIsInactive();
	void OnRep_PlayerId();
	void OnRep_PlayerName();
	void OnRep_Score();
	void OnRep_UniqueId();
	void ReceiveCopyProperties(class APlayerState* NewPlayerState);
	void ReceiveOverrideWith(class APlayerState* OldPlayerState);

	struct FUniqueNetIdRepl BP_GetUniqueId() const;
	class FString BP_GetUniqueIdString() const;
	uint8 GetCompressedPing() const;
	class APawn* GetPawn() const;
	float GetPingInMilliseconds() const;
	class APlayerController* GetPlayerController() const;
	int32 GetPlayerId() const;
	class FString GetPlayerName() const;
	float GetScore() const;
	bool IsABot() const;
	bool IsOnlyASpectator() const;
	bool IsSpectator() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlayerState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlayerState")
	}
	static class APlayerState* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerState>();
	}
};
DUMPER7_ASSERTS_APlayerState;

// Class Engine.PostProcessVolume
// 0x0700 (0x09D0 - 0x02D0)
class APostProcessVolume final : public AVolume
{
public:
	uint8                                         Pad_2D0[0x10];                                     // 0x02D0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   Settings;                                          // 0x02E0(0x06E0)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x09C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendRadius;                                       // 0x09C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x09C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnabled : 1;                                      // 0x09CC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUnbound : 1;                                      // 0x09CC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9CD[0x3];                                      // 0x09CD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddOrUpdateBlendable(TScriptInterface<class IBlendableInterface> InBlendableObject, float InWeight);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PostProcessVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PostProcessVolume")
	}
	static class APostProcessVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<APostProcessVolume>();
	}
};
DUMPER7_ASSERTS_APostProcessVolume;

// Class Engine.PrimaryAssetLabel
// 0x0038 (0x0068 - 0x0030)
class UPrimaryAssetLabel final : public UPrimaryDataAsset
{
public:
	struct FPrimaryAssetRules                     Rules;                                             // 0x0030(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bLabelAssetsInMyDirectory : 1;                     // 0x003C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsRuntimeLabel : 1;                               // 0x003C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIncludeRedirectors : 1;                           // 0x003C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UObject>>         ExplicitAssets;                                    // 0x0040(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           ExplicitBlueprints;                                // 0x0050(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FCollectionReference                   AssetCollection;                                   // 0x0060(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PrimaryAssetLabel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PrimaryAssetLabel")
	}
	static class UPrimaryAssetLabel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetLabel>();
	}
};
DUMPER7_ASSERTS_UPrimaryAssetLabel;

// Class Engine.LevelStreamingProfilingSubsystem
// 0x0090 (0x00C0 - 0x0030)
class ULevelStreamingProfilingSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x90];                                      // 0x0030(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelStreamingProfilingSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelStreamingProfilingSubsystem")
	}
	static class ULevelStreamingProfilingSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelStreamingProfilingSubsystem>();
	}
};
DUMPER7_ASSERTS_ULevelStreamingProfilingSubsystem;

// Class Engine.RectLight
// 0x0008 (0x02B0 - 0x02A8)
class ARectLight final : public ALight
{
public:
	class URectLightComponent*                    RectLightComponent;                                // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RectLight")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RectLight")
	}
	static class ARectLight* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARectLight>();
	}
};
DUMPER7_ASSERTS_ARectLight;

// Class Engine.RendererSettings
// 0x01C0 (0x01F8 - 0x0038)
class URendererSettings final : public UDeveloperSettings
{
public:
	EMobileShadingPath                            MobileShadingPath;                                 // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bMobileSupportDeferredOnOpenGL : 1;                // 0x003C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMobileSupportGPUScene : 1;                        // 0x003C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EMobileAntiAliasingMethod                     MobileAntiAliasing;                                // 0x0040(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMobileFloatPrecisionMode                     MobileFloatPrecisionMode;                          // 0x0041(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bMobileAllowDitheredLODTransition : 1;             // 0x0044(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMobileVirtualTextures : 1;                        // 0x0044(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDiscardUnusedQualityLevels : 1;                   // 0x0044(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EShaderCompressionFormat                      ShaderCompressionFormat;                           // 0x0048(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bOcclusionCulling : 1;                             // 0x004C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinScreenRadiusForLights;                          // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinScreenRadiusForEarlyZPass;                      // 0x0054(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinScreenRadiusForCSMdepth;                        // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPrecomputedVisibilityWarning : 1;                 // 0x005C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTextureStreaming : 1;                             // 0x005C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseDXT5NormalMaps : 1;                            // 0x005C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bVirtualTextures : 1;                              // 0x005C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bVirtualTextureEnableAutoImport : 1;               // 0x005C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bVirtualTexturedLightmaps : 1;                     // 0x005C(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bVirtualTextureAnisotropicFiltering : 1;           // 0x005C(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableVirtualTextureOpacityMask : 1;              // 0x005C(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        VirtualTextureTileSize;                            // 0x0060(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        VirtualTextureTileBorderSize;                      // 0x0064(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        VirtualTextureFeedbackFactor;                      // 0x0068(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWorkingColorSpace                            WorkingColorSpaceChoice;                           // 0x006C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              RedChromaticityCoordinate;                         // 0x0070(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GreenChromaticityCoordinate;                       // 0x0080(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BlueChromaticityCoordinate;                        // 0x0090(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WhiteChromaticityCoordinate;                       // 0x00A0(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bClearCoatEnableSecondNormal : 1;                  // 0x00B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EDynamicGlobalIlluminationMethod              DynamicGlobalIllumination;                         // 0x00B4(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReflectionMethod                             Reflections;                                       // 0x00B5(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReflectionCaptureResolution;                       // 0x00B8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReflectionEnvironmentLightmapMixBasedOnRoughness : 1; // 0x00BC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseHardwareRayTracingForLumen : 1;                // 0x00BC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ELumenRayLightingMode                         LumenRayLightingMode;                              // 0x00C0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         LumenFrontLayerTranslucencyReflections : 1;        // 0x00C4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ELumenSoftwareTracingMode                     LumenSoftwareTracingMode;                          // 0x00C8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShadowMapMethod                              ShadowMapMethod;                                   // 0x00C9(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bEnableRayTracing : 1;                             // 0x00CC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableRayTracingShadows : 1;                      // 0x00CC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableRayTracingSkylight : 1;                     // 0x00CC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableRayTracingTextureLOD : 1;                   // 0x00CC(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnablePathTracing : 1;                            // 0x00CC(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateMeshDistanceFields : 1;                   // 0x00CC(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceFieldVoxelDensity;                         // 0x00D0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bNanite : 1;                                       // 0x00D4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowStaticLighting : 1;                          // 0x00D4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseNormalMapsForStaticLighting : 1;               // 0x00D4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForwardShading : 1;                               // 0x00D4(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bVertexFoggingForOpaque : 1;                       // 0x00D4(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSeparateTranslucency : 1;                         // 0x00D4(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ETranslucentSortPolicy                        TranslucentSortPolicy;                             // 0x00D8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TranslucentSortAxis;                               // 0x00E0(0x0018)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFixedFoveationLevels                         FoveationLevel;                                    // 0x00F8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bDynamicFoveation : 1;                             // 0x00FC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ECustomDepthStencil                           CustomDepthStencil;                                // 0x0100(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bCustomDepthTaaJitter : 1;                         // 0x0104(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EAlphaChannelMode                             bEnableAlphaChannelInPostProcessing;               // 0x0108(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bDefaultFeatureBloom : 1;                          // 0x010C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDefaultFeatureAmbientOcclusion : 1;               // 0x010C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDefaultFeatureAmbientOcclusionStaticFraction : 1; // 0x010C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDefaultFeatureAutoExposure : 1;                   // 0x010C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EAutoExposureMethodUI                         DefaultFeatureAutoExposure;                        // 0x0110(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultFeatureAutoExposureBias;                    // 0x0114(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bExtendDefaultLuminanceRangeInAutoExposureSettings : 1; // 0x0118(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultFeatureLocalExposureHighlightContrastScale; // 0x011C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultFeatureLocalExposureShadowContrastScale;    // 0x0120(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDefaultFeatureMotionBlur : 1;                     // 0x0124(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDefaultFeatureLensFlare : 1;                      // 0x0124(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTemporalUpsampling : 1;                           // 0x0124(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EAntiAliasingMethod                           DefaultFeatureAntiAliasing;                        // 0x0128(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECompositingSampleCount                       MSAASampleCount;                                   // 0x0129(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELightUnits                                   DefaultLightUnits;                                 // 0x012A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDefaultBackBufferPixelFormat                 DefaultBackBufferPixelFormat;                      // 0x012B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultManualScreenPercentage;                     // 0x012C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScreenPercentageMode                         DefaultScreenPercentageDesktopMode;                // 0x0130(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScreenPercentageMode                         DefaultScreenPercentageMobileMode;                 // 0x0134(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScreenPercentageMode                         DefaultScreenPercentageVRMode;                     // 0x0138(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScreenPercentageMode                         DefaultScreenPercentagePathTracerMode;             // 0x013C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRenderUnbuiltPreviewShadowsInGame : 1;            // 0x0140(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStencilForLODDither : 1;                          // 0x0140(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EEarlyZPass                                   EarlyZPass;                                        // 0x0144(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bEarlyZPassOnlyMaterialMasking : 1;                // 0x0148(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableCSMCaching : 1;                             // 0x0148(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDBuffer : 1;                                      // 0x0148(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EClearSceneOptions                            ClearSceneMethod;                                  // 0x014C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVelocityOutputPass                           VelocityPass;                                      // 0x014D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVertexDeformationOutputsVelocity             VertexDeformationOutputsVelocity;                  // 0x014E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F[0x1];                                      // 0x014F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bSelectiveBasePassOutputs : 1;                     // 0x0150(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDefaultParticleCutouts : 1;                       // 0x0150(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GPUSimulationTextureSizeX;                         // 0x0154(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GPUSimulationTextureSizeY;                         // 0x0158(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bGlobalClipPlane : 1;                              // 0x015C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EGBufferFormat                                GBufferFormat;                                     // 0x0160(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUseGPUMorphTargets : 1;                           // 0x0164(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNvidiaAftermathEnabled : 1;                       // 0x0164(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMultiView : 1;                                    // 0x0164(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMobilePostProcessing : 1;                         // 0x0164(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMobileMultiView : 1;                              // 0x0164(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMobileUseHWsRGBEncoding : 1;                      // 0x0164(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRoundRobinOcclusion : 1;                          // 0x0164(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMeshStreaming : 1;                                // 0x0164(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableHeterogeneousVolumes : 1;                   // 0x0165(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_166[0x2];                                      // 0x0166(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WireframeCullThreshold;                            // 0x0168(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bSupportStationarySkylight : 1;                    // 0x016C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportLowQualityLightmaps : 1;                   // 0x016C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportPointLightWholeSceneShadows : 1;           // 0x016C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportSkyAtmosphere : 1;                         // 0x016C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportSkyAtmosphereAffectsHeightFog : 1;         // 0x016C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportCloudShadowOnForwardLitTranslucent : 1;    // 0x016C(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportTranslucentPerObjectShadow : 1;            // 0x016C(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportCloudShadowOnSingleLayerWater : 1;         // 0x016C(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableStrata : 1;                                 // 0x016D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         StrataOpaqueMaterialRoughRefraction : 1;           // 0x016D(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         StrataDebugAdvancedVisualizationShaders : 1;       // 0x016D(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMaterialRoughDiffuse : 1;                         // 0x016D(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMaterialEnergyConservation : 1;                   // 0x016D(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOrderedIndependentTransparencyEnable : 1;         // 0x016D(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportSkinCacheShaders : 1;                      // 0x016D(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSkipCompilingGPUSkinVF : 1;                       // 0x016D(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_16E[0x2];                                      // 0x016E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	ESkinCacheDefaultBehavior                     DefaultSkinCacheBehavior;                          // 0x0170(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkinCacheSceneMemoryLimitInMB;                     // 0x0174(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bMobileEnableStaticAndCSMShadowReceivers : 1;      // 0x0178(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMobileEnableMovableLightCSMShaderCulling : 1;     // 0x0178(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMobileForwardEnableLocalLights : 1;               // 0x0178(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMobileForwardEnableClusteredReflections : 1;      // 0x0178(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMobileEnableNoPrecomputedLightingCSMShader : 1;   // 0x0178(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMobileAllowDistanceFieldShadows : 1;              // 0x0178(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMobileAllowMovableDirectionalLights : 1;          // 0x0178(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMobileAllowMovableSpotlightShadows : 1;           // 0x0178(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupport16BitBoneIndex : 1;                        // 0x0179(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGPUSkinLimit2BoneInfluences : 1;                  // 0x0179(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportDepthOnlyIndexBuffers : 1;                 // 0x0179(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportReversedIndexBuffers : 1;                  // 0x0179(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMobileAmbientOcclusion : 1;                       // 0x0179(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseUnlimitedBoneInfluences : 1;                   // 0x0179(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_17A[0x2];                                      // 0x017A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnlimitedBonInfluencesThreshold;                   // 0x017C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerPlatformInt                        DefaultBoneInfluenceLimit;                         // 0x0180(0x0004)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerPlatformInt                        MaxSkinBones;                                      // 0x0184(0x0004)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	EMobilePlanarReflectionMode                   MobilePlanarReflectionMode;                        // 0x0188(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bMobileSupportsGen4TAA : 1;                        // 0x018C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_18D[0x3];                                      // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPerPlatformBool                       bStreamSkeletalMeshLODs;                           // 0x0190(0x0001)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerPlatformBool                       bDiscardSkeletalMeshOptionalLODs;                  // 0x0191(0x0001)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        VisualizeCalibrationColorMaterialPath;             // 0x0198(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        VisualizeCalibrationCustomMaterialPath;            // 0x01B8(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        VisualizeCalibrationGrayscaleMaterialPath;         // 0x01D8(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RendererSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RendererSettings")
	}
	static class URendererSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<URendererSettings>();
	}
};
DUMPER7_ASSERTS_URendererSettings;

// Class Engine.SpecularProfile
// 0x0430 (0x0458 - 0x0028)
class USpecularProfile final : public UObject
{
public:
	struct FSpecularProfileStruct                 Settings;                                          // 0x0028(0x0420)(Edit, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0448(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SpecularProfile")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SpecularProfile")
	}
	static class USpecularProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecularProfile>();
	}
};
DUMPER7_ASSERTS_USpecularProfile;

// Class Engine.SubsurfaceProfile
// 0x00A0 (0x00C8 - 0x0028)
class USubsurfaceProfile final : public UObject
{
public:
	struct FSubsurfaceProfileStruct               Settings;                                          // 0x0028(0x009C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SubsurfaceProfile")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SubsurfaceProfile")
	}
	static class USubsurfaceProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubsurfaceProfile>();
	}
};
DUMPER7_ASSERTS_USubsurfaceProfile;

// Class Engine.ReplayNetConnection
// 0x0A88 (0x2880 - 0x1DF8)
class UReplayNetConnection final : public UNetConnection
{
public:
	uint8                                         Pad_1DF8[0xA88];                                   // 0x1DF8(0x0A88)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ReplayNetConnection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ReplayNetConnection")
	}
	static class UReplayNetConnection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReplayNetConnection>();
	}
};
DUMPER7_ASSERTS_UReplayNetConnection;

// Class Engine.ReplaySubsystem
// 0x0010 (0x0040 - 0x0030)
class UReplaySubsystem final : public UGameInstanceSubsystem
{
public:
	bool                                          bLoadDefaultMapOnStop;                             // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RequestCheckpoint();

	class FString GetActiveReplayName() const;
	float GetReplayCurrentTime() const;
	bool IsPlaying() const;
	bool IsRecording() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ReplaySubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ReplaySubsystem")
	}
	static class UReplaySubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReplaySubsystem>();
	}
};
DUMPER7_ASSERTS_UReplaySubsystem;

// Class Engine.ReverbEffect
// 0x0038 (0x0060 - 0x0028)
class UReverbEffect : public UObject
{
public:
	bool                                          bBypassEarlyReflections;                           // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReflectionsDelay;                                  // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GainHF;                                            // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionsGain;                                   // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBypassLateReflections;                            // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LateDelay;                                         // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecayTime;                                         // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Density;                                           // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Diffusion;                                         // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirAbsorptionGainHF;                               // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecayHFRatio;                                      // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateGain;                                          // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gain;                                              // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoomRolloffFactor;                                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ReverbEffect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ReverbEffect")
	}
	static class UReverbEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReverbEffect>();
	}
};
DUMPER7_ASSERTS_UReverbEffect;

// Class Engine.RuntimeOptionsBase
// 0x0010 (0x0038 - 0x0028)
class URuntimeOptionsBase final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RuntimeOptionsBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RuntimeOptionsBase")
	}
	static class URuntimeOptionsBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<URuntimeOptionsBase>();
	}
};
DUMPER7_ASSERTS_URuntimeOptionsBase;

// Class Engine.SimpleConstructionScript
// 0x0088 (0x00B0 - 0x0028)
class USimpleConstructionScript final : public UObject
{
public:
	TArray<class USCS_Node*>                      RootNodes;                                         // 0x0028(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class USCS_Node*>                      AllNodes;                                          // 0x0038(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	class USCS_Node*                              DefaultSceneRootNode;                              // 0x0048(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_50[0x60];                                      // 0x0050(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SimpleConstructionScript")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SimpleConstructionScript")
	}
	static class USimpleConstructionScript* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleConstructionScript>();
	}
};
DUMPER7_ASSERTS_USimpleConstructionScript;

// Class Engine.SkinnedAsset
// 0x0008 (0x00D0 - 0x00C8)
class USkinnedAsset : public UStreamableRenderAsset
{
public:
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class USkeletalMeshSocket* FindSocket(class FName InSocketName) const;
	class USkeletalMeshSocket* FindSocketInfo(class FName InSocketName, struct FTransform* OutTransform, int32* OutBoneIndex, int32* OutIndex) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkinnedAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkinnedAsset")
	}
	static class USkinnedAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkinnedAsset>();
	}
};
DUMPER7_ASSERTS_USkinnedAsset;

// Class Engine.SkeletalMesh
// 0x0410 (0x04E0 - 0x00D0)
class USkeletalMesh final : public USkinnedAsset
{
public:
	uint8                                         Pad_D0[0x20];                                      // 0x00D0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeleton*                              Skeleton;                                          // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       ImportedBounds;                                    // 0x00F8(0x0038)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FBoxSphereBounds                       ExtendedBounds;                                    // 0x0130(0x0038)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                PositiveBoundsExtension;                           // 0x0168(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                NegativeBoundsExtension;                           // 0x0180(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSkeletalMaterial>              Materials;                                         // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	TArray<struct FSkeletalMeshLODInfo>           LODInfo;                                           // 0x01A8(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B8[0x50];                                     // 0x01B8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPerQualityLevelInt                    MinQualityLevelLOD;                                // 0x0208(0x0068)(Edit, NativeAccessSpecifierPublic)
	struct FPerPlatformInt                        MinLOD;                                            // 0x0270(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerPlatformBool                       DisableBelowMinLodStripping;                       // 0x0274(0x0001)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bUseFullPrecisionUVs : 1;                          // 0x0275(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseHighPrecisionTangentBasis : 1;                 // 0x0275(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasBeenSimplified : 1;                            // 0x0275(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasVertexColors : 1;                              // 0x0275(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_275_4 : 1;                                  // 0x0275(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bEnablePerPolyCollision : 1;                       // 0x0275(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_276[0x2];                                      // 0x0276(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UBodySetup*                             BodySetup;                                         // 0x0278(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                          PhysicsAsset;                                      // 0x0280(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                          ShadowPhysicsAsset;                                // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNodeMappingContainer*>          NodeMappingData;                                   // 0x0290(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         bSupportRayTracing : 1;                            // 0x02A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RayTracingMinLOD;                                  // 0x02A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClothLODBiasMode                             ClothLODBiasMode;                                  // 0x02A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMorphTarget*>                   MorphTargets;                                      // 0x02B0(0x0010)(BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C0[0x178];                                    // 0x02C0(0x0178)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UAnimInstance>              PostProcessAnimBlueprint;                          // 0x0438(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PostProcessAnimBPLODThreshold;                     // 0x0440(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClothingAssetBase*>             MeshClothingAssets;                                // 0x0448(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FSkeletalMeshSamplingInfo              SamplingInfo;                                      // 0x0458(0x0030)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<class UAssetUserData*>                 AssetUserData;                                     // 0x0488(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class USkeletalMeshSocket*>            Sockets;                                           // 0x0498(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A8[0x10];                                     // 0x04A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSkinWeightProfileInfo>         SkinWeightProfiles;                                // 0x04B8(0x0010)(Edit, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UMeshDeformer*                          DefaultMeshDeformer;                               // 0x04C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     OverlayMaterial;                                   // 0x04D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OverlayMaterialMaxDrawDistance;                    // 0x04D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4DC[0x4];                                      // 0x04DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetDefaultAnimatingRig(TSoftObjectPtr<class UObject> InAnimatingRig);
	void SetLODSettings(class USkeletalMeshLODSettings* InLODSettings);
	void SetMaterials(const TArray<struct FSkeletalMaterial>& InMaterials);
	void SetMeshClothingAssets(const TArray<class UClothingAssetBase*>& InMeshClothingAssets);
	void SetMinLODForQualityLevels(const TMap<EPerQualityLevels, int32>& QualityLevelMinimumLODs, int32 Default);
	void SetMorphTargets(const TArray<class UMorphTarget*>& InMorphTargets);
	void SetOverlayMaterial(class UMaterialInterface* NewOverlayMaterial);
	void SetOverlayMaterialMaxDrawDistance(float InMaxDrawDistance);
	void SetSkeleton(class USkeleton* InSkeleton);

	class USkeletalMeshSocket* FindSocketAndIndex(class FName InSocketName, int32* OutIndex) const;
	struct FBoxSphereBounds GetBounds() const;
	TSoftObjectPtr<class UObject> GetDefaultAnimatingRig() const;
	struct FBoxSphereBounds GetImportedBounds() const;
	const class USkeletalMeshLODSettings* GetLODSettings() const;
	const TArray<struct FSkeletalMaterial> GetMaterials() const;
	const TArray<class UClothingAssetBase*> GetMeshClothingAssets() const;
	void GetMinLODForQualityLevels(TMap<EPerQualityLevels, int32>* QualityLevelMinimumLODs, int32* Default) const;
	TArray<class UMorphTarget*> GetMorphTargetsPtrConv() const;
	class UNodeMappingContainer* GetNodeMappingContainer(class UBlueprint* SourceAsset) const;
	const TArray<class UNodeMappingContainer*> GetNodeMappingData() const;
	class UMaterialInterface* GetOverlayMaterial() const;
	float GetOverlayMaterialMaxDrawDistance() const;
	class UPhysicsAsset* GetPhysicsAsset() const;
	class UPhysicsAsset* GetShadowPhysicsAsset() const;
	const class USkeleton* GetSkeleton() const;
	class USkeletalMeshSocket* GetSocketByIndex(int32 Index_0) const;
	bool IsSectionUsingCloth(int32 InSectionIndex, bool bCheckCorrespondingSections) const;
	TArray<class FString> K2_GetAllMorphTargetNames() const;
	int32 NumSockets() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkeletalMesh")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkeletalMesh")
	}
	static class USkeletalMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkeletalMesh>();
	}
};
DUMPER7_ASSERTS_USkeletalMesh;

// Class Engine.SkeletalMeshLODSettings
// 0x0088 (0x00B8 - 0x0030)
class USkeletalMeshLODSettings final : public UDataAsset
{
public:
	struct FPerQualityLevelInt                    MinQualityLevelLOD;                                // 0x0030(0x0068)(Edit, Config, GlobalConfig, Protected, NativeAccessSpecifierProtected)
	struct FPerPlatformInt                        MinLOD;                                            // 0x0098(0x0004)(Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FPerPlatformBool                       DisableBelowMinLodStripping;                       // 0x009C(0x0001)(Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bOverrideLODStreamingSettings;                     // 0x009D(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPerPlatformBool                       bSupportLODStreaming;                              // 0x009E(0x0001)(Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_9F[0x1];                                       // 0x009F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPerPlatformInt                        MaxNumStreamedLODs;                                // 0x00A0(0x0004)(Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FPerPlatformInt                        MaxNumOptionalLODs;                                // 0x00A4(0x0004)(Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSkeletalMeshLODGroupSettings>  LODGroups;                                         // 0x00A8(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkeletalMeshLODSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkeletalMeshLODSettings")
	}
	static class USkeletalMeshLODSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkeletalMeshLODSettings>();
	}
};
DUMPER7_ASSERTS_USkeletalMeshLODSettings;

// Class Engine.SkeletalMeshSimplificationSettings
// 0x0008 (0x0040 - 0x0038)
class USkeletalMeshSimplificationSettings final : public UDeveloperSettings
{
public:
	class FName                                   SkeletalMeshReductionModuleName;                   // 0x0038(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkeletalMeshSimplificationSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkeletalMeshSimplificationSettings")
	}
	static class USkeletalMeshSimplificationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkeletalMeshSimplificationSettings>();
	}
};
DUMPER7_ASSERTS_USkeletalMeshSimplificationSettings;

// Class Engine.ButtonStyleAsset
// 0x03F8 (0x0420 - 0x0028)
class UButtonStyleAsset final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           ButtonStyle;                                       // 0x0030(0x03F0)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ButtonStyleAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ButtonStyleAsset")
	}
	static class UButtonStyleAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UButtonStyleAsset>();
	}
};
DUMPER7_ASSERTS_UButtonStyleAsset;

// Class Engine.SlateBrushAsset
// 0x00D8 (0x0100 - 0x0028)
class USlateBrushAsset final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x0030(0x00D0)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SlateBrushAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SlateBrushAsset")
	}
	static class USlateBrushAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlateBrushAsset>();
	}
};
DUMPER7_ASSERTS_USlateBrushAsset;

// Class Engine.SlateTextureAtlasInterface
// 0x0000 (0x0000 - 0x0000)
class ISlateTextureAtlasInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SlateTextureAtlasInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SlateTextureAtlasInterface")
	}
	static class ISlateTextureAtlasInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISlateTextureAtlasInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ISlateTextureAtlasInterface;

// Class Engine.SoundClass
// 0x01C0 (0x01E8 - 0x0028)
class USoundClass final : public UObject
{
public:
	struct FSoundClassProperties                  Properties;                                        // 0x0028(0x0198)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class USoundClass*>                    ChildClasses;                                      // 0x01C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FPassiveSoundMixModifier>       PassiveSoundMixModifiers;                          // 0x01D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class USoundClass*                            ParentClass;                                       // 0x01E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundClass")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundClass")
	}
	static class USoundClass* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundClass>();
	}
};
DUMPER7_ASSERTS_USoundClass;

// Class Engine.SoundCue
// 0x03F8 (0x0560 - 0x0168)
class USoundCue final : public USoundBase
{
public:
	class USoundNode*                             FirstNode;                                         // 0x0168(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundAttenuationSettings              AttenuationOverrides;                              // 0x0178(0x03D0)(Edit, NativeAccessSpecifierPublic)
	float                                         SubtitlePriority;                                  // 0x0548(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_54C[0x4];                                      // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bPrimeOnLoad : 1;                                  // 0x0550(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideAttenuation : 1;                          // 0x0550(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeFromRandomNodeBranchCulling : 1;           // 0x0550(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasPlayWhenSilent : 1;                            // 0x0550(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_551[0x3];                                      // 0x0551(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CookedQualityIndex;                                // 0x0554(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_558[0x8];                                      // 0x0558(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundCue")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundCue")
	}
	static class USoundCue* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundCue>();
	}
};
DUMPER7_ASSERTS_USoundCue;

// Class Engine.SoundMix
// 0x0068 (0x0090 - 0x0028)
class USoundMix final : public UObject
{
public:
	uint8                                         bApplyEQ : 1;                                      // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EQPriority;                                        // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAudioEQEffect                         EQSettings;                                        // 0x0030(0x0040)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FSoundClassAdjuster>            SoundClassEffects;                                 // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         InitialDelay;                                      // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundMix")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundMix")
	}
	static class USoundMix* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundMix>();
	}
};
DUMPER7_ASSERTS_USoundMix;

// Class Engine.SoundNodeBranch
// 0x0008 (0x0050 - 0x0048)
class USoundNodeBranch final : public USoundNode
{
public:
	class FName                                   BoolParameterName;                                 // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeBranch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeBranch")
	}
	static class USoundNodeBranch* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeBranch>();
	}
};
DUMPER7_ASSERTS_USoundNodeBranch;

// Class Engine.SoundNodeConcatenator
// 0x0010 (0x0058 - 0x0048)
class USoundNodeConcatenator final : public USoundNode
{
public:
	TArray<float>                                 InputVolume;                                       // 0x0048(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeConcatenator")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeConcatenator")
	}
	static class USoundNodeConcatenator* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeConcatenator>();
	}
};
DUMPER7_ASSERTS_USoundNodeConcatenator;

// Class Engine.SoundNodeDelay
// 0x0008 (0x0050 - 0x0048)
class USoundNodeDelay final : public USoundNode
{
public:
	float                                         DelayMin;                                          // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayMax;                                          // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeDelay")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeDelay")
	}
	static class USoundNodeDelay* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeDelay>();
	}
};
DUMPER7_ASSERTS_USoundNodeDelay;

// Class Engine.SoundNodeDistanceCrossFade
// 0x0010 (0x0058 - 0x0048)
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray<struct FDistanceDatum>                 CrossFadeInput;                                    // 0x0048(0x0010)(Edit, ExportObject, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeDistanceCrossFade")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeDistanceCrossFade")
	}
	static class USoundNodeDistanceCrossFade* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeDistanceCrossFade>();
	}
};
DUMPER7_ASSERTS_USoundNodeDistanceCrossFade;

// Class Engine.SoundNodeDoppler
// 0x0010 (0x0058 - 0x0048)
class USoundNodeDoppler final : public USoundNode
{
public:
	float                                         DopplerIntensity;                                  // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSmoothing;                                     // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SmoothingInterpSpeed;                              // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeDoppler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeDoppler")
	}
	static class USoundNodeDoppler* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeDoppler>();
	}
};
DUMPER7_ASSERTS_USoundNodeDoppler;

// Class Engine.SoundNodeEnveloper
// 0x0148 (0x0190 - 0x0048)
class USoundNodeEnveloper final : public USoundNode
{
public:
	float                                         LoopStart;                                         // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopEnd;                                           // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationAfterLoop;                                 // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLoopIndefinitely : 1;                             // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLoop : 1;                                         // 0x0058(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDistributionFloatConstantCurve*        VolumeInterpCurve;                                 // 0x0060(0x0008)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDistributionFloatConstantCurve*        PitchInterpCurve;                                  // 0x0068(0x0008)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     VolumeCurve;                                       // 0x0070(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     PitchCurve;                                        // 0x00F8(0x0088)(Edit, NativeAccessSpecifierPublic)
	float                                         PitchMin;                                          // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMax;                                          // 0x0184(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMin;                                         // 0x0188(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMax;                                         // 0x018C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeEnveloper")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeEnveloper")
	}
	static class USoundNodeEnveloper* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeEnveloper>();
	}
};
DUMPER7_ASSERTS_USoundNodeEnveloper;

// Class Engine.SoundNodeMature
// 0x0000 (0x0048 - 0x0048)
class USoundNodeMature final : public USoundNode
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeMature")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeMature")
	}
	static class USoundNodeMature* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeMature>();
	}
};
DUMPER7_ASSERTS_USoundNodeMature;

// Class Engine.SoundNodeMixer
// 0x0010 (0x0058 - 0x0048)
class USoundNodeMixer final : public USoundNode
{
public:
	TArray<float>                                 InputVolume;                                       // 0x0048(0x0010)(Edit, ExportObject, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeMixer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeMixer")
	}
	static class USoundNodeMixer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeMixer>();
	}
};
DUMPER7_ASSERTS_USoundNodeMixer;

// Class Engine.SoundNodeParamCrossFade
// 0x0008 (0x0060 - 0x0058)
class USoundNodeParamCrossFade final : public USoundNodeDistanceCrossFade
{
public:
	class FName                                   ParamName;                                         // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeParamCrossFade")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeParamCrossFade")
	}
	static class USoundNodeParamCrossFade* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeParamCrossFade>();
	}
};
DUMPER7_ASSERTS_USoundNodeParamCrossFade;

// Class Engine.SoundNodeQualityLevel
// 0x0008 (0x0050 - 0x0048)
class USoundNodeQualityLevel final : public USoundNode
{
public:
	int32                                         CookedQualityLevelIndex;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeQualityLevel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeQualityLevel")
	}
	static class USoundNodeQualityLevel* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeQualityLevel>();
	}
};
DUMPER7_ASSERTS_USoundNodeQualityLevel;

// Class Engine.SoundNodeSwitch
// 0x0008 (0x0050 - 0x0048)
class USoundNodeSwitch final : public USoundNode
{
public:
	class FName                                   IntParameterName;                                  // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeSwitch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeSwitch")
	}
	static class USoundNodeSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeSwitch>();
	}
};
DUMPER7_ASSERTS_USoundNodeSwitch;

// Class Engine.SoundNodeWaveParam
// 0x0008 (0x0050 - 0x0048)
class USoundNodeWaveParam final : public USoundNode
{
public:
	class FName                                   WaveParameterName;                                 // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundNodeWaveParam")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundNodeWaveParam")
	}
	static class USoundNodeWaveParam* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundNodeWaveParam>();
	}
};
DUMPER7_ASSERTS_USoundNodeWaveParam;

// Class Engine.SoundfieldSubmix
// 0x0028 (0x0070 - 0x0048)
class USoundfieldSubmix final : public USoundSubmixWithParentBase
{
public:
	class FName                                   SoundfieldEncodingFormat;                          // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundfieldEncodingSettingsBase*        EncodingSettings;                                  // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundfieldEffectBase*>          SoundfieldEffectChain;                             // 0x0058(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class USoundfieldEncodingSettingsBase> EncodingSettingsClass;                        // 0x0068(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundfieldSubmix")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundfieldSubmix")
	}
	static class USoundfieldSubmix* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundfieldSubmix>();
	}
};
DUMPER7_ASSERTS_USoundfieldSubmix;

// Class Engine.EndpointSubmix
// 0x0018 (0x0058 - 0x0040)
class UEndpointSubmix final : public USoundSubmixBase
{
public:
	class FName                                   EndpointType;                                      // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAudioEndpointSettingsBase> EndpointSettingsClass;                             // 0x0048(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioEndpointSettingsBase*             EndpointSettings;                                  // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EndpointSubmix")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EndpointSubmix")
	}
	static class UEndpointSubmix* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEndpointSubmix>();
	}
};
DUMPER7_ASSERTS_UEndpointSubmix;

// Class Engine.SoundfieldEndpointSubmix
// 0x0038 (0x0078 - 0x0040)
class USoundfieldEndpointSubmix final : public USoundSubmixBase
{
public:
	class FName                                   SoundfieldEndpointType;                            // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAudioEndpointSettingsBase> EndpointSettingsClass;                             // 0x0048(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundfieldEndpointSettingsBase*        EndpointSettings;                                  // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USoundfieldEncodingSettingsBase> EncodingSettingsClass;                        // 0x0058(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundfieldEncodingSettingsBase*        EncodingSettings;                                  // 0x0060(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundfieldEffectBase*>          SoundfieldEffectChain;                             // 0x0068(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SoundfieldEndpointSubmix")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SoundfieldEndpointSubmix")
	}
	static class USoundfieldEndpointSubmix* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundfieldEndpointSubmix>();
	}
};
DUMPER7_ASSERTS_USoundfieldEndpointSubmix;

// Class Engine.SpectatorPawnMovement
// 0x0008 (0x0178 - 0x0170)
class USpectatorPawnMovement final : public UFloatingPawnMovement
{
public:
	uint8                                         bIgnoreTimeDilation : 1;                           // 0x0170(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SpectatorPawnMovement")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SpectatorPawnMovement")
	}
	static class USpectatorPawnMovement* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpectatorPawnMovement>();
	}
};
DUMPER7_ASSERTS_USpectatorPawnMovement;

// Class Engine.WorldPartitionLevelStreamingDynamic
// 0x0020 (0x01C0 - 0x01A0)
class UWorldPartitionLevelStreamingDynamic final : public ULevelStreamingDynamic
{
public:
	bool                                          bShouldBeAlwaysLoaded;                             // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UWorldPartitionRuntimeLevelStreamingCell> StreamingCell;                    // 0x01A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorldPartition*                        OuterWorldPartition;                               // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B8[0x8];                                      // 0x01B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionLevelStreamingDynamic")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionLevelStreamingDynamic")
	}
	static class UWorldPartitionLevelStreamingDynamic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionLevelStreamingDynamic>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionLevelStreamingDynamic;

// Class Engine.SplineMeshActor
// 0x0008 (0x02A0 - 0x0298)
class ASplineMeshActor final : public AActor
{
public:
	class USplineMeshComponent*                   SplineMeshComponent;                               // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SplineMeshActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SplineMeshActor")
	}
	static class ASplineMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASplineMeshActor>();
	}
};
DUMPER7_ASSERTS_ASplineMeshActor;

// Class Engine.StaticMesh
// 0x0188 (0x0250 - 0x00C8)
class UStaticMesh final : public UStreamableRenderAsset
{
public:
	uint8                                         Pad_C8[0x20];                                      // 0x00C8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPerQualityLevelInt                    MinQualityLevelLOD;                                // 0x00E8(0x0068)(NativeAccessSpecifierPublic)
	struct FPerPlatformInt                        MinLOD;                                            // 0x0150(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStaticMaterial>                StaticMaterials;                                   // 0x0158(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         LightmapUVDensity;                                 // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LightMapResolution;                                // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LightMapCoordinateIndex;                           // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFieldSelfShadowBias;                       // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBodySetup*                             BodySetup;                                         // 0x0178(0x0008)(Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LODForCollision;                                   // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bGenerateMeshDistanceField : 1;                    // 0x0184(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStripComplexCollisionForConsole : 1;              // 0x0184(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasNavigationData : 1;                            // 0x0184(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportUniformlyDistributedSampling : 1;          // 0x0184(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportPhysicalMaterialMasks : 1;                 // 0x0184(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportRayTracing : 1;                            // 0x0184(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDoFastBuild : 1;                                  // 0x0184(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBuiltAtRuntime : 1;                             // 0x0184(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         BitPad_185_0 : 1;                                  // 0x0185(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bAllowCPUAccess : 1;                               // 0x0185(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportGpuUniformlyDistributedSampling : 1;       // 0x0185(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_186[0x22];                                     // 0x0186(0x0022)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshSocket*>              Sockets;                                           // 0x01A8(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0x10];                                     // 0x01B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PositiveBoundsExtension;                           // 0x01C8(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NegativeBoundsExtension;                           // 0x01E0(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       ExtendedBounds;                                    // 0x01F8(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ElementToIgnoreForTexFactor;                       // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAssetUserData*>                 AssetUserData;                                     // 0x0238(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UNavCollisionBase*                      NavCollision;                                      // 0x0248(0x0008)(Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, DuplicateTransient, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UStaticMeshDescription* CreateStaticMeshDescription(class UObject* Outer_0);

	class FName AddMaterial(class UMaterialInterface* Material);
	void AddSocket(class UStaticMeshSocket* Socket);
	void BuildFromStaticMeshDescriptions(const TArray<class UStaticMeshDescription*>& StaticMeshDescriptions, bool bBuildSimpleCollision, bool bFastBuild);
	class UStaticMeshDescription* GetStaticMeshDescription(int32 LODIndex);
	void RemoveSocket(class UStaticMeshSocket* Socket);
	void SetMinimumLODForPlatform(const class FName& PlatformName, int32 InMinLOD);
	void SetMinimumLODForPlatforms(const TMap<class FName, int32>& PlatformMinimumLODs);
	void SetMinLODForQualityLevels(const TMap<EPerQualityLevels, int32>& QualityLevelMinimumLODs, int32 Default);
	void SetStaticMaterials(const TArray<struct FStaticMaterial>& InStaticMaterials);

	class UStaticMeshSocket* FindSocket(class FName InSocketName) const;
	struct FBox GetBoundingBox() const;
	struct FBoxSphereBounds GetBounds() const;
	class UMaterialInterface* GetMaterial(int32 MaterialIndex) const;
	int32 GetMaterialIndex(class FName MaterialSlotName) const;
	int32 GetMinimumLODForPlatform(const class FName& PlatformName) const;
	void GetMinimumLODForPlatforms(TMap<class FName, int32>* PlatformMinimumLODs) const;
	int32 GetMinimumLODForQualityLevel(const class FName& QualityLevel) const;
	void GetMinimumLODForQualityLevels(TMap<class FName, int32>* QualityLevelMinimumLODs) const;
	void GetMinLODForQualityLevels(TMap<EPerQualityLevels, int32>* QualityLevelMinimumLODs, int32* Default) const;
	int32 GetNumLODs() const;
	int32 GetNumSections(int32 InLOD) const;
	int32 GetNumTriangles(int32 LODIndex) const;
	TArray<class UStaticMeshSocket*> GetSocketsByTag(const class FString& InSocketTag) const;
	const TArray<struct FStaticMaterial> GetStaticMaterials() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("StaticMesh")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"StaticMesh")
	}
	static class UStaticMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaticMesh>();
	}
};
DUMPER7_ASSERTS_UStaticMesh;

// Class Engine.StereoLayerFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UStereoLayerFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);
	static void HideSplashScreen();
	static void SetSplashScreen(class UTexture* Texture, const struct FVector2D& Scale, const struct FVector& Offset, bool bShowLoadingMovie, bool bShowOnSet);
	static void ShowSplashScreen();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("StereoLayerFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"StereoLayerFunctionLibrary")
	}
	static class UStereoLayerFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStereoLayerFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_UStereoLayerFunctionLibrary;

// Class Engine.ActorTextureStreamingBuildDataComponent
// 0x0000 (0x00A0 - 0x00A0)
class UActorTextureStreamingBuildDataComponent final : public UActorComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActorTextureStreamingBuildDataComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActorTextureStreamingBuildDataComponent")
	}
	static class UActorTextureStreamingBuildDataComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorTextureStreamingBuildDataComponent>();
	}
};
DUMPER7_ASSERTS_UActorTextureStreamingBuildDataComponent;

// Class Engine.ServerStreamingLevelsVisibility
// 0x0050 (0x02E8 - 0x0298)
class AServerStreamingLevelsVisibility final : public AActor
{
public:
	uint8                                         Pad_298[0x50];                                     // 0x0298(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ServerStreamingLevelsVisibility")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ServerStreamingLevelsVisibility")
	}
	static class AServerStreamingLevelsVisibility* GetDefaultObj()
	{
		return GetDefaultObjImpl<AServerStreamingLevelsVisibility>();
	}
};
DUMPER7_ASSERTS_AServerStreamingLevelsVisibility;

// Class Engine.LocalPlayerSubsystem
// 0x0000 (0x0030 - 0x0030)
class ULocalPlayerSubsystem : public USubsystem
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LocalPlayerSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LocalPlayerSubsystem")
	}
	static class ULocalPlayerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocalPlayerSubsystem>();
	}
};
DUMPER7_ASSERTS_ULocalPlayerSubsystem;

// Class Engine.SubsystemBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class USubsystemBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UAudioEngineSubsystem* GetAudioEngineSubsystem(class UObject* ContextObject, TSubclassOf<class UAudioEngineSubsystem> Class_0);
	static class UEngineSubsystem* GetEngineSubsystem(TSubclassOf<class UEngineSubsystem> Class_0);
	static class UGameInstanceSubsystem* GetGameInstanceSubsystem(class UObject* ContextObject, TSubclassOf<class UGameInstanceSubsystem> Class_0);
	static class ULocalPlayerSubsystem* GetLocalPlayerSubsystem(class UObject* ContextObject, TSubclassOf<class ULocalPlayerSubsystem> Class_0);
	static class ULocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(class APlayerController* PlayerController, TSubclassOf<class ULocalPlayerSubsystem> Class_0);
	static class UWorldSubsystem* GetWorldSubsystem(class UObject* ContextObject, TSubclassOf<class UWorldSubsystem> Class_0);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SubsystemBlueprintLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SubsystemBlueprintLibrary")
	}
	static class USubsystemBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubsystemBlueprintLibrary>();
	}
};
DUMPER7_ASSERTS_USubsystemBlueprintLibrary;

// Class Engine.TargetPoint
// 0x0000 (0x0298 - 0x0298)
class ATargetPoint : public AActor
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TargetPoint")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TargetPoint")
	}
	static class ATargetPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATargetPoint>();
	}
};
DUMPER7_ASSERTS_ATargetPoint;

// Class Engine.TransactionDiffingTestObject
// 0x0070 (0x0098 - 0x0028)
class UTransactionDiffingTestObject final : public UObject
{
public:
	TArray<class FName>                           NamesArray;                                        // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   AdditionalName;                                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ObjectsArray;                                      // 0x0040(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UObject*                                AdditionalObject;                                  // 0x0050(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         SoftObjectsArray;                                  // 0x0058(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 AdditionalSoftObject;                              // 0x0068(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PropertyData;                                      // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TransactionDiffingTestObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TransactionDiffingTestObject")
	}
	static class UTransactionDiffingTestObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTransactionDiffingTestObject>();
	}
};
DUMPER7_ASSERTS_UTransactionDiffingTestObject;

// Class Engine.Texture2DDynamic
// 0x0010 (0x01E0 - 0x01D0)
class UTexture2DDynamic final : public UTexture
{
public:
	uint8                                         Pad_1C8[0x8];                                      // 0x01C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EPixelFormat                                  Format;                                            // 0x01D0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1[0xF];                                      // 0x01D1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Texture2DDynamic")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Texture2DDynamic")
	}
	static class UTexture2DDynamic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTexture2DDynamic>();
	}
};
DUMPER7_ASSERTS_UTexture2DDynamic;

// Class Engine.TextureCube
// 0x0090 (0x0260 - 0x01D0)
class UTextureCube : public UTexture
{
public:
	uint8                                         Pad_1C8[0x98];                                     // 0x01C8(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TextureCube")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TextureCube")
	}
	static class UTextureCube* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextureCube>();
	}
};
DUMPER7_ASSERTS_UTextureCube;

// Class Engine.TextureLightProfile
// 0x0000 (0x0280 - 0x0280)
class UTextureLightProfile final : public UTexture2D
{
public:
	float                                         Brightness;                                        // 0x0278(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextureMultiplier;                                 // 0x027C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TextureLightProfile")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TextureLightProfile")
	}
	static class UTextureLightProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextureLightProfile>();
	}
};
DUMPER7_ASSERTS_UTextureLightProfile;

// Class Engine.TextureRenderTarget2DArray
// 0x0020 (0x01F0 - 0x01D0)
class UTextureRenderTarget2DArray final : public UTextureRenderTarget
{
public:
	int32                                         SizeX;                                             // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slices;                                            // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ClearColor;                                        // 0x01DC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPixelFormat                                  OverrideFormat;                                    // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bHDR : 1;                                          // 0x01ED(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceLinearGamma : 1;                             // 0x01ED(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1EE[0x2];                                      // 0x01EE(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TextureRenderTarget2DArray")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TextureRenderTarget2DArray")
	}
	static class UTextureRenderTarget2DArray* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextureRenderTarget2DArray>();
	}
};
DUMPER7_ASSERTS_UTextureRenderTarget2DArray;

// Class Engine.TextureRenderTargetCube
// 0x0020 (0x01F0 - 0x01D0)
class UTextureRenderTargetCube final : public UTextureRenderTarget
{
public:
	int32                                         SizeX;                                             // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ClearColor;                                        // 0x01D4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPixelFormat                                  OverrideFormat;                                    // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bHDR : 1;                                          // 0x01E5(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceLinearGamma : 1;                             // 0x01E5(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1E6[0xA];                                      // 0x01E6(0x000A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TextureRenderTargetCube")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TextureRenderTargetCube")
	}
	static class UTextureRenderTargetCube* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextureRenderTargetCube>();
	}
};
DUMPER7_ASSERTS_UTextureRenderTargetCube;

// Class Engine.TimelineTemplate
// 0x0090 (0x00B8 - 0x0028)
class UTimelineTemplate final : public UObject
{
public:
	float                                         TimelineLength;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimelineLengthMode                           LengthMode;                                        // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAutoPlay : 1;                                     // 0x002D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLoop : 1;                                         // 0x002D(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReplicated : 1;                                   // 0x002D(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreTimeDilation : 1;                           // 0x002D(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTTEventTrack>                  EventTracks;                                       // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTTFloatTrack>                  FloatTracks;                                       // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTTVectorTrack>                 VectorTracks;                                      // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTTLinearColorTrack>            LinearColorTracks;                                 // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBPVariableMetaDataEntry>       MetaDataArray;                                     // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                  TimelineGuid;                                      // 0x0080(0x0010)(ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETickingGroup                                 TimelineTickGroup;                                 // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   VariableName;                                      // 0x0094(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DirectionPropertyName;                             // 0x009C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   UpdateFunctionName;                                // 0x00A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FinishedFunctionName;                              // 0x00AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TimelineTemplate")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TimelineTemplate")
	}
	static class UTimelineTemplate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimelineTemplate>();
	}
};
DUMPER7_ASSERTS_UTimelineTemplate;

// Class Engine.TriggerVolume
// 0x0000 (0x02D0 - 0x02D0)
class ATriggerVolume final : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TriggerVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TriggerVolume")
	}
	static class ATriggerVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATriggerVolume>();
	}
};
DUMPER7_ASSERTS_ATriggerVolume;

// Class Engine.UserDefinedEnum
// 0x0050 (0x00B8 - 0x0068)
class UUserDefinedEnum final : public UEnum
{
public:
	TMap<class FName, class FText>                DisplayNameMap;                                    // 0x0068(0x0050)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("UserDefinedEnum")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"UserDefinedEnum")
	}
	static class UUserDefinedEnum* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUserDefinedEnum>();
	}
};
DUMPER7_ASSERTS_UUserDefinedEnum;

// Class Engine.Canvas
// 0x0368 (0x0390 - 0x0028)
class UCanvas final : public UObject
{
public:
	float                                         OrgX;                                              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrgY;                                              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClipX;                                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClipY;                                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 DrawColor;                                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCenterX : 1;                                      // 0x003C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCenterY : 1;                                      // 0x003C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNoSmooth : 1;                                     // 0x003C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SizeX;                                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlane                                 ColorModulate;                                     // 0x0050(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DefaultTexture;                                    // 0x0070(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             GradientTexture0;                                  // 0x0078(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReporterGraph*                         ReporterGraph;                                     // 0x0080(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x308];                                     // 0x0088(0x0308)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void K2_Deproject(const struct FVector2D& ScreenPosition, struct FVector* WorldOrigin, struct FVector* WorldDirection);
	void K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, const struct FVector2D& BorderScale, const struct FVector2D& BackgroundScale, float Rotation, const struct FVector2D& PivotPoint, const struct FVector2D& CornerSize);
	void K2_DrawBox(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness, const struct FLinearColor& RenderColor);
	void K2_DrawLine(const struct FVector2D& ScreenPositionA, const struct FVector2D& ScreenPositionB, float Thickness, const struct FLinearColor& RenderColor);
	void K2_DrawMaterial(class UMaterialInterface* RenderMaterial, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, float Rotation, const struct FVector2D& PivotPoint);
	void K2_DrawMaterialTriangle(class UMaterialInterface* RenderMaterial, const TArray<struct FCanvasUVTri>& Triangles);
	void K2_DrawPolygon(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& Radius, int32 NumberOfSides, const struct FLinearColor& RenderColor);
	void K2_DrawText(class UFont* RenderFont, const class FString& RenderText, const struct FVector2D& ScreenPosition, const struct FVector2D& Scale, const struct FLinearColor& RenderColor, float Kerning, const struct FLinearColor& ShadowColor, const struct FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const struct FLinearColor& OutlineColor);
	void K2_DrawTexture(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, EBlendMode BlendMode, float Rotation, const struct FVector2D& PivotPoint);
	void K2_DrawTriangle(class UTexture* RenderTexture, const TArray<struct FCanvasUVTri>& Triangles);
	struct FVector K2_Project(const struct FVector& WorldLocation);
	struct FVector2D K2_StrLen(class UFont* RenderFont, const class FString& RenderText);
	struct FVector2D K2_TextSize(class UFont* RenderFont, const class FString& RenderText, const struct FVector2D& Scale);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Canvas")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Canvas")
	}
	static class UCanvas* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCanvas>();
	}
};
DUMPER7_ASSERTS_UCanvas;

// Class Engine.WorldPartitionCell
// 0x0000 (0x0000 - 0x0000)
class IWorldPartitionCell final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionCell")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionCell")
	}
	static class IWorldPartitionCell* GetDefaultObj()
	{
		return GetDefaultObjImpl<IWorldPartitionCell>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IWorldPartitionCell;

// Class Engine.Console
// 0x0108 (0x0130 - 0x0028)
class UConsole final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ULocalPlayer*                           ConsoleTargetPlayer;                               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DefaultTexture_Black;                              // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DefaultTexture_White;                              // 0x0048(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x18];                                      // 0x0050(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         HistoryBuffer;                                     // 0x0068(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0xB8];                                      // 0x0078(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Console")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Console")
	}
	static class UConsole* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConsole>();
	}
};
DUMPER7_ASSERTS_UConsole;

// Class Engine.InputSettings
// 0x0118 (0x0140 - 0x0028)
class UInputSettings final : public UObject
{
public:
	TArray<struct FInputAxisConfigEntry>          AxisConfig;                                        // 0x0028(0x0010)(Edit, EditFixedSize, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FPerPlatformSettings                   PlatformSettings;                                  // 0x0038(0x0010)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bAltEnterTogglesFullscreen : 1;                    // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bF11TogglesFullscreen : 1;                         // 0x0048(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseMouseForTouch : 1;                             // 0x0048(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableMouseSmoothing : 1;                         // 0x0048(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableFOVScaling : 1;                             // 0x0048(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCaptureMouseOnLaunch : 1;                         // 0x0048(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableLegacyInputScales : 1;                      // 0x0048(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableMotionControls : 1;                         // 0x0048(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFilterInputByPlatformUser : 1;                    // 0x0049(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableInputDeviceSubsystem : 1;                   // 0x0049(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldFlushPressedKeysOnViewportFocusLost : 1;    // 0x0049(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableDynamicComponentInputBinding : 1;           // 0x0049(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAlwaysShowTouchInterface : 1;                     // 0x0049(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowConsoleOnFourFingerTap : 1;                   // 0x0049(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableGestureRecognizer : 1;                      // 0x0049(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseAutocorrect : 1;                               // 0x0049(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ExcludedAutocorrectOS;                             // 0x0050(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExcludedAutocorrectCultures;                       // 0x0060(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExcludedAutocorrectDeviceModels;                   // 0x0070(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	EMouseCaptureMode                             DefaultViewportMouseCaptureMode;                   // 0x0080(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMouseLockMode                                DefaultViewportMouseLockMode;                      // 0x0081(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FOVScale;                                          // 0x0084(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DoubleClickTime;                                   // 0x0088(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInputActionKeyMapping>         ActionMappings;                                    // 0x0090(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	TArray<struct FInputAxisKeyMapping>           AxisMappings;                                      // 0x00A0(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	TArray<struct FInputActionSpeechMapping>      SpeechMappings;                                    // 0x00B0(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   DefaultPlayerInputClass;                           // 0x00C0(0x0028)(Edit, Config, NoClear, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   DefaultInputComponentClass;                        // 0x00E8(0x0028)(Edit, Config, NoClear, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                        DefaultTouchInterface;                             // 0x0110(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           ConsoleKeys;                                       // 0x0130(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UInputSettings* GetInputSettings();

	void AddActionMapping(const struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
	void AddAxisMapping(const struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
	void ForceRebuildKeymaps();
	void RemoveActionMapping(const struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
	void RemoveAxisMapping(const struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
	void SaveKeyMappings();

	void GetActionMappingByName(const class FName InActionName, TArray<struct FInputActionKeyMapping>* OutMappings) const;
	void GetActionNames(TArray<class FName>* ActionNames) const;
	void GetAxisMappingByName(const class FName InAxisName, TArray<struct FInputAxisKeyMapping>* OutMappings) const;
	void GetAxisNames(TArray<class FName>* AxisNames) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InputSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InputSettings")
	}
	static class UInputSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputSettings>();
	}
};
DUMPER7_ASSERTS_UInputSettings;

// Class Engine.PlayerInput
// 0x0470 (0x0498 - 0x0028)
class UPlayerInput : public UObject
{
public:
	uint8                                         Pad_28[0x178];                                     // 0x0028(0x0178)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKeyBind>                       DebugExecBindings;                                 // 0x01A0(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B0[0x30];                                     // 0x01B0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           InvertedAxis;                                      // 0x01E0(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F0[0x2A8];                                    // 0x01F0(0x02A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearSmoothing();
	void InvertAxis(const class FName AxisName);
	void InvertAxisKey(const struct FKey& AxisKey);
	void SetBind(class FName BindName, const class FString& Command);
	void SetMouseSensitivity(const float Sensitivity);

	class APlayerController* GetOuterAPlayerController() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlayerInput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlayerInput")
	}
	static class UPlayerInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerInput>();
	}
};
DUMPER7_ASSERTS_UPlayerInput;

// Class Engine.VectorFieldVolume
// 0x0008 (0x02A0 - 0x0298)
class AVectorFieldVolume final : public AActor
{
public:
	class UVectorFieldComponent*                  VectorFieldComponent;                              // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VectorFieldVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VectorFieldVolume")
	}
	static class AVectorFieldVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVectorFieldVolume>();
	}
};
DUMPER7_ASSERTS_AVectorFieldVolume;

// Class Engine.TireType
// 0x0008 (0x0038 - 0x0030)
class UTireType final : public UDataAsset
{
public:
	float                                         FrictionScale;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TireType")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TireType")
	}
	static class UTireType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTireType>();
	}
};
DUMPER7_ASSERTS_UTireType;

// Class Engine.VisualLoggerFilterVolume
// 0x0000 (0x02D0 - 0x02D0)
class AVisualLoggerFilterVolume final : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VisualLoggerFilterVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VisualLoggerFilterVolume")
	}
	static class AVisualLoggerFilterVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVisualLoggerFilterVolume>();
	}
};
DUMPER7_ASSERTS_AVisualLoggerFilterVolume;

// Class Engine.VisualLoggerKismetLibrary
// 0x0000 (0x0028 - 0x0028)
class UVisualLoggerKismetLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void EnableRecording(bool bEnabled);
	static void LogBox(class UObject* WorldContextObject, const struct FBox& BoxShape, const class FString& Text, const struct FLinearColor& ObjectColor, class FName LogCategory, bool bAddToMessageLog);
	static void LogLocation(class UObject* WorldContextObject, const struct FVector& Location, const class FString& Text, const struct FLinearColor& ObjectColor, float Radius, class FName LogCategory, bool bAddToMessageLog);
	static void LogSegment(class UObject* WorldContextObject, const struct FVector& SegmentStart, const struct FVector& SegmentEnd, const class FString& Text, const struct FLinearColor& ObjectColor, const float Thickness, class FName CategoryName, bool bAddToMessageLog);
	static void LogText(class UObject* WorldContextObject, const class FString& Text, class FName LogCategory, bool bAddToMessageLog);
	static void RedirectVislog(class UObject* SourceOwner, class UObject* DestinationOwner);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VisualLoggerKismetLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VisualLoggerKismetLibrary")
	}
	static class UVisualLoggerKismetLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVisualLoggerKismetLibrary>();
	}
};
DUMPER7_ASSERTS_UVisualLoggerKismetLibrary;

// Class Engine.VOIPStatics
// 0x0000 (0x0028 - 0x0028)
class UVOIPStatics final : public UBlueprintFunctionLibrary
{
public:
	static void SetMicThreshold(float InThreshold);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VOIPStatics")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VOIPStatics")
	}
	static class UVOIPStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVOIPStatics>();
	}
};
DUMPER7_ASSERTS_UVOIPStatics;

// Class Engine.VolumeTexture
// 0x00A0 (0x0270 - 0x01D0)
class UVolumeTexture final : public UTexture
{
public:
	uint8                                         Pad_1C8[0x98];                                     // 0x01C8(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	ETextureAddress                               AddressMode;                                       // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_261[0xF];                                      // 0x0261(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VolumeTexture")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VolumeTexture")
	}
	static class UVolumeTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVolumeTexture>();
	}
};
DUMPER7_ASSERTS_UVolumeTexture;

// Class Engine.VolumetricLightmapDensityVolume
// 0x0008 (0x02D8 - 0x02D0)
class AVolumetricLightmapDensityVolume final : public AVolume
{
public:
	struct FInt32Interval                         AllowedMipLevelRange;                              // 0x02D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VolumetricLightmapDensityVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VolumetricLightmapDensityVolume")
	}
	static class AVolumetricLightmapDensityVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVolumetricLightmapDensityVolume>();
	}
};
DUMPER7_ASSERTS_AVolumetricLightmapDensityVolume;

// Class Engine.RuntimeVirtualTexture
// 0x00B8 (0x00E0 - 0x0028)
class alignas(0x10) URuntimeVirtualTexture final : public UObject
{
public:
	int32                                         TileCount;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TileSize;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TileBorderSize;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ERuntimeVirtualTextureMaterialType            MaterialType;                                      // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCompressTextures;                                 // 0x0035(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseLowQualityCompression;                         // 0x0036(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bClearTextures;                                    // 0x0037(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSinglePhysicalSpace;                              // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPrivateSpace;                                     // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAdaptive;                                         // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bContinuousUpdate;                                 // 0x003B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RemoveLowMips;                                     // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextureGroup                                 LODGroup;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Size;                                              // 0x0044(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URuntimeVirtualTextureStreamingProxy*   StreamingTexture;                                  // 0x0048(0x0008)(ZeroConstructor, Deprecated, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x90];                                      // 0x0050(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetPageTableSize() const;
	int32 GetSize() const;
	int32 GetTileBorderSize() const;
	int32 GetTileCount() const;
	int32 GetTileSize() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RuntimeVirtualTexture")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RuntimeVirtualTexture")
	}
	static class URuntimeVirtualTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<URuntimeVirtualTexture>();
	}
};
DUMPER7_ASSERTS_URuntimeVirtualTexture;

// Class Engine.RuntimeVirtualTextureVolume
// 0x0008 (0x02A0 - 0x0298)
class ARuntimeVirtualTextureVolume final : public AActor
{
public:
	class URuntimeVirtualTextureComponent*        VirtualTextureComponent;                           // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RuntimeVirtualTextureVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RuntimeVirtualTextureVolume")
	}
	static class ARuntimeVirtualTextureVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARuntimeVirtualTextureVolume>();
	}
};
DUMPER7_ASSERTS_ARuntimeVirtualTextureVolume;

// Class Engine.RuntimeVirtualTextureStreamingProxy
// 0x0000 (0x0280 - 0x0280)
class URuntimeVirtualTextureStreamingProxy final : public UTexture2D
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RuntimeVirtualTextureStreamingProxy")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RuntimeVirtualTextureStreamingProxy")
	}
	static class URuntimeVirtualTextureStreamingProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<URuntimeVirtualTextureStreamingProxy>();
	}
};
DUMPER7_ASSERTS_URuntimeVirtualTextureStreamingProxy;

// Class Engine.VirtualTexture2D
// 0x0010 (0x0290 - 0x0280)
class UVirtualTexture2D final : public UTexture2D
{
public:
	struct FVirtualTextureBuildSettings           Settings;                                          // 0x0278(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bContinuousUpdate;                                 // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSinglePhysicalSpace;                              // 0x0281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_282[0xE];                                      // 0x0282(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VirtualTexture2D")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VirtualTexture2D")
	}
	static class UVirtualTexture2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVirtualTexture2D>();
	}
};
DUMPER7_ASSERTS_UVirtualTexture2D;

// Class Engine.VirtualTextureBuilder
// 0x0020 (0x0048 - 0x0028)
class UVirtualTextureBuilder final : public UObject
{
public:
	class UVirtualTexture2D*                      Texture;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVirtualTexture2D*                      TextureMobile;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        BuildHash;                                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSeparateTextureForMobile;                         // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VirtualTextureBuilder")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VirtualTextureBuilder")
	}
	static class UVirtualTextureBuilder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVirtualTextureBuilder>();
	}
};
DUMPER7_ASSERTS_UVirtualTextureBuilder;

// Class Engine.WindDirectionalSource
// 0x0008 (0x02A0 - 0x0298)
class AWindDirectionalSource final : public AInfo
{
public:
	class UWindDirectionalSourceComponent*        Component;                                         // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WindDirectionalSource")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WindDirectionalSource")
	}
	static class AWindDirectionalSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWindDirectionalSource>();
	}
};
DUMPER7_ASSERTS_AWindDirectionalSource;

// Class Engine.WorldComposition
// 0x0040 (0x0068 - 0x0028)
class UWorldComposition final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULevelStreaming*>                TilesStreaming;                                    // 0x0048(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	double                                        TilesStreamingTimeThreshold;                       // 0x0058(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadAllTilesDuringCinematic;                      // 0x0060(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebaseOriginIn3DSpace;                            // 0x0061(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RebaseOriginDistance;                              // 0x0064(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldComposition")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldComposition")
	}
	static class UWorldComposition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldComposition>();
	}
};
DUMPER7_ASSERTS_UWorldComposition;

// Class Engine.WorldPartitionBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UWorldPartitionBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetActorDescs(TArray<struct FActorDesc>* OutActorDescs);
	static class UDataLayerManager* GetDataLayerManager(class UObject* WorldContextObject);
	static struct FBox GetEditorWorldBounds();
	static bool GetIntersectingActorDescs(const struct FBox& InBox, TArray<struct FActorDesc>* OutActorDescs);
	static struct FBox GetRuntimeWorldBounds();
	static void LoadActors(const TArray<struct FGuid>& InActorsToLoad);
	static void PinActors(const TArray<struct FGuid>& InActorsToPin);
	static void UnloadActors(const TArray<struct FGuid>& InActorsToUnload);
	static void UnpinActors(const TArray<struct FGuid>& InActorsToUnpin);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionBlueprintLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionBlueprintLibrary")
	}
	static class UWorldPartitionBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionBlueprintLibrary>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionBlueprintLibrary;

// Class Engine.ContentBundleDescriptor
// 0x0028 (0x0050 - 0x0028)
class UContentBundleDescriptor final : public UObject
{
public:
	class FString                                 DisplayName;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FColor                                 DebugColor;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  Guid;                                              // 0x003C(0x0010)(Edit, ZeroConstructor, EditConst, DuplicateTransient, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ContentBundleDescriptor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ContentBundleDescriptor")
	}
	static class UContentBundleDescriptor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContentBundleDescriptor>();
	}
};
DUMPER7_ASSERTS_UContentBundleDescriptor;

// Class Engine.ContentBundleUnsavedActorMonitor
// 0x0000 (0x0028 - 0x0028)
class UContentBundleUnsavedActorMonitor final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ContentBundleUnsavedActorMonitor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ContentBundleUnsavedActorMonitor")
	}
	static class UContentBundleUnsavedActorMonitor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContentBundleUnsavedActorMonitor>();
	}
};
DUMPER7_ASSERTS_UContentBundleUnsavedActorMonitor;

// Class Engine.ContentBundleEngineSubsystem
// 0x00A0 (0x00D0 - 0x0030)
class UContentBundleEngineSubsystem final : public UEngineSubsystem
{
public:
	uint8                                         Pad_30[0x70];                                      // 0x0030(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ContentBundleTypeFactoryClass;                     // 0x00A0(0x0028)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UContentBundleTypeFactory*              ContentBundleTypeFactory;                          // 0x00C8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ContentBundleEngineSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ContentBundleEngineSubsystem")
	}
	static class UContentBundleEngineSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContentBundleEngineSubsystem>();
	}
};
DUMPER7_ASSERTS_UContentBundleEngineSubsystem;

// Class Engine.ContentBundleDuplicateForPIEHelper
// 0x0000 (0x0028 - 0x0028)
class UContentBundleDuplicateForPIEHelper final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ContentBundleDuplicateForPIEHelper")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ContentBundleDuplicateForPIEHelper")
	}
	static class UContentBundleDuplicateForPIEHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContentBundleDuplicateForPIEHelper>();
	}
};
DUMPER7_ASSERTS_UContentBundleDuplicateForPIEHelper;

// Class Engine.WorldDataLayers
// 0x0328 (0x05C0 - 0x0298)
class AWorldDataLayers final : public AInfo
{
public:
	uint8                                         Pad_298[0xA0];                                     // 0x0298(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UDataLayerInstance*>               DataLayerInstances;                                // 0x0338(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FName, TWeakObjectPtr<class UDataLayerInstance>> DeprecatedDataLayerNameToDataLayerInstance; // 0x0388(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TSet<class UDataLayer*>                       WorldDataLayers;                                   // 0x03D8(0x0050)(Deprecated, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RepActiveDataLayerNames;                           // 0x0428(0x0010)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RepLoadedDataLayerNames;                           // 0x0438(0x0010)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                         Pad_448[0xA0];                                     // 0x0448(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           RepEffectiveActiveDataLayerNames;                  // 0x04E8(0x0010)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RepEffectiveLoadedDataLayerNames;                  // 0x04F8(0x0010)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                         Pad_508[0xB8];                                     // 0x0508(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDataLayerRuntimeStateChanged(const class UDataLayerInstance* InDataLayer, EDataLayerRuntimeState InState);
	void OnRep_ActiveDataLayerNames();
	void OnRep_EffectiveActiveDataLayerNames();
	void OnRep_EffectiveLoadedDataLayerNames();
	void OnRep_LoadedDataLayerNames();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldDataLayers")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldDataLayers")
	}
	static class AWorldDataLayers* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWorldDataLayers>();
	}
};
DUMPER7_ASSERTS_AWorldDataLayers;

// Class Engine.DataLayer
// 0x0030 (0x0058 - 0x0028)
class UDataLayer final : public UObject
{
public:
	class FName                                   DataLayerLabel;                                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bIsRuntime : 1;                                    // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EDataLayerRuntimeState                        InitialRuntimeState;                               // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 DebugColor;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataLayer*                             Parent;                                            // 0x0040(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UDataLayer*>                     Children;                                          // 0x0048(0x0010)(ZeroConstructor, Transient, Deprecated, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	bool Equals(const struct FActorDataLayer& ActorDataLayer) const;
	class FName GetDataLayerLabel() const;
	struct FColor GetDebugColor() const;
	EDataLayerRuntimeState GetInitialRuntimeState() const;
	EDataLayerState GetInitialState() const;
	bool IsDynamicallyLoaded() const;
	bool IsEffectiveVisible() const;
	bool IsInitiallyActive() const;
	bool IsInitiallyVisible() const;
	bool IsRuntime() const;
	bool IsVisible() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DataLayer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DataLayer")
	}
	static class UDataLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataLayer>();
	}
};
DUMPER7_ASSERTS_UDataLayer;

// Class Engine.DataLayerInstance
// 0x0020 (0x0048 - 0x0028)
class UDataLayerInstance : public UObject
{
public:
	EDataLayerRuntimeState                        InitialRuntimeState;                               // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataLayerInstance*                     Parent;                                            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UDataLayerInstance*>             Children;                                          // 0x0038(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	struct FColor GetDebugColor() const;
	EDataLayerRuntimeState GetInitialRuntimeState() const;
	EDataLayerType GetType() const;
	bool IsEffectiveVisible() const;
	bool IsInitiallyVisible() const;
	bool IsRuntime() const;
	bool IsVisible() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DataLayerInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DataLayerInstance")
	}
	static class UDataLayerInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataLayerInstance>();
	}
};
DUMPER7_ASSERTS_UDataLayerInstance;

// Class Engine.DataLayerInstancePrivate
// 0x0018 (0x0060 - 0x0048)
class UDataLayerInstancePrivate final : public UDataLayerInstance
{
public:
	class FString                                 ShortName;                                         // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataLayerAsset*                        DataLayerAsset;                                    // 0x0058(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DataLayerInstancePrivate")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DataLayerInstancePrivate")
	}
	static class UDataLayerInstancePrivate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataLayerInstancePrivate>();
	}
};
DUMPER7_ASSERTS_UDataLayerInstancePrivate;

// Class Engine.DataLayerInstanceWithAsset
// 0x0008 (0x0050 - 0x0048)
class UDataLayerInstanceWithAsset final : public UDataLayerInstance
{
public:
	class UDataLayerAsset*                        DataLayerAsset;                                    // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DataLayerInstanceWithAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DataLayerInstanceWithAsset")
	}
	static class UDataLayerInstanceWithAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataLayerInstanceWithAsset>();
	}
};
DUMPER7_ASSERTS_UDataLayerInstanceWithAsset;

// Class Engine.DataLayerSubsystem
// 0x0038 (0x0068 - 0x0030)
class UDataLayerSubsystem final : public UWorldSubsystem
{
public:
	TMulticastInlineDelegate<void(const class UDataLayerInstance* DataLayer, EDataLayerRuntimeState State)> OnDataLayerRuntimeStateChanged; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DataLayerLoadingPolicyClass;                       // 0x0040(0x0028)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetDataLayerInstanceRuntimeState(const class UDataLayerAsset* InDataLayerAsset, EDataLayerRuntimeState InState, bool bInIsRecursive);
	void SetDataLayerRuntimeState(const struct FActorDataLayer& InDataLayer, EDataLayerRuntimeState InState, bool bInIsRecursive);
	void SetDataLayerRuntimeStateByLabel(const class FName& InDataLayerLabel, EDataLayerRuntimeState InState, bool bInIsRecursive);
	void SetDataLayerState(const struct FActorDataLayer& InDataLayer, EDataLayerState InState);
	void SetDataLayerStateByLabel(const class FName& InDataLayerLabel, EDataLayerState InState);

	const TSet<class FName> GetActiveDataLayerNames() const;
	class UDataLayerInstance* GetDataLayer(const struct FActorDataLayer& InDataLayer) const;
	EDataLayerRuntimeState GetDataLayerEffectiveRuntimeState(const struct FActorDataLayer& InDataLayer) const;
	EDataLayerRuntimeState GetDataLayerEffectiveRuntimeStateByLabel(const class FName& InDataLayerLabel) const;
	class UDataLayerInstance* GetDataLayerFromLabel(class FName InDataLayerLabel) const;
	class UDataLayerInstance* GetDataLayerFromName(class FName InDataLayerName) const;
	EDataLayerRuntimeState GetDataLayerInstanceEffectiveRuntimeState(const class UDataLayerAsset* InDataLayerAsset) const;
	class UDataLayerInstance* GetDataLayerInstanceFromAsset(const class UDataLayerAsset* InDataLayerAsset) const;
	EDataLayerRuntimeState GetDataLayerInstanceRuntimeState(const class UDataLayerAsset* InDataLayerAsset) const;
	EDataLayerRuntimeState GetDataLayerRuntimeState(const struct FActorDataLayer& InDataLayer) const;
	EDataLayerRuntimeState GetDataLayerRuntimeStateByLabel(const class FName& InDataLayerLabel) const;
	EDataLayerState GetDataLayerState(const struct FActorDataLayer& InDataLayer) const;
	EDataLayerState GetDataLayerStateByLabel(const class FName& InDataLayerLabel) const;
	const TSet<class FName> GetLoadedDataLayerNames() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DataLayerSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DataLayerSubsystem")
	}
	static class UDataLayerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataLayerSubsystem>();
	}
};
DUMPER7_ASSERTS_UDataLayerSubsystem;

// Class Engine.DeprecatedDataLayerInstance
// 0x0018 (0x0060 - 0x0048)
class UDeprecatedDataLayerInstance final : public UDataLayerInstance
{
public:
	class FName                                   Label;                                             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DeprecatedDataLayerFName;                          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EDataLayerType                                DataLayerType;                                     // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 DebugColor;                                        // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DeprecatedDataLayerInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DeprecatedDataLayerInstance")
	}
	static class UDeprecatedDataLayerInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDeprecatedDataLayerInstance>();
	}
};
DUMPER7_ASSERTS_UDeprecatedDataLayerInstance;

// Class Engine.WorldPartitionHLOD
// 0x0018 (0x02B0 - 0x0298)
class AWorldPartitionHLOD final : public AActor
{
public:
	uint32                                        LODLevel;                                          // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bRequireWarmup;                                    // 0x029C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  SourceCellGuid;                                    // 0x02A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionHLOD")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionHLOD")
	}
	static class AWorldPartitionHLOD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWorldPartitionHLOD>();
	}
};
DUMPER7_ASSERTS_AWorldPartitionHLOD;

// Class Engine.HLODBuilderSettings
// 0x0000 (0x0028 - 0x0028)
class UHLODBuilderSettings final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HLODBuilderSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HLODBuilderSettings")
	}
	static class UHLODBuilderSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHLODBuilderSettings>();
	}
};
DUMPER7_ASSERTS_UHLODBuilderSettings;

// Class Engine.NullHLODBuilder
// 0x0000 (0x0028 - 0x0028)
class UNullHLODBuilder final : public UHLODBuilder
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NullHLODBuilder")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NullHLODBuilder")
	}
	static class UNullHLODBuilder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNullHLODBuilder>();
	}
};
DUMPER7_ASSERTS_UNullHLODBuilder;

// Class Engine.WorldPartitionDestructibleInHLODSupportLibrary
// 0x0000 (0x0028 - 0x0028)
class UWorldPartitionDestructibleInHLODSupportLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DamageInHLOD(const TScriptInterface<class IWorldPartitionDestructibleInHLODInterface>& DestructibleInHLOD, float DamagePercent);
	static void DestroyInHLOD(const TScriptInterface<class IWorldPartitionDestructibleInHLODInterface>& DestructibleInHLOD);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionDestructibleInHLODSupportLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionDestructibleInHLODSupportLibrary")
	}
	static class UWorldPartitionDestructibleInHLODSupportLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionDestructibleInHLODSupportLibrary>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionDestructibleInHLODSupportLibrary;

// Class Engine.HLODLayer
// 0x0040 (0x0068 - 0x0028)
class UHLODLayer final : public UObject
{
public:
	EHLODLayerType                                LayerType;                                         // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHLODBuilder>               HLODBuilderClass;                                  // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHLODBuilderSettings*                   HLODBuilderSettings;                               // 0x0038(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bIsSpatiallyLoaded : 1;                            // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CellSize;                                          // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	double                                        LoadingRange;                                      // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHLODLayer*                             ParentLayer;                                       // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AWorldPartitionHLOD>        HLODActorClass;                                    // 0x0058(0x0008)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UWorldPartitionHLODModifier> HLODModifierClass;                                // 0x0060(0x0008)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HLODLayer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HLODLayer")
	}
	static class UHLODLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHLODLayer>();
	}
};
DUMPER7_ASSERTS_UHLODLayer;

// Class Engine.WorldPartitionHLODModifier
// 0x0000 (0x0028 - 0x0028)
class UWorldPartitionHLODModifier final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionHLODModifier")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionHLODModifier")
	}
	static class UWorldPartitionHLODModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionHLODModifier>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionHLODModifier;

// Class Engine.HLODSubsystem
// 0x0120 (0x0150 - 0x0030)
class UHLODSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x120];                                     // 0x0030(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HLODSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HLODSubsystem")
	}
	static class UHLODSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHLODSubsystem>();
	}
};
DUMPER7_ASSERTS_UHLODSubsystem;

// Class Engine.WorldPartitionActorLoaderInterface
// 0x0000 (0x0000 - 0x0000)
class IWorldPartitionActorLoaderInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionActorLoaderInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionActorLoaderInterface")
	}
	static class IWorldPartitionActorLoaderInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IWorldPartitionActorLoaderInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IWorldPartitionActorLoaderInterface;

// Class Engine.WorldPartitionEditorHash
// 0x0000 (0x0028 - 0x0028)
class UWorldPartitionEditorHash : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionEditorHash")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionEditorHash")
	}
	static class UWorldPartitionEditorHash* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionEditorHash>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionEditorHash;

// Class Engine.WorldPartitionEditorPerProjectUserSettings
// 0x0000 (0x0028 - 0x0028)
class UWorldPartitionEditorPerProjectUserSettings final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionEditorPerProjectUserSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionEditorPerProjectUserSettings")
	}
	static class UWorldPartitionEditorPerProjectUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionEditorPerProjectUserSettings>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionEditorPerProjectUserSettings;

// Class Engine.WorldPartitionEditorSpatialHash
// 0x0000 (0x0028 - 0x0028)
class UWorldPartitionEditorSpatialHash final : public UWorldPartitionEditorHash
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionEditorSpatialHash")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionEditorSpatialHash")
	}
	static class UWorldPartitionEditorSpatialHash* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionEditorSpatialHash>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionEditorSpatialHash;

// Class Engine.WorldPartitionLevelStreamingPolicy
// 0x0070 (0x02F8 - 0x0288)
class UWorldPartitionLevelStreamingPolicy final : public UWorldPartitionStreamingPolicy
{
public:
	struct FTopLevelAssetPath                     SourceWorldAssetPath;                              // 0x0288(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, class FName>                SubObjectsToCellRemapping;                         // 0x0298(0x0050)(NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class URuntimeHashExternalStreamingObjectBase>> ExternalStreamingObjects;  // 0x02E8(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionLevelStreamingPolicy")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionLevelStreamingPolicy")
	}
	static class UWorldPartitionLevelStreamingPolicy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionLevelStreamingPolicy>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionLevelStreamingPolicy;

// Class Engine.WorldPartitionMiniMapVolume
// 0x0000 (0x02D0 - 0x02D0)
class AWorldPartitionMiniMapVolume final : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionMiniMapVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionMiniMapVolume")
	}
	static class AWorldPartitionMiniMapVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWorldPartitionMiniMapVolume>();
	}
};
DUMPER7_ASSERTS_AWorldPartitionMiniMapVolume;

// Class Engine.WorldPartitionReplay
// 0x0020 (0x02B8 - 0x0298)
class AWorldPartitionReplay final : public AActor
{
public:
	TArray<class FName>                           StreamingSourceNames;                              // 0x0298(0x0010)(Net, ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A8[0x10];                                     // 0x02A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionReplay")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionReplay")
	}
	static class AWorldPartitionReplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWorldPartitionReplay>();
	}
};
DUMPER7_ASSERTS_AWorldPartitionReplay;

// Class Engine.WorldPartitionRuntimeCellDataSpatialHash
// 0x0068 (0x00F0 - 0x0088)
class UWorldPartitionRuntimeCellDataSpatialHash final : public UWorldPartitionRuntimeCellData
{
public:
	struct FVector                                Position;                                          // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent;                                            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GridName;                                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x40];                                      // 0x00B0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionRuntimeCellDataSpatialHash")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionRuntimeCellDataSpatialHash")
	}
	static class UWorldPartitionRuntimeCellDataSpatialHash* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionRuntimeCellDataSpatialHash>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionRuntimeCellDataSpatialHash;

// Class Engine.SpatialHashRuntimeGridInfo
// 0x0008 (0x02A0 - 0x0298)
class ASpatialHashRuntimeGridInfo final : public AInfo
{
public:
	struct FSpatialHashRuntimeGrid                GridSettings;                                      // 0x0298(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SpatialHashRuntimeGridInfo")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SpatialHashRuntimeGridInfo")
	}
	static class ASpatialHashRuntimeGridInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpatialHashRuntimeGridInfo>();
	}
};
DUMPER7_ASSERTS_ASpatialHashRuntimeGridInfo;

// Class Engine.WorldPartitionRuntimeSpatialHash
// 0x0070 (0x00E8 - 0x0078)
class UWorldPartitionRuntimeSpatialHash final : public UWorldPartitionRuntimeHash
{
public:
	EWorldPartitionCVarProjectDefaultOverride     UseAlignedGridLevels;                              // 0x0078(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EWorldPartitionCVarProjectDefaultOverride     SnapNonAlignedGridLevelsToLowerLevels;             // 0x0079(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EWorldPartitionCVarProjectDefaultOverride     PlaceSmallActorsUsingLocation;                     // 0x007A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EWorldPartitionCVarProjectDefaultOverride     PlacePartitionActorsUsingLocation;                 // 0x007B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEnableZCulling;                                   // 0x007C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpatialHashStreamingGrid>      StreamingGrids;                                    // 0x0080(0x0010)(ZeroConstructor, Protected, NonPIEDuplicateTransient, NativeAccessSpecifierProtected)
	uint8                                         Pad_90[0x58];                                      // 0x0090(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionRuntimeSpatialHash")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionRuntimeSpatialHash")
	}
	static class UWorldPartitionRuntimeSpatialHash* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionRuntimeSpatialHash>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionRuntimeSpatialHash;

// Class Engine.WorldPartitionSubsystem
// 0x0290 (0x02D0 - 0x0040)
class UWorldPartitionSubsystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_40[0x290];                                     // 0x0040(0x0290)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsAllStreamingCompleted();

	bool IsStreamingCompleted(EWorldPartitionRuntimeCellState QueryState, const TArray<struct FWorldPartitionStreamingQuerySource>& QuerySources, bool bExactState) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionSubsystem")
	}
	static class UWorldPartitionSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldPartitionSubsystem>();
	}
};
DUMPER7_ASSERTS_UWorldPartitionSubsystem;

// Class Engine.WorldPartitionVolume
// 0x0000 (0x02D0 - 0x02D0)
class AWorldPartitionVolume final : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldPartitionVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldPartitionVolume")
	}
	static class AWorldPartitionVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWorldPartitionVolume>();
	}
};
DUMPER7_ASSERTS_AWorldPartitionVolume;

}

