#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InputRemapping

#include "Basic.hpp"

#include "InputRemapping_classes.hpp"
#include "InputRemapping_parameters.hpp"


namespace SDK
{

// Function InputRemapping.InputRemappingNodes.ActionMappingEqualActionMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FActionMappingStruct&      A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FActionMappingStruct&      B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputRemappingNodes::ActionMappingEqualActionMapping(const struct FActionMappingStruct& A, const struct FActionMappingStruct& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputRemappingNodes", "ActionMappingEqualActionMapping");

	Params::InputRemappingNodes_ActionMappingEqualActionMapping Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRemapping.InputRemappingNodes.ActionMappingNotEqualActionMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FActionMappingStruct&      A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FActionMappingStruct&      B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputRemappingNodes::ActionMappingNotEqualActionMapping(const struct FActionMappingStruct& A, const struct FActionMappingStruct& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputRemappingNodes", "ActionMappingNotEqualActionMapping");

	Params::InputRemappingNodes_ActionMappingNotEqualActionMapping Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRemapping.InputRemappingNodes.AxisMappingEqualActionMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAxisMappingStruct&        A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAxisMappingStruct&        B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputRemappingNodes::AxisMappingEqualActionMapping(const struct FAxisMappingStruct& A, const struct FAxisMappingStruct& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputRemappingNodes", "AxisMappingEqualActionMapping");

	Params::InputRemappingNodes_AxisMappingEqualActionMapping Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRemapping.InputRemappingNodes.AxisMappingNotEqualActionMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAxisMappingStruct&        A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAxisMappingStruct&        B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputRemappingNodes::AxisMappingNotEqualActionMapping(const struct FAxisMappingStruct& A, const struct FAxisMappingStruct& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputRemappingNodes", "AxisMappingNotEqualActionMapping");

	Params::InputRemappingNodes_AxisMappingNotEqualActionMapping Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRemapping.InputRemappingNodes.CreateNewActionMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FActionMappingStruct&      MappingData                                            (Parm, NativeAccessSpecifierPublic)
// bool*                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRemappingNodes::CreateNewActionMapping(const struct FActionMappingStruct& MappingData, bool* ReturnValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputRemappingNodes", "CreateNewActionMapping");

	Params::InputRemappingNodes_CreateNewActionMapping Parms{};

	Parms.MappingData = std::move(MappingData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ReturnValue != nullptr)
		*ReturnValue = Parms.ReturnValue;
}


// Function InputRemapping.InputRemappingNodes.CreateNewAxisMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAxisMappingStruct&        MappingData                                            (Parm, NativeAccessSpecifierPublic)
// bool*                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRemappingNodes::CreateNewAxisMapping(const struct FAxisMappingStruct& MappingData, bool* ReturnValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputRemappingNodes", "CreateNewAxisMapping");

	Params::InputRemappingNodes_CreateNewAxisMapping Parms{};

	Parms.MappingData = std::move(MappingData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ReturnValue != nullptr)
		*ReturnValue = Parms.ReturnValue;
}


// Function InputRemapping.InputRemappingNodes.GetAllActionMappings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FActionMappingStruct&      FilterData                                             (Parm, NativeAccessSpecifierPublic)
// const TArray<EActionMappingFilter>&     Filters                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool*                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FActionMappingStruct>*    ActionMappings                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UInputRemappingNodes::GetAllActionMappings(const struct FActionMappingStruct& FilterData, const TArray<EActionMappingFilter>& Filters, bool* ReturnValue, TArray<struct FActionMappingStruct>* ActionMappings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputRemappingNodes", "GetAllActionMappings");

	Params::InputRemappingNodes_GetAllActionMappings Parms{};

	Parms.FilterData = std::move(FilterData);
	Parms.Filters = std::move(Filters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ReturnValue != nullptr)
		*ReturnValue = Parms.ReturnValue;

	if (ActionMappings != nullptr)
		*ActionMappings = std::move(Parms.ActionMappings);
}


// Function InputRemapping.InputRemappingNodes.GetAllAxisMappings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAxisMappingStruct&        FilterData                                             (Parm, NativeAccessSpecifierPublic)
// const TArray<EAxisMappingFilter>&       Filters                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool*                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAxisMappingStruct>*      AxisMappings                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UInputRemappingNodes::GetAllAxisMappings(const struct FAxisMappingStruct& FilterData, const TArray<EAxisMappingFilter>& Filters, bool* ReturnValue, TArray<struct FAxisMappingStruct>* AxisMappings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputRemappingNodes", "GetAllAxisMappings");

	Params::InputRemappingNodes_GetAllAxisMappings Parms{};

	Parms.FilterData = std::move(FilterData);
	Parms.Filters = std::move(Filters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ReturnValue != nullptr)
		*ReturnValue = Parms.ReturnValue;

	if (AxisMappings != nullptr)
		*AxisMappings = std::move(Parms.AxisMappings);
}


// Function InputRemapping.InputRemappingNodes.RebindActionMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FActionMappingStruct&      ActionMapping                                          (Parm, NativeAccessSpecifierPublic)
// const struct FActionMappingStruct&      NewData                                                (Parm, NativeAccessSpecifierPublic)
// bool*                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRemappingNodes::RebindActionMapping(const struct FActionMappingStruct& ActionMapping, const struct FActionMappingStruct& NewData, bool* ReturnValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputRemappingNodes", "RebindActionMapping");

	Params::InputRemappingNodes_RebindActionMapping Parms{};

	Parms.ActionMapping = std::move(ActionMapping);
	Parms.NewData = std::move(NewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ReturnValue != nullptr)
		*ReturnValue = Parms.ReturnValue;
}


// Function InputRemapping.InputRemappingNodes.RebindAxisMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAxisMappingStruct&        AxisMapping                                            (Parm, NativeAccessSpecifierPublic)
// const struct FAxisMappingStruct&        NewData                                                (Parm, NativeAccessSpecifierPublic)
// bool*                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRemappingNodes::RebindAxisMapping(const struct FAxisMappingStruct& AxisMapping, const struct FAxisMappingStruct& NewData, bool* ReturnValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputRemappingNodes", "RebindAxisMapping");

	Params::InputRemappingNodes_RebindAxisMapping Parms{};

	Parms.AxisMapping = std::move(AxisMapping);
	Parms.NewData = std::move(NewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ReturnValue != nullptr)
		*ReturnValue = Parms.ReturnValue;
}


// Function InputRemapping.InputRemappingNodes.RemoveActionMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FActionMappingStruct&      MappingData                                            (Parm, NativeAccessSpecifierPublic)
// bool*                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRemappingNodes::RemoveActionMapping(const struct FActionMappingStruct& MappingData, bool* ReturnValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputRemappingNodes", "RemoveActionMapping");

	Params::InputRemappingNodes_RemoveActionMapping Parms{};

	Parms.MappingData = std::move(MappingData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ReturnValue != nullptr)
		*ReturnValue = Parms.ReturnValue;
}


// Function InputRemapping.InputRemappingNodes.RemoveAxisMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAxisMappingStruct&        MappingData                                            (Parm, NativeAccessSpecifierPublic)
// bool*                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRemappingNodes::RemoveAxisMapping(const struct FAxisMappingStruct& MappingData, bool* ReturnValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputRemappingNodes", "RemoveAxisMapping");

	Params::InputRemappingNodes_RemoveAxisMapping Parms{};

	Parms.MappingData = std::move(MappingData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ReturnValue != nullptr)
		*ReturnValue = Parms.ReturnValue;
}

}

