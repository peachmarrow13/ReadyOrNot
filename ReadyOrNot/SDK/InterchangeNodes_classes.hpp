#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InterchangeNodes

#include "Basic.hpp"

#include "InterchangeCore_classes.hpp"
#include "InterchangeNodes_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class InterchangeNodes.InterchangeAnimationTrackSetNode
// 0x0030 (0x0090 - 0x0060)
class UInterchangeAnimationTrackSetNode final : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_60[0x30];                                      // 0x0060(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddCustomAnimationTrackUid(const class FString& AnimationTrackUid);
	bool RemoveCustomAnimationTrackUid(const class FString& AnimationTrackUid);
	bool SetCustomFrameRate(const float& AttributeValue);

	void GetCustomAnimationTrackUid(const int32 Index_0, class FString* OutAnimationTrackUid) const;
	int32 GetCustomAnimationTrackUidCount() const;
	void GetCustomAnimationTrackUids(TArray<class FString>* OutAnimationTrackUids) const;
	bool GetCustomFrameRate(float* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeAnimationTrackSetNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeAnimationTrackSetNode")
	}
	static class UInterchangeAnimationTrackSetNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeAnimationTrackSetNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeAnimationTrackSetNode;

// Class InterchangeNodes.InterchangeAnimationTrackBaseNode
// 0x0010 (0x0070 - 0x0060)
class UInterchangeAnimationTrackBaseNode : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomCompletionMode(const int32& AttributeValue);

	bool GetCustomCompletionMode(int32* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeAnimationTrackBaseNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeAnimationTrackBaseNode")
	}
	static class UInterchangeAnimationTrackBaseNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeAnimationTrackBaseNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeAnimationTrackBaseNode;

// Class InterchangeNodes.InterchangeAnimationTrackSetInstanceNode
// 0x0040 (0x00B0 - 0x0070)
class UInterchangeAnimationTrackSetInstanceNode final : public UInterchangeAnimationTrackBaseNode
{
public:
	uint8                                         Pad_70[0x40];                                      // 0x0070(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomDuration(const int32& AttributeValue);
	bool SetCustomStartFrame(const int32& AttributeValue);
	bool SetCustomTimeScale(const float& AttributeValue);
	bool SetCustomTrackSetDependencyUid(const class FString& AttributeValue);

	bool GetCustomDuration(int32* AttributeValue) const;
	bool GetCustomStartFrame(int32* AttributeValue) const;
	bool GetCustomTimeScale(float* AttributeValue) const;
	bool GetCustomTrackSetDependencyUid(class FString* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeAnimationTrackSetInstanceNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeAnimationTrackSetInstanceNode")
	}
	static class UInterchangeAnimationTrackSetInstanceNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeAnimationTrackSetInstanceNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeAnimationTrackSetInstanceNode;

// Class InterchangeNodes.InterchangeAnimationTrackNode
// 0x0050 (0x00C0 - 0x0070)
class UInterchangeAnimationTrackNode : public UInterchangeAnimationTrackBaseNode
{
public:
	uint8                                         Pad_70[0x50];                                      // 0x0070(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomActorDependencyUid(const class FString& DependencyUid);
	bool SetCustomAnimationPayloadKey(const class FString& InUniqueId, const EInterchangeAnimationPayLoadType& InType);
	bool SetCustomFrameCount(const int32& AttributeValue);
	bool SetCustomTargetedProperty(const int32& TargetedProperty);

	bool GetCustomActorDependencyUid(class FString* DependencyUid) const;
	bool GetCustomAnimationPayloadKey(struct FInterchangeAnimationPayLoadKey* AnimationPayLoadKey) const;
	bool GetCustomFrameCount(int32* AttributeValue) const;
	bool GetCustomTargetedProperty(int32* TargetedProperty) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeAnimationTrackNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeAnimationTrackNode")
	}
	static class UInterchangeAnimationTrackNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeAnimationTrackNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeAnimationTrackNode;

// Class InterchangeNodes.InterchangeTransformAnimationTrackNode
// 0x0010 (0x00D0 - 0x00C0)
class UInterchangeTransformAnimationTrackNode final : public UInterchangeAnimationTrackNode
{
public:
	uint8                                         Pad_C0[0x10];                                      // 0x00C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomUsedChannels(const int32& AttributeValue);

	bool GetCustomUsedChannels(int32* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeTransformAnimationTrackNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeTransformAnimationTrackNode")
	}
	static class UInterchangeTransformAnimationTrackNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTransformAnimationTrackNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeTransformAnimationTrackNode;

// Class InterchangeNodes.InterchangeSkeletalAnimationTrackNode
// 0x0220 (0x0290 - 0x0070)
class UInterchangeSkeletalAnimationTrackNode final : public UInterchangeAnimationTrackBaseNode
{
public:
	uint8                                         Pad_70[0x220];                                     // 0x0070(0x0220)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetAnimationPayloadKeyForMorphTargetNodeUid(const class FString& MorphTargetNodeUid, const class FString& InUniqueId, const EInterchangeAnimationPayLoadType& InType);
	bool SetAnimationPayloadKeyForSceneNodeUid(const class FString& SceneNodeUid, const class FString& InUniqueId, const EInterchangeAnimationPayLoadType& InType);
	bool SetCustomAnimationSampleRate(const double& SampleRate);
	bool SetCustomAnimationStartTime(const double& StartTime);
	bool SetCustomAnimationStopTime(const double& StopTime);
	bool SetCustomSkeletonNodeUid(const class FString& AttributeValue);

	bool GetCustomAnimationSampleRate(double* SampleRate) const;
	bool GetCustomAnimationStartTime(double* StartTime) const;
	bool GetCustomAnimationStopTime(double* StopTime) const;
	bool GetCustomSkeletonNodeUid(class FString* AttributeValue) const;
	void GetMorphTargetNodeAnimationPayloadKeys(TMap<class FString, class FString>* OutMorphTargetNodeAnimationPayloadKeyUids, TMap<class FString, uint8>* OutMorphTargetNodeAnimationPayloadKeyTypes) const;
	void GetSceneNodeAnimationPayloadKeys(TMap<class FString, class FString>* OutSceneNodeAnimationPayloadKeyUids, TMap<class FString, uint8>* OutSceneNodeAnimationPayloadKeyTypes) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeSkeletalAnimationTrackNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeSkeletalAnimationTrackNode")
	}
	static class UInterchangeSkeletalAnimationTrackNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeSkeletalAnimationTrackNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeSkeletalAnimationTrackNode;

// Class InterchangeNodes.InterchangePhysicalCameraNode
// 0x0040 (0x00A0 - 0x0060)
class UInterchangePhysicalCameraNode final : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_60[0x40];                                      // 0x0060(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomEnableDepthOfField(const bool& AttributeValue);
	bool SetCustomFocalLength(const float& AttributeValue);
	bool SetCustomSensorHeight(const float& AttributeValue);
	bool SetCustomSensorWidth(const float& AttributeValue);

	bool GetCustomEnableDepthOfField(bool* AttributeValue) const;
	bool GetCustomFocalLength(float* AttributeValue) const;
	bool GetCustomSensorHeight(float* AttributeValue) const;
	bool GetCustomSensorWidth(float* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangePhysicalCameraNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangePhysicalCameraNode")
	}
	static class UInterchangePhysicalCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangePhysicalCameraNode>();
	}
};
DUMPER7_ASSERTS_UInterchangePhysicalCameraNode;

// Class InterchangeNodes.InterchangeStandardCameraNode
// 0x0060 (0x00C0 - 0x0060)
class UInterchangeStandardCameraNode final : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_60[0x60];                                      // 0x0060(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomAspectRatio(const float& AttributeValue);
	bool SetCustomFarClipPlane(const float& AttributeValue);
	bool SetCustomFieldOfView(const float& AttributeValue);
	bool SetCustomNearClipPlane(const float& AttributeValue);
	bool SetCustomProjectionMode(const EInterchangeCameraProjectionType& AttributeValue);
	bool SetCustomWidth(const float& AttributeValue);

	bool GetCustomAspectRatio(float* AttributeValue) const;
	bool GetCustomFarClipPlane(float* AttributeValue) const;
	bool GetCustomFieldOfView(float* AttributeValue) const;
	bool GetCustomNearClipPlane(float* AttributeValue) const;
	bool GetCustomProjectionMode(EInterchangeCameraProjectionType* AttributeValue) const;
	bool GetCustomWidth(float* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeStandardCameraNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeStandardCameraNode")
	}
	static class UInterchangeStandardCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeStandardCameraNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeStandardCameraNode;

// Class InterchangeNodes.InterchangeBaseLightNode
// 0x0040 (0x00A0 - 0x0060)
class UInterchangeBaseLightNode : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_60[0x40];                                      // 0x0060(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomIntensity(float AttributeValue);
	bool SetCustomLightColor(const struct FLinearColor& AttributeValue);
	bool SetCustomTemperature(float AttributeValue);
	bool SetCustomUseTemperature(bool AttributeValue);

	bool GetCustomIntensity(float* AttributeValue) const;
	bool GetCustomLightColor(struct FLinearColor* AttributeValue) const;
	bool GetCustomTemperature(float* AttributeValue) const;
	bool GetCustomUseTemperature(bool* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeBaseLightNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeBaseLightNode")
	}
	static class UInterchangeBaseLightNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeBaseLightNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeBaseLightNode;

// Class InterchangeNodes.InterchangeLightNode
// 0x0030 (0x00D0 - 0x00A0)
class UInterchangeLightNode : public UInterchangeBaseLightNode
{
public:
	uint8                                         Pad_A0[0x30];                                      // 0x00A0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomAttenuationRadius(float AttributeValue);
	bool SetCustomIESTexture(const class FString& AttributeValue);
	bool SetCustomIntensityUnits(const EInterchangeLightUnits& AttributeValue);

	bool GetCustomAttenuationRadius(float* AttributeValue) const;
	bool GetCustomIESTexture(class FString* AttributeValue) const;
	bool GetCustomIntensityUnits(EInterchangeLightUnits* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeLightNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeLightNode")
	}
	static class UInterchangeLightNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeLightNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeLightNode;

// Class InterchangeNodes.InterchangePointLightNode
// 0x0020 (0x00F0 - 0x00D0)
class UInterchangePointLightNode : public UInterchangeLightNode
{
public:
	uint8                                         Pad_D0[0x20];                                      // 0x00D0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomLightFalloffExponent(float AttributeValue);
	bool SetCustomUseInverseSquaredFalloff(bool AttributeValue);

	bool GetCustomLightFalloffExponent(float* AttributeValue) const;
	bool GetCustomUseInverseSquaredFalloff(bool* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangePointLightNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangePointLightNode")
	}
	static class UInterchangePointLightNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangePointLightNode>();
	}
};
DUMPER7_ASSERTS_UInterchangePointLightNode;

// Class InterchangeNodes.InterchangeSpotLightNode
// 0x0020 (0x0110 - 0x00F0)
class UInterchangeSpotLightNode final : public UInterchangePointLightNode
{
public:
	uint8                                         Pad_F0[0x20];                                      // 0x00F0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomInnerConeAngle(float AttributeValue);
	bool SetCustomOuterConeAngle(float AttributeValue);

	bool GetCustomInnerConeAngle(float* AttributeValue) const;
	bool GetCustomOuterConeAngle(float* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeSpotLightNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeSpotLightNode")
	}
	static class UInterchangeSpotLightNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeSpotLightNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeSpotLightNode;

// Class InterchangeNodes.InterchangeRectLightNode
// 0x0020 (0x00F0 - 0x00D0)
class UInterchangeRectLightNode final : public UInterchangeLightNode
{
public:
	uint8                                         Pad_D0[0x20];                                      // 0x00D0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomSourceHeight(float AttributeValue);
	bool SetCustomSourceWidth(float AttributeValue);

	bool GetCustomSourceHeight(float* AttributeValue) const;
	bool GetCustomSourceWidth(float* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeRectLightNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeRectLightNode")
	}
	static class UInterchangeRectLightNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeRectLightNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeRectLightNode;

// Class InterchangeNodes.InterchangeDirectionalLightNode
// 0x0000 (0x00A0 - 0x00A0)
class UInterchangeDirectionalLightNode final : public UInterchangeBaseLightNode
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeDirectionalLightNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeDirectionalLightNode")
	}
	static class UInterchangeDirectionalLightNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeDirectionalLightNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeDirectionalLightNode;

// Class InterchangeNodes.InterchangeTextureNode
// 0x0030 (0x0090 - 0x0060)
class UInterchangeTextureNode : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_60[0x30];                                      // 0x0060(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustombFlipGreenChannel(const bool& AttributeValue);
	bool SetCustomFilter(const EInterchangeTextureFilterMode& AttributeValue);
	bool SetCustomSRGB(const bool& AttributeValue);
	void SetPayLoadKey(const class FString& PayloadKey);

	bool GetCustombFlipGreenChannel(bool* AttributeValue) const;
	bool GetCustomFilter(EInterchangeTextureFilterMode* AttributeValue) const;
	bool GetCustomSRGB(bool* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeTextureNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeTextureNode")
	}
	static class UInterchangeTextureNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTextureNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeTextureNode;

// Class InterchangeNodes.InterchangeTexture2DArrayNode
// 0x0000 (0x0090 - 0x0090)
class UInterchangeTexture2DArrayNode final : public UInterchangeTextureNode
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeTexture2DArrayNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeTexture2DArrayNode")
	}
	static class UInterchangeTexture2DArrayNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTexture2DArrayNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeTexture2DArrayNode;

// Class InterchangeNodes.InterchangeTextureCubeArrayNode
// 0x0000 (0x0090 - 0x0090)
class UInterchangeTextureCubeArrayNode final : public UInterchangeTextureNode
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeTextureCubeArrayNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeTextureCubeArrayNode")
	}
	static class UInterchangeTextureCubeArrayNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTextureCubeArrayNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeTextureCubeArrayNode;

// Class InterchangeNodes.InterchangeTextureCubeNode
// 0x0000 (0x0090 - 0x0090)
class UInterchangeTextureCubeNode final : public UInterchangeTextureNode
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeTextureCubeNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeTextureCubeNode")
	}
	static class UInterchangeTextureCubeNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTextureCubeNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeTextureCubeNode;

// Class InterchangeNodes.InterchangeTextureLightProfileNode
// 0x0000 (0x0090 - 0x0090)
class UInterchangeTextureLightProfileNode final : public UInterchangeTextureNode
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeTextureLightProfileNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeTextureLightProfileNode")
	}
	static class UInterchangeTextureLightProfileNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTextureLightProfileNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeTextureLightProfileNode;

// Class InterchangeNodes.InterchangeVariantSetNode
// 0x0040 (0x00A0 - 0x0060)
class UInterchangeVariantSetNode final : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_60[0x40];                                      // 0x0060(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddCustomDependencyUid(const class FString& DependencyUid);
	bool RemoveCustomDependencyUid(const class FString& DependencyUid);
	bool SetCustomDisplayText(const class FString& AttributeValue);
	bool SetCustomVariantsPayloadKey(const class FString& PayloadKey);

	void GetCustomDependencyUid(const int32 Index_0, class FString* OutDependencyUid) const;
	int32 GetCustomDependencyUidCount() const;
	void GetCustomDependencyUids(TArray<class FString>* OutDependencyUids) const;
	bool GetCustomDisplayText(class FString* AttributeValue) const;
	bool GetCustomVariantsPayloadKey(class FString* PayloadKey) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeVariantSetNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeVariantSetNode")
	}
	static class UInterchangeVariantSetNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeVariantSetNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeVariantSetNode;

// Class InterchangeNodes.InterchangeSceneVariantSetsNode
// 0x0020 (0x0080 - 0x0060)
class UInterchangeSceneVariantSetsNode final : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_60[0x20];                                      // 0x0060(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddCustomVariantSetUid(const class FString& VariantUid);
	bool RemoveCustomVariantSetUid(const class FString& VariantUid);

	void GetCustomVariantSetUid(const int32 Index_0, class FString* OutVariantUid) const;
	int32 GetCustomVariantSetUidCount() const;
	void GetCustomVariantSetUids(TArray<class FString>* OutVariantUids) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeSceneVariantSetsNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeSceneVariantSetsNode")
	}
	static class UInterchangeSceneVariantSetsNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeSceneVariantSetsNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeSceneVariantSetsNode;

// Class InterchangeNodes.InterchangeVolumeTextureNode
// 0x0000 (0x0090 - 0x0090)
class UInterchangeVolumeTextureNode final : public UInterchangeTextureNode
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeVolumeTextureNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeVolumeTextureNode")
	}
	static class UInterchangeVolumeTextureNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeVolumeTextureNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeVolumeTextureNode;

// Class InterchangeNodes.InterchangeMaterialInstanceNode
// 0x0010 (0x0070 - 0x0060)
class UInterchangeMaterialInstanceNode final : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddScalarParameterValue(const class FString& ParameterName, float AttributeValue);
	bool AddStaticSwitchParameterValue(const class FString& ParameterName, bool AttributeValue);
	bool AddTextureParameterValue(const class FString& ParameterName, const class FString& AttributeValue);
	bool AddVectorParameterValue(const class FString& ParameterName, const struct FLinearColor& AttributeValue);

	bool GetCustomParent(class FString* AttributeValue) const;
	bool GetScalarParameterValue(const class FString& ParameterName, float* AttributeValue) const;
	bool GetStaticSwitchParameterValue(const class FString& ParameterName, bool* AttributeValue) const;
	bool GetTextureParameterValue(const class FString& ParameterName, class FString* AttributeValue) const;
	bool GetVectorParameterValue(const class FString& ParameterName, struct FLinearColor* AttributeValue) const;
	bool SetCustomParent(const class FString& AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeMaterialInstanceNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeMaterialInstanceNode")
	}
	static class UInterchangeMaterialInstanceNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeMaterialInstanceNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeMaterialInstanceNode;

// Class InterchangeNodes.InterchangeMeshNode
// 0x0188 (0x01E8 - 0x0060)
class UInterchangeMeshNode final : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_60[0x188];                                     // 0x0060(0x0188)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool RemoveMorphTargetDependencyUid(const class FString& DependencyUid);
	bool RemoveSceneInstanceUid(const class FString& DependencyUid);
	bool RemoveSkeletonDependencyUid(const class FString& DependencyUid);
	bool RemoveSlotMaterialDependencyUid(const class FString& SlotName);
	bool SetCustomBoundingBox(const struct FBox& AttributeValue);
	bool SetCustomHasSmoothGroup(const bool& AttributeValue);
	bool SetCustomHasVertexBinormal(const bool& AttributeValue);
	bool SetCustomHasVertexColor(const bool& AttributeValue);
	bool SetCustomHasVertexNormal(const bool& AttributeValue);
	bool SetCustomHasVertexTangent(const bool& AttributeValue);
	bool SetCustomPolygonCount(const int32& AttributeValue);
	bool SetCustomUVCount(const int32& AttributeValue);
	bool SetCustomVertexCount(const int32& AttributeValue);
	bool SetMorphTarget(const bool bIsMorphTarget);
	bool SetMorphTargetDependencyUid(const class FString& DependencyUid);
	bool SetMorphTargetName(const class FString& MorphTargetName);
	void SetPayLoadKey(const class FString& PayloadKey, const EInterchangeMeshPayLoadType& PayLoadType);
	bool SetSceneInstanceUid(const class FString& DependencyUid);
	bool SetSkeletonDependencyUid(const class FString& DependencyUid);
	bool SetSkinnedMesh(const bool bIsSkinnedMesh);
	bool SetSlotMaterialDependencyUid(const class FString& SlotName, const class FString& MaterialDependencyUid);

	bool GetCustomBoundingBox(struct FBox* AttributeValue) const;
	bool GetCustomHasSmoothGroup(bool* AttributeValue) const;
	bool GetCustomHasVertexBinormal(bool* AttributeValue) const;
	bool GetCustomHasVertexColor(bool* AttributeValue) const;
	bool GetCustomHasVertexNormal(bool* AttributeValue) const;
	bool GetCustomHasVertexTangent(bool* AttributeValue) const;
	bool GetCustomPolygonCount(int32* AttributeValue) const;
	bool GetCustomUVCount(int32* AttributeValue) const;
	bool GetCustomVertexCount(int32* AttributeValue) const;
	int32 GetMorphTargetDependeciesCount() const;
	void GetMorphTargetDependencies(TArray<class FString>* OutDependencies) const;
	void GetMorphTargetDependency(const int32 Index_0, class FString* OutDependency) const;
	bool GetMorphTargetName(class FString* OutMorphTargetName) const;
	void GetSceneInstanceUid(const int32 Index_0, class FString* OutDependency) const;
	void GetSceneInstanceUids(TArray<class FString>* OutDependencies) const;
	int32 GetSceneInstanceUidsCount() const;
	int32 GetSkeletonDependeciesCount() const;
	void GetSkeletonDependencies(TArray<class FString>* OutDependencies) const;
	void GetSkeletonDependency(const int32 Index_0, class FString* OutDependency) const;
	void GetSlotMaterialDependencies(TMap<class FString, class FString>* OutMaterialDependencies) const;
	bool GetSlotMaterialDependencyUid(const class FString& SlotName, class FString* OutMaterialDependency) const;
	bool IsMorphTarget() const;
	bool IsSkinnedMesh() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeMeshNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeMeshNode")
	}
	static class UInterchangeMeshNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeMeshNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeMeshNode;

// Class InterchangeNodes.InterchangeSceneNode
// 0x02C0 (0x0320 - 0x0060)
class UInterchangeSceneNode final : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_60[0x2C0];                                     // 0x0060(0x02C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddSpecializedType(const class FString& SpecializedType);
	bool RemoveSlotMaterialDependencyUid(const class FString& SlotName);
	bool RemoveSpecializedType(const class FString& SpecializedType);
	bool SetCustomAnimationAssetUidToPlay(const class FString& AttributeValue);
	bool SetCustomAssetInstanceUid(const class FString& AttributeValue);
	bool SetCustomBindPoseLocalTransform(const class UInterchangeBaseNodeContainer* BaseNodeContainer, const struct FTransform& AttributeValue, bool bResetCache);
	bool SetCustomGeometricTransform(const struct FTransform& AttributeValue);
	bool SetCustomLocalTransform(const class UInterchangeBaseNodeContainer* BaseNodeContainer, const struct FTransform& AttributeValue, bool bResetCache);
	bool SetCustomTimeZeroLocalTransform(const class UInterchangeBaseNodeContainer* BaseNodeContainer, const struct FTransform& AttributeValue, bool bResetCache);
	bool SetMorphTargetCurveWeight(const class FString& MorphTargetName, const float& Weight);
	bool SetSlotMaterialDependencyUid(const class FString& SlotName, const class FString& MaterialDependencyUid);

	bool GetCustomAnimationAssetUidToPlay(class FString* AttributeValue) const;
	bool GetCustomAssetInstanceUid(class FString* AttributeValue) const;
	bool GetCustomBindPoseGlobalTransform(const class UInterchangeBaseNodeContainer* BaseNodeContainer, const struct FTransform& GlobalOffsetTransform, struct FTransform* AttributeValue, bool bForceRecache) const;
	bool GetCustomBindPoseLocalTransform(struct FTransform* AttributeValue) const;
	bool GetCustomGeometricTransform(struct FTransform* AttributeValue) const;
	bool GetCustomGlobalTransform(const class UInterchangeBaseNodeContainer* BaseNodeContainer, const struct FTransform& GlobalOffsetTransform, struct FTransform* AttributeValue, bool bForceRecache) const;
	bool GetCustomLocalTransform(struct FTransform* AttributeValue) const;
	bool GetCustomTimeZeroGlobalTransform(const class UInterchangeBaseNodeContainer* BaseNodeContainer, const struct FTransform& GlobalOffsetTransform, struct FTransform* AttributeValue, bool bForceRecache) const;
	bool GetCustomTimeZeroLocalTransform(struct FTransform* AttributeValue) const;
	void GetMorphTargetCurveWeights(TMap<class FString, float>* OutMorphTargetCurveWeights) const;
	void GetSlotMaterialDependencies(TMap<class FString, class FString>* OutMaterialDependencies) const;
	bool GetSlotMaterialDependencyUid(const class FString& SlotName, class FString* OutMaterialDependency) const;
	void GetSpecializedType(const int32 Index_0, class FString* OutSpecializedType) const;
	int32 GetSpecializedTypeCount() const;
	void GetSpecializedTypes(TArray<class FString>* OutSpecializedTypes) const;
	bool IsSpecializedTypeContains(const class FString& SpecializedType) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeSceneNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeSceneNode")
	}
	static class UInterchangeSceneNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeSceneNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeSceneNode;

// Class InterchangeNodes.InterchangeShaderPortsAPI
// 0x0000 (0x0028 - 0x0028)
class UInterchangeShaderPortsAPI final : public UObject
{
public:
	static bool ConnectDefaultOuputToInput(class UInterchangeBaseNode* InterchangeNode, const class FString& InputName, const class FString& ExpressionUid);
	static bool ConnectOuputToInputByIndex(class UInterchangeBaseNode* InterchangeNode, const class FString& InputName, const class FString& ExpressionUid, int32 OutputIndex);
	static bool ConnectOuputToInputByName(class UInterchangeBaseNode* InterchangeNode, const class FString& InputName, const class FString& ExpressionUid, const class FString& OutputName);
	static void GatherInputs(const class UInterchangeBaseNode* InterchangeNode, TArray<class FString>* OutInputNames);
	static bool GetInputConnection(const class UInterchangeBaseNode* InterchangeNode, const class FString& InputName, class FString* OutExpressionUid, class FString* OutputName);
	static bool HasInput(const class UInterchangeBaseNode* InterchangeNode, const class FName& InInputName);
	static bool IsAnInput(const class FString& AttributeKey);
	static class FString MakeInputConnectionKey(const class FString& InputName);
	static class FString MakeInputName(const class FString& InputKey);
	static class FString MakeInputValueKey(const class FString& InputName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeShaderPortsAPI")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeShaderPortsAPI")
	}
	static class UInterchangeShaderPortsAPI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeShaderPortsAPI>();
	}
};
DUMPER7_ASSERTS_UInterchangeShaderPortsAPI;

// Class InterchangeNodes.InterchangeShaderNode
// 0x0010 (0x0070 - 0x0060)
class UInterchangeShaderNode : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomShaderType(const class FString& AttributeValue);

	bool GetCustomShaderType(class FString* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeShaderNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeShaderNode")
	}
	static class UInterchangeShaderNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeShaderNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeShaderNode;

// Class InterchangeNodes.InterchangeFunctionCallShaderNode
// 0x0010 (0x0080 - 0x0070)
class UInterchangeFunctionCallShaderNode final : public UInterchangeShaderNode
{
public:
	uint8                                         Pad_70[0x10];                                      // 0x0070(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomMaterialFunction(const class FString& AttributeValue);

	bool GetCustomMaterialFunction(class FString* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeFunctionCallShaderNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeFunctionCallShaderNode")
	}
	static class UInterchangeFunctionCallShaderNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeFunctionCallShaderNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeFunctionCallShaderNode;

// Class InterchangeNodes.InterchangeShaderGraphNode
// 0x0050 (0x00C0 - 0x0070)
class UInterchangeShaderGraphNode final : public UInterchangeShaderNode
{
public:
	uint8                                         Pad_70[0x50];                                      // 0x0070(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomIsAShaderFunction(const bool& AttributeValue);
	bool SetCustomOpacityMaskClipValue(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomScreenSpaceReflections(const bool& AttributeValue);
	bool SetCustomTwoSided(const bool& AttributeValue);
	bool SetCustomTwoSidedTransmission(const bool& AttributeValue);

	bool GetCustomIsAShaderFunction(bool* AttributeValue) const;
	bool GetCustomOpacityMaskClipValue(float* AttributeValue) const;
	bool GetCustomScreenSpaceReflections(bool* AttributeValue) const;
	bool GetCustomTwoSided(bool* AttributeValue) const;
	bool GetCustomTwoSidedTransmission(bool* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeShaderGraphNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeShaderGraphNode")
	}
	static class UInterchangeShaderGraphNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeShaderGraphNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeShaderGraphNode;

// Class InterchangeNodes.InterchangeTexture2DNode
// 0x0098 (0x0128 - 0x0090)
class UInterchangeTexture2DNode : public UInterchangeTextureNode
{
public:
	uint8                                         Pad_90[0x98];                                      // 0x0090(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomWrapU(const EInterchangeTextureWrapMode& AttributeValue);
	bool SetCustomWrapV(const EInterchangeTextureWrapMode& AttributeValue);

	bool GetCustomWrapU(EInterchangeTextureWrapMode* AttributeValue) const;
	bool GetCustomWrapV(EInterchangeTextureWrapMode* AttributeValue) const;
	TMap<int32, class FString> GetSourceBlocks() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeTexture2DNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeTexture2DNode")
	}
	static class UInterchangeTexture2DNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTexture2DNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeTexture2DNode;

// Class InterchangeNodes.InterchangeTextureBlurNode
// 0x0000 (0x0128 - 0x0128)
class UInterchangeTextureBlurNode final : public UInterchangeTexture2DNode
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InterchangeTextureBlurNode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InterchangeTextureBlurNode")
	}
	static class UInterchangeTextureBlurNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTextureBlurNode>();
	}
};
DUMPER7_ASSERTS_UInterchangeTextureBlurNode;

}

