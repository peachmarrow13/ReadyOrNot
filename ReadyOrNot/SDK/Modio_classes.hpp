#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Modio

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "Modio_structs.hpp"


namespace SDK
{

// Class Modio.ModioCommonTypesLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioCommonTypesLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FString Conv_ApiKeyToString(const struct FModioApiKey& ApiKey);
	static class FString Conv_EmailAddressToString(const struct FModioEmailAddress& EmailAddress);
	static class FString Conv_EmailAuthCodeToString(const struct FModioEmailAuthCode& EmailAuthCode);
	static class FString Conv_FileMetadataIDToString(const struct FModioFileMetadataID& FileMetadataID);
	static class FString Conv_GameIDToString(const struct FModioGameID& GameId);
	static class FString Conv_ModIDToString(const struct FModioModID& ModId);
	static struct FModioEmailAddress Conv_StringToEmailAddress(const class FString& Email);
	static struct FModioEmailAuthCode Conv_StringToEmailAuthCode(const class FString& AuthCode);
	static class FString Conv_UserIDToString(const struct FModioUserID& UserId);
	static bool EqualTo(const struct FModioModID& A, const struct FModioModID& B);
	static int64 GetRawValueFromModID(const struct FModioModID& In);
	static struct FModioApiKey MakeApiKey(const class FString& ApiKey);
	static struct FModioAuthenticationParams MakeAuthParams(const class FString& AuthToken, const class FString& EmailAddress, const bool bHasAcceptedTOS);
	static struct FModioEntitlementParams MakeEntitlementParams(const TMap<class FString, class FString>& ExtendedParameters);
	static struct FModioGameID MakeGameId(int64 GameId);
	static struct FModioGuid MakeGuid(const class FString& Guid);
	static struct FModioInitializeOptions MakeInitializeOptions(int64 GameId, const class FString& ApiKey, EModioEnvironment GameEnvironment, EModioPortal PortalInUse, bool bUseBackgroundThread);
	static struct FModioMetricsSessionParams MakeMetricsSessionParams(const TArray<struct FModioModID>& IDs);
	static bool NotEqualTo(const struct FModioModID& A, const struct FModioModID& B);
	static struct FModioInitializeOptions SetAPIKey(const struct FModioInitializeOptions& Options, const class FString& ApiKey);
	static struct FModioInitializeOptions SetBackgroundThread(const struct FModioInitializeOptions& Options, bool bUseBackgroundThread);
	static struct FModioInitializeOptions SetExtendedInitializationParameters(const struct FModioInitializeOptions& Options, const TMap<class FString, class FString>& ExtendedParameters);
	static struct FModioInitializeOptions SetGameEnvironment(const struct FModioInitializeOptions& Options, EModioEnvironment GameEnvironment);
	static struct FModioInitializeOptions SetGameId(const struct FModioInitializeOptions& Options, int64 GameId);
	static struct FModioInitializeOptions SetPortal(const struct FModioInitializeOptions& Options, EModioPortal PortalToUse);
	static struct FModioMetricsSessionParams SetSessionId(const struct FModioMetricsSessionParams& Params_0, const struct FModioGuid& ID);
	static struct FModioInitializeOptions SetSessionIdentifier(const struct FModioInitializeOptions& Options, const class FString& SessionIdentifier);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioCommonTypesLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioCommonTypesLibrary")
	}
	static class UModioCommonTypesLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioCommonTypesLibrary>();
	}
};
DUMPER7_ASSERTS_UModioCommonTypesLibrary;

// Class Modio.ModioCreateModLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioCreateModLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void SetChangelogString(struct FModioCreateModFileParams& In, const class FString& Changelog);
	static void SetDescription(struct FModioCreateModParams& In, const class FString& Description);
	static void SetHomepageURL(struct FModioCreateModParams& In, const class FString& HomepageURL);
	static void SetInitialVisibility(struct FModioCreateModParams& In, EModioObjectVisibilityFlags InitialVisibility);
	static void SetInitialVisibility_DEPRECATED(struct FModioCreateModParams& In, bool InitialVisibility);
	static void SetMarkAsActiveRelease(struct FModioCreateModFileParams& In, bool bMarkAsActiveRelease);
	static void SetMetadataBlob(struct FModioCreateModParams& In, const class FString& MetadataBlob);
	static void SetModFileMetadataBlob(struct FModioCreateModFileParams& In, const class FString& MetadataBlob);
	static void SetModfilePlatforms(struct FModioCreateModFileParams& In, TArray<EModioModfilePlatform>& Platforms);
	static void SetTags(struct FModioCreateModParams& In, TArray<class FString>& Tags);
	static void SetVersionString(struct FModioCreateModFileParams& In, const class FString& Version);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioCreateModLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioCreateModLibrary")
	}
	static class UModioCreateModLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioCreateModLibrary>();
	}
};
DUMPER7_ASSERTS_UModioCreateModLibrary;

// Class Modio.ModioEditModLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioEditModLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void SetDescription(struct FModioEditModParams& In, const class FString& Description);
	static void SetHomepageURL(struct FModioEditModParams& In, const class FString& HomepageURL);
	static void SetLogoPath(struct FModioEditModParams& In, const class FString& LogoPath);
	static void SetMaturityFlags(struct FModioEditModParams& In, EModioMaturityFlags MaturityFlags);
	static void SetMetadataBlob(struct FModioEditModParams& In, const class FString& MetadataBlob);
	static void SetName(struct FModioEditModParams& In, const class FString& Name_0);
	static void SetNamePath(struct FModioEditModParams& In, const class FString& NamePath);
	static void SetSummary(struct FModioEditModParams& In, const class FString& Summary);
	static void SetTags(struct FModioEditModParams& In, TArray<class FString>& Tags);
	static void SetVisibility(struct FModioEditModParams& In, EModioObjectVisibilityFlags Visibility);
	static void SetVisibility_DEPRECATED(struct FModioEditModParams& In, bool Visibility);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioEditModLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioEditModLibrary")
	}
	static class UModioEditModLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioEditModLibrary>();
	}
};
DUMPER7_ASSERTS_UModioEditModLibrary;

// Class Modio.ModioUIEnumLocalizationLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioUIEnumLocalizationLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FText FileSizeUnsigned64_ToText(const struct FModioUnsigned64& Filesize, int32 MinDecimals, int32 MaxDecimals, EFileSizeUnit Unit, bool bIncludeUnitName);
	static class FText GetLocalizedTextForEnumByName(const class FName& EnumName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioUIEnumLocalizationLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioUIEnumLocalizationLibrary")
	}
	static class UModioUIEnumLocalizationLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIEnumLocalizationLibrary>();
	}
};
DUMPER7_ASSERTS_UModioUIEnumLocalizationLibrary;

// Class Modio.ModioUILocalizationLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioUILocalizationLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FText GetLocalizedTextFromDefaultTableByKey(const class FString& StringKey);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioUILocalizationLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioUILocalizationLibrary")
	}
	static class UModioUILocalizationLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUILocalizationLibrary>();
	}
};
DUMPER7_ASSERTS_UModioUILocalizationLibrary;

// Class Modio.ModioErrorCodeLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioErrorCodeLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FString GetMessage(const struct FModioErrorCode& Error);
	static int32 GetValue(const struct FModioErrorCode& Error);
	static bool IsError(const struct FModioErrorCode& Error);
	static bool IsErrorAsExec(const struct FModioErrorCode& Error);
	static struct FModioErrorCode ReconstructError(int32 Value, int32 Category);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioErrorCodeLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioErrorCodeLibrary")
	}
	static class UModioErrorCodeLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioErrorCodeLibrary>();
	}
};
DUMPER7_ASSERTS_UModioErrorCodeLibrary;

// Class Modio.ModioErrorConditionLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioErrorConditionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool ErrorCodeMatches(const struct FModioErrorCode& ErrorCode, EModioErrorCondition Condition);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioErrorConditionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioErrorConditionLibrary")
	}
	static class UModioErrorConditionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioErrorConditionLibrary>();
	}
};
DUMPER7_ASSERTS_UModioErrorConditionLibrary;

// Class Modio.ModioExampleLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioExampleLibrary final : public UBlueprintFunctionLibrary
{
public:
	static EModioAvatarSize GetAvatarThumbnailSize();
	static EModioLogoSize GetLogoFullSize();
	static EModioLogoSize GetLogoThumbnailSize();
	static void ListUserSubscriptionAsync(const struct FModioFilterParams& FilterParams, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModInfoList& Result)> Callback);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioExampleLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioExampleLibrary")
	}
	static class UModioExampleLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioExampleLibrary>();
	}
};
DUMPER7_ASSERTS_UModioExampleLibrary;

// Class Modio.ModioPresetFilterParamsLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioPresetFilterParamsLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FModioFilterParams ToFilterParams(const struct FModioPresetFilterParams& Preset);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioPresetFilterParamsLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioPresetFilterParamsLibrary")
	}
	static class UModioPresetFilterParamsLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioPresetFilterParamsLibrary>();
	}
};
DUMPER7_ASSERTS_UModioPresetFilterParamsLibrary;

// Class Modio.ModioFilterParamsLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioFilterParamsLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FModioFilterParams DisallowMatureContent(struct FModioFilterParams& Filter);
	static struct FModioFilterParams ExcludingIDs(struct FModioFilterParams& Filter, const TArray<struct FModioModID>& IDs);
	static struct FModioFilterParams IndexedResults(struct FModioFilterParams& Filter, int64 StartIndex, int64 ResultCount);
	static struct FModioFilterParams MarkedLiveAfter(struct FModioFilterParams& Filter, const struct FDateTime& LiveAfter);
	static struct FModioFilterParams MarkedLiveBefore(struct FModioFilterParams& Filter, const struct FDateTime& LiveBefore);
	static struct FModioFilterParams MatchingAuthor(struct FModioFilterParams& Filter, const struct FModioUserID& ID);
	static struct FModioFilterParams MatchingAuthors(struct FModioFilterParams& Filter, const TArray<struct FModioUserID>& IDs);
	static struct FModioFilterParams MatchingIDs(struct FModioFilterParams& Filter, const TArray<struct FModioModID>& IDs);
	static struct FModioFilterParams MetadataLike(struct FModioFilterParams& Filter, const class FString& SearchString);
	static struct FModioFilterParams NameContains(struct FModioFilterParams& Filter, const class FString& SearchString);
	static struct FModioFilterParams NameContainsStrings(struct FModioFilterParams& Filter, const TArray<class FString>& SearchStrings);
	static struct FModioFilterParams PagedResults(struct FModioFilterParams& Filter, int64 PageNumber, int64 PageSize);
	static struct FModioFilterParams RevenueType(struct FModioFilterParams& Filter, EModioRevenueFilterType RevenueType_0);
	static struct FModioFilterParams SortBy(struct FModioFilterParams& Filter, EModioSortFieldType ByField, EModioSortDirection ByDirection);
	static struct FModioFilterParams WithMatureContentFlags(struct FModioFilterParams& Filter, int32 ByMaturity);
	static struct FModioFilterParams WithoutTag(struct FModioFilterParams& Filter, const class FString& Tag);
	static struct FModioFilterParams WithoutTags(struct FModioFilterParams& Filter, const TArray<class FString>& NewTags);
	static struct FModioFilterParams WithTag(struct FModioFilterParams& Filter, const class FString& Tag);
	static struct FModioFilterParams WithTags(struct FModioFilterParams& Filter, const TArray<class FString>& NewTags);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioFilterParamsLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioFilterParamsLibrary")
	}
	static class UModioFilterParamsLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioFilterParamsLibrary>();
	}
};
DUMPER7_ASSERTS_UModioFilterParamsLibrary;

// Class Modio.ModioGameInfoListLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioGameInfoListLibrary final : public UBlueprintFunctionLibrary
{
public:
	static const TArray<struct FModioGameInfo> GetGames(const struct FModioGameInfoList& GameInfoList);
	static const struct FModioPagedResult GetPagedResult(const struct FModioGameInfoList& GameInfoList);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioGameInfoListLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioGameInfoListLibrary")
	}
	static class UModioGameInfoListLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioGameInfoListLibrary>();
	}
};
DUMPER7_ASSERTS_UModioGameInfoListLibrary;

// Class Modio.ModioImageLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioImageLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FVector2D GetAvatarSize(class UTexture* Avatar, EModioAvatarSize AvatarSize);
	static struct FVector2D GetGallerySize(class UTexture* GalleryImage, EModioGallerySize GallerySize);
	static struct FVector2D GetLogoSize(class UTexture* Logo, EModioLogoSize LogoSize);
	static EModioImageState GetState(const struct FModioImageWrapper& Image);
	static class UTexture2DDynamic* GetTexture(const struct FModioImageWrapper& Image);
	static void LoadAsync(const struct FModioImageWrapper& Image, TDelegate<void(class UTexture2DDynamic* Texture)> OnImageLoaded);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioImageLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioImageLibrary")
	}
	static class UModioImageLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioImageLibrary>();
	}
};
DUMPER7_ASSERTS_UModioImageLibrary;

// Class Modio.ModioInstallationOverride
// 0x0000 (0x0028 - 0x0028)
class UModioInstallationOverride final : public UBlueprintFunctionLibrary
{
public:
	static bool OverrideModInstallationDirectory(const class FString& NewInstallPath, const struct FModioInitializeOptions& InitParams);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioInstallationOverride")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioInstallationOverride")
	}
	static class UModioInstallationOverride* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioInstallationOverride>();
	}
};
DUMPER7_ASSERTS_UModioInstallationOverride;

// Class Modio.ModioModCollectionLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioModCollectionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FModioModID GetID(const struct FModioModCollectionEntry& Entry);
	static const struct FModioModInfo GetModProfile(const struct FModioModCollectionEntry& Entry);
	static EModioModState GetModState(const struct FModioModCollectionEntry& Entry);
	static const class FString GetPath(const struct FModioModCollectionEntry& Entry);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioModCollectionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioModCollectionLibrary")
	}
	static class UModioModCollectionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModCollectionLibrary>();
	}
};
DUMPER7_ASSERTS_UModioModCollectionLibrary;

// Class Modio.ModioModDependenciesLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioModDependenciesLibrary final : public UBlueprintFunctionLibrary
{
public:
	static const TArray<struct FModioModDependency> GetDependencies(const struct FModioModDependencyList& DependencyList);
	static const struct FModioPagedResult GetPagedResult(const struct FModioModDependencyList& DependencyList);
	static const int64 GetTotalFilesize(const struct FModioModDependencyList& DependencyList);
	static const int64 GetTotalFilesizeUncompressed(const struct FModioModDependencyList& DependencyList);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioModDependenciesLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioModDependenciesLibrary")
	}
	static class UModioModDependenciesLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModDependenciesLibrary>();
	}
};
DUMPER7_ASSERTS_UModioModDependenciesLibrary;

// Class Modio.ModioModInfoListLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioModInfoListLibrary final : public UBlueprintFunctionLibrary
{
public:
	static const TArray<struct FModioModInfo> GetMods(const struct FModioModInfoList& ModInfoList);
	static const struct FModioPagedResult GetPagedResult(const struct FModioModInfoList& ModInfoList);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioModInfoListLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioModInfoListLibrary")
	}
	static class UModioModInfoListLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModInfoListLibrary>();
	}
};
DUMPER7_ASSERTS_UModioModInfoListLibrary;

// Class Modio.ModioModProgressInfoLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioModProgressInfoLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FModioUnsigned64 GetCurrentProgress(const struct FModioModProgressInfo& Info, EModioModProgressState State);
	static EModioModProgressState GetCurrentState(const struct FModioModProgressInfo& Info);
	static struct FModioUnsigned64 GetTotalProgress(const struct FModioModProgressInfo& Info, EModioModProgressState State);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioModProgressInfoLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioModProgressInfoLibrary")
	}
	static class UModioModProgressInfoLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModProgressInfoLibrary>();
	}
};
DUMPER7_ASSERTS_UModioModProgressInfoLibrary;

// Class Modio.ModioModTagOptionsLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioModTagOptionsLibrary final : public UBlueprintFunctionLibrary
{
public:
	static const struct FModioPagedResult GetPagedResult(const struct FModioModTagOptions& ModTags);
	static const TArray<struct FModioModTagInfo> GetTags(const struct FModioModTagOptions& ModTags);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioModTagOptionsLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioModTagOptionsLibrary")
	}
	static class UModioModTagOptionsLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModTagOptionsLibrary>();
	}
};
DUMPER7_ASSERTS_UModioModTagOptionsLibrary;

// Class Modio.ModioOptionalLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioOptionalLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetValue_ModioOptionalGameInfo(const struct FModioOptionalGameInfo& OptionalGameInfo, struct FModioGameInfo* GameInfo);
	static bool GetValue_ModioOptionalGameInfoList(const struct FModioOptionalGameInfoList& OptionalGameInfoList, struct FModioGameInfoList* GameInfoList);
	static bool GetValue_ModioOptionalImage(const struct FModioOptionalImage& OptionalImage, struct FModioImageWrapper* Image);
	static bool GetValue_ModioOptionalModDependencyList(const struct FModioOptionalModDependencyList& OptionalDependencyList, struct FModioModDependencyList* DependencyList);
	static bool GetValue_ModioOptionalModID(const struct FModioOptionalModID& OptionalID, struct FModioModID* ID);
	static bool GetValue_ModioOptionalModInfo(const struct FModioOptionalModInfo& OptionalModInfo, struct FModioModInfo* ModInfo);
	static bool GetValue_ModioOptionalModInfoList(const struct FModioOptionalModInfoList& OptionalModInfoList, struct FModioModInfoList* ModInfoList);
	static bool GetValue_ModioOptionalModProgressInfo(const struct FModioOptionalModProgressInfo& OptionalModProgressInfo, struct FModioModProgressInfo* ModProgressInfo);
	static bool GetValue_ModioOptionalModTagOptions(const struct FModioOptionalModTagOptions& OptionalModTagOptions, struct FModioModTagOptions* ModTagOptions);
	static bool GetValue_ModioOptionalTerms(const struct FModioOptionalTerms& OptionalTerms, struct FModioTerms* Terms);
	static bool GetValue_ModioOptionalUInt64(const struct FModioOptionalUInt64& OptionalInt, struct FModioUnsigned64* UnderlyingInt);
	static bool GetValue_ModioOptionalUser(const struct FModioOptionalUser& OptionalUser, struct FModioUser* User);
	static bool IsSet_ModioOptionalGameInfo(const struct FModioOptionalGameInfo& OptionalGameInfo);
	static bool IsSet_ModioOptionalGameInfoList(const struct FModioOptionalGameInfoList& OptionalGameInfoList);
	static bool IsSet_ModioOptionalImage(const struct FModioOptionalImage& OptionalImage);
	static bool IsSet_ModioOptionalModDependencyList(const struct FModioOptionalModDependencyList& OptionalDependencyList);
	static bool IsSet_ModioOptionalModID(const struct FModioOptionalModID& OptionalID);
	static bool IsSet_ModioOptionalModInfo(const struct FModioOptionalModInfo& OptionalModInfo);
	static bool IsSet_ModioOptionalModInfoList(const struct FModioOptionalModInfoList& OptionalModInfoList);
	static bool IsSet_ModioOptionalModProgressInfo(const struct FModioOptionalModProgressInfo& OptionalModProgressInfo);
	static bool IsSet_ModioOptionalModTagOptions(const struct FModioOptionalModTagOptions& OptionalModTagOptions);
	static bool IsSet_ModioOptionalTerms(const struct FModioOptionalTerms& OptionalTerms);
	static bool IsSet_ModioOptionalUInt64(const struct FModioOptionalUInt64& OptionalInt);
	static bool IsSet_ModioOptionalUser(const struct FModioOptionalUser& OptionalUser);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioOptionalLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioOptionalLibrary")
	}
	static class UModioOptionalLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioOptionalLibrary>();
	}
};
DUMPER7_ASSERTS_UModioOptionalLibrary;

// Class Modio.ModioPlatformHelpersLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioPlatformHelpersLibrary final : public UBlueprintFunctionLibrary
{
public:
	static EModioPlatformName GetCurrentPlatform();
	static EModioAuthenticationProvider GetDefaultAuthProviderForCurrentPlatform();
	static EModioPortal GetDefaultPortalForCurrentPlatform();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioPlatformHelpersLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioPlatformHelpersLibrary")
	}
	static class UModioPlatformHelpersLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioPlatformHelpersLibrary>();
	}
};
DUMPER7_ASSERTS_UModioPlatformHelpersLibrary;

// Class Modio.ModioReportLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioReportLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FModioReportParams MakeReportForGame(const struct FModioGameID& Game, EModioReportType Type, const class FString& ReportDescription, const class FString& ReporterName, const class FString& ReporterContact);
	static struct FModioReportParams MakeReportForMod(const struct FModioModID& Mod, EModioReportType Type, const class FString& ReportDescription, const class FString& ReporterName, const class FString& ReporterContact);
	static struct FModioReportParams MakeReportForUser(const struct FModioUserID& User, EModioReportType Type, const class FString& ReportDescription, const class FString& ReporterName, const class FString& ReporterContact);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioReportLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioReportLibrary")
	}
	static class UModioReportLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioReportLibrary>();
	}
};
DUMPER7_ASSERTS_UModioReportLibrary;

// Class Modio.ModioSDKLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioSDKLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FString Conv_Int64ToString(int64 inInt);
	static class FText Conv_Int64ToText(int64 Value, bool bAlwaysSign, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits);
	static class FText Filesize_ToString(int64 Filesize, int32 MinDecimals, int32 MaxDecimals, EFileSizeUnit Unit, bool bIncludeUnitName);
	static class FString GetDefaultSessionIdWindows();
	static EFileSizeUnit GetDesiredFileSizeUnit(int64 Filesize);
	static EModioLanguage GetLanguageCodeFromString(const class FString& LanguageCode);
	static class FString GetLanguageCodeString(EModioLanguage Language);
	static class FString GetMonetizationPurchaseCategory(EModioPortal Portal);
	static struct FModioApiKey GetProjectApiKey();
	static EModioEnvironment GetProjectEnvironment();
	static struct FModioGameID GetProjectGameId();
	static struct FModioInitializeOptions GetProjectInitializeOptions();
	static struct FModioInitializeOptions GetProjectInitializeOptionsForSessionId(const class FString& SessionId);
	static class FString GetShortenedNumberAsString(int64 Number);
	static class FString GetTimeSpanAsString(const class FString& PastDateString);
	static bool IsValidEmailAddressFormat(const class FString& String);
	static bool IsValidSecurityCodeFormat(const class FString& String);
	static float Pct_Int64Int64(int64 Dividend, int64 Divisor);
	static class FText RoundNumberString(const class FText& inputText);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioSDKLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioSDKLibrary")
	}
	static class UModioSDKLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioSDKLibrary>();
	}
};
DUMPER7_ASSERTS_UModioSDKLibrary;

// Class Modio.ModioSettings
// 0x0098 (0x00C0 - 0x0028)
class UModioSettings final : public UObject
{
public:
	int64                                         GameId;                                            // 0x0028(0x0008)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ApiKey;                                            // 0x0030(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioEnvironment                             ENVIRONMENT;                                       // 0x0040(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioLogLevel                                LogLevel;                                          // 0x0041(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioPortal                                  DefaultPortal;                                     // 0x0042(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBackgroundThread;                              // 0x0043(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GlobalRetryLimit;                                  // 0x0044(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        LocalizationStringTable;                           // 0x0048(0x0020)(Edit, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMonetizationFeature;                        // 0x0068(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableModEnableDisableFeature;                    // 0x0069(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableModDownvoteFeature;                         // 0x006A(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EModioPortal, class FString>             PlatformIdentifiers;                               // 0x0070(0x0050)(Edit, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioSettings")
	}
	static class UModioSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioSettings>();
	}
};
DUMPER7_ASSERTS_UModioSettings;

// Class Modio.ModioSubsystem
// 0x0420 (0x0450 - 0x0030)
class UModioSubsystem final : public UEngineSubsystem
{
public:
	uint8                                         Pad_30[0x2E0];                                     // 0x0030(0x02E0)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FModioModID, struct FModioModCollectionEntry> UserSubscriptionsDefaultValue;         // 0x0310(0x0050)(NativeAccessSpecifierPrivate)
	TMap<struct FModioModID, struct FModioModCollectionEntry> QueryUserInstallationsDefaultValue;    // 0x0360(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_3B0[0xA0];                                     // 0x03B0(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class FString K2_GetDefaultModInstallationDirectory(const struct FModioGameID& GameId);

	void DisableModManagement();
	TArray<struct FModioValidationError> GetLastValidationError();
	bool IsModManagementBusy();
	bool IsUsingBackgroundThread();
	struct FModioErrorCode K2_AddToTempModSet(const TArray<struct FModioModID>& ModIds);
	void K2_ArchiveModAsync(const struct FModioModID& Mod, TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback);
	void K2_AuthenticateUserEmailAsync(const struct FModioEmailAuthCode& AuthenticationCode, TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback);
	void K2_AuthenticateUserExternalAsync(const struct FModioAuthenticationParams& User, EModioAuthenticationProvider Provider, TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback);
	void K2_ClearUserDataAsync(TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback);
	struct FModioErrorCode K2_CloseTempModSet();
	struct FModioErrorCode K2_EnableModManagement(TDelegate<void(const struct FModioModManagementEvent& Event)> Callback);
	void K2_FetchExternalUpdatesAsync(TDelegate<void(const struct FModioErrorCode& ErrorCode)> OnFetchDone);
	void K2_FetchUserPurchasesAsync(TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback);
	void K2_ForceUninstallModAsync(const struct FModioModID& ModToRemove, TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback);
	void K2_GetGameInfoAsync(const struct FModioGameID& GameId, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalGameInfo& GameInfo)> Callback);
	EModioLanguage K2_GetLanguage();
	struct FModioModCreationHandle K2_GetModCreationHandle();
	void K2_GetModDependenciesAsync(const struct FModioModID& ModId, bool Recursive, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModDependencyList& Dependencies)> Callback);
	void K2_GetModInfoAsync(const struct FModioModID& ModId, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModInfo& ModInfo)> Callback);
	void K2_GetModMediaAvatarAsync(const struct FModioModID& ModId, EModioAvatarSize AvatarSize, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalImage& Path)> Callback);
	void K2_GetModMediaGalleryImageAsync(const struct FModioModID& ModId, EModioGallerySize GallerySize, int32 Index_0, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalImage& Path)> Callback);
	void K2_GetModMediaLogoAsync(const struct FModioModID& ModId, EModioLogoSize LogoSize, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalImage& Path)> Callback);
	void K2_GetModTagOptionsAsync(TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModTagOptions& ModTagOptions)> Callback);
	void K2_GetMutedUsersAsync(TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalUserList& NewUserList)> Callback);
	void K2_GetTermsOfUseAsync(TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalTerms& Terms)> Callback);
	void K2_GetUserDelegationTokenAsync(TDelegate<void(const struct FModioErrorCode& ErrorCode, const class FString& Token)> Callback);
	void K2_GetUserMediaAvatarAsync(EModioAvatarSize AvatarSize, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalImage& Path)> Callback);
	void K2_GetUserWalletBalanceAsync(TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalUInt64& WalletBalance)> Callback);
	void K2_InitializeAsync(const struct FModioInitializeOptions& InitializeOptions, TDelegate<void(const struct FModioErrorCode& ErrorCode)> OnInitComplete);
	struct FModioErrorCode K2_InitTempModSet(const TArray<struct FModioModID>& ModIds);
	void K2_ListAllModsAsync(const struct FModioFilterParams& Filter, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModInfoList& Result)> Callback);
	void K2_ListUserCreatedModsAsync(const struct FModioFilterParams& Filter, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModInfoList& Result)> Callback);
	void K2_ListUserGamesAsync(const struct FModioFilterParams& Filter, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalGameInfoList& GameInfoList)> Callback);
	void K2_MetricsSessionEndAsync(TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback);
	void K2_MetricsSessionSendHeartbeatAtIntervalAsync(const struct FModioUnsigned64& IntervalSeconds, TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback);
	void K2_MetricsSessionSendHeartbeatOnceAsync(TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback);
	void K2_MetricsSessionStartAsync(const struct FModioMetricsSessionParams& Params_0, TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback);
	void K2_MuteUserAsync(const struct FModioUserID& UserId, TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback);
	void K2_PreviewExternalUpdatesAsync(TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModChangeMap& ModioPreviewMap)> OnPreviewDone);
	void K2_PurchaseModAsync(const struct FModioModID& ModId, const struct FModioUnsigned64& ExpectedPrice, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalTransactionRecord& Transaction)> Callback);
	struct FModioOptionalModProgressInfo K2_QueryCurrentModUpdate();
	TMap<struct FModioModID, struct FModioModCollectionEntry> K2_QueryTempModSet();
	struct FModioOptionalUser K2_QueryUserProfile();
	void K2_RefreshUserEntitlementsAsync(const struct FModioEntitlementParams& Params_0, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalEntitlementConsumptionStatusList& Entitlements)> Callback);
	struct FModioErrorCode K2_RemoveFromTempModSet(const TArray<struct FModioModID>& ModIds);
	void K2_ReportContentAsync(const struct FModioReportParams& Report, TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback);
	void K2_RequestEmailAuthCodeAsync(const struct FModioEmailAddress& EmailAddress, TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback);
	void K2_SetLanguage(EModioLanguage Locale);
	void K2_ShutdownAsync(TDelegate<void(const struct FModioErrorCode& ErrorCode)> OnShutdownComplete);
	void K2_SubmitModChangesAsync(const struct FModioModID& Mod, const struct FModioEditModParams& Params_0, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModInfo& ModInfo)> Callback);
	void K2_SubmitModRatingAsync(const struct FModioModID& Mod, EModioRating Rating, TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback);
	void K2_SubmitNewModAsync(const struct FModioModCreationHandle& Handle, const struct FModioCreateModParams& Params_0, TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModID& NewModID)> Callback);
	void K2_SubmitNewModFileForMod(const struct FModioModID& Mod, const struct FModioCreateModFileParams& Params_0);
	void K2_SubscribeToModAsync(const struct FModioModID& ModToSubscribeTo, bool IncludeDependencies, TDelegate<void(const struct FModioErrorCode& ErrorCode)> OnSubscribeComplete);
	void K2_UnmuteUserAsync(const struct FModioUserID& UserId, TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback);
	void K2_UnsubscribeFromModAsync(const struct FModioModID& ModToUnsubscribeFrom, TDelegate<void(const struct FModioErrorCode& ErrorCode)> OnUnsubscribeComplete);
	void K2_VerifyUserAuthenticationAsync(TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback);
	void KillBackgroundThread();
	struct FModioErrorCode PrioritizeTransferForMod(const struct FModioModID& ModToPrioritize);
	TMap<struct FModioModID, struct FModioModCollectionEntry> QuerySystemInstallations();
	TMap<struct FModioModID, struct FModioModCollectionEntry> QueryUserInstallations(bool bIncludeOutdatedMods);
	TMap<struct FModioModID, struct FModioModInfo> QueryUserPurchasedMods();
	const TMap<struct FModioModID, struct FModioModCollectionEntry> QueryUserSubscriptions();
	void RunPendingHandlers();
	void SetLogLevel(EModioLogLevel UnrealLogLevel);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioSubsystem")
	}
	static class UModioSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioSubsystem>();
	}
};
DUMPER7_ASSERTS_UModioSubsystem;

// Class Modio.ModioTokenPackLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioTokenPackLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FText GetDescription(const struct FModioTokenPack& In);
	static class FText GetDisplayPrice(const struct FModioTokenPack& In);
	static TMap<class FString, class FString> GetFields(const struct FModioTokenPack& In);
	static class FString GetID(const struct FModioTokenPack& In);
	static class FText GetLongDescription(const struct FModioTokenPack& In);
	static struct FModioTokenPackID GetModioId(const struct FModioTokenPack& In);
	static int64 GetNumericPrice(const struct FModioTokenPack& In);
	static class FText GetRegularPrice(const struct FModioTokenPack& In);
	static class FText GetTitle(const struct FModioTokenPack& In);
	static bool IsPurchasable(const struct FModioTokenPack& In);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioTokenPackLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioTokenPackLibrary")
	}
	static class UModioTokenPackLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioTokenPackLibrary>();
	}
};
DUMPER7_ASSERTS_UModioTokenPackLibrary;

// Class Modio.ModioUnsigned64Library
// 0x0000 (0x0028 - 0x0028)
class UModioUnsigned64Library final : public UBlueprintFunctionLibrary
{
public:
	static struct FModioUnsigned64 Add(const struct FModioUnsigned64& LHS, const struct FModioUnsigned64& RHS);
	static void BreakToComponents(const struct FModioUnsigned64& In, int32* High, int32* Low);
	static float Conv_FModioUnsigned64ToFloat(const struct FModioUnsigned64& In);
	static class FText Conv_FModioUnsigned64ToText(const struct FModioUnsigned64& In);
	static struct FModioUnsigned64 Divide(const struct FModioUnsigned64& LHS, const struct FModioUnsigned64& RHS);
	static float DivideFloat(const struct FModioUnsigned64& LHS, const float RHS);
	static float DivideToFloat(const struct FModioUnsigned64& LHS, const struct FModioUnsigned64& RHS);
	static bool EqualTo(const struct FModioUnsigned64& LHS, const struct FModioUnsigned64& RHS);
	static bool GreaterThan(const struct FModioUnsigned64& LHS, const struct FModioUnsigned64& RHS);
	static bool GreaterThanZero(const struct FModioUnsigned64& In);
	static bool LessThan(const struct FModioUnsigned64& LHS, const struct FModioUnsigned64& RHS);
	static struct FModioUnsigned64 MakeFromComponents(const int32& High, const int32& Low);
	static bool NotEqualTo(const struct FModioUnsigned64& LHS, const struct FModioUnsigned64& RHS);
	static float Percentage_Unsigned64(const struct FModioUnsigned64& LHS, const struct FModioUnsigned64& RHS);
	static struct FModioUnsigned64 Subtract(const struct FModioUnsigned64& LHS, const struct FModioUnsigned64& RHS);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ModioUnsigned64Library")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ModioUnsigned64Library")
	}
	static class UModioUnsigned64Library* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUnsigned64Library>();
	}
};
DUMPER7_ASSERTS_UModioUnsigned64Library;

}

