#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ReadyOrNotUI

#include "Basic.hpp"

#include "ReadyOrNotUI_classes.hpp"
#include "ReadyOrNotUI_parameters.hpp"


namespace SDK
{

// Function ReadyOrNotUI.ReadyOrNotUI_C.BackPage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Handled                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IReadyOrNotUI_C::BackPage(bool* Handled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ReadyOrNotUI_C", "BackPage");

	Params::ReadyOrNotUI_C_BackPage Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Handled != nullptr)
		*Handled = Parms.Handled;
}


// Function ReadyOrNotUI.ReadyOrNotUI_C.ChangePage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             PageName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IReadyOrNotUI_C::ChangePage(class FName PageName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ReadyOrNotUI_C", "ChangePage");

	Params::ReadyOrNotUI_C_ChangePage Parms{};

	Parms.PageName = PageName;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function ReadyOrNotUI.ReadyOrNotUI_C.Hide
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Collapse                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IReadyOrNotUI_C::Hide(double Delay, bool Collapse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ReadyOrNotUI_C", "Hide");

	Params::ReadyOrNotUI_C_Hide Parms{};

	Parms.Delay = Delay;
	Parms.Collapse = Collapse;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function ReadyOrNotUI.ReadyOrNotUI_C.Reveal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IReadyOrNotUI_C::Reveal(double Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ReadyOrNotUI_C", "Reveal");

	Params::ReadyOrNotUI_C_Reveal Parms{};

	Parms.Delay = Delay;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function ReadyOrNotUI.ReadyOrNotUI_C.SetInputMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsGamepad                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IReadyOrNotUI_C::SetInputMode(bool IsGamepad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ReadyOrNotUI_C", "SetInputMode");

	Params::ReadyOrNotUI_C_SetInputMode Parms{};

	Parms.IsGamepad = IsGamepad;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function ReadyOrNotUI.ReadyOrNotUI_C.GetFocusTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UWidget**                         Focus                                                  (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IReadyOrNotUI_C::GetFocusTarget(class UWidget** Focus) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ReadyOrNotUI_C", "GetFocusTarget");

	Params::ReadyOrNotUI_C_GetFocusTarget Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Focus != nullptr)
		*Focus = Parms.Focus;
}

}

