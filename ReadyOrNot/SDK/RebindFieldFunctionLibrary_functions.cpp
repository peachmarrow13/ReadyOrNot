#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RebindFieldFunctionLibrary

#include "Basic.hpp"

#include "RebindFieldFunctionLibrary_classes.hpp"
#include "RebindFieldFunctionLibrary_parameters.hpp"


namespace SDK
{

// Function RebindFieldFunctionLibrary.RebindFieldFunctionLibrary_C.Abbreviate Key
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString*                          Abreviated_Name                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void URebindFieldFunctionLibrary_C::Abbreviate_Key(const struct FKey& Key, class UObject* __WorldContext, class FString* Abreviated_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RebindFieldFunctionLibrary_C", "Abbreviate Key");

	Params::RebindFieldFunctionLibrary_C_Abbreviate_Key Parms{};

	Parms.Key = std::move(Key);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Abreviated_Name != nullptr)
		*Abreviated_Name = std::move(Parms.Abreviated_Name);
}


// Function RebindFieldFunctionLibrary.RebindFieldFunctionLibrary_C.Key is Non Modifier Key?
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URebindFieldFunctionLibrary_C::Key_is_Non_Modifier_Key_(const struct FKey& Key, class UObject* __WorldContext, bool* Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RebindFieldFunctionLibrary_C", "Key is Non Modifier Key?");

	Params::RebindFieldFunctionLibrary_C_Key_is_Non_Modifier_Key_ Parms{};

	Parms.Key = std::move(Key);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}


// Function RebindFieldFunctionLibrary.RebindFieldFunctionLibrary_C.Key list has Non Modifier Key
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FKey>&                    Key_List                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URebindFieldFunctionLibrary_C::Key_list_has_Non_Modifier_Key(TArray<struct FKey>& Key_List, class UObject* __WorldContext, bool* Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RebindFieldFunctionLibrary_C", "Key list has Non Modifier Key");

	Params::RebindFieldFunctionLibrary_C_Key_list_has_Non_Modifier_Key Parms{};

	Parms.Key_List = std::move(Key_List);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Key_List = std::move(Parms.Key_List);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}


// Function RebindFieldFunctionLibrary.RebindFieldFunctionLibrary_C.Using Modifier Key?
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FKey>&                    Key_List                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<EKeyModifiers>&                  Modifiers                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URebindFieldFunctionLibrary_C::Using_Modifier_Key_(TArray<struct FKey>& Key_List, TArray<EKeyModifiers>& Modifiers, class UObject* __WorldContext, bool* Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RebindFieldFunctionLibrary_C", "Using Modifier Key?");

	Params::RebindFieldFunctionLibrary_C_Using_Modifier_Key_ Parms{};

	Parms.Key_List = std::move(Key_List);
	Parms.Modifiers = std::move(Modifiers);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Key_List = std::move(Parms.Key_List);
	Modifiers = std::move(Parms.Modifiers);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}

}

