#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StatsIntegration

#include "Basic.hpp"

#include "StatsIntegration_classes.hpp"
#include "StatsIntegration_parameters.hpp"


namespace SDK
{

// Function StatsIntegration.GetAchievementData.GetAchievementAPIName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   AchievementIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGetAchievementData::GetAchievementAPIName(int32 AchievementIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAchievementData", "GetAchievementAPIName");

	Params::GetAchievementData_GetAchievementAPIName Parms{};

	Parms.AchievementIndex = AchievementIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function StatsIntegration.GetAchievementData.GetAchievementDisplayAttribute
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    AchievementAPIName                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAchievementDisplayAttributeUE4         Attribute                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGetAchievementData::GetAchievementDisplayAttribute(const class FString& AchievementAPIName, EAchievementDisplayAttributeUE4 Attribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAchievementData", "GetAchievementDisplayAttribute");

	Params::GetAchievementData_GetAchievementDisplayAttribute Parms{};

	Parms.AchievementAPIName = std::move(AchievementAPIName);
	Parms.Attribute = Attribute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function StatsIntegration.GetAchievementData.GetAchievementIcon
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    AchievementAPIName                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UGetAchievementData::GetAchievementIcon(const class FString& AchievementAPIName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAchievementData", "GetAchievementIcon");

	Params::GetAchievementData_GetAchievementIcon Parms{};

	Parms.AchievementAPIName = std::move(AchievementAPIName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function StatsIntegration.GetAchievementData.GetAchievementUnlockStatusAndUnlockTime
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    AchievementAPIName                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   AchievementUnlocked                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime*                       UnlockTime                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGetAchievementData::GetAchievementUnlockStatusAndUnlockTime(const class FString& AchievementAPIName, bool* AchievementUnlocked, struct FDateTime* UnlockTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAchievementData", "GetAchievementUnlockStatusAndUnlockTime");

	Params::GetAchievementData_GetAchievementUnlockStatusAndUnlockTime Parms{};

	Parms.AchievementAPIName = std::move(AchievementAPIName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AchievementUnlocked != nullptr)
		*AchievementUnlocked = Parms.AchievementUnlocked;

	if (UnlockTime != nullptr)
		*UnlockTime = std::move(Parms.UnlockTime);
}


// Function StatsIntegration.GetAchievementData.GetGlobalAchievementAchievedPercent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    AchievementAPIName                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGetAchievementData::GetGlobalAchievementAchievedPercent(const class FString& AchievementAPIName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAchievementData", "GetGlobalAchievementAchievedPercent");

	Params::GetAchievementData_GetGlobalAchievementAchievedPercent Parms{};

	Parms.AchievementAPIName = std::move(AchievementAPIName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function StatsIntegration.GetAchievementData.GetNumAchievements
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGetAchievementData::GetNumAchievements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAchievementData", "GetNumAchievements");

	Params::GetAchievementData_GetNumAchievements Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function StatsIntegration.GetStoredStats.GetUserStoredStat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    APIStatName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESteamStatType                          StatType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  IntegerValue                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  FloatValue                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGetStoredStats::GetUserStoredStat(const class FString& APIStatName, ESteamStatType StatType, int32* IntegerValue, float* FloatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetStoredStats", "GetUserStoredStat");

	Params::GetStoredStats_GetUserStoredStat Parms{};

	Parms.APIStatName = std::move(APIStatName);
	Parms.StatType = StatType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IntegerValue != nullptr)
		*IntegerValue = Parms.IntegerValue;

	if (FloatValue != nullptr)
		*FloatValue = Parms.FloatValue;
}


// Function StatsIntegration.GetStoredStats.GetUserStoredStats
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<struct FSteamStat>&        StatsToGet                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FSteamStat>*              StatsOut                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGetStoredStats::GetUserStoredStats(const TArray<struct FSteamStat>& StatsToGet, TArray<struct FSteamStat>* StatsOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetStoredStats", "GetUserStoredStats");

	Params::GetStoredStats_GetUserStoredStats Parms{};

	Parms.StatsToGet = std::move(StatsToGet);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (StatsOut != nullptr)
		*StatsOut = std::move(Parms.StatsOut);
}


// Function StatsIntegration.IndicateAchievementProgress.IndicateUserAchievementProgress
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementAPIName_0                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CurrentProgress_0                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxProgress_0                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UIndicateAchievementProgress*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UIndicateAchievementProgress* UIndicateAchievementProgress::IndicateUserAchievementProgress(const class FString& AchievementAPIName_0, int32 CurrentProgress_0, int32 MaxProgress_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("IndicateAchievementProgress", "IndicateUserAchievementProgress");

	Params::IndicateAchievementProgress_IndicateUserAchievementProgress Parms{};

	Parms.AchievementAPIName_0 = std::move(AchievementAPIName_0);
	Parms.CurrentProgress_0 = CurrentProgress_0;
	Parms.MaxProgress_0 = MaxProgress_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function StatsIntegration.RequestStatsAndAchievements.RequestUserStatsAndAchievements
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class URequestStatsAndAchievements*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URequestStatsAndAchievements* URequestStatsAndAchievements::RequestUserStatsAndAchievements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RequestStatsAndAchievements", "RequestUserStatsAndAchievements");

	Params::RequestStatsAndAchievements_RequestUserStatsAndAchievements Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function StatsIntegration.ResetAllStatsAndAchievements.ResetUserStatsAndAchievements
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bAchievementsToo                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UResetAllStatsAndAchievements*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UResetAllStatsAndAchievements* UResetAllStatsAndAchievements::ResetUserStatsAndAchievements(bool bAchievementsToo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ResetAllStatsAndAchievements", "ResetUserStatsAndAchievements");

	Params::ResetAllStatsAndAchievements_ResetUserStatsAndAchievements Parms{};

	Parms.bAchievementsToo = bAchievementsToo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function StatsIntegration.SetAchievementData.ClearAchievement
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementAPIName                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USetAchievementData::ClearAchievement(const class FString& AchievementAPIName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SetAchievementData", "ClearAchievement");

	Params::SetAchievementData_ClearAchievement Parms{};

	Parms.AchievementAPIName = std::move(AchievementAPIName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function StatsIntegration.SetAchievementData.SetAchievement
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementAPIName                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USetAchievementData::SetAchievement(const class FString& AchievementAPIName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SetAchievementData", "SetAchievement");

	Params::SetAchievementData_SetAchievement Parms{};

	Parms.AchievementAPIName = std::move(AchievementAPIName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function StatsIntegration.SetStoredStats.SetStoredStat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    APIStatName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESteamStatType                          StatType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FloatValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   IntegerValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SessionLength                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USetStoredStats::SetStoredStat(const class FString& APIStatName, ESteamStatType StatType, float FloatValue, int32 IntegerValue, float SessionLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SetStoredStats", "SetStoredStat");

	Params::SetStoredStats_SetStoredStat Parms{};

	Parms.APIStatName = std::move(APIStatName);
	Parms.StatType = StatType;
	Parms.FloatValue = FloatValue;
	Parms.IntegerValue = IntegerValue;
	Parms.SessionLength = SessionLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function StatsIntegration.SetStoredStats.SetStoredStats
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const TArray<struct FSteamStat>&        SteamStatsIn                                           (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   SessionLength                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USetStoredStats::SetStoredStats(const TArray<struct FSteamStat>& SteamStatsIn, float SessionLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SetStoredStats", "SetStoredStats");

	Params::SetStoredStats_SetStoredStats Parms{};

	Parms.SteamStatsIn = std::move(SteamStatsIn);
	Parms.SessionLength = SessionLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function StatsIntegration.StoreStatsAndAchievements.StoreUserStatsAndAchievements
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStoreStatsAndAchievements*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStoreStatsAndAchievements* UStoreStatsAndAchievements::StoreUserStatsAndAchievements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StoreStatsAndAchievements", "StoreUserStatsAndAchievements");

	Params::StoreStatsAndAchievements_StoreUserStatsAndAchievements Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

