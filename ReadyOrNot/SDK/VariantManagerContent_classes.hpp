#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VariantManagerContent

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "VariantManagerContent_structs.hpp"


namespace SDK
{

// Class VariantManagerContent.LevelVariantSets
// 0x0068 (0x0090 - 0x0028)
class ULevelVariantSets final : public UObject
{
public:
	TSubclassOf<class UObject>                    DirectorClass;                                     // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UVariantSet*>                    VariantSets;                                       // 0x0030(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x50];                                      // 0x0040(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetNumVariantSets();
	class UVariantSet* GetVariantSet(int32 VariantSetIndex);
	class UVariantSet* GetVariantSetByName(const class FString& VariantSetName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelVariantSets")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelVariantSets")
	}
	static class ULevelVariantSets* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelVariantSets>();
	}
};
DUMPER7_ASSERTS_ULevelVariantSets;

// Class VariantManagerContent.LevelVariantSetsActor
// 0x0070 (0x0308 - 0x0298)
class ALevelVariantSetsActor final : public AActor
{
public:
	struct FSoftObjectPath                        LevelVariantSets;                                  // 0x0298(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class UObject>, class ULevelVariantSetsFunctionDirector*> DirectorInstances;    // 0x02B8(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	class ULevelVariantSets* GetLevelVariantSets(bool bLoad);
	void SetLevelVariantSets(class ULevelVariantSets* InVariantSets);
	bool SwitchOnVariantByIndex(int32 VariantSetIndex, int32 VariantIndex);
	bool SwitchOnVariantByName(const class FString& VariantSetName, const class FString& VariantName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelVariantSetsActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelVariantSetsActor")
	}
	static class ALevelVariantSetsActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALevelVariantSetsActor>();
	}
};
DUMPER7_ASSERTS_ALevelVariantSetsActor;

// Class VariantManagerContent.LevelVariantSetsFunctionDirector
// 0x0018 (0x0040 - 0x0028)
class ULevelVariantSetsFunctionDirector final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelVariantSetsFunctionDirector")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelVariantSetsFunctionDirector")
	}
	static class ULevelVariantSetsFunctionDirector* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelVariantSetsFunctionDirector>();
	}
};
DUMPER7_ASSERTS_ULevelVariantSetsFunctionDirector;

// Class VariantManagerContent.PropertyValue
// 0x0190 (0x01B8 - 0x0028)
class UPropertyValue : public UObject
{
public:
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TFieldPath<class FProperty>>           Properties;                                        // 0x0088(0x0010)(ZeroConstructor, Deprecated, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 PropertyIndices;                                   // 0x0098(0x0010)(ZeroConstructor, Deprecated, Protected, NativeAccessSpecifierProtected)
	TArray<struct FCapturedPropSegment>           CapturedPropSegments;                              // 0x00A8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FString                                 FullDisplayString;                                 // 0x00B8(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PropertySetterName;                                // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FString, class FString>            PropertySetterParameterDefaults;                   // 0x00D0(0x0050)(Protected, NativeAccessSpecifierProtected)
	bool                                          bHasRecordedData;                                  // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    LeafPropertyClass;                                 // 0x0128(0x0008)(ZeroConstructor, Deprecated, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_130[0x8];                                      // 0x0130(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ValueBytes;                                        // 0x0138(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	EPropertyValueCategory                        PropCategory;                                      // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_149[0x6F];                                     // 0x0149(0x006F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetFullDisplayString() const;
	class FText GetPropertyTooltip() const;
	bool HasRecordedData() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropertyValue")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropertyValue")
	}
	static class UPropertyValue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropertyValue>();
	}
};
DUMPER7_ASSERTS_UPropertyValue;

// Class VariantManagerContent.PropertyValueTransform
// 0x0000 (0x01B8 - 0x01B8)
class UPropertyValueTransform final : public UPropertyValue
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropertyValueTransform")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropertyValueTransform")
	}
	static class UPropertyValueTransform* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropertyValueTransform>();
	}
};
DUMPER7_ASSERTS_UPropertyValueTransform;

// Class VariantManagerContent.PropertyValueVisibility
// 0x0000 (0x01B8 - 0x01B8)
class UPropertyValueVisibility final : public UPropertyValue
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropertyValueVisibility")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropertyValueVisibility")
	}
	static class UPropertyValueVisibility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropertyValueVisibility>();
	}
};
DUMPER7_ASSERTS_UPropertyValueVisibility;

// Class VariantManagerContent.PropertyValueColor
// 0x0000 (0x01B8 - 0x01B8)
class UPropertyValueColor final : public UPropertyValue
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropertyValueColor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropertyValueColor")
	}
	static class UPropertyValueColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropertyValueColor>();
	}
};
DUMPER7_ASSERTS_UPropertyValueColor;

// Class VariantManagerContent.PropertyValueMaterial
// 0x0000 (0x01B8 - 0x01B8)
class UPropertyValueMaterial final : public UPropertyValue
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropertyValueMaterial")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropertyValueMaterial")
	}
	static class UPropertyValueMaterial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropertyValueMaterial>();
	}
};
DUMPER7_ASSERTS_UPropertyValueMaterial;

// Class VariantManagerContent.PropertyValueOption
// 0x0000 (0x01B8 - 0x01B8)
class UPropertyValueOption final : public UPropertyValue
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropertyValueOption")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropertyValueOption")
	}
	static class UPropertyValueOption* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropertyValueOption>();
	}
};
DUMPER7_ASSERTS_UPropertyValueOption;

// Class VariantManagerContent.PropertyValueSoftObject
// 0x0000 (0x01B8 - 0x01B8)
class UPropertyValueSoftObject final : public UPropertyValue
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropertyValueSoftObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropertyValueSoftObject")
	}
	static class UPropertyValueSoftObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropertyValueSoftObject>();
	}
};
DUMPER7_ASSERTS_UPropertyValueSoftObject;

// Class VariantManagerContent.SwitchActor
// 0x0028 (0x02C0 - 0x0298)
class ASwitchActor final : public AActor
{
public:
	uint8                                         Pad_298[0x18];                                     // 0x0298(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        SceneComponent;                                    // 0x02B0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LastSelectedOption;                                // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SelectOption(int32 OptionIndex);

	TArray<class AActor*> GetOptions() const;
	int32 GetSelectedOption() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SwitchActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SwitchActor")
	}
	static class ASwitchActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASwitchActor>();
	}
};
DUMPER7_ASSERTS_ASwitchActor;

// Class VariantManagerContent.Variant
// 0x0058 (0x0080 - 0x0028)
class UVariant final : public UObject
{
public:
	TArray<struct FVariantDependency>             Dependencies;                                      // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class FText                                   DisplayText;                                       // 0x0038(0x0018)(Deprecated, NativeAccessSpecifierPrivate)
	uint8                                         Pad_50[0x18];                                      // 0x0050(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVariantObjectBinding*>          ObjectBindings;                                    // 0x0068(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UTexture2D*                             Thumbnail;                                         // 0x0078(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	int32 AddDependency(struct FVariantDependency* Dependency);
	void DeleteDependency(int32 Index_0);
	class AActor* GetActor(int32 ActorIndex);
	struct FVariantDependency GetDependency(int32 Index_0);
	TArray<class UVariant*> GetDependents(class ULevelVariantSets* LevelVariantSets, bool bOnlyEnabledDependencies);
	int32 GetNumActors();
	int32 GetNumDependencies();
	class UVariantSet* GetParent();
	class UTexture2D* GetThumbnail();
	bool IsActive();
	void SetDependency(int32 Index_0, struct FVariantDependency* Dependency);
	void SetDisplayText(const class FText& NewDisplayText);
	void SetThumbnailFromCamera(class UObject* WorldContextObject, const struct FTransform& CameraTransform, float FOVDegrees, float MinZ, float Gamma);
	void SetThumbnailFromEditorViewport();
	void SetThumbnailFromFile(const class FString& FilePath);
	void SetThumbnailFromTexture(class UTexture2D* NewThumbnail);
	void SwitchOn();

	class FText GetDisplayText() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Variant")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Variant")
	}
	static class UVariant* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVariant>();
	}
};
DUMPER7_ASSERTS_UVariant;

// Class VariantManagerContent.VariantObjectBinding
// 0x0068 (0x0090 - 0x0028)
class UVariantObjectBinding final : public UObject
{
public:
	class FString                                 CachedActorLabel;                                  // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                        ObjectPtr;                                         // 0x0038(0x0020)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TLazyObjectPtr<class UObject>                 LazyObjectPtr;                                     // 0x0058(0x0018)(IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UPropertyValue*>                 CapturedProperties;                                // 0x0070(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<struct FFunctionCaller>                FunctionCallers;                                   // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VariantObjectBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VariantObjectBinding")
	}
	static class UVariantObjectBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVariantObjectBinding>();
	}
};
DUMPER7_ASSERTS_UVariantObjectBinding;

// Class VariantManagerContent.VariantSet
// 0x0050 (0x0078 - 0x0028)
class UVariantSet final : public UObject
{
public:
	class FText                                   DisplayText;                                       // 0x0028(0x0018)(Deprecated, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bExpanded;                                         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVariant*>                       Variants;                                          // 0x0060(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UTexture2D*                             Thumbnail;                                         // 0x0070(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class ULevelVariantSets* GetParent();
	class UTexture2D* GetThumbnail();
	class UVariant* GetVariant(int32 VariantIndex);
	class UVariant* GetVariantByName(const class FString& VariantName);
	void SetDisplayText(const class FText& NewDisplayText);
	void SetThumbnailFromCamera(class UObject* WorldContextObject, const struct FTransform& CameraTransform, float FOVDegrees, float MinZ, float Gamma);
	void SetThumbnailFromEditorViewport();
	void SetThumbnailFromFile(const class FString& FilePath);
	void SetThumbnailFromTexture(class UTexture2D* NewThumbnail);

	class FText GetDisplayText() const;
	int32 GetNumVariants() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VariantSet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VariantSet")
	}
	static class UVariantSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVariantSet>();
	}
};
DUMPER7_ASSERTS_UVariantSet;

}

