#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ButtonBar

#include "Basic.hpp"

#include "W_ButtonBar_classes.hpp"
#include "W_ButtonBar_parameters.hpp"


namespace SDK
{

// Function W_ButtonBar.W_ButtonBar_C.AddOption
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FText&                      ButtonText                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_ButtonBar_C::AddOption(const class FString& ID, const class FText& ButtonText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "AddOption");

	Params::W_ButtonBar_C_AddOption Parms{};

	Parms.ID = std::move(ID);
	Parms.ButtonText = std::move(ButtonText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.BackPage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Handled                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ButtonBar_C::BackPage(bool* Handled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "BackPage");

	Params::W_ButtonBar_C_BackPage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Handled != nullptr)
		*Handled = Parms.Handled;
}


// Function W_ButtonBar.W_ButtonBar_C.ChangePage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             PageName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ButtonBar_C::ChangePage(class FName PageName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "ChangePage");

	Params::W_ButtonBar_C_ChangePage Parms{};

	Parms.PageName = PageName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.CreateButtonWidget
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      ButtonText                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UW_Button_C**                     NewButton                                              (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_ButtonBar_C::CreateButtonWidget(const class FText& ButtonText, class UW_Button_C** NewButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "CreateButtonWidget");

	Params::W_ButtonBar_C_CreateButtonWidget Parms{};

	Parms.ButtonText = std::move(ButtonText);

	UObject::ProcessEvent(Func, &Parms);

	if (NewButton != nullptr)
		*NewButton = Parms.NewButton;
}


// Function W_ButtonBar.W_ButtonBar_C.DisableBar
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Disable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ButtonBar_C::DisableBar(bool Disable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "DisableBar");

	Params::W_ButtonBar_C_DisableBar Parms{};

	Parms.Disable = Disable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.DisableOptionByID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    OptionID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UW_ButtonBar_C::DisableOptionByID(const class FString& OptionID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "DisableOptionByID");

	Params::W_ButtonBar_C_DisableOptionByID Parms{};

	Parms.OptionID = std::move(OptionID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.EnableOptionByID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    OptionID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UW_ButtonBar_C::EnableOptionByID(const class FString& OptionID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "EnableOptionByID");

	Params::W_ButtonBar_C_EnableOptionByID Parms{};

	Parms.OptionID = std::move(OptionID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.ExecuteUbergraph_W_ButtonBar
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ButtonBar_C::ExecuteUbergraph_W_ButtonBar(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "ExecuteUbergraph_W_ButtonBar");

	Params::W_ButtonBar_C_ExecuteUbergraph_W_ButtonBar Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.GetButtonID
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const class UW_Button_C*&               ButtonToFind                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class FString*                          ID                                                     (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UW_ButtonBar_C::GetButtonID(const class UW_Button_C*& ButtonToFind, class FString* ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "GetButtonID");

	Params::W_ButtonBar_C_GetButtonID Parms{};

	Parms.ButtonToFind = ButtonToFind;

	UObject::ProcessEvent(Func, &Parms);

	if (ID != nullptr)
		*ID = std::move(Parms.ID);
}


// Function W_ButtonBar.W_ButtonBar_C.GetHasOptions
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UW_ButtonBar_C::GetHasOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "GetHasOptions");

	Params::W_ButtonBar_C_GetHasOptions Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_ButtonBar.W_ButtonBar_C.Hide
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Collapse                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ButtonBar_C::Hide(double Delay, bool Collapse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "Hide");

	Params::W_ButtonBar_C_Hide Parms{};

	Parms.Delay = Delay;
	Parms.Collapse = Collapse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.InputMethodChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ECommonInputType                        bNewInputType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ButtonBar_C::InputMethodChanged(ECommonInputType bNewInputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "InputMethodChanged");

	Params::W_ButtonBar_C_InputMethodChanged Parms{};

	Parms.bNewInputType = bNewInputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.InsertOptionAtIndex
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    ButtonId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FText&                      ButtonText                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_ButtonBar_C::InsertOptionAtIndex(int32 Index_0, const class FString& ButtonId, const class FText& ButtonText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "InsertOptionAtIndex");

	Params::W_ButtonBar_C_InsertOptionAtIndex Parms{};

	Parms.Index_0 = Index_0;
	Parms.ButtonId = std::move(ButtonId);
	Parms.ButtonText = std::move(ButtonText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.OnInitialized
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_ButtonBar_C::OnInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "OnInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ButtonBar.W_ButtonBar_C.OnMouseEnter
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UW_ButtonBar_C::OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "OnMouseEnter");

	Params::W_ButtonBar_C_OnMouseEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.OnMouseLeave
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UW_ButtonBar_C::OnMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "OnMouseLeave");

	Params::W_ButtonBar_C_OnMouseLeave Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.OptionClicked
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_Button_C*                      Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_ButtonBar_C::OptionClicked(class UW_Button_C* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "OptionClicked");

	Params::W_ButtonBar_C_OptionClicked Parms{};

	Parms.Button = Button;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.OptionHovered
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_Button_C*                      Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_ButtonBar_C::OptionHovered(class UW_Button_C* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "OptionHovered");

	Params::W_ButtonBar_C_OptionHovered Parms{};

	Parms.Button = Button;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.OptionUnhovered
// (BlueprintCallable, BlueprintEvent)

void UW_ButtonBar_C::OptionUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "OptionUnhovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ButtonBar.W_ButtonBar_C.PopulateButtons
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_ButtonBar_C::PopulateButtons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "PopulateButtons");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ButtonBar.W_ButtonBar_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ButtonBar_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "PreConstruct");

	Params::W_ButtonBar_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.RemoveButtonByID
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UW_ButtonBar_C::RemoveButtonByID(const class FString& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "RemoveButtonByID");

	Params::W_ButtonBar_C_RemoveButtonByID Parms{};

	Parms.ID = std::move(ID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.Reveal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ButtonBar_C::Reveal(double Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "Reveal");

	Params::W_ButtonBar_C_Reveal Parms{};

	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.SetEquippedButtonByID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    ButtonId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UW_ButtonBar_C::SetEquippedButtonByID(const class FString& ButtonId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "SetEquippedButtonByID");

	Params::W_ButtonBar_C_SetEquippedButtonByID Parms{};

	Parms.ButtonId = std::move(ButtonId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.SetInputMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsGamepad                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ButtonBar_C::SetInputMode(bool IsGamepad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "SetInputMode");

	Params::W_ButtonBar_C_SetInputMode Parms{};

	Parms.IsGamepad = IsGamepad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.SetOptions
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<class FString, class FText>& ButtonOptions_0                                        (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_ButtonBar_C::SetOptions(const TMap<class FString, class FText>& ButtonOptions_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "SetOptions");

	Params::W_ButtonBar_C_SetOptions Parms{};

	Parms.ButtonOptions_0 = std::move(ButtonOptions_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.SetOptionsMap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<class FString, class FText>& ButtonOptions_0                                        (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_ButtonBar_C::SetOptionsMap(const TMap<class FString, class FText>& ButtonOptions_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "SetOptionsMap");

	Params::W_ButtonBar_C_SetOptionsMap Parms{};

	Parms.ButtonOptions_0 = std::move(ButtonOptions_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ButtonBar.W_ButtonBar_C.GetFocusTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UWidget**                         Focus_0                                                (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_ButtonBar_C::GetFocusTarget(class UWidget** Focus_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ButtonBar_C", "GetFocusTarget");

	Params::W_ButtonBar_C_GetFocusTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Focus_0 != nullptr)
		*Focus_0 = Parms.Focus_0;
}

}

