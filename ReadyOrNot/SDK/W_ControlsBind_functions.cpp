#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ControlsBind

#include "Basic.hpp"

#include "W_ControlsBind_classes.hpp"
#include "W_ControlsBind_parameters.hpp"


namespace SDK
{

// Function W_ControlsBind.W_ControlsBind_C.Add Conflicting Keybinds to List OLD
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             MappingName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FAxisMappingStruct>&      Axes                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FActionMappingStruct>&    Actions                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UW_ControlsBind_C::Add_Conflicting_Keybinds_to_List_OLD(class FName MappingName, double Scale, TArray<struct FAxisMappingStruct>& Axes, TArray<struct FActionMappingStruct>& Actions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "Add Conflicting Keybinds to List OLD");

	Params::W_ControlsBind_C_Add_Conflicting_Keybinds_to_List_OLD Parms{};

	Parms.MappingName = MappingName;
	Parms.Scale = Scale;
	Parms.Axes = std::move(Axes);
	Parms.Actions = std::move(Actions);

	UObject::ProcessEvent(Func, &Parms);

	Axes = std::move(Parms.Axes);
	Actions = std::move(Parms.Actions);
}


// Function W_ControlsBind.W_ControlsBind_C.Add Keybinds to List OLD
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSKeybinding>&            Keybinds                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FName                             AxisMapping                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FAxisMappingStruct>&      AxesList                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FActionMappingStruct>&    ActionsList                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UW_ControlsBind_C::Add_Keybinds_to_List_OLD(TArray<struct FSKeybinding>& Keybinds, class FName AxisMapping, double Scale, TArray<struct FAxisMappingStruct>& AxesList, TArray<struct FActionMappingStruct>& ActionsList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "Add Keybinds to List OLD");

	Params::W_ControlsBind_C_Add_Keybinds_to_List_OLD Parms{};

	Parms.Keybinds = std::move(Keybinds);
	Parms.AxisMapping = AxisMapping;
	Parms.Scale = Scale;
	Parms.AxesList = std::move(AxesList);
	Parms.ActionsList = std::move(ActionsList);

	UObject::ProcessEvent(Func, &Parms);

	Keybinds = std::move(Parms.Keybinds);
	AxesList = std::move(Parms.AxesList);
	ActionsList = std::move(Parms.ActionsList);
}


// Function W_ControlsBind.W_ControlsBind_C.Binding Confirmed
// (BlueprintCallable, BlueprintEvent)

void UW_ControlsBind_C::Binding_Confirmed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "Binding Confirmed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlsBind.W_ControlsBind_C.BndEvt__KeybindButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature
// (BlueprintEvent)

void UW_ControlsBind_C::BndEvt__KeybindButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "BndEvt__KeybindButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlsBind.W_ControlsBind_C.BndEvt__KeybindButton_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature
// (BlueprintEvent)

void UW_ControlsBind_C::BndEvt__KeybindButton_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "BndEvt__KeybindButton_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlsBind.W_ControlsBind_C.BndEvt__KeybindButton_K2Node_ComponentBoundEvent_2_OnButtonReleasedEvent__DelegateSignature
// (BlueprintEvent)

void UW_ControlsBind_C::BndEvt__KeybindButton_K2Node_ComponentBoundEvent_2_OnButtonReleasedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "BndEvt__KeybindButton_K2Node_ComponentBoundEvent_2_OnButtonReleasedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlsBind.W_ControlsBind_C.BndEvt__KeybindButton_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature
// (BlueprintEvent)

void UW_ControlsBind_C::BndEvt__KeybindButton_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "BndEvt__KeybindButton_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlsBind.W_ControlsBind_C.BndEvt__KeybindButton_K2Node_ComponentBoundEvent_4_OnButtonHoverEvent__DelegateSignature
// (BlueprintEvent)

void UW_ControlsBind_C::BndEvt__KeybindButton_K2Node_ComponentBoundEvent_4_OnButtonHoverEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "BndEvt__KeybindButton_K2Node_ComponentBoundEvent_4_OnButtonHoverEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlsBind.W_ControlsBind_C.Click Listener Button Down
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_ControlsBind_C::Click_Listener_Button_Down(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "Click Listener Button Down");

	Params::W_ControlsBind_C_Click_Listener_Button_Down Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_ControlsBind.W_ControlsBind_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_ControlsBind_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlsBind.W_ControlsBind_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_ControlsBind_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlsBind.W_ControlsBind_C.ExecuteUbergraph_W_ControlsBind
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ControlsBind_C::ExecuteUbergraph_W_ControlsBind(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "ExecuteUbergraph_W_ControlsBind");

	Params::W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ControlsBind.W_ControlsBind_C.Get Conflicting Keybind Text OLD
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const class FText&                      RequiredKeybindName                                    (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText*                            Text                                                   (Parm, OutParm)

void UW_ControlsBind_C::Get_Conflicting_Keybind_Text_OLD(const class FText& RequiredKeybindName, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "Get Conflicting Keybind Text OLD");

	Params::W_ControlsBind_C_Get_Conflicting_Keybind_Text_OLD Parms{};

	Parms.RequiredKeybindName = std::move(RequiredKeybindName);

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function W_ControlsBind.W_ControlsBind_C.Get Conflicting Keybinds when Valid OLD
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FAxisMappingStruct>&      Axes                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FActionMappingStruct>&    Actions                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool*                                   bHasConflict                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FAxisMappingStruct>*      ConflictingAxes_0                                      (Parm, OutParm)
// TArray<struct FActionMappingStruct>*    ConflictingActions_0                                   (Parm, OutParm)

void UW_ControlsBind_C::Get_Conflicting_Keybinds_when_Valid_OLD(TArray<struct FAxisMappingStruct>& Axes, TArray<struct FActionMappingStruct>& Actions, bool* bHasConflict, TArray<struct FAxisMappingStruct>* ConflictingAxes_0, TArray<struct FActionMappingStruct>* ConflictingActions_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "Get Conflicting Keybinds when Valid OLD");

	Params::W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD Parms{};

	Parms.Axes = std::move(Axes);
	Parms.Actions = std::move(Actions);

	UObject::ProcessEvent(Func, &Parms);

	Axes = std::move(Parms.Axes);
	Actions = std::move(Parms.Actions);

	if (bHasConflict != nullptr)
		*bHasConflict = Parms.bHasConflict;

	if (ConflictingAxes_0 != nullptr)
		*ConflictingAxes_0 = std::move(Parms.ConflictingAxes_0);

	if (ConflictingActions_0 != nullptr)
		*ConflictingActions_0 = std::move(Parms.ConflictingActions_0);
}


// Function W_ControlsBind.W_ControlsBind_C.GetOtherBindingIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ControlsBind_C::GetOtherBindingIndex(int32* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "GetOtherBindingIndex");

	Params::W_ControlsBind_C_GetOtherBindingIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function W_ControlsBind.W_ControlsBind_C.HandleKeyDown
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 My_Geometry                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FKeyEvent&                 In_Key_Event                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_ControlsBind_C::HandleKeyDown(const struct FGeometry& My_Geometry, const struct FKeyEvent& In_Key_Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "HandleKeyDown");

	Params::W_ControlsBind_C_HandleKeyDown Parms{};

	Parms.My_Geometry = std::move(My_Geometry);
	Parms.In_Key_Event = std::move(In_Key_Event);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_ControlsBind.W_ControlsBind_C.HandleMouseButtonDown
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPointerEvent&             PointerEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply*                     Reply                                                  (Parm, OutParm)

void UW_ControlsBind_C::HandleMouseButtonDown(const struct FPointerEvent& PointerEvent, struct FEventReply* Reply)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "HandleMouseButtonDown");

	Params::W_ControlsBind_C_HandleMouseButtonDown Parms{};

	Parms.PointerEvent = std::move(PointerEvent);

	UObject::ProcessEvent(Func, &Parms);

	if (Reply != nullptr)
		*Reply = std::move(Parms.Reply);
}


// Function W_ControlsBind.W_ControlsBind_C.HandleMouseWheel
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             PointerEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_ControlsBind_C::HandleMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "HandleMouseWheel");

	Params::W_ControlsBind_C_HandleMouseWheel Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.PointerEvent = std::move(PointerEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_ControlsBind.W_ControlsBind_C.Key Event Received
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FKey&                      KeyIn                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UW_ControlsBind_C::Key_Event_Received(const struct FKey& KeyIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "Key Event Received");

	Params::W_ControlsBind_C_Key_Event_Received Parms{};

	Parms.KeyIn = std::move(KeyIn);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ControlsBind.W_ControlsBind_C.OnIllegalBindAttempted
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      BindFriendlyName_0                                     (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_ControlsBind_C::OnIllegalBindAttempted(const class FText& BindFriendlyName_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "OnIllegalBindAttempted");

	Params::W_ControlsBind_C_OnIllegalBindAttempted Parms{};

	Parms.BindFriendlyName_0 = std::move(BindFriendlyName_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ControlsBind.W_ControlsBind_C.OnKeyDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FKeyEvent&                 InKeyEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_ControlsBind_C::OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "OnKeyDown");

	Params::W_ControlsBind_C_OnKeyDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_ControlsBind.W_ControlsBind_C.OnMouseButtonDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_ControlsBind_C::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "OnMouseButtonDown");

	Params::W_ControlsBind_C_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_ControlsBind.W_ControlsBind_C.OnMouseWheel
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_ControlsBind_C::OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "OnMouseWheel");

	Params::W_ControlsBind_C_OnMouseWheel Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_ControlsBind.W_ControlsBind_C.OnPreviewKeyDown
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FKeyEvent&                 InKeyEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_ControlsBind_C::OnPreviewKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "OnPreviewKeyDown");

	Params::W_ControlsBind_C_OnPreviewKeyDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_ControlsBind.W_ControlsBind_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ControlsBind_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "PreConstruct");

	Params::W_ControlsBind_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ControlsBind.W_ControlsBind_C.Remove Conflict Keybinds OLD
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FAxisMappingStruct>&      Axes                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FActionMappingStruct>&    Actions                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UW_ControlsBind_C::Remove_Conflict_Keybinds_OLD(TArray<struct FAxisMappingStruct>& Axes, TArray<struct FActionMappingStruct>& Actions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "Remove Conflict Keybinds OLD");

	Params::W_ControlsBind_C_Remove_Conflict_Keybinds_OLD Parms{};

	Parms.Axes = std::move(Axes);
	Parms.Actions = std::move(Actions);

	UObject::ProcessEvent(Func, &Parms);

	Axes = std::move(Parms.Axes);
	Actions = std::move(Parms.Actions);
}


// Function W_ControlsBind.W_ControlsBind_C.SetDisabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Disabled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ControlsBind_C::SetDisabled(bool Disabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "SetDisabled");

	Params::W_ControlsBind_C_SetDisabled Parms{};

	Parms.Disabled = Disabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ControlsBind.W_ControlsBind_C.SetupDescription
// (Public, BlueprintCallable, BlueprintEvent)

void UW_ControlsBind_C::SetupDescription()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "SetupDescription");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlsBind.W_ControlsBind_C.UnbindAllEvents
// (BlueprintCallable, BlueprintEvent)

void UW_ControlsBind_C::UnbindAllEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlsBind_C", "UnbindAllEvents");

	UObject::ProcessEvent(Func, nullptr);
}

}

