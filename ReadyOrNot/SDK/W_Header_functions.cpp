#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Header

#include "Basic.hpp"

#include "W_Header_classes.hpp"
#include "W_Header_parameters.hpp"


namespace SDK
{

// Function W_Header.W_Header_C.AddAugment
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          AugmentWidget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_Header_C::AddAugment(class UWidget* AugmentWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Header_C", "AddAugment");

	Params::W_Header_C_AddAugment Parms{};

	Parms.AugmentWidget = AugmentWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Header.W_Header_C.BackPage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Handled                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Header_C::BackPage(bool* Handled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Header_C", "BackPage");

	Params::W_Header_C_BackPage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Handled != nullptr)
		*Handled = Parms.Handled;
}


// Function W_Header.W_Header_C.ChangePage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             PageName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Header_C::ChangePage(class FName PageName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Header_C", "ChangePage");

	Params::W_Header_C_ChangePage Parms{};

	Parms.PageName = PageName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Header.W_Header_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_Header_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Header_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Header.W_Header_C.ExecuteUbergraph_W_Header
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Header_C::ExecuteUbergraph_W_Header(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Header_C", "ExecuteUbergraph_W_Header");

	Params::W_Header_C_ExecuteUbergraph_W_Header Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Header.W_Header_C.HasAugment
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   HasAugment_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Header_C::HasAugment(bool* HasAugment_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Header_C", "HasAugment");

	Params::W_Header_C_HasAugment Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasAugment_0 != nullptr)
		*HasAugment_0 = Parms.HasAugment_0;
}


// Function W_Header.W_Header_C.Hide
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Collapse                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Header_C::Hide(double Delay, bool Collapse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Header_C", "Hide");

	Params::W_Header_C_Hide Parms{};

	Parms.Delay = Delay;
	Parms.Collapse = Collapse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Header.W_Header_C.Initialize
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      LabelText_0                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    IsButton                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETextFlowDirection                      Orientation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Header_C::Initialize(const class FText& LabelText_0, bool IsButton, ETextFlowDirection Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Header_C", "Initialize");

	Params::W_Header_C_Initialize Parms{};

	Parms.LabelText_0 = std::move(LabelText_0);
	Parms.IsButton = IsButton;
	Parms.Orientation = Orientation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Header.W_Header_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Header_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Header_C", "PreConstruct");

	Params::W_Header_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Header.W_Header_C.Reveal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Header_C::Reveal(double Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Header_C", "Reveal");

	Params::W_Header_C_Reveal Parms{};

	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Header.W_Header_C.SetButton
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsButton                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Header_C::SetButton(bool IsButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Header_C", "SetButton");

	Params::W_Header_C_SetButton Parms{};

	Parms.IsButton = IsButton;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Header.W_Header_C.SetInputMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsGamepad                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Header_C::SetInputMode(bool IsGamepad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Header_C", "SetInputMode");

	Params::W_Header_C_SetInputMode Parms{};

	Parms.IsGamepad = IsGamepad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Header.W_Header_C.SetLabel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      LabelText_0                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_Header_C::SetLabel(const class FText& LabelText_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Header_C", "SetLabel");

	Params::W_Header_C_SetLabel Parms{};

	Parms.LabelText_0 = std::move(LabelText_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Header.W_Header_C.SetLayout
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETextFlowDirection                      Layout_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Header_C::SetLayout(ETextFlowDirection Layout_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Header_C", "SetLayout");

	Params::W_Header_C_SetLayout Parms{};

	Parms.Layout_0 = Layout_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Header.W_Header_C.SetTheme
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseDarkTheme                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Header_C::SetTheme(bool UseDarkTheme)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Header_C", "SetTheme");

	Params::W_Header_C_SetTheme Parms{};

	Parms.UseDarkTheme = UseDarkTheme;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Header.W_Header_C.GetFocusTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UWidget**                         Focus                                                  (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_Header_C::GetFocusTarget(class UWidget** Focus) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Header_C", "GetFocusTarget");

	Params::W_Header_C_GetFocusTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Focus != nullptr)
		*Focus = Parms.Focus;
}

}

