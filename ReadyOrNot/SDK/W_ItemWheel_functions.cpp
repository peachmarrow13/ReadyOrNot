#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ItemWheel

#include "Basic.hpp"

#include "W_ItemWheel_classes.hpp"
#include "W_ItemWheel_parameters.hpp"


namespace SDK
{

// Function W_ItemWheel.W_ItemWheel_C.CreateItemWheelIcon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FItemWheelOption&                ItemWheelOption                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   OptionIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SelectedIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UW_WheelIcon_C**                  WheelIcon                                              (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_ItemWheel_C::CreateItemWheelIcon(struct FItemWheelOption& ItemWheelOption, int32 OptionIndex, int32 SelectedIndex, class UW_WheelIcon_C** WheelIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ItemWheel_C", "CreateItemWheelIcon");

	Params::W_ItemWheel_C_CreateItemWheelIcon Parms{};

	Parms.ItemWheelOption = std::move(ItemWheelOption);
	Parms.OptionIndex = OptionIndex;
	Parms.SelectedIndex = SelectedIndex;

	UObject::ProcessEvent(Func, &Parms);

	ItemWheelOption = std::move(Parms.ItemWheelOption);

	if (WheelIcon != nullptr)
		*WheelIcon = Parms.WheelIcon;
}


// Function W_ItemWheel.W_ItemWheel_C.ExecuteUbergraph_W_ItemWheel
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ItemWheel_C::ExecuteUbergraph_W_ItemWheel(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ItemWheel_C", "ExecuteUbergraph_W_ItemWheel");

	Params::W_ItemWheel_C_ExecuteUbergraph_W_ItemWheel Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ItemWheel.W_ItemWheel_C.ForceSetInDeadzone
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bInDeadzone                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ItemWheel_C::ForceSetInDeadzone(bool bInDeadzone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ItemWheel_C", "ForceSetInDeadzone");

	Params::W_ItemWheel_C_ForceSetInDeadzone Parms{};

	Parms.bInDeadzone = bInDeadzone;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ItemWheel.W_ItemWheel_C.GetItemAmount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EItemCategory                           ItemID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  ItemAmount                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ItemWheel_C::GetItemAmount(EItemCategory ItemID, int32* ItemAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ItemWheel_C", "GetItemAmount");

	Params::W_ItemWheel_C_GetItemAmount Parms{};

	Parms.ItemID = ItemID;

	UObject::ProcessEvent(Func, &Parms);

	if (ItemAmount != nullptr)
		*ItemAmount = Parms.ItemAmount;
}


// Function W_ItemWheel.W_ItemWheel_C.GetShowCounter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EItemCategory                           ItemID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   ShowCounter                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ItemWheel_C::GetShowCounter(EItemCategory ItemID, bool* ShowCounter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ItemWheel_C", "GetShowCounter");

	Params::W_ItemWheel_C_GetShowCounter Parms{};

	Parms.ItemID = ItemID;

	UObject::ProcessEvent(Func, &Parms);

	if (ShowCounter != nullptr)
		*ShowCounter = Parms.ShowCounter;
}


// Function W_ItemWheel.W_ItemWheel_C.ItemWheelCollapsed
// (Event, Protected, BlueprintEvent)

void UW_ItemWheel_C::ItemWheelCollapsed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ItemWheel_C", "ItemWheelCollapsed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ItemWheel.W_ItemWheel_C.ItemWheelDisabled
// (Event, Protected, BlueprintEvent)

void UW_ItemWheel_C::ItemWheelDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ItemWheel_C", "ItemWheelDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ItemWheel.W_ItemWheel_C.ItemWheelEnabled
// (Event, Protected, BlueprintEvent)

void UW_ItemWheel_C::ItemWheelEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ItemWheel_C", "ItemWheelEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ItemWheel.W_ItemWheel_C.ItemWheelExpanded
// (Event, Protected, BlueprintEvent)

void UW_ItemWheel_C::ItemWheelExpanded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ItemWheel_C", "ItemWheelExpanded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ItemWheel.W_ItemWheel_C.SetCurrentIndex
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUMG_RadialMenu_C*                RadialMenu                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_ItemWheel_C::SetCurrentIndex(class UUMG_RadialMenu_C* RadialMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ItemWheel_C", "SetCurrentIndex");

	Params::W_ItemWheel_C_SetCurrentIndex Parms{};

	Parms.RadialMenu = RadialMenu;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ItemWheel.W_ItemWheel_C.SetWheelOptions
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class UUserWidget*                ItemWheel                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const TArray<struct FItemWheelOption>&  ItemWheelOptions                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const int32&                            SelectedIndex                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ItemWheel_C::SetWheelOptions(const class UUserWidget* ItemWheel, const TArray<struct FItemWheelOption>& ItemWheelOptions, const int32& SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ItemWheel_C", "SetWheelOptions");

	Params::W_ItemWheel_C_SetWheelOptions Parms{};

	Parms.ItemWheel = ItemWheel;
	Parms.ItemWheelOptions = std::move(ItemWheelOptions);
	Parms.SelectedIndex = SelectedIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ItemWheel.W_ItemWheel_C.SetWheelSegments
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class UUserWidget*                ItemWheel                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const uint8&                            Amount                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ItemWheel_C::SetWheelSegments(const class UUserWidget* ItemWheel, const uint8& Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ItemWheel_C", "SetWheelSegments");

	Params::W_ItemWheel_C_SetWheelSegments Parms{};

	Parms.ItemWheel = ItemWheel;
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ItemWheel.W_ItemWheel_C.SetWheelSelection
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class UUserWidget*                ItemWheel                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Direction                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ItemWheel_C::SetWheelSelection(const class UUserWidget* ItemWheel, const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ItemWheel_C", "SetWheelSelection");

	Params::W_ItemWheel_C_SetWheelSelection Parms{};

	Parms.ItemWheel = ItemWheel;
	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ItemWheel.W_ItemWheel_C.Update Cursor Visibility
// (Public, BlueprintCallable, BlueprintEvent)

void UW_ItemWheel_C::Update_Cursor_Visibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ItemWheel_C", "Update Cursor Visibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ItemWheel.W_ItemWheel_C.UpdateRadialMenu
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SelectedIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          ItemWheel                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FItemWheelOption>&        ItemWheelOptions                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UW_ItemWheel_C::UpdateRadialMenu(int32 SelectedIndex, class UObject* ItemWheel, TArray<struct FItemWheelOption>& ItemWheelOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ItemWheel_C", "UpdateRadialMenu");

	Params::W_ItemWheel_C_UpdateRadialMenu Parms{};

	Parms.SelectedIndex = SelectedIndex;
	Parms.ItemWheel = ItemWheel;
	Parms.ItemWheelOptions = std::move(ItemWheelOptions);

	UObject::ProcessEvent(Func, &Parms);

	ItemWheelOptions = std::move(Parms.ItemWheelOptions);
}


// Function W_ItemWheel.W_ItemWheel_C.UpdateWheelSelection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          ItemWheel                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ItemWheel_C::UpdateWheelSelection(class UObject* ItemWheel, const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ItemWheel_C", "UpdateWheelSelection");

	Params::W_ItemWheel_C_UpdateWheelSelection Parms{};

	Parms.ItemWheel = ItemWheel;
	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}

}

