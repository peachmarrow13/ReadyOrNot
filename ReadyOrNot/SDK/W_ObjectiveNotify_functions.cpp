#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ObjectiveNotify

#include "Basic.hpp"

#include "W_ObjectiveNotify_classes.hpp"
#include "W_ObjectiveNotify_parameters.hpp"


namespace SDK
{

// Function W_ObjectiveNotify.W_ObjectiveNotify_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_ObjectiveNotify_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ObjectiveNotify_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ObjectiveNotify.W_ObjectiveNotify_C.DestroyWidget
// (BlueprintCallable, BlueprintEvent)

void UW_ObjectiveNotify_C::DestroyWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ObjectiveNotify_C", "DestroyWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ObjectiveNotify.W_ObjectiveNotify_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_ObjectiveNotify_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ObjectiveNotify_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ObjectiveNotify.W_ObjectiveNotify_C.ExecuteUbergraph_W_ObjectiveNotify
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ObjectiveNotify_C::ExecuteUbergraph_W_ObjectiveNotify(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ObjectiveNotify_C", "ExecuteUbergraph_W_ObjectiveNotify");

	Params::W_ObjectiveNotify_C_ExecuteUbergraph_W_ObjectiveNotify Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ObjectiveNotify.W_ObjectiveNotify_C.OnInitialized
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_ObjectiveNotify_C::OnInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ObjectiveNotify_C", "OnInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ObjectiveNotify.W_ObjectiveNotify_C.PlayRewardAnim
// (BlueprintCallable, BlueprintEvent)

void UW_ObjectiveNotify_C::PlayRewardAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ObjectiveNotify_C", "PlayRewardAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ObjectiveNotify.W_ObjectiveNotify_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ObjectiveNotify_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ObjectiveNotify_C", "PreConstruct");

	Params::W_ObjectiveNotify_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ObjectiveNotify.W_ObjectiveNotify_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ObjectiveNotify_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ObjectiveNotify_C", "Tick");

	Params::W_ObjectiveNotify_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}

}

