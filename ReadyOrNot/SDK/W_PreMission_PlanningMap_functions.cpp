#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PreMission_PlanningMap

#include "Basic.hpp"

#include "W_PreMission_PlanningMap_classes.hpp"
#include "W_PreMission_PlanningMap_parameters.hpp"


namespace SDK
{

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.AddPreviewLinePoint
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Coordinates                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::AddPreviewLinePoint(const struct FVector2D& Coordinates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "AddPreviewLinePoint");

	Params::W_PreMission_PlanningMap_C_AddPreviewLinePoint Parms{};

	Parms.Coordinates = std::move(Coordinates);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.BackPage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Handled                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::BackPage(bool* Handled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "BackPage");

	Params::W_PreMission_PlanningMap_C_BackPage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Handled != nullptr)
		*Handled = Parms.Handled;
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UW_PremissionTablet_Button_C*     TriggeringButton                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature(class UW_PremissionTablet_Button_C* TriggeringButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature");

	Params::W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature Parms{};

	Parms.TriggeringButton = TriggeringButton;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.BndEvt__W_PreMission_PlanningMap_btn_Players_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UW_PremissionTablet_Button_C*     TriggeringButton                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::BndEvt__W_PreMission_PlanningMap_btn_Players_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature(class UW_PremissionTablet_Button_C* TriggeringButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "BndEvt__W_PreMission_PlanningMap_btn_Players_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature");

	Params::W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Players_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature Parms{};

	Parms.TriggeringButton = TriggeringButton;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ChangeFloorByIndex
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::ChangeFloorByIndex(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "ChangeFloorByIndex");

	Params::W_PreMission_PlanningMap_C_ChangeFloorByIndex Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ChangeFloorByNumber
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   FloorNumber                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::ChangeFloorByNumber(int32 FloorNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "ChangeFloorByNumber");

	Params::W_PreMission_PlanningMap_C_ChangeFloorByNumber Parms{};

	Parms.FloorNumber = FloorNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ChangePage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             PageName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::ChangePage(class FName PageName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "ChangePage");

	Params::W_PreMission_PlanningMap_C_ChangePage Parms{};

	Parms.PageName = PageName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Clamp Map Coorinates to Screen View
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  in_x                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  in_y                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 X                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Y                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::Clamp_Map_Coorinates_to_Screen_View(double in_x, double in_y, double* X, double* Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "Clamp Map Coorinates to Screen View");

	Params::W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View Parms{};

	Parms.in_x = in_x;
	Parms.in_y = in_y;

	UObject::ProcessEvent(Func, &Parms);

	if (X != nullptr)
		*X = Parms.X;

	if (Y != nullptr)
		*Y = Parms.Y;
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.CloseRadial
// (Public, BlueprintCallable, BlueprintEvent)

void UW_PreMission_PlanningMap_C::CloseRadial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "CloseRadial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_PreMission_PlanningMap_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.CreateEntryPoints
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLevelDataLookupTable&     LevelDataLookupTable                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TDelegate<void(class UW_PreMission_Tablet_EntryPoint_C* Clicked)>&OnEntryPointSelected                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::CreateEntryPoints(const struct FLevelDataLookupTable& LevelDataLookupTable, const TDelegate<void(class UW_PreMission_Tablet_EntryPoint_C* Clicked)>& OnEntryPointSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "CreateEntryPoints");

	Params::W_PreMission_PlanningMap_C_CreateEntryPoints Parms{};

	Parms.LevelDataLookupTable = std::move(LevelDataLookupTable);
	Parms.OnEntryPointSelected = OnEntryPointSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.CreateMapLevelCanvas
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLevelFloor&               LevelData                                              (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_PreMission_PlanningMap_C::CreateMapLevelCanvas(int32 Index_0, const struct FLevelFloor& LevelData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "CreateMapLevelCanvas");

	Params::W_PreMission_PlanningMap_C_CreateMapLevelCanvas Parms{};

	Parms.Index_0 = Index_0;
	Parms.LevelData = std::move(LevelData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.DrawLine
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FPlanningLine&             LineData                                               (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_PreMission_PlanningMap_C::DrawLine(int32 ID, const struct FPlanningLine& LineData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "DrawLine");

	Params::W_PreMission_PlanningMap_C_DrawLine Parms{};

	Parms.ID = ID;
	Parms.LineData = std::move(LineData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.DrawMarker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32&                            MarkerID                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FPlanningMarker&           MarkerData                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UW_PreMission_PlanningMap_C::DrawMarker(const int32& MarkerID, const struct FPlanningMarker& MarkerData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "DrawMarker");

	Params::W_PreMission_PlanningMap_C_DrawMarker Parms{};

	Parms.MarkerID = MarkerID;
	Parms.MarkerData = std::move(MarkerData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.EndMarkerRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::EndMarkerRotation(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "EndMarkerRotation");

	Params::W_PreMission_PlanningMap_C_EndMarkerRotation Parms{};

	Parms.TriggeringMarker = TriggeringMarker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.EraseLine
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::EraseLine(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "EraseLine");

	Params::W_PreMission_PlanningMap_C_EraseLine Parms{};

	Parms.ID = ID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ExecuteUbergraph_W_PreMission_PlanningMap
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::ExecuteUbergraph_W_PreMission_PlanningMap(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "ExecuteUbergraph_W_PreMission_PlanningMap");

	Params::W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Gamepad Move Map
// (Public, BlueprintCallable, BlueprintEvent)

void UW_PreMission_PlanningMap_C::Gamepad_Move_Map()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "Gamepad Move Map");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Gamepad Zoom Map
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::Gamepad_Zoom_Map(double DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "Gamepad Zoom Map");

	Params::W_PreMission_PlanningMap_C_Gamepad_Zoom_Map Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GetCurrentLevelMap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UW_PreMission_PlanningMap_Level_C**CurrentLevelCanvas                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::GetCurrentLevelMap(class UW_PreMission_PlanningMap_Level_C** CurrentLevelCanvas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "GetCurrentLevelMap");

	Params::W_PreMission_PlanningMap_C_GetCurrentLevelMap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentLevelCanvas != nullptr)
		*CurrentLevelCanvas = Parms.CurrentLevelCanvas;
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GetGamepadMidPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D*                       Coordinates                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::GetGamepadMidPoint(struct FVector2D* Coordinates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "GetGamepadMidPoint");

	Params::W_PreMission_PlanningMap_C_GetGamepadMidPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Coordinates != nullptr)
		*Coordinates = std::move(Parms.Coordinates);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GetLineAngle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector2D&                 PointA                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 PointB                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::GetLineAngle(const struct FVector2D& PointA, const struct FVector2D& PointB, double* Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "GetLineAngle");

	Params::W_PreMission_PlanningMap_C_GetLineAngle Parms{};

	Parms.PointA = std::move(PointA);
	Parms.PointB = std::move(PointB);

	UObject::ProcessEvent(Func, &Parms);

	if (Angle != nullptr)
		*Angle = Parms.Angle;
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GetLineLength
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector2D&                 PointA                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 PointB                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::GetLineLength(const struct FVector2D& PointA, const struct FVector2D& PointB, double* Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "GetLineLength");

	Params::W_PreMission_PlanningMap_C_GetLineLength Parms{};

	Parms.PointA = std::move(PointA);
	Parms.PointB = std::move(PointB);

	UObject::ProcessEvent(Func, &Parms);

	if (Length != nullptr)
		*Length = Parms.Length;
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GetVectorOverThreshold
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector2D&                 Delta                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Threshold                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UW_PreMission_PlanningMap_C::GetVectorOverThreshold(const struct FVector2D& Delta, double Threshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "GetVectorOverThreshold");

	Params::W_PreMission_PlanningMap_C_GetVectorOverThreshold Parms{};

	Parms.Delta = std::move(Delta);
	Parms.Threshold = Threshold;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GoBackInRadial
// (Public, BlueprintCallable, BlueprintEvent)

void UW_PreMission_PlanningMap_C::GoBackInRadial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "GoBackInRadial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.HandleEntryPointsBorderClicked
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_PreMission_PlanningMap_C::HandleEntryPointsBorderClicked(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "HandleEntryPointsBorderClicked");

	Params::W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Hide
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Collapse                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::Hide(double Delay, bool Collapse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "Hide");

	Params::W_PreMission_PlanningMap_C_Hide Parms{};

	Parms.Delay = Delay;
	Parms.Collapse = Collapse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.IsGamepadCrosshairHovering
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Hovering                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::IsGamepadCrosshairHovering(bool* Hovering)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "IsGamepadCrosshairHovering");

	Params::W_PreMission_PlanningMap_C_IsGamepadCrosshairHovering Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Hovering != nullptr)
		*Hovering = Parms.Hovering;
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.IsValidEntryPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<ECOOPMode>&                      ExcludedGameModes                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::IsValidEntryPoint(TArray<ECOOPMode>& ExcludedGameModes, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "IsValidEntryPoint");

	Params::W_PreMission_PlanningMap_C_IsValidEntryPoint Parms{};

	Parms.ExcludedGameModes = std::move(ExcludedGameModes);

	UObject::ProcessEvent(Func, &Parms);

	ExcludedGameModes = std::move(Parms.ExcludedGameModes);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.LineDrawn
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32                             LineID                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UCanvasPanel*               LineCanvas                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::LineDrawn(const int32 LineID, const class UCanvasPanel* LineCanvas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "LineDrawn");

	Params::W_PreMission_PlanningMap_C_LineDrawn Parms{};

	Parms.LineID = LineID;
	Parms.LineCanvas = LineCanvas;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.LineStartNodeRightClicked
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_OfficerMarker_C*               OfficerMarker                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::LineStartNodeRightClicked(class UW_OfficerMarker_C* OfficerMarker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "LineStartNodeRightClicked");

	Params::W_PreMission_PlanningMap_C_LineStartNodeRightClicked Parms{};

	Parms.OfficerMarker = OfficerMarker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.LineStartNodeSelected
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_OfficerMarker_C*               OfficerMarker                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::LineStartNodeSelected(class UW_OfficerMarker_C* OfficerMarker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "LineStartNodeSelected");

	Params::W_PreMission_PlanningMap_C_LineStartNodeSelected Parms{};

	Parms.OfficerMarker = OfficerMarker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.MapMarkerDrawn
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32                             MarkerID                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UW_PreMission_Tablet_MapMarker_C*Marker                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::MapMarkerDrawn(const int32 MarkerID, const class UW_PreMission_Tablet_MapMarker_C* Marker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "MapMarkerDrawn");

	Params::W_PreMission_PlanningMap_C_MapMarkerDrawn Parms{};

	Parms.MarkerID = MarkerID;
	Parms.Marker = Marker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.MarkerRotated
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   Floor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::MarkerRotated(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker, int32 Floor, double Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "MarkerRotated");

	Params::W_PreMission_PlanningMap_C_MarkerRotated Parms{};

	Parms.TriggeringMarker = TriggeringMarker;
	Parms.Floor = Floor;
	Parms.Rotation = Rotation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.MissionChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    MissionURL                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const struct FLevelDataLookupTable&     LevelData                                              (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_PreMission_PlanningMap_C::MissionChanged(const class FString& MissionURL, const struct FLevelDataLookupTable& LevelData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "MissionChanged");

	Params::W_PreMission_PlanningMap_C_MissionChanged Parms{};

	Parms.MissionURL = std::move(MissionURL);
	Parms.LevelData = std::move(LevelData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.MissionSetup
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    URL                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const struct FLevelDataLookupTable&     LevelData                                              (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_PreMission_PlanningMap_C::MissionSetup(const class FString& URL, const struct FLevelDataLookupTable& LevelData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "MissionSetup");

	Params::W_PreMission_PlanningMap_C_MissionSetup Parms{};

	Parms.URL = std::move(URL);
	Parms.LevelData = std::move(LevelData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnAnalogValueChanged
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FAnalogInputEvent&         InAnalogInputEvent                                     (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_PreMission_PlanningMap_C::OnAnalogValueChanged(const struct FGeometry& MyGeometry, const struct FAnalogInputEvent& InAnalogInputEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "OnAnalogValueChanged");

	Params::W_PreMission_PlanningMap_C_OnAnalogValueChanged Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InAnalogInputEvent = std::move(InAnalogInputEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnEntryPointChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FEntryPoint&               NewEntryPoint                                          (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_PreMission_PlanningMap_C::OnEntryPointChanged(const struct FEntryPoint& NewEntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "OnEntryPointChanged");

	Params::W_PreMission_PlanningMap_C_OnEntryPointChanged Parms{};

	Parms.NewEntryPoint = std::move(NewEntryPoint);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnEntryPointSelected
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_PreMission_Tablet_EntryPoint_C*Clicked                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::OnEntryPointSelected(class UW_PreMission_Tablet_EntryPoint_C* Clicked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "OnEntryPointSelected");

	Params::W_PreMission_PlanningMap_C_OnEntryPointSelected Parms{};

	Parms.Clicked = Clicked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnFocusLost
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const struct FFocusEvent&               InFocusEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UW_PreMission_PlanningMap_C::OnFocusLost(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "OnFocusLost");

	Params::W_PreMission_PlanningMap_C_OnFocusLost Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnInputChange
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ECommonInputType                        bNewInputType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::OnInputChange(ECommonInputType bNewInputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "OnInputChange");

	Params::W_PreMission_PlanningMap_C_OnInputChange Parms{};

	Parms.bNewInputType = bNewInputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnKeyDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FKeyEvent&                 InKeyEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_PreMission_PlanningMap_C::OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "OnKeyDown");

	Params::W_PreMission_PlanningMap_C_OnKeyDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnKeyUp
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FKeyEvent&                 InKeyEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_PreMission_PlanningMap_C::OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "OnKeyUp");

	Params::W_PreMission_PlanningMap_C_OnKeyUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnLeftClickUp
// (HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 InGeometry                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             InMouseEvent                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UW_PreMission_PlanningMap_C::OnLeftClickUp(const struct FGeometry& InGeometry, const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "OnLeftClickUp");

	Params::W_PreMission_PlanningMap_C_OnLeftClickUp Parms{};

	Parms.InGeometry = std::move(InGeometry);
	Parms.InMouseEvent = std::move(InMouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnLineAdded
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// int32                                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FPlanningLine&             Line                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UW_PreMission_PlanningMap_C::OnLineAdded(int32 ID, const struct FPlanningLine& Line)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "OnLineAdded");

	Params::W_PreMission_PlanningMap_C_OnLineAdded Parms{};

	Parms.ID = ID;
	Parms.Line = std::move(Line);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnLineRemoved
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::OnLineRemoved(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "OnLineRemoved");

	Params::W_PreMission_PlanningMap_C_OnLineRemoved Parms{};

	Parms.ID = ID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMarkerAdded
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// int32                                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FPlanningMarker&           Marker                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UW_PreMission_PlanningMap_C::OnMarkerAdded(int32 ID, const struct FPlanningMarker& Marker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "OnMarkerAdded");

	Params::W_PreMission_PlanningMap_C_OnMarkerAdded Parms{};

	Parms.ID = ID;
	Parms.Marker = std::move(Marker);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMarkerRemoved
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::OnMarkerRemoved(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "OnMarkerRemoved");

	Params::W_PreMission_PlanningMap_C_OnMarkerRemoved Parms{};

	Parms.ID = ID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMissionChanged
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FString&                    URL                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const struct FLevelDataLookupTable&     LevelData                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UW_PreMission_PlanningMap_C::OnMissionChanged(const class FString& URL, const struct FLevelDataLookupTable& LevelData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "OnMissionChanged");

	Params::W_PreMission_PlanningMap_C_OnMissionChanged Parms{};

	Parms.URL = std::move(URL);
	Parms.LevelData = std::move(LevelData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMouseButtonDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_PreMission_PlanningMap_C::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "OnMouseButtonDown");

	Params::W_PreMission_PlanningMap_C_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMouseButtonUp
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_PreMission_PlanningMap_C::OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "OnMouseButtonUp");

	Params::W_PreMission_PlanningMap_C_OnMouseButtonUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMouseMove
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_PreMission_PlanningMap_C::OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "OnMouseMove");

	Params::W_PreMission_PlanningMap_C_OnMouseMove Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMouseWheel
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_PreMission_PlanningMap_C::OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "OnMouseWheel");

	Params::W_PreMission_PlanningMap_C_OnMouseWheel Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OpenRadial
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 CursorPosition                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::OpenRadial(const struct FVector2D& CursorPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "OpenRadial");

	Params::W_PreMission_PlanningMap_C_OpenRadial Parms{};

	Parms.CursorPosition = std::move(CursorPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "PreConstruct");

	Params::W_PreMission_PlanningMap_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.RadialCollapsed
// (Public, BlueprintCallable, BlueprintEvent)

void UW_PreMission_PlanningMap_C::RadialCollapsed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "RadialCollapsed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.RadialMarkerSelected
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CategoryName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             MarkerName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::RadialMarkerSelected(class FName CategoryName, class FName MarkerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "RadialMarkerSelected");

	Params::W_PreMission_PlanningMap_C_RadialMarkerSelected Parms{};

	Parms.CategoryName = CategoryName;
	Parms.MarkerName = MarkerName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.RemovePreviewLine
// (Public, BlueprintCallable, BlueprintEvent)

void UW_PreMission_PlanningMap_C::RemovePreviewLine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "RemovePreviewLine");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Reveal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::Reveal(double Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "Reveal");

	Params::W_PreMission_PlanningMap_C_Reveal Parms{};

	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.RotateMarker
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_PreMission_Tablet_MapMarker_C* RotatingMarker_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 MousePos                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::RotateMarker(class UW_PreMission_Tablet_MapMarker_C* RotatingMarker_0, const struct FVector2D& MousePos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "RotateMarker");

	Params::W_PreMission_PlanningMap_C_RotateMarker Parms{};

	Parms.RotatingMarker_0 = RotatingMarker_0;
	Parms.MousePos = std::move(MousePos);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ScaleLineWeightByZoom
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CurrentZoom_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::ScaleLineWeightByZoom(double CurrentZoom_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "ScaleLineWeightByZoom");

	Params::W_PreMission_PlanningMap_C_ScaleLineWeightByZoom Parms{};

	Parms.CurrentZoom_0 = CurrentZoom_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Set Hovered Ids
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LineID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   IconId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::Set_Hovered_Ids(int32 LineID, int32 IconId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "Set Hovered Ids");

	Params::W_PreMission_PlanningMap_C_Set_Hovered_Ids Parms{};

	Parms.LineID = LineID;
	Parms.IconId = IconId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.SetInputMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsGamepad                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::SetInputMode(bool IsGamepad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "SetInputMode");

	Params::W_PreMission_PlanningMap_C_SetInputMode Parms{};

	Parms.IsGamepad = IsGamepad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.SetLinePart
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_PreMission_PlanningMap_C::SetLinePart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "SetLinePart");

	Params::W_PreMission_PlanningMap_C_SetLinePart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.StartMarkerRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::StartMarkerRotation(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "StartMarkerRotation");

	Params::W_PreMission_PlanningMap_C_StartMarkerRotation Parms{};

	Parms.TriggeringMarker = TriggeringMarker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "Tick");

	Params::W_PreMission_PlanningMap_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Toggle Radial
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Coordinates                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::Toggle_Radial(const struct FVector2D& Coordinates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "Toggle Radial");

	Params::W_PreMission_PlanningMap_C_Toggle_Radial Parms{};

	Parms.Coordinates = std::move(Coordinates);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ToggleEntrySelection
// (BlueprintCallable, BlueprintEvent)

void UW_PreMission_PlanningMap_C::ToggleEntrySelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "ToggleEntrySelection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ToggleLegend
// (BlueprintCallable, BlueprintEvent)

void UW_PreMission_PlanningMap_C::ToggleLegend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "ToggleLegend");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.TogglePlayerList
// (BlueprintCallable, BlueprintEvent)

void UW_PreMission_PlanningMap_C::TogglePlayerList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "TogglePlayerList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.UpdateEntryPointSelection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FEntryPoint&               EntryPointData                                         (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_PreMission_PlanningMap_C::UpdateEntryPointSelection(const struct FEntryPoint& EntryPointData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "UpdateEntryPointSelection");

	Params::W_PreMission_PlanningMap_C_UpdateEntryPointSelection Parms{};

	Parms.EntryPointData = std::move(EntryPointData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.UpdatePreviewLine
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 MousePos                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::UpdatePreviewLine(const struct FVector2D& MousePos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "UpdatePreviewLine");

	Params::W_PreMission_PlanningMap_C_UpdatePreviewLine Parms{};

	Parms.MousePos = std::move(MousePos);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Zoom
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 Geometry                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             PointerEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    ZoomOnCursor_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ZoomIn                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZoomIncrements                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::Zoom(const struct FGeometry& Geometry, const struct FPointerEvent& PointerEvent, bool ZoomOnCursor_0, bool ZoomIn, double ZoomIncrements)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "Zoom");

	Params::W_PreMission_PlanningMap_C_Zoom Parms{};

	Parms.Geometry = std::move(Geometry);
	Parms.PointerEvent = std::move(PointerEvent);
	Parms.ZoomOnCursor_0 = ZoomOnCursor_0;
	Parms.ZoomIn = ZoomIn;
	Parms.ZoomIncrements = ZoomIncrements;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ZoomOnCursor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 Geometry                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             PointerEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// double                                  PreviousZoom                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewZoom                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::ZoomOnCursor(const struct FGeometry& Geometry, const struct FPointerEvent& PointerEvent, double PreviousZoom, double NewZoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "ZoomOnCursor");

	Params::W_PreMission_PlanningMap_C_ZoomOnCursor Parms{};

	Parms.Geometry = std::move(Geometry);
	Parms.PointerEvent = std::move(PointerEvent);
	Parms.PreviousZoom = PreviousZoom;
	Parms.NewZoom = NewZoom;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GetFocusTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UWidget**                         Focus                                                  (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_PreMission_PlanningMap_C::GetFocusTarget(class UWidget** Focus) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_PreMission_PlanningMap_C", "GetFocusTarget");

	Params::W_PreMission_PlanningMap_C_GetFocusTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Focus != nullptr)
		*Focus = Parms.Focus;
}

}

