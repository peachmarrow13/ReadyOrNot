#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Radial_MapMarking

#include "Basic.hpp"

#include "W_Radial_MapMarking_classes.hpp"
#include "W_Radial_MapMarking_parameters.hpp"


namespace SDK
{

// Function W_Radial_MapMarking.W_Radial_MapMarking_C.AddCategory
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FText&                      DisplayName                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// class UTexture2D*                       IconImage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    HasSubCommands                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Radial_MapMarking_C::AddCategory(const class FString& ID, const class FText& DisplayName, class UTexture2D* IconImage, bool HasSubCommands)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "AddCategory");

	Params::W_Radial_MapMarking_C_AddCategory Parms{};

	Parms.ID = std::move(ID);
	Parms.DisplayName = std::move(DisplayName);
	Parms.IconImage = IconImage;
	Parms.HasSubCommands = HasSubCommands;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.BndEvt__W_Radial_MapMarking_InnerRadial_K2Node_ComponentBoundEvent_0_SelectionChanged__DelegateSignature
// (BlueprintEvent)
// Parameters:
// int32                                   NewSelection                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OldSelection                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Radial_MapMarking_C::BndEvt__W_Radial_MapMarking_InnerRadial_K2Node_ComponentBoundEvent_0_SelectionChanged__DelegateSignature(int32 NewSelection, int32 OldSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "BndEvt__W_Radial_MapMarking_InnerRadial_K2Node_ComponentBoundEvent_0_SelectionChanged__DelegateSignature");

	Params::W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_InnerRadial_K2Node_ComponentBoundEvent_0_SelectionChanged__DelegateSignature Parms{};

	Parms.NewSelection = NewSelection;
	Parms.OldSelection = OldSelection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.BndEvt__W_Radial_MapMarking_InnerRadial_K2Node_ComponentBoundEvent_5_EnteredDeadzone__DelegateSignature
// (BlueprintEvent)

void UW_Radial_MapMarking_C::BndEvt__W_Radial_MapMarking_InnerRadial_K2Node_ComponentBoundEvent_5_EnteredDeadzone__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "BndEvt__W_Radial_MapMarking_InnerRadial_K2Node_ComponentBoundEvent_5_EnteredDeadzone__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_1_EnteredDeadzone__DelegateSignature
// (BlueprintEvent)

void UW_Radial_MapMarking_C::BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_1_EnteredDeadzone__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_1_EnteredDeadzone__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_2_ExitedDeadzone__DelegateSignature
// (BlueprintEvent)

void UW_Radial_MapMarking_C::BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_2_ExitedDeadzone__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_2_ExitedDeadzone__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_3_SelectionChanged__DelegateSignature
// (BlueprintEvent)
// Parameters:
// int32                                   NewSelection                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OldSelection                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Radial_MapMarking_C::BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_3_SelectionChanged__DelegateSignature(int32 NewSelection, int32 OldSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_3_SelectionChanged__DelegateSignature");

	Params::W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_3_SelectionChanged__DelegateSignature Parms{};

	Parms.NewSelection = NewSelection;
	Parms.OldSelection = OldSelection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.CollapseRadial
// (BlueprintCallable, BlueprintEvent)

void UW_Radial_MapMarking_C::CollapseRadial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "CollapseRadial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.CollapseSubMenu
// (BlueprintCallable, BlueprintEvent)

void UW_Radial_MapMarking_C::CollapseSubMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "CollapseSubMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_Radial_MapMarking_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.ExecuteUbergraph_W_Radial_MapMarking
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Radial_MapMarking_C::ExecuteUbergraph_W_Radial_MapMarking(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "ExecuteUbergraph_W_Radial_MapMarking");

	Params::W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.Finished_344D667B4B5F9FD05121C694FD14ED92
// (BlueprintCallable, BlueprintEvent)

void UW_Radial_MapMarking_C::Finished_344D667B4B5F9FD05121C694FD14ED92()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "Finished_344D667B4B5F9FD05121C694FD14ED92");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.Give Focus To Map
// (Public, BlueprintCallable, BlueprintEvent)

void UW_Radial_MapMarking_C::Give_Focus_To_Map()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "Give Focus To Map");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.GoBack
// (BlueprintCallable, BlueprintEvent)

void UW_Radial_MapMarking_C::GoBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "GoBack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.HandleGamepad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUMG_RadialMenu_C*                UMGRadial                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_Radial_MapMarking_C::HandleGamepad(class UUMG_RadialMenu_C* UMGRadial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "HandleGamepad");

	Params::W_Radial_MapMarking_C_HandleGamepad Parms{};

	Parms.UMGRadial = UMGRadial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.InitGamepadSupport
// (Public, BlueprintCallable, BlueprintEvent)

void UW_Radial_MapMarking_C::InitGamepadSupport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "InitGamepadSupport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.InputChange
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ECommonInputType                        bNewInputType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Radial_MapMarking_C::InputChange(ECommonInputType bNewInputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "InputChange");

	Params::W_Radial_MapMarking_C_InputChange Parms{};

	Parms.bNewInputType = bNewInputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.OnAnalogValueChanged
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FAnalogInputEvent&         InAnalogInputEvent                                     (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_Radial_MapMarking_C::OnAnalogValueChanged(const struct FGeometry& MyGeometry, const struct FAnalogInputEvent& InAnalogInputEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "OnAnalogValueChanged");

	Params::W_Radial_MapMarking_C_OnAnalogValueChanged Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InAnalogInputEvent = std::move(InAnalogInputEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.OnFocusLost
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const struct FFocusEvent&               InFocusEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UW_Radial_MapMarking_C::OnFocusLost(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "OnFocusLost");

	Params::W_Radial_MapMarking_C_OnFocusLost Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.OnKeyDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FKeyEvent&                 InKeyEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_Radial_MapMarking_C::OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "OnKeyDown");

	Params::W_Radial_MapMarking_C_OnKeyDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.OnMouseButtonDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_Radial_MapMarking_C::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "OnMouseButtonDown");

	Params::W_Radial_MapMarking_C_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.OnMouseButtonUp
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_Radial_MapMarking_C::OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "OnMouseButtonUp");

	Params::W_Radial_MapMarking_C_OnMouseButtonUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.OnPageViewUpdate_1
// (BlueprintCallable, BlueprintEvent)

void UW_Radial_MapMarking_C::OnPageViewUpdate_1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "OnPageViewUpdate_1");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.OpenSubmenu
// (BlueprintCallable, BlueprintEvent)

void UW_Radial_MapMarking_C::OpenSubmenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "OpenSubmenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.Populate
// (BlueprintCallable, BlueprintEvent)

void UW_Radial_MapMarking_C::Populate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "Populate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.PopulateSubmenu
// (BlueprintCallable, BlueprintEvent)

void UW_Radial_MapMarking_C::PopulateSubmenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "PopulateSubmenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Radial_MapMarking_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "PreConstruct");

	Params::W_Radial_MapMarking_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.SelectionMade
// (BlueprintCallable, BlueprintEvent)

void UW_Radial_MapMarking_C::SelectionMade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "SelectionMade");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.SetGamepadInputDirection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUMG_RadialMenu_C*                UMGRadial                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_Radial_MapMarking_C::SetGamepadInputDirection(class UUMG_RadialMenu_C* UMGRadial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "SetGamepadInputDirection");

	Params::W_Radial_MapMarking_C_SetGamepadInputDirection Parms{};

	Parms.UMGRadial = UMGRadial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.Submit
// (BlueprintCallable, BlueprintEvent)

void UW_Radial_MapMarking_C::Submit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "Submit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Radial_MapMarking_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "Tick");

	Params::W_Radial_MapMarking_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Radial_MapMarking.W_Radial_MapMarking_C.Update Position
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Coordinates                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 RawCoordinates                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Radial_MapMarking_C::Update_Position(const struct FVector2D& Coordinates, const struct FVector2D& RawCoordinates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Radial_MapMarking_C", "Update Position");

	Params::W_Radial_MapMarking_C_Update_Position Parms{};

	Parms.Coordinates = std::move(Coordinates);
	Parms.RawCoordinates = std::move(RawCoordinates);

	UObject::ProcessEvent(Func, &Parms);
}

}

