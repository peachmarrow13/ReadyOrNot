#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_TeamView_Tablet

#include "Basic.hpp"

#include "W_TeamView_Tablet_classes.hpp"
#include "W_TeamView_Tablet_parameters.hpp"


namespace SDK
{

// Function W_TeamView_Tablet.W_TeamView_Tablet_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_TeamView_Tablet_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_TeamView_Tablet_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_TeamView_Tablet.W_TeamView_Tablet_C.ExecuteUbergraph_W_TeamView_Tablet
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_TeamView_Tablet_C::ExecuteUbergraph_W_TeamView_Tablet(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_TeamView_Tablet_C", "ExecuteUbergraph_W_TeamView_Tablet");

	Params::W_TeamView_Tablet_C_ExecuteUbergraph_W_TeamView_Tablet Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_TeamView_Tablet.W_TeamView_Tablet_C.Input Change
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECommonInputType                        bNewInputType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_TeamView_Tablet_C::Input_Change(ECommonInputType bNewInputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_TeamView_Tablet_C", "Input Change");

	Params::W_TeamView_Tablet_C_Input_Change Parms{};

	Parms.bNewInputType = bNewInputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_TeamView_Tablet.W_TeamView_Tablet_C.OnKeyDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FKeyEvent&                 InKeyEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_TeamView_Tablet_C::OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_TeamView_Tablet_C", "OnKeyDown");

	Params::W_TeamView_Tablet_C_OnKeyDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_TeamView_Tablet.W_TeamView_Tablet_C.Tick_TeamViewOn
// (Event, Protected, BlueprintEvent)

void UW_TeamView_Tablet_C::Tick_TeamViewOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_TeamView_Tablet_C", "Tick_TeamViewOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_TeamView_Tablet.W_TeamView_Tablet_C.BP_GetDesiredFocusTarget
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class UWidget* UW_TeamView_Tablet_C::BP_GetDesiredFocusTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_TeamView_Tablet_C", "BP_GetDesiredFocusTarget");

	Params::W_TeamView_Tablet_C_BP_GetDesiredFocusTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

