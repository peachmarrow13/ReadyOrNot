#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_WeaponWheel_RadialSelection

#include "Basic.hpp"

#include "W_WeaponWheel_RadialSelection_classes.hpp"
#include "W_WeaponWheel_RadialSelection_parameters.hpp"


namespace SDK
{

// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.AddExecutableItemToCategory
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWeaponWheelScript*               WeaponWheelScript                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   AtIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_RadialSelection_C::AddExecutableItemToCategory(class UWeaponWheelScript* WeaponWheelScript, int32 AtIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "AddExecutableItemToCategory");

	Params::W_WeaponWheel_RadialSelection_C_AddExecutableItemToCategory Parms{};

	Parms.WeaponWheelScript = WeaponWheelScript;
	Parms.AtIndex = AtIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.AddItemToCategory
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class ABaseItem*&                 NewItem                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// int32                                   AtIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_RadialSelection_C::AddItemToCategory(const class ABaseItem*& NewItem, int32 AtIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "AddItemToCategory");

	Params::W_WeaponWheel_RadialSelection_C_AddItemToCategory Parms{};

	Parms.NewItem = NewItem;
	Parms.AtIndex = AtIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.CreateIcon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSlateBrush&               InBrush                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UImage*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class UImage* UW_WeaponWheel_RadialSelection_C::CreateIcon(const struct FSlateBrush& InBrush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "CreateIcon");

	Params::W_WeaponWheel_RadialSelection_C_CreateIcon Parms{};

	Parms.InBrush = std::move(InBrush);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.ExecuteRadial
// (Public, BlueprintCallable, BlueprintEvent)

void UW_WeaponWheel_RadialSelection_C::ExecuteRadial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "ExecuteRadial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.ExecuteUbergraph_W_WeaponWheel_RadialSelection
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_RadialSelection_C::ExecuteUbergraph_W_WeaponWheel_RadialSelection(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "ExecuteUbergraph_W_WeaponWheel_RadialSelection");

	Params::W_WeaponWheel_RadialSelection_C_ExecuteUbergraph_W_WeaponWheel_RadialSelection Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.MoveToBack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseItem*                        Item_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_RadialSelection_C::MoveToBack(class ABaseItem* Item_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "MoveToBack");

	Params::W_WeaponWheel_RadialSelection_C_MoveToBack Parms{};

	Parms.Item_0 = Item_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.MoveToFront
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseItem*                        Item_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_RadialSelection_C::MoveToFront(class ABaseItem* Item_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "MoveToFront");

	Params::W_WeaponWheel_RadialSelection_C_MoveToFront Parms{};

	Parms.Item_0 = Item_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.Next
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_RadialSelection_C::Next(bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "Next");

	Params::W_WeaponWheel_RadialSelection_C_Next Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.On Wheel Created
// (BlueprintCallable, BlueprintEvent)

void UW_WeaponWheel_RadialSelection_C::On_Wheel_Created()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "On Wheel Created");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.OnDeselected
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Play_Animation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_RadialSelection_C::OnDeselected(bool Play_Animation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "OnDeselected");

	Params::W_WeaponWheel_RadialSelection_C_OnDeselected Parms{};

	Parms.Play_Animation = Play_Animation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.OnSelected
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Play_Animation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_RadialSelection_C::OnSelected(bool Play_Animation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "OnSelected");

	Params::W_WeaponWheel_RadialSelection_C_OnSelected Parms{};

	Parms.Play_Animation = Play_Animation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_RadialSelection_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "PreConstruct");

	Params::W_WeaponWheel_RadialSelection_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.Previous
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_RadialSelection_C::Previous(bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "Previous");

	Params::W_WeaponWheel_RadialSelection_C_Previous Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.RemoveExecutableItemFromCategory
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWeaponWheelScript*               WeaponWheelScript                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_RadialSelection_C::RemoveExecutableItemFromCategory(class UWeaponWheelScript* WeaponWheelScript)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "RemoveExecutableItemFromCategory");

	Params::W_WeaponWheel_RadialSelection_C_RemoveExecutableItemFromCategory Parms{};

	Parms.WeaponWheelScript = WeaponWheelScript;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.RemoveItemFromCategory
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class ABaseItem*&                 Item_0                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_RadialSelection_C::RemoveItemFromCategory(const class ABaseItem*& Item_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "RemoveItemFromCategory");

	Params::W_WeaponWheel_RadialSelection_C_RemoveItemFromCategory Parms{};

	Parms.Item_0 = Item_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.RemoveNullItems
// (Public, BlueprintCallable, BlueprintEvent)

void UW_WeaponWheel_RadialSelection_C::RemoveNullItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "RemoveNullItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.RemoveNullItems (Internal)
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UObject*>&                 ItemArray                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UW_WeaponWheel_RadialSelection_C::RemoveNullItems__Internal_(TArray<class UObject*>& ItemArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "RemoveNullItems (Internal)");

	Params::W_WeaponWheel_RadialSelection_C_RemoveNullItems__Internal_ Parms{};

	Parms.ItemArray = std::move(ItemArray);

	UObject::ProcessEvent(Func, &Parms);

	ItemArray = std::move(Parms.ItemArray);
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.Select
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_RadialSelection_C::Select(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "Select");

	Params::W_WeaponWheel_RadialSelection_C_Select Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.ShiftItemToNewSpot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseItem*                        Item_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   NewIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_RadialSelection_C::ShiftItemToNewSpot(class ABaseItem* Item_0, int32 NewIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "ShiftItemToNewSpot");

	Params::W_WeaponWheel_RadialSelection_C_ShiftItemToNewSpot Parms{};

	Parms.Item_0 = Item_0;
	Parms.NewIndex = NewIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.ShuffleItems
// (Public, BlueprintCallable, BlueprintEvent)

void UW_WeaponWheel_RadialSelection_C::ShuffleItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "ShuffleItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.UpdateIcon
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SelectionIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FSlateBrush&               InBrush                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_WeaponWheel_RadialSelection_C::UpdateIcon(int32 SelectionIndex, const struct FSlateBrush& InBrush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "UpdateIcon");

	Params::W_WeaponWheel_RadialSelection_C_UpdateIcon Parms{};

	Parms.SelectionIndex = SelectionIndex;
	Parms.InBrush = std::move(InBrush);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.GetCategory
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText*                            Category                                               (Parm, OutParm)

void UW_WeaponWheel_RadialSelection_C::GetCategory(class FText* Category) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "GetCategory");

	Params::W_WeaponWheel_RadialSelection_C_GetCategory Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Category != nullptr)
		*Category = std::move(Parms.Category);
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.GetItemName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FName*                            Item_Name                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_RadialSelection_C::GetItemName(class FName* Item_Name) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "GetItemName");

	Params::W_WeaponWheel_RadialSelection_C_GetItemName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Item_Name != nullptr)
		*Item_Name = Parms.Item_Name;
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.IsEquipping
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool*                                   IsEquipping_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_RadialSelection_C::IsEquipping(bool* IsEquipping_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "IsEquipping");

	Params::W_WeaponWheel_RadialSelection_C_IsEquipping Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEquipping_0 != nullptr)
		*IsEquipping_0 = Parms.IsEquipping_0;
}


// Function W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C.IsInExecutablesArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool*                                   Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_RadialSelection_C::IsInExecutablesArray(bool* Return_Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_RadialSelection_C", "IsInExecutablesArray");

	Params::W_WeaponWheel_RadialSelection_C_IsInExecutablesArray Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}

}

