#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_WeaponWheel

#include "Basic.hpp"

#include "W_WeaponWheel_classes.hpp"
#include "W_WeaponWheel_parameters.hpp"


namespace SDK
{

// Function W_WeaponWheel.W_WeaponWheel_C.AddAssistants
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class ABaseItem*&                 Assistants_0                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::AddAssistants(const class ABaseItem*& Assistants_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "AddAssistants");

	Params::W_WeaponWheel_C_AddAssistants Parms{};

	Parms.Assistants_0 = Assistants_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.AddExecutableItemToCategory
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           NewWeaponWheelScript                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const int32                             AtIndex                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::AddExecutableItemToCategory(class UClass* NewWeaponWheelScript, const int32 AtIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "AddExecutableItemToCategory");

	Params::W_WeaponWheel_C_AddExecutableItemToCategory Parms{};

	Parms.NewWeaponWheelScript = NewWeaponWheelScript;
	Parms.AtIndex = AtIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.AddGrenade
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class ABaseItem*&                 GrenadeItem                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::AddGrenade(const class ABaseItem*& GrenadeItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "AddGrenade");

	Params::W_WeaponWheel_C_AddGrenade Parms{};

	Parms.GrenadeItem = GrenadeItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.AddItemToCategory
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class ABaseItem*&                 Item                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// const class FName                       Wheel_Category                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::AddItemToCategory(const class ABaseItem*& Item, const class FName Wheel_Category)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "AddItemToCategory");

	Params::W_WeaponWheel_C_AddItemToCategory Parms{};

	Parms.Item = Item;
	Parms.Wheel_Category = Wheel_Category;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.AddPrimaryWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseItem*                        PrimaryWeaponItem                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::AddPrimaryWeapon(class ABaseItem* PrimaryWeaponItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "AddPrimaryWeapon");

	Params::W_WeaponWheel_C_AddPrimaryWeapon Parms{};

	Parms.PrimaryWeaponItem = PrimaryWeaponItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.AddSecondaryWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class ABaseItem*&                 SecondayWeaponItem                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::AddSecondaryWeapon(const class ABaseItem*& SecondayWeaponItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "AddSecondaryWeapon");

	Params::W_WeaponWheel_C_AddSecondaryWeapon Parms{};

	Parms.SecondayWeaponItem = SecondayWeaponItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.AddTabletDevice
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class ABaseItem*&                 TabletDevice_Item                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::AddTabletDevice(const class ABaseItem*& TabletDevice_Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "AddTabletDevice");

	Params::W_WeaponWheel_C_AddTabletDevice Parms{};

	Parms.TabletDevice_Item = TabletDevice_Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.AddTactical Device
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class ABaseItem*&                 Tactical_Device_Item                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::AddTactical_Device(const class ABaseItem*& Tactical_Device_Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "AddTactical Device");

	Params::W_WeaponWheel_C_AddTactical_Device Parms{};

	Parms.Tactical_Device_Item = Tactical_Device_Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.ClearStats
// (Public, BlueprintCallable, BlueprintEvent)

void UW_WeaponWheel_C::ClearStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "ClearStats");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_WeaponWheel.W_WeaponWheel_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_WeaponWheel_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_WeaponWheel.W_WeaponWheel_C.CreateWheelCategory
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Category_Name                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCanvasPanelSlot**                Canvas_Panel_Slot                                      (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::CreateWheelCategory(int32 Index_0, class FName Category_Name, class UCanvasPanelSlot** Canvas_Panel_Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "CreateWheelCategory");

	Params::W_WeaponWheel_C_CreateWheelCategory Parms{};

	Parms.Index_0 = Index_0;
	Parms.Category_Name = Category_Name;

	UObject::ProcessEvent(Func, &Parms);

	if (Canvas_Panel_Slot != nullptr)
		*Canvas_Panel_Slot = Parms.Canvas_Panel_Slot;
}


// Function W_WeaponWheel.W_WeaponWheel_C.CreateWheelStat
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ItemStatClass                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  FillSpeed                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EEasingFunc                             EasingFunction                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FItemLookupTable&          LookupTable                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// class UW_WeaponWheel_ItemStat_C**       ItemStatWidget                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::CreateWheelStat(class UClass* ItemStatClass, double FillSpeed, EEasingFunc EasingFunction, const struct FItemLookupTable& LookupTable, class UW_WeaponWheel_ItemStat_C** ItemStatWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "CreateWheelStat");

	Params::W_WeaponWheel_C_CreateWheelStat Parms{};

	Parms.ItemStatClass = ItemStatClass;
	Parms.FillSpeed = FillSpeed;
	Parms.EasingFunction = EasingFunction;
	Parms.LookupTable = std::move(LookupTable);

	UObject::ProcessEvent(Func, &Parms);

	if (ItemStatWidget != nullptr)
		*ItemStatWidget = Parms.ItemStatWidget;
}


// Function W_WeaponWheel.W_WeaponWheel_C.ExecuteRadial
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UW_WeaponWheel_C::ExecuteRadial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "ExecuteRadial");

	Params::W_WeaponWheel_C_ExecuteRadial Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_WeaponWheel.W_WeaponWheel_C.ExecuteUbergraph_W_WeaponWheel
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::ExecuteUbergraph_W_WeaponWheel(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "ExecuteUbergraph_W_WeaponWheel");

	Params::W_WeaponWheel_C_ExecuteUbergraph_W_WeaponWheel Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.FindDataTableRowNameFromItemName
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             ItemName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            RowName                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::FindDataTableRowNameFromItemName(class FName ItemName, class FName* RowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "FindDataTableRowNameFromItemName");

	Params::W_WeaponWheel_C_FindDataTableRowNameFromItemName Parms{};

	Parms.ItemName = ItemName;

	UObject::ProcessEvent(Func, &Parms);

	if (RowName != nullptr)
		*RowName = Parms.RowName;
}


// Function W_WeaponWheel.W_WeaponWheel_C.HideWheel
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UW_WeaponWheel_C::HideWheel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "HideWheel");

	Params::W_WeaponWheel_C_HideWheel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_WeaponWheel.W_WeaponWheel_C.IsWheelCursorVisible
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UW_WeaponWheel_C::IsWheelCursorVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "IsWheelCursorVisible");

	Params::W_WeaponWheel_C_IsWheelCursorVisible Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_WeaponWheel.W_WeaponWheel_C.MoveItemToAnotherCategory
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseItem*                        Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FName                             ToCategory                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewIndexInCategory                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::MoveItemToAnotherCategory(class ABaseItem* Item, class FName ToCategory, int32 NewIndexInCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "MoveItemToAnotherCategory");

	Params::W_WeaponWheel_C_MoveItemToAnotherCategory Parms{};

	Parms.Item = Item;
	Parms.ToCategory = ToCategory;
	Parms.NewIndexInCategory = NewIndexInCategory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.MoveItemToAnotherCategory (Index)
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ItemIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             FromCategory                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ToCategory                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewIndexInCategory                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::MoveItemToAnotherCategory__Index_(int32 ItemIndex, class FName FromCategory, class FName ToCategory, int32 NewIndexInCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "MoveItemToAnotherCategory (Index)");

	Params::W_WeaponWheel_C_MoveItemToAnotherCategory__Index_ Parms{};

	Parms.ItemIndex = ItemIndex;
	Parms.FromCategory = FromCategory;
	Parms.ToCategory = ToCategory;
	Parms.NewIndexInCategory = NewIndexInCategory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.MoveItemToBack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseItem*                        Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::MoveItemToBack(class ABaseItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "MoveItemToBack");

	Params::W_WeaponWheel_C_MoveItemToBack Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.MoveItemToBack (Index)
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ItemIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CategoryName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::MoveItemToBack__Index_(int32 ItemIndex, class FName CategoryName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "MoveItemToBack (Index)");

	Params::W_WeaponWheel_C_MoveItemToBack__Index_ Parms{};

	Parms.ItemIndex = ItemIndex;
	Parms.CategoryName = CategoryName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.MoveItemToFront
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseItem*                        Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::MoveItemToFront(class ABaseItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "MoveItemToFront");

	Params::W_WeaponWheel_C_MoveItemToFront Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.MoveItemToFront (Index)
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ItemIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CategoryName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::MoveItemToFront__Index_(int32 ItemIndex, class FName CategoryName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "MoveItemToFront (Index)");

	Params::W_WeaponWheel_C_MoveItemToFront__Index_ Parms{};

	Parms.ItemIndex = ItemIndex;
	Parms.CategoryName = CategoryName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.MoveItemToNewSpot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseItem*                        Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   NewIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::MoveItemToNewSpot(class ABaseItem* Item, int32 NewIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "MoveItemToNewSpot");

	Params::W_WeaponWheel_C_MoveItemToNewSpot Parms{};

	Parms.Item = Item;
	Parms.NewIndex = NewIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.MoveItemToNewSpot (Index)
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ItemIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CategoryName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::MoveItemToNewSpot__Index_(int32 ItemIndex, class FName CategoryName, int32 NewIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "MoveItemToNewSpot (Index)");

	Params::W_WeaponWheel_C_MoveItemToNewSpot__Index_ Parms{};

	Parms.ItemIndex = ItemIndex;
	Parms.CategoryName = CategoryName;
	Parms.NewIndex = NewIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.NextItem
// (Public, BlueprintCallable, BlueprintEvent)

void UW_WeaponWheel_C::NextItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "NextItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_WeaponWheel.W_WeaponWheel_C.NotifyAllCategoriesOnWheelCreated
// (Public, BlueprintCallable, BlueprintEvent)

void UW_WeaponWheel_C::NotifyAllCategoriesOnWheelCreated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "NotifyAllCategoriesOnWheelCreated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_WeaponWheel.W_WeaponWheel_C.NotifyAllStatsOnWheelCreated
// (Public, BlueprintCallable, BlueprintEvent)

void UW_WeaponWheel_C::NotifyAllStatsOnWheelCreated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "NotifyAllStatsOnWheelCreated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_WeaponWheel.W_WeaponWheel_C.OnItemDeselected
// (BlueprintCallable, BlueprintEvent)

void UW_WeaponWheel_C::OnItemDeselected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "OnItemDeselected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_WeaponWheel.W_WeaponWheel_C.OnItemSelcted
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Play_Animation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::OnItemSelcted(bool Play_Animation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "OnItemSelcted");

	Params::W_WeaponWheel_C_OnItemSelcted Parms{};

	Parms.Play_Animation = Play_Animation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.OnRadialMenuCreated
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UW_WeaponWheel_C::OnRadialMenuCreated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "OnRadialMenuCreated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_WeaponWheel.W_WeaponWheel_C.OnRadialMenuInitialized
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UW_WeaponWheel_C::OnRadialMenuInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "OnRadialMenuInitialized");

	Params::W_WeaponWheel_C_OnRadialMenuInitialized Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_WeaponWheel.W_WeaponWheel_C.OnRadialSectorCreated
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InAngle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UW_WeaponWheel_C::OnRadialSectorCreated(int32 Index_0, float InAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "OnRadialSectorCreated");

	Params::W_WeaponWheel_C_OnRadialSectorCreated Parms{};

	Parms.Index_0 = Index_0;
	Parms.InAngle = InAngle;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_WeaponWheel.W_WeaponWheel_C.OnSectorDeselected
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DeselectedIndex                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::OnSectorDeselected(int32 DeselectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "OnSectorDeselected");

	Params::W_WeaponWheel_C_OnSectorDeselected Parms{};

	Parms.DeselectedIndex = DeselectedIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.OnSectorSelected
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SelectedIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::OnSectorSelected(int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "OnSectorSelected");

	Params::W_WeaponWheel_C_OnSectorSelected Parms{};

	Parms.SelectedIndex = SelectedIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.PlaceWidgetInWheel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCanvasPanelSlot*&                Canvas_Slot                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 Positionn                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::PlaceWidgetInWheel(class UCanvasPanelSlot*& Canvas_Slot, const struct FVector2D& Positionn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "PlaceWidgetInWheel");

	Params::W_WeaponWheel_C_PlaceWidgetInWheel Parms{};

	Parms.Canvas_Slot = Canvas_Slot;
	Parms.Positionn = std::move(Positionn);

	UObject::ProcessEvent(Func, &Parms);

	Canvas_Slot = Parms.Canvas_Slot;
}


// Function W_WeaponWheel.W_WeaponWheel_C.PopulateAllCategories
// (Public, BlueprintCallable, BlueprintEvent)

void UW_WeaponWheel_C::PopulateAllCategories()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "PopulateAllCategories");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_WeaponWheel.W_WeaponWheel_C.PopulateCategory
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABaseItem*>&               Items                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FName                             Category_Name_                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::PopulateCategory(TArray<class ABaseItem*>& Items, class FName Category_Name_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "PopulateCategory");

	Params::W_WeaponWheel_C_PopulateCategory Parms{};

	Parms.Items = std::move(Items);
	Parms.Category_Name_ = Category_Name_;

	UObject::ProcessEvent(Func, &Parms);

	Items = std::move(Parms.Items);
}


// Function W_WeaponWheel.W_WeaponWheel_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "PreConstruct");

	Params::W_WeaponWheel_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.PreviousItem
// (Public, BlueprintCallable, BlueprintEvent)

void UW_WeaponWheel_C::PreviousItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "PreviousItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_WeaponWheel.W_WeaponWheel_C.RefreshCategory
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABaseItem*>&               New_Category_Items                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class UWeaponWheelScript*>&      NewWeaponWheelScripts                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FName                             Category_Name                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StartingItemIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::RefreshCategory(TArray<class ABaseItem*>& New_Category_Items, TArray<class UWeaponWheelScript*>& NewWeaponWheelScripts, class FName Category_Name, int32 StartingItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "RefreshCategory");

	Params::W_WeaponWheel_C_RefreshCategory Parms{};

	Parms.New_Category_Items = std::move(New_Category_Items);
	Parms.NewWeaponWheelScripts = std::move(NewWeaponWheelScripts);
	Parms.Category_Name = Category_Name;
	Parms.StartingItemIndex = StartingItemIndex;

	UObject::ProcessEvent(Func, &Parms);

	New_Category_Items = std::move(Parms.New_Category_Items);
	NewWeaponWheelScripts = std::move(Parms.NewWeaponWheelScripts);
}


// Function W_WeaponWheel.W_WeaponWheel_C.RefreshMultiItemWidget
// (Public, BlueprintCallable, BlueprintEvent)

void UW_WeaponWheel_C::RefreshMultiItemWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "RefreshMultiItemWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_WeaponWheel.W_WeaponWheel_C.RefreshStats
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UClass*>&                  ItemStats_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FItemLookupTable&          ItemDataTable                                          (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_WeaponWheel_C::RefreshStats(TArray<class UClass*>& ItemStats_0, const struct FItemLookupTable& ItemDataTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "RefreshStats");

	Params::W_WeaponWheel_C_RefreshStats Parms{};

	Parms.ItemStats_0 = std::move(ItemStats_0);
	Parms.ItemDataTable = std::move(ItemDataTable);

	UObject::ProcessEvent(Func, &Parms);

	ItemStats_0 = std::move(Parms.ItemStats_0);
}


// Function W_WeaponWheel.W_WeaponWheel_C.RemoveAssistant
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseItem*                        AssistantItem                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::RemoveAssistant(class ABaseItem* AssistantItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "RemoveAssistant");

	Params::W_WeaponWheel_C_RemoveAssistant Parms{};

	Parms.AssistantItem = AssistantItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.RemoveExecutableItemFromCategory
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           NewWeaponWheelScript                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const int32                             AtIndex                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::RemoveExecutableItemFromCategory(class UClass* NewWeaponWheelScript, const int32 AtIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "RemoveExecutableItemFromCategory");

	Params::W_WeaponWheel_C_RemoveExecutableItemFromCategory Parms{};

	Parms.NewWeaponWheelScript = NewWeaponWheelScript;
	Parms.AtIndex = AtIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.RemoveGrenade
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseItem*                        GrenadeItem                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::RemoveGrenade(class ABaseItem* GrenadeItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "RemoveGrenade");

	Params::W_WeaponWheel_C_RemoveGrenade Parms{};

	Parms.GrenadeItem = GrenadeItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.RemoveItemFromCategory
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class ABaseItem*&                 Item                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// const class FName                       Wheel_Category                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::RemoveItemFromCategory(const class ABaseItem*& Item, const class FName Wheel_Category)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "RemoveItemFromCategory");

	Params::W_WeaponWheel_C_RemoveItemFromCategory Parms{};

	Parms.Item = Item;
	Parms.Wheel_Category = Wheel_Category;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.RemoveNullItemsFromAllCategories
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UW_WeaponWheel_C::RemoveNullItemsFromAllCategories()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "RemoveNullItemsFromAllCategories");

	Params::W_WeaponWheel_C_RemoveNullItemsFromAllCategories Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_WeaponWheel.W_WeaponWheel_C.RemoveNullItemsFromCategory
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FName&                      WeaponWheelCategoryName                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UW_WeaponWheel_C::RemoveNullItemsFromCategory(const class FName& WeaponWheelCategoryName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "RemoveNullItemsFromCategory");

	Params::W_WeaponWheel_C_RemoveNullItemsFromCategory Parms{};

	Parms.WeaponWheelCategoryName = WeaponWheelCategoryName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_WeaponWheel.W_WeaponWheel_C.RemovePrimaryWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseItem*                        PrimaryWeaponItem                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::RemovePrimaryWeapon(class ABaseItem* PrimaryWeaponItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "RemovePrimaryWeapon");

	Params::W_WeaponWheel_C_RemovePrimaryWeapon Parms{};

	Parms.PrimaryWeaponItem = PrimaryWeaponItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.RemoveSecondaryWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseItem*                        SecondaryWeaponItem                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::RemoveSecondaryWeapon(class ABaseItem* SecondaryWeaponItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "RemoveSecondaryWeapon");

	Params::W_WeaponWheel_C_RemoveSecondaryWeapon Parms{};

	Parms.SecondaryWeaponItem = SecondaryWeaponItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.RemoveTabletDevice
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseItem*                        TabletDeviceItem                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::RemoveTabletDevice(class ABaseItem* TabletDeviceItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "RemoveTabletDevice");

	Params::W_WeaponWheel_C_RemoveTabletDevice Parms{};

	Parms.TabletDeviceItem = TabletDeviceItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.RemoveTactical Devices
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseItem*                        DoorDeviceItem                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::RemoveTactical_Devices(class ABaseItem* DoorDeviceItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "RemoveTactical Devices");

	Params::W_WeaponWheel_C_RemoveTactical_Devices Parms{};

	Parms.DoorDeviceItem = DoorDeviceItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.SelectItem
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_WeaponWheel_RadialSelection_C* ItemToSelect                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Play_Animation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Play_Sound                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Refresh_Stats                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::SelectItem(class UW_WeaponWheel_RadialSelection_C* ItemToSelect, bool Play_Animation, bool Play_Sound, bool Refresh_Stats, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "SelectItem");

	Params::W_WeaponWheel_C_SelectItem Parms{};

	Parms.ItemToSelect = ItemToSelect;
	Parms.Play_Animation = Play_Animation;
	Parms.Play_Sound = Play_Sound;
	Parms.Refresh_Stats = Refresh_Stats;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function W_WeaponWheel.W_WeaponWheel_C.ShowWheel
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UW_WeaponWheel_C::ShowWheel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "ShowWheel");

	Params::W_WeaponWheel_C_ShowWheel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_WeaponWheel.W_WeaponWheel_C.ShuffleItemsInCategory
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FName                       CategoryName                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::ShuffleItemsInCategory(const class FName CategoryName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "ShuffleItemsInCategory");

	Params::W_WeaponWheel_C_ShuffleItemsInCategory Parms{};

	Parms.CategoryName = CategoryName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.StatEnumToName
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Item_Stat                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            Stat_Name                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::StatEnumToName(uint8 Item_Stat, class FName* Stat_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "StatEnumToName");

	Params::W_WeaponWheel_C_StatEnumToName Parms{};

	Parms.Item_Stat = Item_Stat;

	UObject::ProcessEvent(Func, &Parms);

	if (Stat_Name != nullptr)
		*Stat_Name = Parms.Stat_Name;
}


// Function W_WeaponWheel.W_WeaponWheel_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "Tick");

	Params::W_WeaponWheel_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_WeaponWheel.W_WeaponWheel_C.UpdateAssistants
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABaseItem*>&               NewAssistants                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   StartingItemIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::UpdateAssistants(TArray<class ABaseItem*>& NewAssistants, int32 StartingItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "UpdateAssistants");

	Params::W_WeaponWheel_C_UpdateAssistants Parms{};

	Parms.NewAssistants = std::move(NewAssistants);
	Parms.StartingItemIndex = StartingItemIndex;

	UObject::ProcessEvent(Func, &Parms);

	NewAssistants = std::move(Parms.NewAssistants);
}


// Function W_WeaponWheel.W_WeaponWheel_C.UpdateDebugInformation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_WeaponWheel_C::UpdateDebugInformation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "UpdateDebugInformation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_WeaponWheel.W_WeaponWheel_C.UpdateGrenades
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABaseItem*>&               NewGrenades                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   StartingItemIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::UpdateGrenades(TArray<class ABaseItem*>& NewGrenades, int32 StartingItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "UpdateGrenades");

	Params::W_WeaponWheel_C_UpdateGrenades Parms{};

	Parms.NewGrenades = std::move(NewGrenades);
	Parms.StartingItemIndex = StartingItemIndex;

	UObject::ProcessEvent(Func, &Parms);

	NewGrenades = std::move(Parms.NewGrenades);
}


// Function W_WeaponWheel.W_WeaponWheel_C.UpdatePrimaryWeapons
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABaseItem*>&               New_Primary_Weapons                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   StartingItemIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::UpdatePrimaryWeapons(TArray<class ABaseItem*>& New_Primary_Weapons, int32 StartingItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "UpdatePrimaryWeapons");

	Params::W_WeaponWheel_C_UpdatePrimaryWeapons Parms{};

	Parms.New_Primary_Weapons = std::move(New_Primary_Weapons);
	Parms.StartingItemIndex = StartingItemIndex;

	UObject::ProcessEvent(Func, &Parms);

	New_Primary_Weapons = std::move(Parms.New_Primary_Weapons);
}


// Function W_WeaponWheel.W_WeaponWheel_C.UpdateSecondaryWeapons
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABaseItem*>&               NewSecondaryWeapons                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   StartingItemIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::UpdateSecondaryWeapons(TArray<class ABaseItem*>& NewSecondaryWeapons, int32 StartingItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "UpdateSecondaryWeapons");

	Params::W_WeaponWheel_C_UpdateSecondaryWeapons Parms{};

	Parms.NewSecondaryWeapons = std::move(NewSecondaryWeapons);
	Parms.StartingItemIndex = StartingItemIndex;

	UObject::ProcessEvent(Func, &Parms);

	NewSecondaryWeapons = std::move(Parms.NewSecondaryWeapons);
}


// Function W_WeaponWheel.W_WeaponWheel_C.UpdateTabletDevices
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABaseItem*>&               NewTabletDevices                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   StartingItemIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::UpdateTabletDevices(TArray<class ABaseItem*>& NewTabletDevices, int32 StartingItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "UpdateTabletDevices");

	Params::W_WeaponWheel_C_UpdateTabletDevices Parms{};

	Parms.NewTabletDevices = std::move(NewTabletDevices);
	Parms.StartingItemIndex = StartingItemIndex;

	UObject::ProcessEvent(Func, &Parms);

	NewTabletDevices = std::move(Parms.NewTabletDevices);
}


// Function W_WeaponWheel.W_WeaponWheel_C.UpdateTacticalDevices
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABaseItem*>&               NewDoorDevices                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   StartingItemIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::UpdateTacticalDevices(TArray<class ABaseItem*>& NewDoorDevices, int32 StartingItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "UpdateTacticalDevices");

	Params::W_WeaponWheel_C_UpdateTacticalDevices Parms{};

	Parms.NewDoorDevices = std::move(NewDoorDevices);
	Parms.StartingItemIndex = StartingItemIndex;

	UObject::ProcessEvent(Func, &Parms);

	NewDoorDevices = std::move(Parms.NewDoorDevices);
}


// Function W_WeaponWheel.W_WeaponWheel_C.GetCurrentICategorytemCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32*                                  Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::GetCurrentICategorytemCount(int32* Return_Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "GetCurrentICategorytemCount");

	Params::W_WeaponWheel_C_GetCurrentICategorytemCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}


// Function W_WeaponWheel.W_WeaponWheel_C.GetCurrentItemSelectionIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32*                                  Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::GetCurrentItemSelectionIndex(int32* Return_Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "GetCurrentItemSelectionIndex");

	Params::W_WeaponWheel_C_GetCurrentItemSelectionIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}


// Function W_WeaponWheel.W_WeaponWheel_C.IsItemAtBack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABaseItem*                        Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::IsItemAtBack(class ABaseItem* Item, bool* Return_Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "IsItemAtBack");

	Params::W_WeaponWheel_C_IsItemAtBack Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}


// Function W_WeaponWheel.W_WeaponWheel_C.IsItemAtFront
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABaseItem*                        Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::IsItemAtFront(class ABaseItem* Item, bool* Return_Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "IsItemAtFront");

	Params::W_WeaponWheel_C_IsItemAtFront Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}


// Function W_WeaponWheel.W_WeaponWheel_C.IsItemAtIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABaseItem*                        Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_WeaponWheel_C::IsItemAtIndex(class ABaseItem* Item, int32 Index_0, bool* Return_Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_WeaponWheel_C", "IsItemAtIndex");

	Params::W_WeaponWheel_C_IsItemAtIndex Parms{};

	Parms.Item = Item;
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}

}

